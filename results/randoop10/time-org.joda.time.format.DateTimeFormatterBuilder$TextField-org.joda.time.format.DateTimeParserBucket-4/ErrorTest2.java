import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1001");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.setLanguage("DEU");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("Germany");
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale.Builder builder12 = builder5.setLocale(locale11);
        java.lang.String str15 = nameProvider0.getShortName(locale11, "\u52a0\u62ff\u5927", "1970-03-05T00:00:00.497");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = locale17.getDisplayName(locale23);
        java.lang.String str29 = nameProvider0.getName(locale23, "1969-12-31T23:59:28.052", "1970-01-01T00:00:00.392");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale32 = new java.util.Locale("774");
        java.lang.String str34 = locale32.getUnicodeLocaleType("zh");
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str38 = nameProvider0.getShortName(locale32, "1970-01-01T00:00:00.152", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        java.lang.String str47 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.dayOfWeek();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        dateTimeParserBucket55.saveField(dateTimeFieldType59, "it", locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology45, locale61, (java.lang.Integer) 9, 538);
        java.lang.String str68 = nameProvider40.getShortName(locale61, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.lang.String str70 = locale69.getVariant();
        java.lang.String str73 = nameProvider40.getName(locale69, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Set<java.lang.String> strSet74 = locale69.getUnicodeLocaleAttributes();
        java.util.Locale locale75 = locale69.stripExtensions();
        java.util.Locale locale76 = locale75.stripExtensions();
        java.lang.String str77 = locale76.getCountry();
        java.lang.String str80 = nameProvider0.getName(locale76, "27156", "");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime46", (dateTime19.compareTo(dateTime46) == 0) == dateTime19.equals(dateTime46));
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1002");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(715);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        int int34 = dateTimeParserBucket33.getOffset();
        java.lang.Integer int35 = dateTimeParserBucket33.getPivotYear();
        dateTimeParserBucket33.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int41 = dateTimeZone39.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone39);
        dateTimeParserBucket33.setZone(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 26751, dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime46 = dateTime24.withZone(dateTimeZone39);
        int int47 = dateTime46.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime42", (dateTime24.compareTo(dateTime42) == 0) == dateTime24.equals(dateTime42));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1003");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        boolean boolean3 = dateTime1.isBefore((long) 241);
        org.joda.time.DateTime dateTime5 = dateTime1.minusHours(400);
        org.joda.time.DateTime dateTime7 = dateTime1.plus((long) 1052);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology18);
        org.joda.time.TimeOfDay timeOfDay24 = dateTime1.toTimeOfDay();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime1.withDurationAdded(readableDuration25, 27107);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.parse("-1");
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.minusMinutes(732);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property33.getFieldType();
        int int36 = dateTime1.get(dateTimeFieldType35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime1", (dateTime23.compareTo(dateTime1) == 0) == dateTime23.equals(dateTime1));
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1004");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1978");
        org.joda.time.DateTime dateTime3 = dateTime1.withMillis((long) 400);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readablePeriod4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        dateTimeParserBucket11.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        java.lang.String str23 = dateTimeField21.getAsShortText((long) 28);
        dateTimeParserBucket11.saveField(dateTimeField21, 100);
        dateTimeParserBucket11.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket11.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 26757772);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.halfdayOfDay();
        org.joda.time.DurationField durationField39 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.secondOfDay();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DurationField durationField42 = chronology35.weeks();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Set<java.lang.Character> charSet47 = locale45.getExtensionKeys();
        java.util.Locale.setDefault(category43, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology35, locale45, (java.lang.Integer) 407, 195);
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale45.getDisplayLanguage(locale52);
        java.lang.String str55 = dateTimeZone28.getShortName((long) 26813508, locale52);
        java.lang.String str57 = dateTimeZone28.getShortName(26833067L);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime59 = dateTime5.toDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime58", (dateTime36.compareTo(dateTime58) == 0) == dateTime36.equals(dateTime58));
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1005");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        long long28 = dateTimeZone23.adjustOffset(2846437113600010L, false);
        long long32 = dateTimeZone23.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        int int46 = localDateTime38.get(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime38.withYear(635);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.halfdayOfDay();
        org.joda.time.DurationField durationField55 = chronology51.millis();
        org.joda.time.DurationFieldType durationFieldType56 = durationField55.getType();
        boolean boolean57 = localDateTime38.isSupported(durationFieldType56);
        java.lang.String str58 = durationFieldType56.toString();
        boolean boolean59 = localDateTime34.isSupported(durationFieldType56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime52", (dateTime33.compareTo(dateTime52) == 0) == dateTime33.equals(dateTime52));
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1006");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getOffset((long) 'x');
        java.lang.String str15 = dateTimeZone11.toString();
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        long long29 = dateTime27.getMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime27.getZone();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        dateTimeParserBucket37.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket37.getZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone54);
        boolean boolean56 = dateTimeZone54.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int59 = dateTimeZone54.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime60 = dateTime27.withZone(dateTimeZone54);
        java.util.Date date61 = dateTime27.toDate();
        boolean boolean62 = timeZone16.inDaylightTime(date61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime60", (dateTime5.compareTo(dateTime60) == 0) == dateTime5.equals(dateTime60));
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1007");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(26751557);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.minus(readablePeriod29);
        org.joda.time.DateTime.Property property31 = dateTime27.secondOfDay();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category32, locale33);
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getISO3Country();
        int int37 = property31.getMaximumShortTextLength(locale33);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfWeek();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        dateTimeParserBucket53.saveField(dateTimeFieldType57, "it", locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology43, locale59, (java.lang.Integer) 9, 538);
        java.lang.String str66 = nameProvider38.getShortName(locale59, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale67.getVariant();
        java.lang.String str71 = nameProvider38.getName(locale67, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Set<java.lang.String> strSet72 = locale67.getUnicodeLocaleAttributes();
        java.util.Locale locale73 = locale67.stripExtensions();
        java.lang.String str74 = locale73.getVariant();
        int int75 = property31.getMaximumTextLength(locale73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime44", (dateTime13.compareTo(dateTime44) == 0) == dateTime13.equals(dateTime44));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1008");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime12.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getName(1L);
        int int20 = dateTimeZone16.getOffset((long) 'a');
        org.joda.time.DateTime dateTime21 = dateTime1.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear((-1));
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(10);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfDay();
        java.lang.String str30 = property29.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property29.getFieldType();
        boolean boolean32 = dateTime1.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        int int39 = dateTimeParserBucket38.getOffset();
        java.lang.Object obj40 = dateTimeParserBucket38.saveState();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime1.toDateTime(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime24", (dateTime8.compareTo(dateTime24) == 0) == dateTime8.equals(dateTime24));
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1009");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology9.centuries();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        boolean boolean21 = dateTime19.isEqual((long) (short) 100);
        int int22 = dateTime19.getWeekyear();
        org.joda.time.Chronology chronology23 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = property32.getAsText(locale33);
        java.util.Set<java.lang.Character> charSet36 = locale33.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet37 = locale33.getExtensionKeys();
        java.lang.String str38 = locale33.getDisplayVariant();
        java.lang.String str39 = dateTimeField25.getAsText(214, locale33);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getLanguage();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.era();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale40.getDisplayCountry(locale57);
        java.lang.String str61 = locale57.getLanguage();
        int int62 = dateTimeField25.getMaximumShortTextLength(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(1645514816804L, chronology9, locale57, (java.lang.Integer) 267515, 259);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime17", (dateTime4.compareTo(dateTime17) == 0) == dateTime4.equals(dateTime17));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1010");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int3 = dateTimeZone1.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        long long6 = dateTimeZone1.nextTransition(2312204313600000L);
        long long8 = dateTimeZone1.previousTransition(4418889358L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMonths((int) (byte) 100);
        int[] intArray16 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(4);
        int int19 = localDateTime18.size();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        int int27 = dateTime23.getMillisOfSecond();
        org.joda.time.DateTime.Property property28 = dateTime23.centuryOfEra();
        org.joda.time.DateTime dateTime29 = property28.roundCeilingCopy();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        java.util.Locale locale37 = dateTimeParserBucket35.getLocale();
        boolean boolean38 = property28.equals((java.lang.Object) locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology20, locale37, (java.lang.Integer) 325);
        org.joda.time.DateTimeField dateTimeField41 = chronology20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology20.getZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime9, dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime23", (dateTime4.compareTo(dateTime23) == 0) == dateTime4.equals(dateTime23));
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1011");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale.setDefault(category0, locale18);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        int int44 = dateTimeParserBucket43.getOffset();
        java.lang.Integer int45 = dateTimeParserBucket43.getPivotYear();
        java.util.Locale locale46 = dateTimeParserBucket43.getLocale();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale48.getDisplayLanguage(locale49);
        java.lang.String str52 = locale46.getDisplayName(locale49);
        java.lang.String str53 = localDateTime34.toString("17", locale49);
        java.util.Locale.setDefault(category0, locale49);
        java.util.Locale locale55 = java.util.Locale.getDefault(category0);
        java.util.Locale locale56 = java.util.Locale.getDefault(category0);
        java.util.Locale locale57 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime65.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean69 = dateTime68.isEqualNow();
        org.joda.time.DateTime.Property property70 = dateTime68.secondOfMinute();
        java.util.Locale.Category category71 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology73, locale74, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField78 = null;
        dateTimeParserBucket77.saveField(dateTimeField78, (int) (short) 0);
        java.util.Locale locale81 = dateTimeParserBucket77.getLocale();
        java.util.Locale.setDefault(category71, locale81);
        java.lang.String str83 = property70.getAsShortText(locale81);
        java.util.Locale locale84 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str85 = locale81.getDisplayScript(locale84);
        java.util.Locale.setDefault(category0, locale84);
        java.lang.String str87 = locale84.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime61", (dateTime14.compareTo(dateTime61) == 0) == dateTime14.equals(dateTime61));
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1012");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DurationField durationField8 = chronology2.minutes();
        long long12 = chronology2.add((long) 765, 23L, 5);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours(857);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears(26902088);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra(400);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        java.lang.Integer int42 = dateTimeParserBucket38.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket38.setZone(dateTimeZone43);
        dateTimeParserBucket29.setZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket29.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar51 = dateTime50.toGregorianCalendar();
        int int52 = dateTime50.getMillisOfSecond();
        org.joda.time.DateTime.Property property53 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime50.minusMinutes(25);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int61 = localDateTime57.get(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int68 = localDateTime65.get(dateTimeFieldType67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime57.property(dateTimeFieldType67);
        boolean boolean70 = dateTime55.isSupported(dateTimeFieldType67);
        dateTimeParserBucket29.saveField(dateTimeFieldType67, 6);
        int int73 = localDateTime23.indexOf(dateTimeFieldType67);
        long long75 = chronology2.set((org.joda.time.ReadablePartial) localDateTime23, 1586810621181L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime48", (dateTime3.compareTo(dateTime48) == 0) == dateTime3.equals(dateTime48));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1013");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        java.lang.String str17 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(837L, dateTimeZone15);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.DateTime dateTime22 = dateTime18.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime18.withCenturyOfEra(325);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime18.toGregorianCalendar();
        org.joda.time.DateTime.Property property26 = dateTime18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusHours(28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((long) 569);
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = dateTime18.withField(dateTimeFieldType35, 37);
        boolean boolean39 = localDateTime11.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime22", (dateTime18.compareTo(dateTime22) == 0) == dateTime18.equals(dateTime22));
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1014");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("coreano");
        java.util.Locale.Builder builder4 = builder3.clear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DurationField durationField13 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime18.toMutableDateTime(dateTimeZone21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = dateTimeZone21.getName((long) (byte) 1, locale25);
        org.joda.time.Chronology chronology27 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        org.joda.time.DurationField durationField33 = property32.getRangeDurationField();
        long long34 = property32.remainder();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.toLanguageTag();
        java.lang.String str39 = property32.getAsText(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology27, locale35, (java.lang.Integer) 180);
        java.util.Locale locale45 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str46 = locale35.getDisplayVariant(locale45);
        java.util.Locale.Builder builder47 = builder4.setLocale(locale35);
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime56.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean60 = dateTime59.isEqualNow();
        org.joda.time.DateTime.Property property61 = dateTime59.secondOfMinute();
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology64, locale65, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField69 = null;
        dateTimeParserBucket68.saveField(dateTimeField69, (int) (short) 0);
        java.util.Locale locale72 = dateTimeParserBucket68.getLocale();
        java.util.Locale.setDefault(category62, locale72);
        java.lang.String str74 = property61.getAsShortText(locale72);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str76 = locale72.getDisplayScript(locale75);
        java.util.Locale.Builder builder77 = builder48.setLocale(locale72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime52", (dateTime16.compareTo(dateTime52) == 0) == dateTime16.equals(dateTime52));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1015");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(41153);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond(563);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology13);
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology21 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        boolean boolean34 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime27.minus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.lang.String str52 = locale51.getDisplayName();
        dateTimeParserBucket42.saveField(dateTimeFieldType49, "97", locale51);
        java.util.Calendar calendar54 = dateTime27.toCalendar(locale51);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusHours(49);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime64 = property61.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfMonth();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = property70.getAsShortText(locale71);
        int int73 = property61.getMaximumShortTextLength(locale71);
        java.lang.String str74 = locale71.getDisplayVariant();
        java.lang.String str75 = locale51.getDisplayVariant(locale71);
        int int76 = property22.getMaximumShortTextLength(locale71);
        org.joda.time.LocalDateTime localDateTime77 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime25", (dateTime14.compareTo(dateTime25) == 0) == dateTime14.equals(dateTime25));
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1016");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        dateTimeParserBucket23.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        java.lang.String str35 = dateTimeField33.getAsShortText((long) 28);
        dateTimeParserBucket23.saveField(dateTimeField33, 100);
        int int38 = dateTimeParserBucket23.getOffset();
        java.lang.Object obj39 = dateTimeParserBucket23.saveState();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 20, chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.clockhourOfDay();
        dateTimeParserBucket23.saveField(dateTimeField47, 303);
        java.util.Locale locale50 = dateTimeParserBucket23.getLocale();
        java.lang.String str51 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale50);
        java.lang.String str52 = locale50.getCountry();
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours((int) (byte) 0);
        boolean boolean59 = dateTime57.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        boolean boolean64 = dateTime57.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime.Property property65 = dateTime57.secondOfDay();
        org.joda.time.DateTime dateTime66 = property65.withMaximumValue();
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("Etc/UTC");
        int int69 = property65.getMaximumShortTextLength(locale68);
        int int70 = property65.getLeapAmount();
        boolean boolean71 = property65.isLeap();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.millisOfSecond();
        org.joda.time.DurationField durationField78 = chronology74.seconds();
        org.joda.time.DurationField durationField79 = chronology74.minutes();
        org.joda.time.DateTimeField dateTimeField80 = chronology74.era();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minus(readablePeriod85);
        java.util.Locale locale87 = java.util.Locale.ROOT;
        java.lang.String str88 = dateTimeField80.getAsShortText((org.joda.time.ReadablePartial) localDateTime84, locale87);
        java.util.Set<java.lang.String> strSet89 = locale87.getUnicodeLocaleAttributes();
        java.lang.String str90 = locale87.getLanguage();
        int int91 = property65.getMaximumTextLength(locale87);
        java.util.Set<java.lang.Character> charSet92 = locale87.getExtensionKeys();
        java.lang.String str93 = locale50.getDisplayName(locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime55", (dateTime3.compareTo(dateTime55) == 0) == dateTime3.equals(dateTime55));
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1017");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        long long11 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMinutes(970);
        int int17 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        boolean boolean19 = localDateTime16.equals((java.lang.Object) 1903850748437L);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusWeeks(57);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar27 = dateTime26.toGregorianCalendar();
        int int28 = dateTime26.getMillisOfSecond();
        org.joda.time.DateTime dateTime30 = dateTime26.minusYears((int) 'x');
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded(26768973L, 118);
        boolean boolean34 = property22.equals((java.lang.Object) dateTime30);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.Chronology chronology43 = chronology37.withZone(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusHours(373);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.weekyear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale67 = java.util.Locale.ROOT;
        dateTimeParserBucket61.saveField(dateTimeFieldType65, "it", locale67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime55.property(dateTimeFieldType65);
        int int70 = localDateTime44.indexOf(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType65.getDurationType();
        boolean boolean72 = dateTime30.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime38", (dateTime24.compareTo(dateTime38) == 0) == dateTime24.equals(dateTime38));
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1018");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1510245241413L), dateTimeZone9);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfCentury();
        int int18 = property17.getMaximumValueOverall();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = property17.getAsText(locale20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int28 = localDateTime24.get(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withCenturyOfEra((int) (byte) 0);
        int int31 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusMillis(603);
        int int57 = localDateTime56.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusSeconds(170);
        boolean boolean60 = localDateTime49.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        boolean boolean61 = localDateTime36.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime36.plusMinutes(92);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime36.minus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField73 = null;
        dateTimeParserBucket72.saveField(dateTimeField73, (int) (short) 0);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology77, locale78, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField82 = null;
        dateTimeParserBucket81.saveField(dateTimeField82, (int) (short) 0);
        java.lang.Integer int85 = dateTimeParserBucket81.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket81.setZone(dateTimeZone86);
        dateTimeParserBucket72.setZone(dateTimeZone86);
        boolean boolean89 = dateTimeZone86.isFixed();
        long long92 = dateTimeZone86.adjustOffset(1014721200000L, false);
        org.joda.time.DateTime dateTime93 = localDateTime66.toDateTime(dateTimeZone86);
        int int95 = dateTimeZone86.getOffset((long) 134);
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime11.toMutableDateTime(dateTimeZone86);
        java.lang.String str98 = dateTimeZone86.getShortName((long) (-26752338));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1019");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = property23.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withPeriodAdded(readablePeriod33, 558);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.DateTime.Property property37 = dateTime35.weekyear();
        int int38 = property37.get();
        org.joda.time.DateTime dateTime39 = property37.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(377);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTime(dateTimeZone41);
        long long44 = dateTimeZone41.convertUTCToLocal(2219226L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and mutableDateTime42", (dateTime39.compareTo(mutableDateTime42) == 0) == dateTime39.equals(mutableDateTime42));
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1020");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType17.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        boolean boolean39 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property55 = dateTime52.centuryOfEra();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime49, (-1), locale56);
        java.util.Calendar calendar60 = dateTime40.toCalendar(locale56);
        java.lang.String str61 = locale56.getDisplayScript();
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.setLanguageTag("coreano");
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder69 = builder68.clear();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = locale56.getDisplayScript(locale70);
        int int72 = dateTimeField28.getMaximumShortTextLength(locale56);
        java.util.Locale locale75 = new java.util.Locale("251");
        java.util.Set<java.lang.Character> charSet76 = locale75.getExtensionKeys();
        java.lang.String str77 = dateTimeField28.getAsText(537, locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1021");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        int int6 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime5.weekyear();
        org.joda.time.Chronology chronology8 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear(2022);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property39 = dateTime36.centuryOfEra();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = property39.getAsText(locale40);
        java.lang.String str43 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime33, (-1), locale40);
        java.util.Locale.setDefault(locale40);
        java.lang.String str45 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime24, locale40);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime24.plusMinutes(20);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfCeilingCopy();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        int int51 = property48.getMaximumTextLength(locale50);
        org.joda.time.LocalDateTime localDateTime52 = property48.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        int int54 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        java.lang.String str61 = chronology59.toString();
        org.joda.time.DurationField durationField62 = chronology59.hours();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.millisOfSecond();
        org.joda.time.DurationField durationField69 = chronology65.seconds();
        org.joda.time.DurationField durationField70 = chronology65.minutes();
        org.joda.time.DateTimeField dateTimeField71 = chronology65.era();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readablePeriod76);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.lang.String str79 = dateTimeField71.getAsShortText((org.joda.time.ReadablePartial) localDateTime75, locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology59, locale78);
        java.lang.Integer int82 = dateTimeParserBucket81.getOffsetInteger();
        long long85 = dateTimeParserBucket81.computeMillis(false, "cinese");
        dateTimeParserBucket81.setPivotYear((java.lang.Integer) 35);
        long long89 = dateTimeParserBucket81.computeMillis(true);
        dateTimeParserBucket81.setOffset((java.lang.Integer) 2721);
        java.util.Locale locale92 = dateTimeParserBucket81.getLocale();
        java.lang.String str93 = dateTimeField9.getAsShortText(0, locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime60", (dateTime1.compareTo(dateTime60) == 0) == dateTime1.equals(dateTime60));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1022");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology5, locale21, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology28.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology28.getZone();
        long long35 = dateTimeZone33.convertUTCToLocal((long) 558);
        dateTimeParserBucket25.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket25.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        java.lang.String str44 = dateTimeField42.getAsShortText((long) 28);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property59 = dateTime56.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = property59.getAsText(locale60);
        java.lang.String str63 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) localDateTime53, (-1), locale60);
        int int64 = dateTimeField42.getMaximumTextLength(locale60);
        java.lang.String str65 = locale60.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(1356510769001L, chronology37, locale60);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime74 = dateTime72.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime77 = dateTime74.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime74.getZone();
        java.lang.String str80 = dateTimeZone78.getName(1L);
        int int82 = dateTimeZone78.getOffset((long) 'a');
        long long84 = dateTimeZone78.previousTransition(12092L);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology88 = localDateTime87.getChronology();
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now(chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.millisOfSecond();
        org.joda.time.DurationField durationField92 = chronology88.seconds();
        org.joda.time.DurationField durationField93 = chronology88.minutes();
        org.joda.time.DateTimeField dateTimeField94 = chronology88.weekOfWeekyear();
        java.util.Locale locale95 = java.util.Locale.KOREAN;
        int int96 = dateTimeField94.getMaximumShortTextLength(locale95);
        java.lang.String str97 = dateTimeZone78.getName((-1601999767L), locale95);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket98 = new org.joda.time.format.DateTimeParserBucket(1645515249665L, chronology37, locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime56", (dateTime6.compareTo(dateTime56) == 0) == dateTime6.equals(dateTime56));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1023");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        int int25 = dateTime24.getMinuteOfDay();
        java.util.GregorianCalendar gregorianCalendar26 = dateTime24.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfDay(0);
        org.joda.time.LocalDate localDate33 = dateTime32.toLocalDate();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime32.plusHours(53);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime32.withPeriodAdded(readablePeriod37, (int) (short) -1);
        org.joda.time.DateMidnight dateMidnight40 = dateTime32.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(2046);
        org.joda.time.DateTime dateTime43 = dateTime32.withZone(dateTimeZone42);
        boolean boolean44 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime43", (dateTime32.compareTo(dateTime43) == 0) == dateTime32.equals(dateTime43));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1024");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours((int) (byte) 0);
        java.util.Date date21 = dateTime18.toDate();
        org.joda.time.DateTime.Property property22 = dateTime18.dayOfMonth();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.DateTime dateTime24 = property22.getDateTime();
        org.joda.time.TimeOfDay timeOfDay25 = dateTime24.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours((int) (byte) 100);
        boolean boolean33 = dateTime31.isBefore((long) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime31.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 593);
        org.joda.time.DateTime dateTime41 = dateTime36.plusDays(837);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime36.getZone();
        org.joda.time.DateTime dateTime43 = dateTime24.toDateTime(dateTimeZone42);
        int int45 = dateTimeZone42.getOffsetFromLocal((long) 46);
        org.joda.time.Chronology chronology46 = chronology10.withZone(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime18", (dateTime14.compareTo(dateTime18) == 0) == dateTime14.equals(dateTime18));
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1025");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        long long39 = dateTimeZone33.adjustOffset(1014721200000L, false);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime10.toMutableDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology41 = mutableDateTime40.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime13", (dateTime10.compareTo(dateTime13) == 0) == dateTime10.equals(dateTime13));
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1026");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        boolean boolean39 = dateTime35.isAfter(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.centuryOfEra();
        org.joda.time.DurationField durationField49 = chronology43.minutes();
        long long53 = chronology43.add((long) 765, 23L, 5);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType40.getField(chronology43);
        boolean boolean55 = dateTime35.isSupported(dateTimeFieldType40);
        int int56 = dateTime35.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime44", (dateTime13.compareTo(dateTime44) == 0) == dateTime13.equals(dateTime44));
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1027");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.DateTime dateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plusWeeks(1975);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((-592L));
        int int23 = property20.getMinimumValue();
        java.lang.String str24 = property20.toString();
        org.joda.time.LocalDateTime localDateTime26 = property20.addToCopy((int) (short) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        dateTimeParserBucket33.saveField(dateTimeFieldType37, "it", locale39);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.Chronology chronology51 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.weekOfWeekyear();
        boolean boolean53 = dateTimeFieldType37.isSupported(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.weekyears();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        java.lang.String str61 = dateTimeField59.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundHalfEvenCopy();
        int int67 = dateTimeField59.getMinimumValue((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime66);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime72 = property70.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) '#');
        int[] intArray76 = chronology51.get((org.joda.time.ReadablePartial) localDateTime74, 163296000435L);
        int int77 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26, intArray76);
        org.joda.time.DurationField durationField78 = dateTimeField17.getDurationField();
        long long81 = durationField78.subtract((-62118328924906L), 26813407L);
        boolean boolean82 = dateTime8.equals((java.lang.Object) long81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime14", (dateTime1.compareTo(dateTime14) == 0) == dateTime1.equals(dateTime14));
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1028");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.DateTime dateTime7 = property5.getDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, 0L, 603);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusWeeks((-593));
        long long32 = chronology17.set((org.joda.time.ReadablePartial) localDateTime30, (long) 685);
        int int33 = localDateTime30.getEra();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime();
        org.joda.time.Chronology chronology35 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        java.lang.String str44 = chronology42.toString();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 20, chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.clockhourOfDay();
        long long49 = dateTimeField46.addWrapField(41156781L, 970);
        int int50 = dateTimeField46.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        java.lang.String str57 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        java.lang.String str66 = chronology64.toString();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfWeek();
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology70, locale71, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField75 = null;
        dateTimeParserBucket74.saveField(dateTimeField75, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale80 = java.util.Locale.ROOT;
        dateTimeParserBucket74.saveField(dateTimeFieldType78, "it", locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology64, locale80, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology55, locale80);
        java.lang.String str86 = dateTimeField46.getAsShortText(1357000369001L, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((-630793691033000L), chronology35, locale80, (java.lang.Integer) 334, 602);
        org.joda.time.DateTime dateTime90 = dateTime7.toDateTime(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime12", (dateTime7.compareTo(dateTime12) == 0) == dateTime7.equals(dateTime12));
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1029");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        java.lang.String str12 = dateTimeField10.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        int int18 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        int int22 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        java.lang.String str48 = dateTimeZone44.getNameKey((long) 25);
        long long50 = dateTimeZone44.previousTransition((long) 292278993);
        long long54 = dateTimeZone44.convertLocalToUTC(120100L, false, (long) 26751);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone44);
        long long56 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        java.lang.String str73 = dateTimeZone71.getNameKey((long) (short) -1);
        org.joda.time.DateTime dateTime74 = localDateTime65.toDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plus(readableDuration79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.dayOfMonth();
        long long82 = property81.remainder();
        org.joda.time.LocalDateTime localDateTime83 = property81.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.withYear(551);
        boolean boolean88 = localDateTime65.isBefore((org.joda.time.ReadablePartial) localDateTime87);
        int int89 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime55", (dateTime9.compareTo(dateTime55) == 0) == dateTime9.equals(dateTime55));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1030");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        dateTimeParserBucket26.saveField(dateTimeFieldType30, "it", locale32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime20.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime41 = property38.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear((int) (short) 10);
        int int44 = localDateTime41.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime46);
        int int50 = localDateTime49.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.weekyearOfCentury();
        java.lang.String str58 = dateTimeField56.getAsShortText(10L);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = dateTimeField56.getAsText(0L, locale60);
        java.lang.String str62 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, locale60);
        boolean boolean63 = dateTimeField11.isSupported();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.secondOfMinute();
        java.lang.String str71 = dateTimeField69.getAsShortText((long) 28);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(chronology79);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property86 = dateTime83.centuryOfEra();
        java.util.Locale locale87 = java.util.Locale.ITALIAN;
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = property86.getAsText(locale87);
        java.lang.String str90 = dateTimeField76.getAsText((org.joda.time.ReadablePartial) localDateTime80, (-1), locale87);
        int int91 = dateTimeField69.getMaximumTextLength(locale87);
        java.lang.String str92 = dateTimeField11.getAsShortText(0, locale87);
        java.lang.String str93 = locale87.getCountry();
        java.lang.String str94 = locale87.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime83", (dateTime55.compareTo(dateTime83) == 0) == dateTime55.equals(dateTime83));
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1031");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.plusMinutes(214);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 920);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        dateTimeParserBucket17.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        java.lang.String str29 = dateTimeField27.getAsShortText((long) 28);
        dateTimeParserBucket17.saveField(dateTimeField27, 100);
        int int32 = dateTimeParserBucket17.getOffset();
        java.lang.Object obj33 = dateTimeParserBucket17.saveState();
        dateTimeParserBucket17.setPivotYear((java.lang.Integer) 542);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime8.toMutableDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime38", (dateTime8.compareTo(mutableDateTime38) == 0) == dateTime8.equals(mutableDateTime38));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1032");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int13 = dateTimeZone11.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        dateTimeParserBucket5.setZone(dateTimeZone11);
        int int16 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        boolean boolean33 = dateTime31.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime31.toMutableDateTime(dateTimeZone34);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = dateTimeZone34.getName((long) (byte) 1, locale38);
        org.joda.time.Chronology chronology40 = chronology21.withZone(dateTimeZone34);
        long long44 = chronology40.add((long) 51, (long) 558, 175);
        org.joda.time.DurationField durationField45 = durationFieldType18.getField(chronology40);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology40.getZone();
        dateTimeParserBucket5.setZone(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime29", (dateTime14.compareTo(dateTime29) == 0) == dateTime14.equals(dateTime29));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1033");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DurationField durationField14 = chronology9.eras();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        dateTimeParserBucket37.saveField(dateTimeFieldType41, "it", locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology27, locale43, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology18, locale43);
        java.lang.String str49 = locale43.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale43, (java.lang.Integer) 1052);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        boolean boolean62 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime();
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.minuteOfDay();
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("87");
        int int68 = dateTimeField65.getMaximumTextLength(locale67);
        java.lang.String str69 = locale43.getDisplayVariant(locale67);
        java.util.Set<java.lang.Character> charSet70 = locale67.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime53", (dateTime4.compareTo(dateTime53) == 0) == dateTime4.equals(dateTime53));
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1034");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = mutableDateTime9.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology14.millis();
        boolean boolean18 = dateTimeFieldType10.isSupported(chronology14);
        org.joda.time.DurationField durationField19 = chronology14.centuries();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology14, locale20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        java.lang.String str29 = dateTimeField27.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int int35 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime34.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property38.addToCopy((long) 853);
        org.joda.time.DateTimeField dateTimeField42 = property38.getField();
        org.joda.time.LocalDateTime localDateTime44 = property38.addWrapFieldToCopy(133);
        int[] intArray46 = chronology14.get((org.joda.time.ReadablePartial) localDateTime44, (long) 267);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = chronology14.add(readablePeriod47, 1136050272000000L, (-23159));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1035");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        java.lang.String str8 = dateTimeField6.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime13.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        boolean boolean20 = durationFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours((int) (byte) 0);
        boolean boolean27 = dateTime25.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        int int32 = mutableDateTime30.get(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology35.millis();
        boolean boolean39 = dateTimeFieldType31.isSupported(chronology35);
        org.joda.time.DurationField durationField40 = chronology35.centuries();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology35, locale41);
        org.joda.time.DateTimeField dateTimeField44 = chronology35.clockhourOfHalfday();
        org.joda.time.DurationField durationField45 = durationFieldType0.getField(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime23", (dateTime5.compareTo(dateTime23) == 0) == dateTime5.equals(dateTime23));
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1036");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField15.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField15.getType();
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 623);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getNameKey((long) 25);
        long long45 = dateTimeZone39.previousTransition((long) 292278993);
        dateTimeParserBucket5.setZone(dateTimeZone39);
        long long49 = dateTimeParserBucket5.computeMillis(false, "Deutsch (Deutschland)");
        long long51 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        java.lang.String str55 = dateTimeZone53.toString();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(837L, dateTimeZone53);
        int int57 = dateTime56.getEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(648);
        boolean boolean64 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property69 = dateTime66.centuryOfEra();
        org.joda.time.DateTime dateTime71 = dateTime66.minusYears(558);
        org.joda.time.DateTime dateTime72 = dateTime71.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime72.minusYears(453);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMillis(899);
        boolean boolean79 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property80 = dateTime76.era();
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.DateTime dateTime83 = dateTime76.withPeriodAdded(readablePeriod81, 941);
        org.joda.time.DateTime dateTime84 = dateTime83.toDateTimeISO();
        boolean boolean85 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime59", (dateTime11.compareTo(dateTime59) == 0) == dateTime11.equals(dateTime59));
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1037");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology8);
        int int15 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        java.lang.String str22 = dateTimeField20.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        int int28 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime27.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        int int34 = dateTimeField5.getMaximumValue();
        boolean boolean35 = dateTimeField5.isSupported();
        boolean boolean36 = dateTimeField5.isLenient();
        long long39 = dateTimeField5.add(233L, (long) 352);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readableDuration45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        long long48 = property47.remainder();
        org.joda.time.LocalDateTime localDateTime50 = property47.addToCopy(22);
        org.joda.time.LocalDateTime localDateTime52 = property47.addToCopy(590L);
        org.joda.time.LocalDateTime localDateTime54 = property47.addWrapFieldToCopy(430);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category55, locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category55);
        java.lang.String str59 = locale58.getISO3Country();
        java.util.Set<java.lang.Character> charSet60 = locale58.getExtensionKeys();
        int int61 = property47.getMaximumTextLength(locale58);
        java.lang.String str62 = dateTimeField5.getAsText(26832277L, locale58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        java.lang.String str66 = dateTimeZone63.getNameKey(52L);
        long long70 = dateTimeZone63.convertLocalToUTC((long) 227, false, 1014721200000L);
        java.lang.String str72 = dateTimeZone63.getName(627983344800000L);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        long long76 = dateTimeZone63.convertLocalToUTC((long) 36000643, false);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((java.lang.Object) str62, dateTimeZone63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime64", (dateTime3.compareTo(dateTime64) == 0) == dateTime3.equals(dateTime64));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1038");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket5.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        long long22 = dateTimeField19.getDifferenceAsLong((long) 38, (long) 202);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-592L));
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property25.addToCopy(593);
        org.joda.time.LocalDateTime localDateTime31 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMonths(123);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean44 = dateTime40.isSupported(dateTimeFieldType43);
        int int45 = localDateTime31.get(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime31.minusWeeks(49);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology51.seconds();
        org.joda.time.DurationField durationField56 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField60 = dateTimeField59.getLeapDurationField();
        java.lang.String str62 = dateTimeField59.getAsShortText((long) 1);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        java.lang.String str69 = chronology67.toString();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.dayOfWeek();
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology73, locale74, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField78 = null;
        dateTimeParserBucket77.saveField(dateTimeField78, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale83 = java.util.Locale.ROOT;
        dateTimeParserBucket77.saveField(dateTimeFieldType81, "it", locale83);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology67, locale83, (java.lang.Integer) 9, 538);
        java.lang.String str88 = dateTimeField59.getAsText(774, locale83);
        java.util.Locale locale89 = locale83.stripExtensions();
        java.util.Set<java.lang.Character> charSet90 = locale89.getExtensionKeys();
        java.lang.String str91 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime31, 638, locale89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime68", (dateTime38.compareTo(dateTime68) == 0) == dateTime38.equals(dateTime68));
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1039");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField17 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.year();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusSeconds((int) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket34.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.DurationFieldType durationFieldType43 = durationField42.getType();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime21.withFieldAdded(durationFieldType43, 857);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology51.seconds();
        org.joda.time.DurationField durationField56 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.monthOfYear();
        org.joda.time.DurationField durationField59 = durationFieldType47.getField(chronology51);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = dateTimeField65.getAsShortText((long) (byte) -1, locale67);
        java.util.Locale locale69 = locale67.stripExtensions();
        java.lang.String str70 = locale67.toLanguageTag();
        java.lang.String str71 = locale67.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology51, locale67, (java.lang.Integer) 992, 405);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withDurationAdded(readableDuration81, 28);
        int[] intArray85 = chronology51.get((org.joda.time.ReadablePartial) localDateTime83, (long) 772);
        int int86 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray85);
        java.util.Locale locale89 = java.util.Locale.forLanguageTag("java.io.IOException: java.io.IOException: ISOChronology[+00:00:00.052]");
        java.lang.String str90 = locale89.toLanguageTag();
        java.lang.String str91 = dateTimeField19.getAsShortText((long) 446, locale89);
        java.util.Locale locale92 = null;
        java.lang.String str93 = locale89.getDisplayScript(locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime63", (dateTime1.compareTo(dateTime63) == 0) == dateTime1.equals(dateTime63));
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1040");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime17.getField(0);
        boolean boolean22 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime1.withDurationAdded(readableDuration23, 25200);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int58 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int63 = localDateTime60.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.era();
        boolean boolean70 = localDateTime68.isSupported(dateTimeFieldType69);
        boolean boolean71 = localDateTime60.isSupported(dateTimeFieldType69);
        int int72 = dateTime56.get(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType69.getDurationType();
        org.joda.time.Chronology chronology74 = null;
        boolean boolean75 = dateTimeFieldType69.isSupported(chronology74);
        int int76 = dateTime50.get(dateTimeFieldType69);
        boolean boolean77 = localDateTime1.isSupported(dateTimeFieldType69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime54", (dateTime50.compareTo(dateTime54) == 0) == dateTime50.equals(dateTime54));
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1041");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime7.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (short) 1);
        boolean boolean16 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime24.getZone();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime37.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean41 = dateTime40.isEqualNow();
        org.joda.time.DateTime.Property property42 = dateTime40.secondOfMinute();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.util.Locale locale53 = dateTimeParserBucket49.getLocale();
        java.util.Locale.setDefault(category43, locale53);
        java.lang.String str55 = property42.getAsShortText(locale53);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = locale53.getDisplayScript(locale56);
        java.lang.String str58 = locale53.getVariant();
        java.lang.String str59 = dateTimeZone28.getName((-62167962596349L), locale53);
        org.joda.time.DateTime dateTime60 = dateTime1.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime20", (mutableDateTime5.compareTo(dateTime20) == 0) == mutableDateTime5.equals(dateTime20));
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1042");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 585, chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.centuryOfEra();
        long long10 = dateTimeField8.remainder((-62167962522606L));
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getDisplayLanguage();
        java.util.Locale locale19 = new java.util.Locale("", "22");
        java.lang.String str20 = locale14.getDisplayCountry(locale19);
        java.util.Locale.setDefault(locale19);
        java.lang.String str24 = nameProvider11.getName(locale19, "13", "19");
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        java.lang.String str30 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfWeek();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        dateTimeParserBucket38.saveField(dateTimeFieldType42, "it", locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology28, locale44, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.halfdayOfDay();
        org.joda.time.DurationField durationField55 = chronology51.millis();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology51.getZone();
        long long58 = dateTimeZone56.convertUTCToLocal((long) 558);
        dateTimeParserBucket48.setZone(dateTimeZone56);
        java.util.Locale locale60 = dateTimeParserBucket48.getLocale();
        java.lang.String str63 = nameProvider11.getShortName(locale60, "2022-02-22T07:26:16.428Z", "1970-01-02T20:00:00.395Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        java.lang.String str71 = dateTimeField69.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime76 = property75.roundHalfEvenCopy();
        int int77 = dateTimeField69.getMinimumValue((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = localDateTime76.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime76);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.Chronology chronology81 = chronology80.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.era();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.yearOfEra();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.era();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.minuteOfDay();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(1123200000L);
        java.util.Locale.Category category88 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale89 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category88, locale89);
        boolean boolean91 = locale89.hasExtensions();
        java.lang.String str92 = locale89.getISO3Country();
        java.util.Calendar calendar93 = dateTime87.toCalendar(locale89);
        int int94 = dateTimeField85.getMaximumTextLength(locale89);
        java.lang.String str97 = nameProvider11.getShortName(locale89, "2022-02-22T07:30:18.137+00:00:00.052", "-0001-12-22T20:41:56.350+00:00:00.052");
        int int98 = dateTimeField8.getMaximumTextLength(locale89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime29", (dateTime2.compareTo(dateTime29) == 0) == dateTime2.equals(dateTime29));
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1043");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime8.isEqual(readableInstant9);
        int int11 = dateTime8.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        boolean boolean22 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.plus(readableDuration28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((-1));
        org.joda.time.DateTime dateTime53 = dateTime49.plusHours((int) (byte) 100);
        boolean boolean55 = dateTime53.isBefore((long) ' ');
        int int56 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime53);
        dateTimeParserBucket35.setZone(dateTimeZone46);
        long long60 = dateTimeZone46.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekyear((-1));
        org.joda.time.DateTime dateTime67 = dateTime63.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.plus(readableDuration68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime73 = dateTime69.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime73.toMutableDateTime();
        org.joda.time.Chronology chronology75 = mutableDateTime74.getChronology();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime61, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.dayOfYear();
        org.joda.time.DurationField durationField78 = chronology75.halfdays();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField80 = chronology75.centuryOfEra();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str84 = locale82.getDisplayName(locale83);
        java.lang.String str85 = locale82.getCountry();
        java.util.Set<java.lang.String> strSet86 = locale82.getUnicodeLocaleKeys();
        java.lang.String str87 = dateTimeField80.getAsShortText(558L, locale82);
        java.lang.String str88 = locale82.getVariant();
        java.util.Calendar calendar89 = dateTime26.toCalendar(locale82);
        boolean boolean91 = dateTime26.isBefore((long) (-217123200));
        boolean boolean92 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1044");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(10);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        int int15 = dateTime13.getYearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime13.withDayOfYear(241);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-1));
        org.joda.time.DateTime dateTime42 = dateTime38.plusHours((int) (byte) 100);
        boolean boolean44 = dateTime42.isBefore((long) ' ');
        int int45 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime42);
        dateTimeParserBucket24.setZone(dateTimeZone35);
        long long49 = dateTimeZone35.convertLocalToUTC((long) 59, false);
        org.joda.time.DateTime dateTime50 = dateTime13.toDateTime(dateTimeZone35);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime50.getZone();
        boolean boolean53 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime9", (dateTime3.compareTo(dateTime9) == 0) == dateTime3.equals(dateTime9));
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1045");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.yearOfEra();
        org.joda.time.DurationField durationField11 = chronology2.days();
        org.joda.time.DurationField durationField12 = chronology2.weekyears();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket19.getZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone36);
        boolean boolean38 = dateTimeZone36.isFixed();
        long long41 = dateTimeZone36.adjustOffset(2846437113600010L, false);
        long long45 = dateTimeZone36.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        long long50 = chronology2.set((org.joda.time.ReadablePartial) localDateTime47, 26851323L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime46", (dateTime3.compareTo(dateTime46) == 0) == dateTime3.equals(dateTime46));
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1046");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        java.lang.String str12 = dateTimeField10.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        int int18 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        int int22 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(301);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        long long33 = dateTimeParserBucket31.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getMillisOfSecond();
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfHour();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        java.lang.String str50 = locale41.getDisplayName(locale47);
        int int51 = property40.getMaximumTextLength(locale47);
        java.util.Set<java.lang.String> strSet52 = locale47.getUnicodeLocaleAttributes();
        int int53 = strSet52.size();
        boolean boolean54 = dateTimeParserBucket31.restoreState((java.lang.Object) int53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours((int) (byte) 0);
        java.util.Date date59 = dateTime56.toDate();
        org.joda.time.DateTime.Property property60 = dateTime56.dayOfMonth();
        org.joda.time.DateTime.Property property61 = dateTime56.dayOfMonth();
        org.joda.time.DateTime dateTime63 = dateTime56.plusMonths(19);
        org.joda.time.DateTime dateTime65 = dateTime56.plusHours(100);
        org.joda.time.DateTime.Property property66 = dateTime56.dayOfYear();
        int int67 = property66.getMaximumValueOverall();
        boolean boolean68 = dateTimeParserBucket31.restoreState((java.lang.Object) property66);
        org.joda.time.DateTime dateTime69 = property66.roundFloorCopy();
        org.joda.time.DateTime dateTime71 = dateTime69.plusMonths(207);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime69.minus(readablePeriod72);
        org.joda.time.DateTime dateTime74 = dateTime73.withTimeAtStartOfDay();
        int int75 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime35", (dateTime9.compareTo(dateTime35) == 0) == dateTime9.equals(dateTime35));
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1047");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime23.plusDays(0);
        boolean boolean30 = dateTime23.equals((java.lang.Object) 712L);
        org.joda.time.DateTime.Property property31 = dateTime23.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.halfdayOfDay();
        org.joda.time.DurationField durationField42 = chronology38.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.weekyearOfCentury();
        boolean boolean44 = strSet35.contains((java.lang.Object) chronology38);
        java.util.Locale locale45 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology38, locale45, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DurationField durationField49 = chronology38.millis();
        org.joda.time.DateTime dateTime50 = dateTime23.withChronology(chronology38);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime39", (dateTime18.compareTo(dateTime39) == 0) == dateTime18.equals(dateTime39));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1048");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        boolean boolean6 = localDateTime1.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        java.lang.String str13 = dateTimeField11.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        int int19 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime18.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.Chronology chronology23 = chronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType4.getField(chronology23);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType4.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime32.toMutableDateTime(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        int int39 = mutableDateTime37.get(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        org.joda.time.DurationField durationField45 = chronology42.millis();
        boolean boolean46 = dateTimeFieldType38.isSupported(chronology42);
        org.joda.time.DurationField durationField47 = chronology42.centuries();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology42, locale48);
        org.joda.time.DateTimeField dateTimeField51 = chronology42.weekyearOfCentury();
        boolean boolean52 = durationFieldType27.isSupported(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime30", (dateTime10.compareTo(dateTime30) == 0) == dateTime10.equals(dateTime30));
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1049");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology2);
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField21 = chronology17.seconds();
        org.joda.time.DurationField durationField22 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime27.toMutableDateTime(dateTimeZone30);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = dateTimeZone30.getName((long) (byte) 1, locale34);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        org.joda.time.DurationField durationField42 = property41.getRangeDurationField();
        long long43 = property41.remainder();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = locale44.toLanguageTag();
        java.lang.String str48 = property41.getAsText(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology36, locale44, (java.lang.Integer) 180);
        dateTimeParserBucket50.setOffset(818);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int58 = localDateTime54.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.DurationField durationField67 = chronology63.seconds();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime60, chronology63);
        org.joda.time.DateTimeField dateTimeField69 = chronology63.dayOfWeek();
        dateTimeParserBucket50.saveField(dateTimeField69, 569);
        org.joda.time.Chronology chronology72 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = dateTimeField73.getType();
        int int75 = localDateTime12.get(dateTimeFieldType74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1050");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = localDateTime8.toString("445", locale20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.plusMillis(880);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.plusWeeks(48);
        org.joda.time.LocalDateTime.Property property26 = localDateTime8.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DurationField durationField38 = chronology35.hours();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DurationField durationField45 = chronology41.seconds();
        org.joda.time.DurationField durationField46 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.era();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readablePeriod52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology35, locale54);
        boolean boolean58 = localDateTime31.equals((java.lang.Object) chronology35);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        int int68 = property67.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime70 = property67.addToCopy(608);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.dayOfWeek();
        boolean boolean72 = dateTimeZone61.isLocalDateTimeGap(localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 26760199, dateTimeZone61);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        int[] intArray76 = chronology35.get((org.joda.time.ReadablePartial) localDateTime73, 2055741974010L);
        int int77 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime36", (dateTime11.compareTo(dateTime36) == 0) == dateTime11.equals(dateTime36));
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1051");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology11.getZone();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        int int20 = dateTime17.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        java.lang.String str36 = chronology35.toString();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.minutes();
        org.joda.time.DateTime dateTime39 = dateTime17.withChronology(chronology35);
        org.joda.time.Chronology chronology40 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime45.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) 0);
        java.util.Date date53 = dateTime50.toDate();
        int int54 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime50.getZone();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(100L, dateTimeZone55);
        java.util.Date date57 = localDateTime56.toDate();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusWeeks(359);
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.yearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfCeilingCopy();
        java.util.Locale locale62 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology64, locale65, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField69 = null;
        dateTimeParserBucket68.saveField(dateTimeField69, (int) (short) 0);
        java.lang.Integer int72 = dateTimeParserBucket68.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket68.setZone(dateTimeZone73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = locale77.getDisplayName();
        dateTimeParserBucket68.saveField(dateTimeFieldType75, "97", locale77);
        java.lang.String str80 = locale62.getDisplayCountry(locale77);
        java.lang.String str81 = locale77.getDisplayScript();
        java.lang.String str82 = locale77.getDisplayScript();
        int int83 = property60.getMaximumTextLength(locale77);
        java.lang.String str84 = dateTimeField41.getAsText(744, locale77);
        java.lang.String str85 = dateTimeZone13.getShortName((long) 139, locale77);
        int int87 = dateTimeZone13.getOffset((-1510244724501L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1052");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        boolean boolean10 = dateTime8.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks((int) 'a');
        boolean boolean15 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        java.lang.String str24 = property22.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property22.getFieldType();
        int int26 = dateTime18.get(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology29, locale30, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DurationField durationField44 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology39.minutes();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        dateTimeParserBucket53.saveField(dateTimeFieldType57, "it", locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(673L, chronology39, locale59, (java.lang.Integer) 10, 453);
        java.lang.String str64 = locale30.getDisplayVariant(locale59);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime72.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.millisOfSecond();
        boolean boolean81 = dateTimeZone76.isLocalDateTimeGap(localDateTime78);
        java.util.Locale locale86 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale86);
        java.lang.String str88 = dateTimeZone76.getShortName((long) 44, locale86);
        java.lang.String str89 = locale30.getDisplayScript(locale86);
        java.lang.String str90 = dateTime18.toString("2035", locale30);
        java.lang.String str91 = property4.getAsShortText(locale30);
        java.lang.String str92 = locale30.getDisplayVariant();
        java.lang.String str93 = locale30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime68", (dateTime6.compareTo(dateTime68) == 0) == dateTime6.equals(dateTime68));
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1053");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        java.lang.String str18 = property16.getAsText();
        java.lang.String str19 = property16.getAsString();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfCeilingCopy();
        int int21 = localDateTime20.getMillisOfDay();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear(2022);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property60 = dateTime57.centuryOfEra();
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = property60.getAsText(locale61);
        java.lang.String str64 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) localDateTime54, (-1), locale61);
        java.util.Locale.setDefault(locale61);
        java.lang.String str66 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale61);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime45.plusMinutes(20);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime45.minusYears(603);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray73 = localDateTime72.getValues();
        int int74 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime70, intArray73);
        chronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray73);
        org.joda.time.DateTimeField dateTimeField76 = chronology10.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime57", (dateTime12.compareTo(dateTime57) == 0) == dateTime12.equals(dateTime57));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1054");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(139);
        org.joda.time.LocalDateTime localDateTime9 = dateTime8.toLocalDateTime();
        int int10 = localDateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        java.lang.String str35 = dateTimeZone33.toString();
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertLocalToUTC((long) 764, true);
        org.joda.time.DateTime dateTime41 = localDateTime9.toDateTime(dateTimeZone33);
        java.util.TimeZone timeZone42 = dateTimeZone33.toTimeZone();
        long long44 = dateTimeZone33.nextTransition((long) 313);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        java.lang.String str50 = chronology48.toString();
        org.joda.time.DurationField durationField51 = chronology48.hours();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField58 = chronology54.seconds();
        org.joda.time.DurationField durationField59 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField60 = chronology54.era();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = dateTimeField60.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, locale67);
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology48, locale67);
        java.lang.Integer int71 = dateTimeParserBucket70.getOffsetInteger();
        long long74 = dateTimeParserBucket70.computeMillis(false, "cinese");
        dateTimeParserBucket70.setPivotYear((java.lang.Integer) 35);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeParserBucket70.getZone();
        long long79 = dateTimeZone33.getMillisKeepLocal(dateTimeZone77, 1644910352085L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime49", (dateTime1.compareTo(dateTime49) == 0) == dateTime1.equals(dateTime49));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1055");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(980);
        java.lang.String str20 = localDateTime18.toString("-1");
        int int21 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusWeeks((-593));
        int int32 = localDateTime30.getValue(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear(43);
        boolean boolean37 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (byte) 100);
        boolean boolean57 = dateTime55.isBefore((long) ' ');
        int int58 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime60 = dateTime55.minusYears(20);
        org.joda.time.DateTime.Property property61 = dateTime60.hourOfDay();
        org.joda.time.DateTime.Property property62 = dateTime60.dayOfMonth();
        java.util.Locale locale66 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str67 = property62.getAsText(locale66);
        org.joda.time.DateTime dateTime69 = property62.setCopy(12);
        long long70 = property62.remainder();
        org.joda.time.DateTime dateTime71 = property62.roundHalfFloorCopy();
        org.joda.time.DurationField durationField72 = property62.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType73 = durationField72.getType();
        boolean boolean74 = localDateTime18.isSupported(durationFieldType73);
        java.lang.String str75 = durationFieldType73.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime51", (dateTime3.compareTo(dateTime51) == 0) == dateTime3.equals(dateTime51));
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1056");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekyear();
        boolean boolean11 = dateTimeField9.isLeap((long) 285);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        java.lang.String str18 = dateTimeField16.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        int int24 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean27 = localDateTime23.equals((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((int) (byte) -1);
        int[] intArray33 = new int[] { (-175220) };
        int int34 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime29, intArray33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYear((int) (short) 100);
        int int52 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        int int53 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = dateTime55.isBefore(readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime55.toMutableDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime55.minusMillis(57);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology64, locale65, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField69 = null;
        dateTimeParserBucket68.saveField(dateTimeField69, (int) (short) 0);
        dateTimeParserBucket68.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.secondOfMinute();
        java.lang.String str80 = dateTimeField78.getAsShortText((long) 28);
        dateTimeParserBucket68.saveField(dateTimeField78, 100);
        dateTimeParserBucket68.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket68.saveField(dateTimeFieldType85, 950);
        org.joda.time.DateTime.Property property88 = dateTime55.property(dateTimeFieldType85);
        boolean boolean89 = localDateTime44.equals((java.lang.Object) dateTime55);
        boolean boolean90 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone91 = null;
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(dateTimeZone91);
        boolean boolean94 = dateTime92.isBefore((long) 241);
        org.joda.time.DateTime dateTime96 = dateTime92.minusMonths(1);
        org.joda.time.DateTime dateTime98 = dateTime92.withWeekyear(0);
        org.joda.time.DateTime dateTime99 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime55", (dateTime3.compareTo(dateTime55) == 0) == dateTime3.equals(dateTime55));
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1057");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.toString();
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone43, (long) 23);
        org.joda.time.DateTime dateTime49 = dateTime13.toDateTime(dateTimeZone43);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        int int57 = localDateTime56.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusYears((-292275054));
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.halfdayOfDay();
        org.joda.time.DurationField durationField70 = chronology66.millis();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.weekyearOfCentury();
        boolean boolean72 = strSet63.contains((java.lang.Object) chronology66);
        java.util.Locale locale73 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology66, locale73, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(chronology66);
        boolean boolean77 = localDateTime56.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.DateTime dateTime78 = dateTime49.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.DateTime.Property property79 = dateTime49.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime67", (dateTime1.compareTo(dateTime67) == 0) == dateTime1.equals(dateTime67));
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1058");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        int int28 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology32.millis();
        java.lang.String str36 = chronology32.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, chronology32);
        org.joda.time.LocalDateTime.Property property38 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = property38.setCopy(382);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        java.lang.Integer int66 = dateTimeParserBucket62.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket62.setZone(dateTimeZone67);
        dateTimeParserBucket53.setZone(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket53.getZone();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = chronology75.getZone();
        org.joda.time.DurationField durationField78 = chronology75.eras();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DateTime dateTime80 = localDateTime71.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime82 = dateTime79.plusHours(771);
        boolean boolean84 = dateTime82.isBefore(0L);
        int int85 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime86 = localDateTime40.toDateTime(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField78", Math.signum(durationField35.compareTo(durationField78)) == -Math.signum(durationField78.compareTo(durationField35)));
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1059");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property9 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(558);
        boolean boolean12 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime14 = dateTime6.minus((long) 597);
        org.joda.time.DateTime.Property property15 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.era();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, locale32);
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleAttributes();
        strSet34.clear();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        boolean boolean41 = strSet34.contains((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime16.toDateTime(dateTimeZone40);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale44.getLanguage();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.DurationField durationField52 = chronology48.seconds();
        org.joda.time.DurationField durationField53 = chronology48.minutes();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.era();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readablePeriod59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, locale61);
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str64 = locale44.getDisplayCountry(locale61);
        java.util.Set<java.lang.String> strSet65 = locale44.getUnicodeLocaleKeys();
        java.lang.String str66 = dateTimeZone40.getName((long) 34960455, locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1060");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.plus(readableDuration34);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths(746);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy(233);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime45.toMutableDateTime();
        int int49 = dateTime45.getMillisOfSecond();
        org.joda.time.DateTime dateTime51 = dateTime45.plusYears((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.minusYears(676);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMillis(569);
        org.joda.time.DateTime dateTime57 = dateTime53.plusDays(12);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar62 = dateTime61.toGregorianCalendar();
        int int63 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime.Property property64 = dateTime61.minuteOfHour();
        int int65 = dateTime61.getMinuteOfDay();
        org.joda.time.DateTime dateTime66 = dateTime61.withLaterOffsetAtOverlap();
        int int67 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime.Property property68 = dateTime53.millisOfDay();
        int int69 = dateTime53.getYear();
        boolean boolean70 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime45", (dateTime29.compareTo(dateTime45) == 0) == dateTime29.equals(dateTime45));
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1061");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(28);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minus(readableDuration4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime12 = dateTime9.plusSeconds(441);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime14 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        java.lang.String str21 = dateTimeField19.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        int int27 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime26.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime26);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.Chronology chronology31 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.halfdayOfDay();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale33.toLanguageTag();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        long long39 = dateTimeField32.add(920L, 187);
        long long41 = dateTimeField32.roundFloor(26752L);
        int int42 = dateTime12.get(dateTimeField32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime18", (dateTime7.compareTo(dateTime18) == 0) == dateTime7.equals(dateTime18));
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1062");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime5.getZone();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        dateTimeParserBucket29.saveField(dateTimeFieldType33, "it", locale35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime23.property(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType33.getDurationType();
        org.joda.time.DateTime dateTime40 = dateTime5.withFieldAdded(durationFieldType38, 680);
        org.joda.time.DateTime.Property property41 = dateTime5.minuteOfHour();
        org.joda.time.DateTime.Property property42 = dateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        org.joda.time.Chronology chronology54 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime52.withMillisOfDay(378);
        long long57 = property42.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime46", (dateTime1.compareTo(dateTime46) == 0) == dateTime1.equals(dateTime46));
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1063");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, 853);
        org.joda.time.DateTime dateTime16 = dateTime11.withMillisOfDay(57);
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        int int18 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillis((-1510245109758L));
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property48 = dateTime45.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property53 = dateTime50.centuryOfEra();
        org.joda.time.DateTime dateTime55 = dateTime50.minusYears(558);
        boolean boolean56 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime50);
        int int57 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime50);
        int int58 = dateTime50.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime50.toMutableDateTimeISO();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField67 = null;
        dateTimeParserBucket66.saveField(dateTimeField67, (int) (short) 0);
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology71, locale72, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField76 = null;
        dateTimeParserBucket75.saveField(dateTimeField76, (int) (short) 0);
        java.lang.Integer int79 = dateTimeParserBucket75.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket75.setZone(dateTimeZone80);
        dateTimeParserBucket66.setZone(dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket66.getZone();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone83);
        boolean boolean85 = dateTimeZone83.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime59, dateTimeZone83);
        org.joda.time.DateTime dateTime88 = dateTime11.toDateTime(dateTimeZone83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime45", (dateTime3.compareTo(dateTime45) == 0) == dateTime3.equals(dateTime45));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1064");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(648);
        org.joda.time.DateTime.Property property13 = dateTime10.secondOfDay();
        boolean boolean14 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime10);
        int int15 = dateTime10.getWeekOfWeekyear();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        dateTimeParserBucket21.saveField(dateTimeFieldType28, "97", locale30);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket21.getChronology();
        java.lang.Integer int34 = dateTimeParserBucket21.getPivotYear();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology35.getZone();
        org.joda.time.DateTime dateTime38 = dateTime10.withZone(dateTimeZone37);
        int int39 = dateTime10.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime38", (dateTime3.compareTo(dateTime38) == 0) == dateTime3.equals(dateTime38));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1065");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        long long24 = dateTimeZone22.previousTransition((long) 593);
        long long26 = dateTimeZone22.previousTransition((long) 778);
        int int28 = dateTimeZone22.getOffsetFromLocal((long) 221);
        java.util.TimeZone timeZone29 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        java.util.TimeZone.setDefault(timeZone32);
        int int34 = timeZone32.getRawOffset();
        int int36 = timeZone32.getOffset((long) 569);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DurationField durationField43 = chronology39.millis();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology39.getZone();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        boolean boolean46 = timeZone32.hasSameRules(timeZone45);
        boolean boolean47 = timeZone29.hasSameRules(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((-1));
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths(10);
        org.joda.time.DateTime.Property property54 = dateTime53.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int60 = localDateTime58.get(dateTimeFieldType59);
        int int61 = dateTime53.get(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = dateTime53.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime.Property property64 = dateTime53.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime53.plus(readablePeriod65);
        java.util.Date date67 = dateTime53.toDate();
        boolean boolean68 = timeZone45.inDaylightTime(date67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime49", (dateTime40.compareTo(dateTime49) == 0) == dateTime40.equals(dateTime49));
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1066");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType11, 16);
        org.joda.time.DateTime.Property property15 = dateTime5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (byte) 100);
        boolean boolean42 = dateTime40.isBefore((long) ' ');
        int int43 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime40);
        int int45 = dateTimeZone33.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime46 = dateTime21.withZoneRetainFields(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, (int) '4');
        boolean boolean50 = dateTime5.equals((java.lang.Object) dateTime49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = chronology53.getZone();
        org.joda.time.Chronology chronology56 = chronology53.withUTC();
        org.joda.time.Chronology chronology57 = chronology56.withUTC();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMillis((int) (short) 1);
        long long70 = chronology56.set((org.joda.time.ReadablePartial) localDateTime68, 0L);
        org.joda.time.DurationField durationField71 = chronology56.seconds();
        org.joda.time.DateTimeField dateTimeField72 = chronology56.monthOfYear();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField74 = chronology56.millisOfSecond();
        java.lang.String str75 = dateTimeField74.toString();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.secondOfMinute();
        org.joda.time.DurationField durationField81 = chronology78.halfdays();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now(chronology84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plusWeeks((int) (byte) -1);
        int int88 = localDateTime87.getYearOfCentury();
        long long90 = chronology78.set((org.joda.time.ReadablePartial) localDateTime87, (long) 774);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime87.minusMillis(113);
        boolean boolean94 = localDateTime87.equals((java.lang.Object) 1646033317218L);
        int int95 = dateTimeField74.getMinimumValue((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.DateTime dateTime96 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.DateTimeZone dateTimeZone97 = null;
        org.joda.time.DateTime dateTime98 = dateTime96.withZoneRetainFields(dateTimeZone97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime54", (dateTime36.compareTo(dateTime54) == 0) == dateTime36.equals(dateTime54));
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1067");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        int int16 = dateTimeField15.getMaximumValue();
        long long18 = dateTimeField15.roundHalfCeiling((long) 26757772);
        int int20 = dateTimeField15.getMinimumValue((long) 896);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime28 = property27.roundCeilingCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours(538);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        boolean boolean37 = dateTime35.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTime(dateTimeZone38);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeZone38.getName((long) (byte) 1, locale42);
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale42.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(2764800000L, chronology31, locale42);
        java.lang.String str47 = dateTimeField15.getAsShortText(41521, locale42);
        java.util.Set<java.lang.Character> charSet48 = locale42.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime24", (dateTime3.compareTo(dateTime24) == 0) == dateTime3.equals(dateTime24));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1068");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (byte) 100);
        int[] intArray6 = localDateTime5.getValues();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusDays(4);
        int int9 = localDateTime8.size();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTime();
        int int17 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property18 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        java.util.Locale locale27 = dateTimeParserBucket25.getLocale();
        boolean boolean28 = property18.equals((java.lang.Object) locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology10, locale27, (java.lang.Integer) 325);
        org.joda.time.DateTimeField dateTimeField31 = chronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology10.getZone();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isStandardOffset((long) 589);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime33", (dateTime13.compareTo(dateTime33) == 0) == dateTime13.equals(dateTime33));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1069");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyearOfCentury();
        java.lang.String str15 = dateTimeField13.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        int int21 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime20.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfWeek();
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray29 = strSet28.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet28.spliterator();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        java.lang.String str36 = property34.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        boolean boolean38 = strSet28.equals((java.lang.Object) property34);
        org.joda.time.LocalDateTime localDateTime39 = property34.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DurationField durationField47 = chronology43.seconds();
        org.joda.time.DurationField durationField48 = chronology43.minutes();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.era();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.clockhourOfDay();
        org.joda.time.DurationField durationField52 = dateTimeField51.getLeapDurationField();
        java.lang.String str54 = dateTimeField51.getAsShortText((long) 1);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        java.lang.String str61 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.dayOfWeek();
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology65, locale66, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField70 = null;
        dateTimeParserBucket69.saveField(dateTimeField70, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale75 = java.util.Locale.ROOT;
        dateTimeParserBucket69.saveField(dateTimeFieldType73, "it", locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology59, locale75, (java.lang.Integer) 9, 538);
        java.lang.String str80 = dateTimeField51.getAsText(774, locale75);
        java.util.Locale locale81 = locale75.stripExtensions();
        java.lang.String str82 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime39, locale81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime39.minusYears(404);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.plusHours((int) (byte) 0);
        boolean boolean90 = dateTime88.isEqual((long) (short) 100);
        int int91 = dateTime88.getMinuteOfDay();
        org.joda.time.DateTime.Property property92 = dateTime88.secondOfMinute();
        org.joda.time.DateTime.Property property93 = dateTime88.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property93.getFieldType();
        int int95 = localDateTime39.get(dateTimeFieldType94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime86", (dateTime3.compareTo(dateTime86) == 0) == dateTime3.equals(dateTime86));
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1070");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int12 = localDateTime9.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        boolean boolean20 = localDateTime9.isSupported(dateTimeFieldType18);
        int int21 = dateTime5.get(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType18.getDurationType();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = durationFieldType23.getField(chronology26);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfDay();
        boolean boolean38 = durationFieldType23.isSupported(chronology33);
        org.joda.time.DurationField durationField39 = durationFieldType22.getField(chronology33);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime42.year();
        org.joda.time.DateTime dateTime47 = dateTime42.minusSeconds(241);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds(2022);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusHours(49);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = property57.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime60 = property57.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusHours((int) (byte) 0);
        java.util.Date date65 = dateTime62.toDate();
        org.joda.time.DateTime.Property property66 = dateTime62.dayOfMonth();
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = property66.getAsShortText(locale67);
        int int69 = property57.getMaximumShortTextLength(locale67);
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.lang.String str71 = locale70.getDisplayName();
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str73 = locale70.getISO3Language();
        java.util.Locale locale74 = locale70.stripExtensions();
        java.lang.String str75 = locale70.getISO3Language();
        java.lang.String str76 = locale67.getDisplayLanguage(locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology50, locale70);
        org.joda.time.DateTimeField dateTimeField78 = chronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology50.secondOfDay();
        org.joda.time.DurationField durationField80 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField81 = chronology50.minuteOfHour();
        boolean boolean82 = durationFieldType22.isSupported(chronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField30 and durationField80", Math.signum(durationField30.compareTo(durationField80)) == -Math.signum(durationField80.compareTo(durationField30)));
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1071");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        dateTimeParserBucket5.saveField(dateTimeFieldType22, 0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        java.lang.String str30 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField33.getType();
        dateTimeParserBucket5.saveField(dateTimeFieldType34, 36001000);
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = property42.getAsText(locale43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours((int) (byte) 0);
        boolean boolean51 = dateTime49.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime49.toMutableDateTime(dateTimeZone52);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = dateTimeZone52.getName((long) (byte) 1, locale56);
        java.lang.String str58 = locale56.getScript();
        java.lang.String str59 = property42.getAsShortText(locale56);
        java.lang.String str60 = locale56.getDisplayScript();
        java.lang.String str63 = nameProvider37.getName(locale56, "\u671d\u9c9c\u6587", "+00:00:00.052");
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.withWeekyear((-1));
        org.joda.time.DateTime dateTime69 = dateTime67.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime76 = dateTime74.withMinuteOfHour((int) (short) 10);
        int int77 = dateTime76.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime80 = dateTime76.withDurationAdded(readableDuration78, (int) (byte) 0);
        boolean boolean81 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = dateTime69.plusYears(0);
        java.util.Locale.Category category84 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale85 = java.util.Locale.getDefault(category84);
        java.util.Locale locale86 = java.util.Locale.getDefault(category84);
        java.util.Calendar calendar87 = dateTime83.toCalendar(locale86);
        java.lang.String str88 = locale56.getDisplayVariant(locale86);
        boolean boolean89 = dateTimeParserBucket5.restoreState((java.lang.Object) locale86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime39", (dateTime29.compareTo(dateTime39) == 0) == dateTime29.equals(dateTime39));
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1072");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        int int9 = localDateTime1.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withYear(635);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology14.millis();
        org.joda.time.DurationFieldType durationFieldType19 = durationField18.getType();
        boolean boolean20 = localDateTime1.isSupported(durationFieldType19);
        java.lang.String str21 = durationFieldType19.toString();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField27 = chronology24.millis();
        java.lang.String str28 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = chronology24.monthOfYear();
        boolean boolean33 = durationFieldType19.isSupported(chronology24);
        java.lang.String str34 = durationFieldType19.getName();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime54.plusHours((int) (byte) 100);
        boolean boolean60 = dateTime58.isBefore((long) ' ');
        int int61 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        dateTimeParserBucket40.setZone(dateTimeZone51);
        long long65 = dateTimeZone51.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekyear((-1));
        org.joda.time.DateTime dateTime72 = dateTime68.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.plus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime78 = dateTime74.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime78.toMutableDateTime();
        org.joda.time.Chronology chronology80 = mutableDateTime79.getChronology();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime66, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.dayOfYear();
        org.joda.time.DurationField durationField83 = chronology80.halfdays();
        org.joda.time.DurationField durationField84 = durationFieldType19.getField(chronology80);
        org.joda.time.DateTimeField dateTimeField85 = chronology80.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime54", (dateTime15.compareTo(dateTime54) == 0) == dateTime15.equals(dateTime54));
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1073");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField17 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.year();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusSeconds((int) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket34.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.DurationFieldType durationFieldType43 = durationField42.getType();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime21.withFieldAdded(durationFieldType43, 857);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology51.seconds();
        org.joda.time.DurationField durationField56 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.monthOfYear();
        org.joda.time.DurationField durationField59 = durationFieldType47.getField(chronology51);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = dateTimeField65.getAsShortText((long) (byte) -1, locale67);
        java.util.Locale locale69 = locale67.stripExtensions();
        java.lang.String str70 = locale67.toLanguageTag();
        java.lang.String str71 = locale67.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology51, locale67, (java.lang.Integer) 992, 405);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withDurationAdded(readableDuration81, 28);
        int[] intArray85 = chronology51.get((org.joda.time.ReadablePartial) localDateTime83, (long) 772);
        int int86 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray85);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime45.withYear(334);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime63", (dateTime1.compareTo(dateTime63) == 0) == dateTime1.equals(dateTime63));
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1074");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusHours(49);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.plusSeconds(441);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime14.getZone();
        int int17 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property18 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime14.minusHours(391);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        int int25 = dateTime22.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime22.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        org.joda.time.DateTime dateTime30 = dateTime20.withZone(dateTimeZone29);
        int int31 = property6.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField39 = chronology35.hours();
        org.joda.time.DurationField durationField40 = chronology35.weeks();
        org.joda.time.DurationField durationField41 = chronology35.years();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26781995, chronology35, locale42);
        java.lang.Integer int44 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        int int51 = dateTimeParserBucket50.getOffset();
        long long52 = dateTimeParserBucket50.computeMillis();
        dateTimeParserBucket50.setOffset(26757772);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int62 = dateTime60.get(dateTimeFieldType61);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int67 = localDateTime64.get(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.era();
        boolean boolean74 = localDateTime72.isSupported(dateTimeFieldType73);
        boolean boolean75 = localDateTime64.isSupported(dateTimeFieldType73);
        int int76 = dateTime60.get(dateTimeFieldType73);
        dateTimeParserBucket50.saveField(dateTimeFieldType73, 44);
        dateTimeParserBucket43.saveField(dateTimeFieldType73, 26812);
        org.joda.time.DateTime.Property property81 = dateTime30.property(dateTimeFieldType73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime36", (dateTime9.compareTo(dateTime36) == 0) == dateTime9.equals(dateTime36));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1075");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.DateTime dateTime39 = dateTime30.plusHours(100);
        org.joda.time.DateTime.Property property40 = dateTime30.dayOfYear();
        int int41 = property40.getMaximumValueOverall();
        boolean boolean42 = dateTimeParserBucket5.restoreState((java.lang.Object) property40);
        org.joda.time.DateTime dateTime43 = property40.roundFloorCopy();
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(604800000L, 950);
        org.joda.time.tz.NameProvider nameProvider47 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property53 = dateTime50.centuryOfEra();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = property53.getAsText(locale54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours((int) (byte) 0);
        boolean boolean62 = dateTime60.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone64 = dateTimeZone63.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime60.toMutableDateTime(dateTimeZone63);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = dateTimeZone63.getName((long) (byte) 1, locale67);
        java.lang.String str69 = locale67.getScript();
        java.lang.String str70 = property53.getAsShortText(locale67);
        java.lang.String str71 = locale67.getDisplayScript();
        java.lang.String str72 = locale67.getDisplayScript();
        java.lang.String str75 = nameProvider47.getShortName(locale67, "97", "1970-01-01T00:00:01.000");
        boolean boolean76 = dateTime43.equals((java.lang.Object) "97");
        org.joda.time.Instant instant77 = dateTime43.toInstant();
        org.joda.time.DateTime dateTime79 = dateTime43.withMillisOfDay(741);
        org.joda.time.DateMidnight dateMidnight80 = dateTime79.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and instant77", (dateTime43.compareTo(instant77) == 0) == dateTime43.equals(instant77));
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1076");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        strSet17.clear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        boolean boolean24 = strSet17.contains((java.lang.Object) dateTimeZone23);
        java.util.stream.Stream<java.lang.String> strStream25 = strSet17.stream();
        int int26 = strSet17.size();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime(dateTimeZone33);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = dateTimeZone33.getName((long) (byte) 1, locale37);
        java.lang.String str40 = locale37.getUnicodeLocaleType("52");
        java.util.Set<java.lang.String> strSet41 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale37.getVariant();
        java.util.Set<java.lang.String> strSet43 = locale37.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream44 = strSet43.parallelStream();
        boolean boolean45 = strSet17.containsAll((java.util.Collection<java.lang.String>) strSet43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime28", (dateTime22.compareTo(dateTime28) == 0) == dateTime22.equals(dateTime28));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1077");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField15.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField15.getType();
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 623);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DurationField durationField28 = chronology24.seconds();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.minuteOfDay();
        boolean boolean31 = dateTimeFieldType20.isSupported(chronology24);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.util.Locale locale43 = dateTimeParserBucket39.getLocale();
        java.util.Locale.setDefault(category33, locale43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = property50.getAsText(locale51);
        java.lang.String str54 = locale45.getDisplayName(locale51);
        java.lang.String str55 = locale51.getISO3Language();
        java.util.Locale.setDefault(category33, locale51);
        java.util.Set<java.lang.String> strSet57 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str58 = locale51.getLanguage();
        dateTimeParserBucket5.saveField(dateTimeFieldType20, "26785", locale51);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        java.lang.String str63 = dateTimeZone61.getID();
        long long67 = dateTimeZone61.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean69 = dateTimeZone61.isStandardOffset((long) 86399);
        long long71 = dateTimeZone61.previousTransition((long) 353);
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology73, locale74, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField78 = null;
        dateTimeParserBucket77.saveField(dateTimeField78, (int) (short) 0);
        java.lang.Integer int81 = dateTimeParserBucket77.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket77.setZone(dateTimeZone82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale86 = java.util.Locale.GERMANY;
        java.lang.String str87 = locale86.getDisplayName();
        dateTimeParserBucket77.saveField(dateTimeFieldType84, "97", locale86);
        dateTimeParserBucket77.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket77.setOffset(453);
        java.lang.Object obj93 = dateTimeParserBucket77.saveState();
        dateTimeParserBucket77.setPivotYear((java.lang.Integer) 466);
        org.joda.time.DateTimeZone dateTimeZone96 = dateTimeParserBucket77.getZone();
        long long98 = dateTimeZone61.getMillisKeepLocal(dateTimeZone96, (long) 686);
        dateTimeParserBucket5.setZone(dateTimeZone96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime47", (dateTime11.compareTo(dateTime47) == 0) == dateTime11.equals(dateTime47));
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1078");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        boolean boolean12 = dateTime8.isAfter((long) 950);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket25.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.toString();
        long long47 = dateTimeZone19.getMillisKeepLocal(dateTimeZone42, (long) 23);
        org.joda.time.DateTime dateTime48 = dateTime8.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime49 = dateTime8.toDateTime();
        int int50 = dateTime49.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime14", (dateTime3.compareTo(dateTime14) == 0) == dateTime3.equals(dateTime14));
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1079");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.lang.String str24 = dateTimeZone22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(10);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfDay();
        int int32 = dateTime30.getYearOfEra();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(765);
        int int37 = dateTime36.getMinuteOfDay();
        int int38 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int40 = localDateTime39.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime48.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime48.getZone();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.millisOfSecond();
        boolean boolean57 = dateTimeZone52.isLocalDateTimeGap(localDateTime54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plusMillis(51);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime54.withFieldAdded(durationFieldType61, 954);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime39.withFieldAdded(durationFieldType61, 894);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime44", (dateTime26.compareTo(dateTime44) == 0) == dateTime26.equals(dateTime44));
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1080");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = null;
        dateTimeParserBucket9.saveField(dateTimeField10, (int) (short) 0);
        java.lang.Integer int13 = dateTimeParserBucket9.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket9.setZone(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale18.getDisplayName();
        dateTimeParserBucket9.saveField(dateTimeFieldType16, "97", locale18);
        dateTimeParserBucket9.setOffset((java.lang.Integer) 590);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket9.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        java.lang.String str27 = dateTimeZone25.getID();
        long long31 = dateTimeZone25.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean33 = dateTimeZone25.isStandardOffset((long) 86399);
        long long35 = dateTimeZone25.previousTransition((long) 353);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale50.getDisplayName();
        dateTimeParserBucket41.saveField(dateTimeFieldType48, "97", locale50);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket41.setOffset(453);
        java.lang.Object obj57 = dateTimeParserBucket41.saveState();
        dateTimeParserBucket41.setPivotYear((java.lang.Integer) 466);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket41.getZone();
        long long62 = dateTimeZone25.getMillisKeepLocal(dateTimeZone60, (long) 686);
        dateTimeParserBucket9.setZone(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.minusWeeks(855);
        org.joda.time.LocalDateTime.Property property77 = localDateTime72.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.minusMillis(191);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withWeekyear(753);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plusMonths(749);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property84.getFieldType();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getRangeDurationType();
        dateTimeParserBucket9.saveField(dateTimeFieldType85, 810);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime3.withField(dateTimeFieldType85, 116);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1081");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour((int) (short) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(readableDuration14, (int) (byte) 0);
        org.joda.time.DateTime dateTime17 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.minusMillis(663);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy("34");
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean34 = dateTime33.isEqualNow();
        org.joda.time.LocalDateTime localDateTime35 = dateTime33.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths(99);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime33.minus(readablePeriod40);
        int int42 = dateTime41.getMonthOfYear();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.Chronology chronology54 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfDay();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone67 = dateTimeZone66.toTimeZone();
        org.joda.time.Chronology chronology68 = chronology62.withZone(dateTimeZone66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        long long72 = chronology68.add(readablePeriod69, 0L, 603);
        org.joda.time.DateTimeField dateTimeField73 = chronology68.millisOfSecond();
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        java.util.Locale locale76 = java.util.Locale.ITALIAN;
        java.lang.String str77 = locale76.getLanguage();
        java.util.Set<java.lang.Character> charSet78 = locale76.getExtensionKeys();
        java.util.Locale.setDefault(category74, locale76);
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.lang.String str81 = locale80.getLanguage();
        java.util.Set<java.lang.Character> charSet82 = locale80.getExtensionKeys();
        java.util.Locale.setDefault(category74, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(52914310L, chronology68, locale80);
        java.util.Set<java.lang.String> strSet85 = locale80.getUnicodeLocaleKeys();
        int int86 = dateTimeField58.getMaximumShortTextLength(locale80);
        java.lang.String str87 = locale80.getScript();
        java.lang.String str88 = dateTime41.toString("89", locale80);
        java.util.Set<java.lang.String> strSet89 = locale80.getUnicodeLocaleKeys();
        java.lang.String str90 = property20.getAsText(locale80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime26", (dateTime8.compareTo(dateTime26) == 0) == dateTime8.equals(dateTime26));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1082");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime5.withMillis((long) 59);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra(422);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        java.lang.String str25 = chronology23.toString();
        org.joda.time.DurationField durationField26 = chronology23.hours();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology29.seconds();
        org.joda.time.DurationField durationField34 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.era();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readablePeriod40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology23, locale42);
        java.lang.String str46 = dateTimeZone18.getShortName((long) 99, locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1083");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        boolean boolean3 = dateTime1.isBefore((long) 241);
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths(1);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTime(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType11.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        java.lang.String str25 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime40 = property37.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.minusWeeks((-593));
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology54);
        java.lang.String str56 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.weekyear();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology60);
        int int67 = dateTimeField57.getMinimumValue((org.joda.time.ReadablePartial) localDateTime66);
        boolean boolean68 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime66);
        int[] intArray69 = localDateTime66.getValues();
        int int70 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42, intArray69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime42.plus(readablePeriod71);
        int[] intArray74 = chronology15.get((org.joda.time.ReadablePartial) localDateTime42, (long) 339655);
        org.joda.time.DateTimeField dateTimeField75 = chronology15.secondOfMinute();
        org.joda.time.DateTime dateTime76 = dateTime5.toDateTime(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1084");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 130, chronology4);
        java.util.Locale locale17 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 1419, chronology4, locale17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusMonths((int) (byte) 100);
        int[] intArray25 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusDays(4);
        int int28 = localDateTime27.size();
        org.joda.time.Chronology chronology29 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        int int36 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime.Property property37 = dateTime32.centuryOfEra();
        org.joda.time.DateTime dateTime38 = property37.roundCeilingCopy();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        java.util.Locale locale46 = dateTimeParserBucket44.getLocale();
        boolean boolean47 = property37.equals((java.lang.Object) locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology29, locale46, (java.lang.Integer) 325);
        org.joda.time.DateTimeField dateTimeField50 = chronology29.yearOfEra();
        dateTimeParserBucket18.saveField(dateTimeField50, 92);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        java.lang.String str57 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.weekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.weekyear();
        long long66 = chronology55.add(8594L, (long) 970, 0);
        org.joda.time.DateTimeField dateTimeField67 = chronology55.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology55.millisOfSecond();
        dateTimeParserBucket18.saveField(dateTimeField68, 538);
        long long73 = dateTimeField68.add((-1659599535L), 90);
        long long75 = dateTimeField68.roundHalfFloor((long) 462);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime56", (dateTime32.compareTo(dateTime56) == 0) == dateTime32.equals(dateTime56));
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1085");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale.setDefault(category0, locale18);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        int int44 = dateTimeParserBucket43.getOffset();
        java.lang.Integer int45 = dateTimeParserBucket43.getPivotYear();
        java.util.Locale locale46 = dateTimeParserBucket43.getLocale();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale48.getDisplayLanguage(locale49);
        java.lang.String str52 = locale46.getDisplayName(locale49);
        java.lang.String str53 = localDateTime34.toString("17", locale49);
        java.util.Locale.setDefault(category0, locale49);
        java.util.Locale locale55 = java.util.Locale.getDefault(category0);
        java.util.Locale locale56 = java.util.Locale.getDefault(category0);
        java.util.Locale locale57 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime65.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean69 = dateTime68.isEqualNow();
        org.joda.time.DateTime.Property property70 = dateTime68.secondOfMinute();
        java.util.Locale.Category category71 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology73, locale74, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField78 = null;
        dateTimeParserBucket77.saveField(dateTimeField78, (int) (short) 0);
        java.util.Locale locale81 = dateTimeParserBucket77.getLocale();
        java.util.Locale.setDefault(category71, locale81);
        java.lang.String str83 = property70.getAsShortText(locale81);
        java.util.Locale locale84 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str85 = locale81.getDisplayScript(locale84);
        java.util.Locale.setDefault(category0, locale84);
        java.util.Locale locale87 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime61", (dateTime14.compareTo(dateTime61) == 0) == dateTime14.equals(dateTime61));
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1086");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime3.toGregorianCalendar();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withPeriodAdded(readablePeriod6, 32052);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        boolean boolean19 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime12.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime12.plusHours(614);
        org.joda.time.DateTime dateTime25 = dateTime12.minusDays(156);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime12.plus(readablePeriod26);
        boolean boolean28 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1087");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.weeks();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DurationField durationField10 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(23091L, chronology3);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        java.util.Date date17 = dateTime14.toDate();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfMonth();
        java.lang.String str19 = property18.getAsString();
        int int20 = property18.getMaximumValue();
        int int21 = property18.getMinimumValueOverall();
        org.joda.time.DateTime dateTime22 = property18.roundHalfCeilingCopy();
        int int23 = dateTime22.getMinuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        int int44 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone34.isLocalDateTimeGap(localDateTime45);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        java.lang.Integer int66 = dateTimeParserBucket62.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket62.setZone(dateTimeZone67);
        dateTimeParserBucket53.setZone(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket53.getZone();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone70);
        long long75 = dateTimeZone70.convertLocalToUTC(35999999L, false, 1L);
        long long77 = dateTimeZone34.getMillisKeepLocal(dateTimeZone70, 0L);
        org.joda.time.DateTime dateTime78 = dateTime22.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime79 = localDateTime12.toDateTime(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime14", (dateTime4.compareTo(dateTime14) == 0) == dateTime4.equals(dateTime14));
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1088");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 474);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime(dateTimeZone18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = dateTimeZone18.getName((long) (byte) 1, locale22);
        org.joda.time.Chronology chronology24 = chronology5.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone25 = chronology5.getZone();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 26751806, chronology5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(537);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray43 = localDateTime42.getValues();
        int[] intArray45 = dateTimeField34.addWrapField((org.joda.time.ReadablePartial) localDateTime39, 0, intArray43, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusHours(28);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy((long) 569);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.era();
        boolean boolean61 = localDateTime59.isSupported(dateTimeFieldType60);
        int int62 = localDateTime54.get(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime54.withYear(635);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField71 = chronology67.millis();
        org.joda.time.DurationFieldType durationFieldType72 = durationField71.getType();
        boolean boolean73 = localDateTime54.isSupported(durationFieldType72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime52.withFieldAdded(durationFieldType72, 239);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime39.withFieldAdded(durationFieldType72, 93);
        org.joda.time.DateTime dateTime79 = dateTime28.withFieldAdded(durationFieldType72, 616);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime1.withFieldAdded(durationFieldType72, 912);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime32", (dateTime13.compareTo(dateTime32) == 0) == dateTime13.equals(dateTime32));
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1089");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfDay();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.getDefault(category19);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale25.getDisplayLanguage();
        java.util.Locale locale30 = new java.util.Locale("", "22");
        java.lang.String str31 = locale25.getDisplayCountry(locale30);
        java.util.Locale.setDefault(locale30);
        java.lang.String str35 = nameProvider22.getName(locale30, "13", "19");
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.secondOfDay();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray62 = localDateTime61.getValues();
        int[] intArray64 = dateTimeField53.addWrapField((org.joda.time.ReadablePartial) localDateTime58, 0, intArray62, (int) (short) 10);
        int int65 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47, intArray62);
        int int67 = dateTimeField41.getLeapAmount((long) 7);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.millisOfSecond();
        org.joda.time.DurationField durationField75 = chronology71.seconds();
        org.joda.time.DurationField durationField76 = chronology71.minutes();
        org.joda.time.DateTimeField dateTimeField77 = chronology71.era();
        org.joda.time.DateTimeField dateTimeField78 = chronology71.weekOfWeekyear();
        org.joda.time.DurationField durationField79 = chronology71.months();
        org.joda.time.DateTimeField dateTimeField80 = chronology71.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField81 = chronology71.dayOfMonth();
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = dateTimeField81.getAsText(1978, locale83);
        java.lang.String str85 = dateTimeField41.getAsText((-175220), locale83);
        java.lang.String str86 = locale83.getDisplayCountry();
        java.lang.String str89 = nameProvider22.getShortName(locale83, "", "2022-02-22T07:26:35.701+00:00:00.052");
        java.util.Locale.setDefault(category19, locale83);
        java.util.Locale locale91 = java.util.Locale.getDefault(category19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket(41413075L, chronology17, locale91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime39", (dateTime2.compareTo(dateTime39) == 0) == dateTime2.equals(dateTime39));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1090");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        java.lang.String str6 = dateTimeField4.getAsShortText((long) 28);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property21 = dateTime18.centuryOfEra();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = property21.getAsText(locale22);
        java.lang.String str25 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (-1), locale22);
        int int26 = dateTimeField4.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        java.lang.String str32 = property30.getAsText();
        int int33 = property30.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime35 = property30.setCopy(214);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, (int) 'x');
        int int39 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        int int41 = dateTimeField4.getMaximumValue(801L);
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.util.Locale locale53 = dateTimeParserBucket49.getLocale();
        java.util.Locale.setDefault(category43, locale53);
        java.util.Locale locale56 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category43, locale56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = chronology60.getZone();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("87");
        java.lang.String str67 = dateTimeField63.getAsText((long) 383, locale66);
        java.lang.String str68 = locale66.toLanguageTag();
        java.lang.String str69 = locale66.getDisplayLanguage();
        java.util.Locale.setDefault(category43, locale66);
        java.util.Locale locale71 = java.util.Locale.getDefault(category43);
        java.util.Locale locale72 = java.util.Locale.getDefault(category43);
        java.lang.String str73 = dateTimeField4.getAsText(63830964502311L, locale72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime61", (dateTime18.compareTo(dateTime61) == 0) == dateTime18.equals(dateTime61));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1091");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime(dateTimeZone18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = dateTimeZone18.getName((long) (byte) 1, locale22);
        org.joda.time.Chronology chronology24 = chronology5.withZone(dateTimeZone18);
        long long28 = chronology24.add((long) 51, (long) 558, 175);
        org.joda.time.DurationField durationField29 = durationFieldType2.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        java.util.Locale locale33 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getLanguage();
        java.util.Set<java.lang.Character> charSet36 = locale33.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(1646033326455L, chronology24, locale33, (java.lang.Integer) 27009478);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        dateTimeParserBucket38.setZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime41", (dateTime13.compareTo(dateTime41) == 0) == dateTime13.equals(dateTime41));
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1092");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime dateTime13 = dateTime9.withMillisOfDay(0);
        int int14 = dateTime9.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime.Property property25 = dateTime22.yearOfCentury();
        int int26 = property25.getMaximumValueOverall();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = property25.getAsText(locale28);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int36 = localDateTime32.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withCenturyOfEra((int) (byte) 0);
        int int39 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusMillis(603);
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusSeconds(170);
        boolean boolean68 = localDateTime57.isAfter((org.joda.time.ReadablePartial) localDateTime67);
        boolean boolean69 = localDateTime44.isEqual((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime44.plusMinutes(92);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime44.minus(readableDuration72);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime73);
        int int75 = localDateTime74.getDayOfWeek();
        int int76 = localDateTime74.getYear();
        int[] intArray78 = chronology18.get((org.joda.time.ReadablePartial) localDateTime74, 22910342400000L);
        org.joda.time.DateTimeField dateTimeField79 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField80 = chronology18.weekyears();
        org.joda.time.DateTime dateTime81 = dateTime9.toDateTime(chronology18);
        org.joda.time.DurationField durationField82 = chronology18.years();
        boolean boolean83 = dateTimeParserBucket5.restoreState((java.lang.Object) durationField82);
        dateTimeParserBucket5.setOffset(819);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField80 and durationField82", (durationField80.compareTo(durationField82) == 0) == durationField80.equals(durationField82));
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1093");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField9 = chronology8.halfdays();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withFieldAdded(durationFieldType32, 70);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        int int39 = dateTime36.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.plus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        boolean boolean47 = dateTime45.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        boolean boolean52 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DurationField durationField57 = chronology54.minutes();
        org.joda.time.DateTime dateTime58 = dateTime36.withChronology(chronology54);
        org.joda.time.DateTime dateTime60 = dateTime58.withMillis(51L);
        org.joda.time.DateTime.Property property61 = dateTime58.yearOfCentury();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale62.toLanguageTag();
        int int65 = property61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        java.lang.String str67 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale62);
        java.lang.String str68 = locale62.getDisplayScript();
        java.lang.String str69 = dateTimeField12.getAsShortText(26954057L, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime36", (dateTime3.compareTo(dateTime36) == 0) == dateTime3.equals(dateTime36));
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1094");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfSecond();
        boolean boolean10 = dateTime1.equals((java.lang.Object) property9);
        org.joda.time.DurationField durationField11 = property9.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        int int18 = dateTimeField16.getMaximumValue((long) 26760199);
        java.lang.String str20 = dateTimeField16.getAsText((-604799410L));
        long long22 = dateTimeField16.roundHalfEven((long) 26779435);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        java.lang.Integer int41 = dateTimeParserBucket37.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket37.setZone(dateTimeZone42);
        dateTimeParserBucket28.setZone(dateTimeZone42);
        java.lang.String str46 = dateTimeZone42.getNameKey((long) 25);
        int int48 = dateTimeZone42.getStandardOffset(946684800000L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.centuryOfEra();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readableDuration59);
        org.joda.time.DateTime dateTime62 = dateTime60.plus(26769467L);
        java.util.Locale locale66 = new java.util.Locale("-0001-02-23T07:26:18.562+00:00:00.052", "DateTimeField[clockhourOfHalfday]", "DateTimeField[weekOfWeekyear]");
        java.lang.String str67 = locale66.getDisplayName();
        java.util.Calendar calendar68 = dateTime60.toCalendar(locale66);
        boolean boolean69 = locale66.hasExtensions();
        java.lang.String str70 = dateTimeZone42.getName((long) 850, locale66);
        java.util.Locale.setDefault(locale66);
        int int72 = dateTimeField16.getMaximumTextLength(locale66);
        java.util.Locale locale73 = locale66.stripExtensions();
        java.lang.String str74 = locale66.getDisplayVariant();
        int int75 = property9.getMaximumShortTextLength(locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime53", (dateTime1.compareTo(dateTime53) == 0) == dateTime1.equals(dateTime53));
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1095");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        int int15 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        int int17 = dateTime13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(538);
        org.joda.time.DateTime dateTime27 = dateTime23.withWeekyear(274);
        int int28 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.weekyears();
        org.joda.time.DateTime dateTime34 = dateTime23.withChronology(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime32", (dateTime1.compareTo(dateTime32) == 0) == dateTime1.equals(dateTime32));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1096");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator2 = strSet0.spliterator();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = dateTime6.getMillisOfSecond();
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime6.withYear(832);
        boolean boolean12 = strSet0.equals((java.lang.Object) 832);
        int int13 = strSet0.size();
        java.lang.Object[] objArray14 = strSet0.toArray();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        java.lang.String str32 = dateTimeField30.getAsShortText((long) 28);
        dateTimeParserBucket20.saveField(dateTimeField30, 100);
        boolean boolean36 = dateTimeField30.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((-592L));
        int int42 = property39.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime44 = property39.addToCopy(593);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime44, 608, locale46);
        long long49 = dateTimeField30.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekyearOfCentury();
        java.lang.String str66 = dateTimeField64.getAsShortText(10L);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = dateTimeField64.getAsText(0L, locale68);
        java.lang.String str70 = dateTimeField58.getAsText(0, locale68);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        int int72 = dateTimeField58.getMaximumShortTextLength(locale71);
        java.lang.String str74 = locale71.getExtension('u');
        int int75 = dateTimeField30.getMaximumTextLength(locale71);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.millisOfSecond();
        org.joda.time.DurationField durationField82 = dateTimeField81.getLeapDurationField();
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.lang.String str85 = locale84.getLanguage();
        java.lang.String str86 = dateTimeField81.getAsText(457087L, locale84);
        java.lang.String str87 = locale71.getDisplayCountry(locale84);
        java.util.Set<java.lang.String> strSet88 = locale84.getUnicodeLocaleAttributes();
        boolean boolean89 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime53", (dateTime4.compareTo(dateTime53) == 0) == dateTime4.equals(dateTime53));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1097");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property14 = dateTime9.centuryOfEra();
        int int15 = dateTime9.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime9.plus(readablePeriod16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, 49);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology22, locale23, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        java.util.Date date41 = dateTime38.toDate();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = dateTime30.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear((-1));
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Calendar calendar53 = dateTime49.toCalendar(locale51);
        java.lang.String str54 = locale51.getScript();
        dateTimeParserBucket28.saveField(dateTimeFieldType43, "Property[minuteOfDay]", locale51);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType43.getRangeDurationType();
        boolean boolean58 = dateTime17.isSupported(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType43.getDurationType();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.weekyear();
        long long73 = chronology62.add(8594L, (long) 970, 0);
        org.joda.time.DateTimeField dateTimeField74 = chronology62.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology62.monthOfYear();
        java.lang.String str76 = chronology62.toString();
        boolean boolean77 = durationFieldType59.isSupported(chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime63", (dateTime1.compareTo(dateTime63) == 0) == dateTime1.equals(dateTime63));
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1098");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 593);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(837);
        org.joda.time.DateTime.Property property4 = dateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology7.millis();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime1.toMutableDateTime(chronology7);
        org.joda.time.Instant instant14 = mutableDateTime13.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.DateTime.Property property20 = dateTime18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, (long) 634);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(19);
        org.joda.time.DateTime.Property property28 = dateTime25.weekyear();
        org.joda.time.DateTime dateTime30 = property28.setCopy(366);
        org.joda.time.DateMidnight dateMidnight31 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.minutes();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime30.toMutableDateTime(chronology35);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        java.lang.Integer int56 = dateTimeParserBucket52.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket52.setZone(dateTimeZone57);
        dateTimeParserBucket43.setZone(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property65 = dateTime62.centuryOfEra();
        org.joda.time.DurationField durationField66 = property65.getRangeDurationField();
        long long67 = property65.remainder();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale68.toLanguageTag();
        java.lang.String str72 = property65.getAsText(locale68);
        java.lang.String str73 = dateTimeZone57.getName(947L, locale68);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime30.toMutableDateTime(dateTimeZone57);
        java.util.GregorianCalendar gregorianCalendar75 = mutableDateTime74.toGregorianCalendar();
        org.joda.time.Chronology chronology76 = mutableDateTime74.getChronology();
        boolean boolean77 = instant14.isAfter((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime13", (dateTime1.compareTo(mutableDateTime13) == 0) == dateTime1.equals(mutableDateTime13));
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1099");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology3.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 26751806, chronology3);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(537);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray41 = localDateTime40.getValues();
        int[] intArray43 = dateTimeField32.addWrapField((org.joda.time.ReadablePartial) localDateTime37, 0, intArray41, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(28);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 569);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        boolean boolean59 = localDateTime57.isSupported(dateTimeFieldType58);
        int int60 = localDateTime52.get(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime52.withYear(635);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.halfdayOfDay();
        org.joda.time.DurationField durationField69 = chronology65.millis();
        org.joda.time.DurationFieldType durationFieldType70 = durationField69.getType();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime50.withFieldAdded(durationFieldType70, 239);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime37.withFieldAdded(durationFieldType70, 93);
        org.joda.time.DateTime dateTime77 = dateTime26.withFieldAdded(durationFieldType70, 616);
        org.joda.time.DateTime dateTime79 = dateTime77.withMillis(27085L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime30", (dateTime11.compareTo(dateTime30) == 0) == dateTime11.equals(dateTime30));
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1100");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        int int9 = localDateTime8.size();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime8.toDateTime(readableInstant10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTime dateTime14 = dateTime11.plusHours(51);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(2397228334015455L, 576);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket25.getZone();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone42);
        boolean boolean44 = dateTimeZone42.isFixed();
        long long47 = dateTimeZone42.adjustOffset(2846437113600010L, false);
        long long51 = dateTimeZone42.convertLocalToUTC((long) 708, true, (-44L));
        java.lang.String str52 = dateTimeZone42.getID();
        org.joda.time.DateTime dateTime53 = dateTime17.withZone(dateTimeZone42);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("1969-12-07T00:00:00.052");
        java.util.Locale locale56 = locale55.stripExtensions();
        java.util.Calendar calendar57 = dateTime53.toCalendar(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and instant18", (dateTime53.compareTo(instant18) == 0) == dateTime53.equals(instant18));
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1101");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        int int41 = dateTimeZone33.getStandardOffset(27464L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int44 = dateTimeZone33.getStandardOffset((long) 219);
        int int46 = dateTimeZone33.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone33);
        boolean boolean49 = dateTimeZone33.isStandardOffset((long) 26973336);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime47", (dateTime3.compareTo(dateTime47) == 0) == dateTime3.equals(dateTime47));
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1102");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays(54);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 2037, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.Chronology chronology39 = chronology33.withZone(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusHours(373);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField58 = null;
        dateTimeParserBucket57.saveField(dateTimeField58, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        dateTimeParserBucket57.saveField(dateTimeFieldType61, "it", locale63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime51.property(dateTimeFieldType61);
        int int66 = localDateTime40.indexOf(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType61.getDurationType();
        int int68 = dateTime29.get(dateTimeFieldType61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime34", (dateTime25.compareTo(dateTime34) == 0) == dateTime25.equals(dateTime34));
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1103");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.Interval interval7 = property4.toInterval();
        org.joda.time.DateTime dateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = property4.addToCopy(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 26798335);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology31 = chronology25.withZone(dateTimeZone29);
        dateTimeParserBucket18.setZone(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        java.lang.String str39 = dateTimeField37.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfEvenCopy();
        int int45 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime44.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime44);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        boolean boolean52 = dateTimeZone29.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTime dateTime53 = dateTime10.toDateTime(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime26", (dateTime53.compareTo(dateTime26) == 0) == dateTime53.equals(dateTime26));
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1104");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology8);
        int int15 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        java.lang.String str22 = dateTimeField20.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        int int28 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime27.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        int int40 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.addToCopy(608);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfWeek();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket49.setZone(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withWeekyear((-1));
        org.joda.time.DateTime dateTime61 = dateTime57.plusHours((int) (byte) 100);
        boolean boolean63 = dateTime61.isBefore((long) ' ');
        int int64 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime66 = dateTime61.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int71 = localDateTime68.get(dateTimeFieldType70);
        int int72 = dateTime66.get(dateTimeFieldType70);
        int int73 = localDateTime42.get(dateTimeFieldType70);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime75.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime75.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withDurationAdded(readableDuration83, 122);
        int[] intArray86 = localDateTime82.getValues();
        int int87 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42, intArray86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime57", (dateTime3.compareTo(dateTime57) == 0) == dateTime3.equals(dateTime57));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1105");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(712);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        java.lang.String str20 = dateTimeField18.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        int int26 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.Chronology chronology30 = chronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology30.minutes();
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DurationField durationField44 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property60 = dateTime57.centuryOfEra();
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = property60.getAsText(locale61);
        java.lang.String str64 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) localDateTime54, (-1), locale61);
        java.util.Locale.setDefault(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology39, locale61, (java.lang.Integer) 170, (int) (byte) 10);
        java.util.Locale locale69 = locale61.stripExtensions();
        java.util.Set<java.lang.String> strSet70 = locale61.getUnicodeLocaleKeys();
        int int71 = dateTimeField35.getMaximumTextLength(locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime57", (dateTime3.compareTo(dateTime57) == 0) == dateTime3.equals(dateTime57));
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1106");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType11.getField(chronology14);
        int int18 = localDateTime8.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime8.withDate(590, 7, 9);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        java.lang.String str24 = property23.getAsText();
        org.joda.time.DurationField durationField25 = property23.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths(10);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfDay();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes(648);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds(569);
        org.joda.time.DateTime dateTime39 = dateTime35.plusDays(575);
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.lang.Integer int59 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket55.setZone(dateTimeZone60);
        dateTimeParserBucket46.setZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket46.getZone();
        long long65 = dateTimeZone63.previousTransition((long) 593);
        org.joda.time.DateTime dateTime66 = dateTime39.withZone(dateTimeZone63);
        boolean boolean67 = dateTimeZone63.isFixed();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekyear((-1));
        org.joda.time.DateTime dateTime74 = dateTime72.plusMonths(10);
        org.joda.time.DateTime.Property property75 = dateTime74.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusHours((int) (byte) 0);
        java.util.Date date80 = dateTime77.toDate();
        org.joda.time.DateTime.Property property81 = dateTime77.dayOfMonth();
        org.joda.time.DateTime.Property property82 = dateTime77.dayOfMonth();
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.lang.String str84 = locale83.getLanguage();
        java.lang.String str85 = property82.getAsText(locale83);
        java.lang.String str86 = property75.getAsShortText(locale83);
        java.lang.String str87 = dateTimeZone63.getShortName(1014721391000L, locale83);
        int int88 = property23.getMaximumTextLength(locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime27", (dateTime15.compareTo(dateTime27) == 0) == dateTime15.equals(dateTime27));
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1107");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology5, locale24);
        org.joda.time.DurationField durationField28 = durationFieldType1.getField(chronology5);
        long long31 = durationField28.getMillis(493L, (long) 117);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField38 = chronology35.hours();
        boolean boolean39 = durationField38.isSupported();
        int int40 = durationField28.compareTo(durationField38);
        boolean boolean41 = durationField38.isPrecise();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime33", (dateTime6.compareTo(dateTime33) == 0) == dateTime6.equals(dateTime33));
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1108");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 136);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        java.lang.String str36 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology40);
        int int47 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean48 = localDateTime31.equals((java.lang.Object) dateTimeField37);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime31.plusMinutes(551);
        int int51 = localDateTime31.getHourOfDay();
        boolean boolean52 = dateTimeParserBucket5.restoreState((java.lang.Object) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket5.getZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = property57.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField66 = localDateTime62.getField(0);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekyear((-1));
        org.joda.time.DateTime dateTime72 = dateTime70.plusMonths(10);
        org.joda.time.DateTime.Property property73 = dateTime72.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int79 = localDateTime77.get(dateTimeFieldType78);
        int int80 = dateTime72.get(dateTimeFieldType78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime62.withField(dateTimeFieldType78, (int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType78.getDurationType();
        dateTimeParserBucket5.saveField(dateTimeFieldType78, 879);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime68", (dateTime35.compareTo(dateTime68) == 0) == dateTime35.equals(dateTime68));
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1109");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "it", locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology17, locale33, (java.lang.Integer) 9, 538);
        java.lang.String str40 = nameProvider12.getShortName(locale33, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale41 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology11, locale33, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours(118);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusMinutes(165);
        long long60 = chronology11.set((org.joda.time.ReadablePartial) localDateTime58, (long) 272);
        org.joda.time.DateTimeField dateTimeField61 = chronology11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekyear((-1));
        org.joda.time.DateTime dateTime68 = dateTime66.plusMonths(10);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusHours((int) (byte) 0);
        java.util.Date date74 = dateTime71.toDate();
        org.joda.time.DateTime.Property property75 = dateTime71.dayOfMonth();
        org.joda.time.DateTime.Property property76 = dateTime71.dayOfMonth();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = property76.getAsText(locale77);
        java.lang.String str80 = property69.getAsShortText(locale77);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property86 = dateTime83.centuryOfEra();
        java.util.Locale locale87 = java.util.Locale.ITALIAN;
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = property86.getAsText(locale87);
        java.lang.String str90 = locale81.getDisplayName(locale87);
        java.lang.String str91 = locale77.getDisplayScript(locale81);
        java.util.Locale locale92 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str93 = locale92.getLanguage();
        java.lang.String str94 = locale77.getDisplayCountry(locale92);
        boolean boolean95 = locale92.hasExtensions();
        java.lang.String str96 = dateTimeField61.getAsText(1679270400000L, locale92);
        boolean boolean98 = dateTimeField61.isLeap((long) (-440));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime64", (dateTime18.compareTo(dateTime64) == 0) == dateTime18.equals(dateTime64));
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1110");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology3.add(readablePeriod44, (long) 180, 292);
        org.joda.time.DateTimeField dateTimeField48 = chronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime53 = property51.addWrapFieldToCopy(241);
        org.joda.time.DurationField durationField54 = property51.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime55 = property51.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.weekyearOfCentury();
        java.lang.String str62 = dateTimeField60.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime.Property property66 = localDateTime64.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundHalfEvenCopy();
        int int68 = dateTimeField60.getMinimumValue((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean71 = localDateTime67.equals((java.lang.Object) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime70.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfCeilingCopy();
        boolean boolean76 = property51.equals((java.lang.Object) property74);
        org.joda.time.LocalDateTime localDateTime77 = property74.roundCeilingCopy();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.lang.String str80 = locale79.getLanguage();
        java.lang.String str81 = locale79.toLanguageTag();
        java.lang.String str82 = locale79.getISO3Language();
        java.util.Set<java.lang.String> strSet83 = locale79.getUnicodeLocaleKeys();
        java.lang.String str84 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, 27006125, locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime59", (dateTime1.compareTo(dateTime59) == 0) == dateTime1.equals(dateTime59));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1111");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime1.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        int int17 = dateTimeParserBucket16.getOffset();
        java.lang.Integer int18 = dateTimeParserBucket16.getPivotYear();
        java.util.Locale locale19 = dateTimeParserBucket16.getLocale();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        boolean boolean30 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime29.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        java.lang.String str39 = property37.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property37.getFieldType();
        int int41 = dateTime33.get(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        boolean boolean55 = dateTime53.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime53.toMutableDateTime(dateTimeZone56);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = dateTimeZone56.getName((long) (byte) 1, locale60);
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = property46.getAsShortText(locale60);
        int int64 = property46.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property46.getFieldType();
        boolean boolean66 = dateTime33.isSupported(dateTimeFieldType65);
        dateTimeParserBucket16.saveField(dateTimeFieldType65, 86399);
        java.lang.String str69 = dateTimeFieldType65.getName();
        org.joda.time.DateTime dateTime71 = dateTime8.withField(dateTimeFieldType65, 594);
        org.joda.time.DateTime dateTime73 = dateTime8.plusHours(26771354);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        boolean boolean81 = durationFieldType75.isSupported(chronology78);
        java.lang.String str82 = durationFieldType75.toString();
        org.joda.time.DateTime dateTime84 = dateTime73.withFieldAdded(durationFieldType75, (-1510244957));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime79", (dateTime1.compareTo(dateTime79) == 0) == dateTime1.equals(dateTime79));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1112");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.year();
        org.joda.time.DateTime dateTime13 = dateTime8.minusSeconds(241);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(2022);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusHours(49);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        java.util.Date date31 = dateTime28.toDate();
        org.joda.time.DateTime.Property property32 = dateTime28.dayOfMonth();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = property32.getAsShortText(locale33);
        int int35 = property23.getMaximumShortTextLength(locale33);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = locale36.getISO3Language();
        java.lang.String str42 = locale33.getDisplayLanguage(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology16, locale36);
        org.joda.time.DateTimeField dateTimeField44 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology16.secondOfDay();
        org.joda.time.ReadablePartial readablePartial46 = null;
        int int47 = dateTimeField45.getMaximumValue(readablePartial46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(377);
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str56 = locale52.getDisplayCountry(locale55);
        java.util.Locale locale57 = locale55.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusHours((int) (byte) 0);
        java.util.Date date62 = dateTime59.toDate();
        org.joda.time.DateTime.Property property63 = dateTime59.dayOfMonth();
        org.joda.time.DateTime.Property property64 = dateTime59.dayOfMonth();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = property64.getAsText(locale65);
        java.lang.String str68 = locale55.getDisplayVariant(locale65);
        java.lang.String str69 = locale65.getISO3Country();
        java.lang.String str70 = dateTimeZone50.getShortName(855014400052L, locale65);
        java.lang.String str71 = dateTimeField45.getAsShortText(267535, locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(2108004393600000L, chronology3, locale65);
        java.lang.String str73 = locale65.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1113");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfMonth();
        int int10 = dateTime3.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime3.withPeriodAdded(readablePeriod11, 456);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.joda.time.DurationField durationField27 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology22.minutes();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        dateTimeParserBucket36.saveField(dateTimeFieldType40, "it", locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(673L, chronology22, locale42, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        long long50 = dateTimeParserBucket46.computeMillis(true, "1978");
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket46.getZone();
        org.joda.time.DateTime dateTime52 = localDateTime18.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime3.withZone(dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC(1646033500062L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1114");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 460);
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime1.toDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime12 = dateTime1.toLocalDateTime();
        int int13 = localDateTime12.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime11", (dateTime1.compareTo(dateTime11) == 0) == dateTime1.equals(dateTime11));
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1115");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours((int) (byte) 0);
        boolean boolean31 = dateTime29.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime29.toString(dateTimeFormatter32);
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("20");
        java.lang.String str39 = locale35.getDisplayVariant(locale38);
        java.lang.String str40 = dateTime29.toString("1969", locale35);
        java.util.Locale locale41 = locale35.stripExtensions();
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = locale42.getDisplayLanguage();
        java.util.Locale locale47 = new java.util.Locale("", "22");
        java.lang.String str48 = locale42.getDisplayCountry(locale47);
        java.util.Locale.setDefault(locale47);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale47.getDisplayCountry(locale50);
        java.lang.String str52 = locale41.getDisplayScript(locale47);
        java.lang.String str53 = property25.getAsShortText(locale41);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology56);
        java.lang.String str58 = chronology56.toString();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.dayOfWeek();
        boolean boolean61 = property25.equals((java.lang.Object) dateTimeField60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime57", (dateTime27.compareTo(dateTime57) == 0) == dateTime27.equals(dateTime57));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1116");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        int int25 = dateTime24.getYearOfEra();
        org.joda.time.DateTime dateTime26 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime26.minus(697L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime36.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime36.getZone();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        boolean boolean45 = dateTimeZone40.isLocalDateTimeGap(localDateTime42);
        java.util.Locale locale50 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale50);
        java.lang.String str52 = dateTimeZone40.getShortName((long) 44, locale50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        boolean boolean55 = dateTimeZone40.isStandardOffset((long) 174);
        long long57 = dateTimeZone40.previousTransition((long) 376);
        java.lang.String str58 = dateTimeZone40.getID();
        long long62 = dateTimeZone40.convertLocalToUTC((long) 26809968, false, (long) 2079);
        int int64 = dateTimeZone40.getOffsetFromLocal(28699403L);
        org.joda.time.DateTime dateTime65 = dateTime28.withZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime32", (dateTime24.compareTo(dateTime32) == 0) == dateTime24.equals(dateTime32));
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1117");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime4.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long31 = dateTimeZone19.nextTransition((long) (short) -1);
        boolean boolean32 = dateTime4.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(5521000L, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone19);
        java.lang.String str35 = dateTimeZone19.getID();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.year();
        org.joda.time.DurationField durationField42 = chronology38.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfWeek();
        org.joda.time.DurationField durationField45 = chronology38.months();
        boolean boolean46 = dateTimeZone19.equals((java.lang.Object) durationField45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime39", (dateTime2.compareTo(dateTime39) == 0) == dateTime2.equals(dateTime39));
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1118");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, 28);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        boolean boolean25 = localDateTime23.isSupported(dateTimeFieldType24);
        int int26 = localDateTime18.get(dateTimeFieldType24);
        boolean boolean27 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withDayOfYear(175);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateTime dateTime36 = dateTime34.plusMonths(10);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes(648);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds(569);
        org.joda.time.DateTime dateTime44 = dateTime40.plusDays(575);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        boolean boolean48 = localDateTime30.isSupported(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime56.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean60 = dateTime59.isEqualNow();
        org.joda.time.LocalDateTime localDateTime61 = dateTime59.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.minus(readablePeriod62);
        int int64 = dateTime59.getDayOfWeek();
        org.joda.time.Chronology chronology65 = dateTime59.getChronology();
        boolean boolean66 = dateTimeFieldType47.isSupported(chronology65);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology73 = dateTimeParserBucket72.getChronology();
        int int74 = dateTimeParserBucket72.getOffset();
        boolean boolean76 = dateTimeParserBucket72.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket72.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology79 = dateTimeParserBucket72.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.secondOfDay();
        boolean boolean81 = dateTimeFieldType47.isSupported(chronology79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime52", (dateTime32.compareTo(dateTime52) == 0) == dateTime32.equals(dateTime52));
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1119");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMinutes(576);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDateTime5.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        dateTimeParserBucket22.saveField(dateTimeFieldType26, "it", locale28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime16.property(dateTimeFieldType26);
        int int31 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        org.joda.time.LocalDateTime localDateTime35 = dateTime33.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes(576);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withPeriodAdded(readablePeriod39, 26830095);
        org.joda.time.DateTime dateTime42 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType43.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField50 = chronology46.year();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.halfdayOfDay();
        int int53 = dateTime38.get(dateTimeField52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime47", (dateTime1.compareTo(dateTime47) == 0) == dateTime1.equals(dateTime47));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1120");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear(702);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime35 = dateTime30.withZoneRetainFields(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.halfdayOfDay();
        org.joda.time.DurationField durationField42 = chronology38.millis();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        long long46 = dateTimeField44.roundFloor(1645514754745L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField44.getType();
        boolean boolean48 = dateTime35.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1121");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.year();
        org.joda.time.DateTime dateTime17 = dateTime12.minusSeconds(241);
        org.joda.time.DateTime dateTime19 = dateTime12.plusMillis(608);
        org.joda.time.DateTime dateTime21 = dateTime19.withCenturyOfEra(58);
        org.joda.time.DateTime dateTime23 = dateTime19.minusWeeks(3);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfSecond();
        java.util.Locale locale28 = new java.util.Locale("2022-02-22T07:28:20.780Z", "2035-02-12t07:26:03.689z_10");
        org.joda.time.DateTime dateTime29 = property24.setCopy("29", locale28);
        int int30 = dateTimeField10.getMaximumShortTextLength(locale28);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.yearOfCentury();
        long long39 = dateTimeField36.addWrapField(0L, (int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType41.getField(chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = dateTimeField48.getAsShortText(778, locale50);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("1970-01-01T00:02:50.655");
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale50.getDisplayName(locale53);
        java.lang.String str57 = dateTimeField36.getAsText(2055741974010L, locale50);
        java.lang.String str58 = locale28.getDisplayName(locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1122");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology32);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        org.joda.time.DurationField durationField63 = property62.getRangeDurationField();
        long long64 = property62.remainder();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = property62.getAsText(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology57, locale65, (java.lang.Integer) 180);
        org.joda.time.DateTimeField dateTimeField72 = chronology57.minuteOfHour();
        org.joda.time.DurationField durationField73 = durationFieldType23.getField(chronology57);
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime46", (dateTime27.compareTo(dateTime46) == 0) == dateTime27.equals(dateTime46));
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1123");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime8.isBefore(readableInstant9);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone34);
        boolean boolean36 = dateTimeZone34.isFixed();
        long long39 = dateTimeZone34.adjustOffset(2846437113600010L, false);
        org.joda.time.DateTime dateTime40 = dateTime8.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime41 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        int int49 = dateTimeParserBucket48.getOffset();
        java.lang.Integer int50 = dateTimeParserBucket48.getPivotYear();
        dateTimeParserBucket48.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int56 = dateTimeZone54.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone54);
        dateTimeParserBucket48.setZone(dateTimeZone54);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 26751, dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime40.withChronology(chronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime57", (dateTime40.compareTo(dateTime57) == 0) == dateTime40.equals(dateTime57));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1124");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusHours(241);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, 67);
        int int15 = localDateTime7.getDayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        int int23 = dateTimeParserBucket21.getOffset();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField31.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField31.getType();
        dateTimeParserBucket21.saveField(dateTimeFieldType33, 623);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str37 = dateTimeFieldType36.getName();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.DurationField durationField44 = chronology40.seconds();
        org.joda.time.DurationField durationField45 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfDay();
        boolean boolean47 = dateTimeFieldType36.isSupported(chronology40);
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.util.Locale locale59 = dateTimeParserBucket55.getLocale();
        java.util.Locale.setDefault(category49, locale59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property66 = dateTime63.centuryOfEra();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = locale67.getLanguage();
        java.lang.String str69 = property66.getAsText(locale67);
        java.lang.String str70 = locale61.getDisplayName(locale67);
        java.lang.String str71 = locale67.getISO3Language();
        java.util.Locale.setDefault(category49, locale67);
        java.util.Set<java.lang.String> strSet73 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale67.getLanguage();
        dateTimeParserBucket21.saveField(dateTimeFieldType36, "26785", locale67);
        int int76 = localDateTime7.indexOf(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType36.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime63", (dateTime27.compareTo(dateTime63) == 0) == dateTime27.equals(dateTime63));
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1125");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.dayOfYear();
        org.joda.time.DurationField durationField48 = chronology45.eras();
        org.joda.time.Chronology chronology49 = chronology45.withUTC();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField48, durationField50, and durationField48", !(durationField48.compareTo(durationField50) == 0) || (Math.signum(durationField48.compareTo(durationField48)) == Math.signum(durationField50.compareTo(durationField48))));
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1126");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.convertUTCToLocal((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(0);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property44 = dateTime41.centuryOfEra();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = property44.getAsText(locale45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours((int) (byte) 0);
        boolean boolean53 = dateTime51.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime51.toMutableDateTime(dateTimeZone54);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = dateTimeZone54.getName((long) (byte) 1, locale58);
        java.lang.String str60 = locale58.getScript();
        java.lang.String str61 = property44.getAsShortText(locale58);
        java.lang.String str62 = locale58.getDisplayScript();
        java.lang.String str65 = nameProvider39.getName(locale58, "\u671d\u9c9c\u6587", "+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider39);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider39);
        java.util.Locale locale71 = new java.util.Locale("1970-01-01T00:00:00.052", "", "2022-02-22T07:26:02.913+00:00:00.052");
        java.lang.String str74 = nameProvider39.getName(locale71, "DEU", "2022-02-22T07:27:30.244+00:00:00.052");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((-1646060020L), chronology35, locale71, (java.lang.Integer) 506);
        org.joda.time.DateTime dateTime77 = dateTime29.withChronology(chronology35);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime36", (dateTime27.compareTo(dateTime36) == 0) == dateTime27.equals(dateTime36));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1127");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj21 = dateTimeParserBucket5.saveState();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 20, chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfDay();
        dateTimeParserBucket5.saveField(dateTimeField29, 303);
        java.util.Locale locale32 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        int int39 = dateTime36.getWeekyear();
        org.joda.time.Chronology chronology40 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        int int44 = dateTimeField41.getDifference(0L, (long) 442);
        dateTimeParserBucket5.saveField(dateTimeField41, 19045);
        int int47 = dateTimeField41.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime34", (dateTime26.compareTo(dateTime34) == 0) == dateTime26.equals(dateTime34));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1128");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        int int15 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        int int17 = dateTime13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(538);
        org.joda.time.DateTime dateTime27 = dateTime23.withWeekyear(274);
        int int28 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.weekyears();
        org.joda.time.DateTime dateTime34 = dateTime23.withChronology(chronology31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withPeriodAdded(readablePeriod35, 688);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime32", (dateTime1.compareTo(dateTime32) == 0) == dateTime1.equals(dateTime32));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1129");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 70);
        java.lang.String str9 = durationFieldType6.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime11.plusHours((int) (byte) 100);
        boolean boolean17 = dateTime15.isBefore((long) ' ');
        org.joda.time.DateTime.Property property18 = dateTime15.weekOfWeekyear();
        int int19 = dateTime15.getDayOfYear();
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        boolean boolean21 = durationFieldType6.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        org.joda.time.DurationField durationField24 = dateTimeField22.getDurationField();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfMonth(18);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfDay(57);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusYears(245);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra(429);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.lang.Integer int48 = dateTimeParserBucket44.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((-1));
        org.joda.time.DateTime dateTime56 = dateTime52.plusHours((int) (byte) 100);
        boolean boolean58 = dateTime56.isBefore((long) ' ');
        int int59 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.minusYears(20);
        org.joda.time.DateTime.Property property62 = dateTime61.hourOfDay();
        org.joda.time.DateTime.Property property63 = dateTime61.dayOfMonth();
        java.util.Locale locale67 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str68 = property63.getAsText(locale67);
        org.joda.time.DateTime dateTime70 = property63.setCopy(12);
        long long71 = property63.remainder();
        int int72 = property63.getMinimumValueOverall();
        java.lang.String str73 = property63.getAsShortText();
        org.joda.time.DateTime dateTime74 = property63.roundCeilingCopy();
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("2050-11-01T00:00:00.052");
        java.lang.String str77 = property63.getAsText(locale76);
        java.lang.String str78 = locale76.getScript();
        java.lang.String str79 = locale76.getDisplayVariant();
        java.lang.String str80 = locale76.getISO3Country();
        java.lang.String str81 = locale76.getCountry();
        java.lang.String str82 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime37, 75121275, locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime28", (dateTime11.compareTo(dateTime28) == 0) == dateTime11.equals(dateTime28));
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1130");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        boolean boolean25 = dateTimeFieldType9.isSupported(chronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        org.joda.time.DurationField durationField32 = chronology28.days();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType9.getField(chronology28);
        java.lang.String str35 = dateTimeField34.getName();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.millisOfSecond();
        java.util.Locale locale49 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.millisOfSecond();
        org.joda.time.DurationField durationField62 = chronology58.seconds();
        org.joda.time.DurationField durationField63 = chronology58.minutes();
        org.joda.time.DateTimeField dateTimeField64 = chronology58.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology58.monthOfYear();
        int int66 = dateTime55.get(dateTimeField65);
        long long69 = dateTimeField65.addWrapField((long) 80, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusHours((int) (byte) 0);
        boolean boolean83 = dateTime81.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone85 = dateTimeZone84.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime81.toMutableDateTime(dateTimeZone84);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = dateTimeZone84.getName((long) (byte) 1, locale88);
        java.lang.String str90 = locale88.getScript();
        java.lang.String str91 = property74.getAsShortText(locale88);
        java.lang.String str92 = locale88.getDisplayScript();
        int int93 = dateTimeField65.getMaximumTextLength(locale88);
        java.lang.String str94 = locale88.getDisplayVariant();
        java.lang.String str95 = locale49.getDisplayCountry(locale88);
        java.util.Locale.setDefault(locale49);
        java.lang.String str97 = dateTimeField45.getAsShortText((long) 27072, locale49);
        java.lang.String str98 = dateTimeField34.getAsShortText((long) 270, locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime51", (dateTime40.compareTo(dateTime51) == 0) == dateTime40.equals(dateTime51));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1131");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(970);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis(538);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withCenturyOfEra(309);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMonths(0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(readableDuration24, 853);
        org.joda.time.DateTime dateTime28 = dateTime23.withMillisOfDay(57);
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        int int30 = dateTime23.getMinuteOfDay();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfDay();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology37);
        boolean boolean42 = localDateTime7.equals((java.lang.Object) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withWeekyear((-1));
        org.joda.time.DateTime.Property property47 = dateTime44.yearOfCentury();
        int int48 = property47.getMaximumValueOverall();
        org.joda.time.DateTime dateTime49 = property47.roundFloorCopy();
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(214);
        org.joda.time.DateTime dateTime53 = dateTime49.withWeekyear(695);
        java.lang.String str54 = dateTime49.toString();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime49.toMutableDateTimeISO();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("-0001-02-23t07:26:18.562+00:00:00.052 (DATETIMEFIELD[CLOCKHOUROFHALFDAY],DateTimeField[weekOfWeekyear])");
        java.util.Calendar calendar58 = mutableDateTime55.toCalendar(locale57);
        java.util.Calendar calendar59 = dateTime41.toCalendar(locale57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime44", (dateTime15.compareTo(dateTime44) == 0) == dateTime15.equals(dateTime44));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1132");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(22);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        int int21 = dateTimeParserBucket19.getOffset();
        boolean boolean23 = dateTimeParserBucket19.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket19.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime12.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime28", (dateTime12.compareTo(mutableDateTime28) == 0) == dateTime12.equals(mutableDateTime28));
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1133");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.millisOfSecond();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(52914310L, chronology9, locale21);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.secondOfDay();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.era();
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.dayOfYear();
        boolean boolean49 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray51 = chronology28.get((org.joda.time.ReadablePartial) localDateTime43, (-1510245249275L));
        org.joda.time.DateTimeField dateTimeField52 = chronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField53 = chronology28.year();
        dateTimeParserBucket25.saveField(dateTimeField53, 479);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusMillis(603);
        int int63 = localDateTime62.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        boolean boolean67 = dateTime65.isBefore(readableInstant66);
        org.joda.time.DateTime dateTime68 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean72 = locale71.hasExtensions();
        java.lang.String str73 = locale70.getDisplayLanguage(locale71);
        java.lang.String str74 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale70);
        java.util.Locale.setDefault(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime65", (dateTime4.compareTo(dateTime65) == 0) == dateTime4.equals(dateTime65));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1134");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.dayOfMonth();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology17 = chronology5.withUTC();
        boolean boolean18 = durationFieldType2.isSupported(chronology17);
        java.lang.String str19 = durationFieldType2.getName();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        int int29 = dateTime26.getWeekyear();
        org.joda.time.Chronology chronology30 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyear();
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category34);
        java.util.Locale.setDefault(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((-37742111999221L), chronology30, locale36, (java.lang.Integer) 508);
        org.joda.time.DateTimeField dateTimeField40 = chronology30.era();
        boolean boolean41 = durationFieldType20.isSupported(chronology30);
        org.joda.time.DurationField durationField42 = durationFieldType2.getField(chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime24", (dateTime16.compareTo(dateTime24) == 0) == dateTime16.equals(dateTime24));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1135");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology1, locale2, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        java.util.Date date20 = dateTime17.toDate();
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        boolean boolean23 = dateTime9.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = dateTime28.toCalendar(locale30);
        java.lang.String str33 = locale30.getScript();
        dateTimeParserBucket7.saveField(dateTimeFieldType22, "Property[minuteOfDay]", locale30);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType22.getRangeDurationType();
        java.lang.String str36 = dateTimeFieldType22.toString();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.Chronology chronology43 = chronology40.withUTC();
        org.joda.time.Chronology chronology44 = chronology43.withUTC();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMillis((int) (short) 1);
        long long57 = chronology43.set((org.joda.time.ReadablePartial) localDateTime55, 0L);
        org.joda.time.DateTimeField dateTimeField58 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = chronology43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(18114944L, chronology43);
        org.joda.time.DurationField durationField61 = chronology43.millis();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType22.getField(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime41", (dateTime9.compareTo(dateTime41) == 0) == dateTime9.equals(dateTime41));
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1136");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DateTime dateTime31 = property24.roundHalfFloorCopy();
        boolean boolean33 = dateTime31.isAfter((long) 441);
        org.joda.time.LocalDateTime localDateTime34 = dateTime31.toLocalDateTime();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        int int41 = dateTimeParserBucket40.getOffset();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((-1L));
        long long50 = dateTimeZone46.convertUTCToLocal((long) 734);
        dateTimeParserBucket40.setZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField58 = chronology54.seconds();
        org.joda.time.DurationField durationField59 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField60 = chronology54.era();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.monthOfYear();
        int int63 = dateTimeField61.getMaximumValue((long) 38);
        dateTimeParserBucket40.saveField(dateTimeField61, 445);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType77.getField(chronology80);
        int int84 = localDateTime74.get(dateTimeFieldType77);
        dateTimeParserBucket40.saveField(dateTimeFieldType77, 6);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType77.getDurationType();
        int int88 = dateTime31.get(dateTimeFieldType77);
        org.joda.time.DateTime dateTime90 = dateTime31.plusYears(31140);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime45", (dateTime13.compareTo(dateTime45) == 0) == dateTime13.equals(dateTime45));
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1137");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(609);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMillis(607);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        org.joda.time.DurationField durationField19 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        boolean boolean26 = dateTime24.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime24.toMutableDateTime(dateTimeZone27);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = dateTimeZone27.getName((long) (byte) 1, locale31);
        org.joda.time.Chronology chronology33 = chronology14.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology14.getZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 26751806, chronology14);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths(537);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray52 = localDateTime51.getValues();
        int[] intArray54 = dateTimeField43.addWrapField((org.joda.time.ReadablePartial) localDateTime48, 0, intArray52, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusHours(28);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = property59.addToCopy((long) 569);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.era();
        boolean boolean70 = localDateTime68.isSupported(dateTimeFieldType69);
        int int71 = localDateTime63.get(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime63.withYear(635);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.halfdayOfDay();
        org.joda.time.DurationField durationField80 = chronology76.millis();
        org.joda.time.DurationFieldType durationFieldType81 = durationField80.getType();
        boolean boolean82 = localDateTime63.isSupported(durationFieldType81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime61.withFieldAdded(durationFieldType81, 239);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime48.withFieldAdded(durationFieldType81, 93);
        org.joda.time.DateTime dateTime88 = dateTime37.withFieldAdded(durationFieldType81, 616);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime10.withFieldAdded(durationFieldType81, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime41", (dateTime22.compareTo(dateTime41) == 0) == dateTime22.equals(dateTime41));
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1138");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.era();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.dayOfYear();
        boolean boolean25 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray27 = chronology4.get((org.joda.time.ReadablePartial) localDateTime19, (-1510245249275L));
        org.joda.time.DateTimeField dateTimeField28 = chronology4.minuteOfHour();
        org.joda.time.Chronology chronology29 = chronology4.withUTC();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) "2050-11-01T00:00:00.052", chronology4);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        java.lang.String str38 = chronology36.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.dayOfWeek();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        dateTimeParserBucket46.saveField(dateTimeFieldType50, "it", locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology36, locale52, (java.lang.Integer) 9, 538);
        java.lang.String str59 = nameProvider31.getShortName(locale52, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Set<java.lang.String> strSet60 = locale52.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 75086, chronology4, locale52, (java.lang.Integer) 880);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekyear((-1));
        org.joda.time.DateTime dateTime68 = dateTime66.plusMonths(10);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfDay();
        org.joda.time.DateTime.Property property70 = dateTime68.yearOfEra();
        org.joda.time.DateTime dateTime72 = dateTime68.minusMinutes(648);
        org.joda.time.DateTime dateTime74 = dateTime72.plusSeconds(569);
        org.joda.time.DateTime dateTime76 = dateTime72.plusDays(575);
        org.joda.time.DateTime.Property property77 = dateTime76.secondOfDay();
        org.joda.time.DateTimeField dateTimeField78 = property77.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = dateTimeField78.getType();
        dateTimeParserBucket62.saveField(dateTimeField78, 624);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime64", (dateTime5.compareTo(dateTime64) == 0) == dateTime5.equals(dateTime64));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1139");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.DateTime dateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis(877);
        org.joda.time.DateTime.Property property14 = dateTime13.monthOfYear();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        java.lang.String str39 = dateTimeField37.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfEvenCopy();
        int int45 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean48 = localDateTime44.equals((java.lang.Object) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int53 = localDateTime50.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime47.property(dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType52.getRangeDurationType();
        int int56 = localDateTime32.get(dateTimeFieldType52);
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        boolean boolean59 = localDateTime32.equals((java.lang.Object) category57);
        java.util.Locale.Category category60 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category60, locale61);
        boolean boolean63 = locale61.hasExtensions();
        java.util.Locale.setDefault(category57, locale61);
        java.lang.String str65 = locale61.getScript();
        java.lang.String str66 = dateTimeField22.getAsShortText(273, locale61);
        java.lang.String str67 = property14.getAsShortText(locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1140");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(99);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime10.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(26814912L);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(26840081);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (byte) 100);
        boolean boolean42 = dateTime40.isBefore((long) ' ');
        int int43 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = dateTime40.minusYears(20);
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime.Property property47 = dateTime45.dayOfMonth();
        java.util.Locale locale51 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str52 = property47.getAsText(locale51);
        org.joda.time.DateTime dateTime54 = property47.setCopy(12);
        int int55 = dateTime54.getCenturyOfEra();
        org.joda.time.DateTime.Property property56 = dateTime54.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours((int) (byte) 0);
        java.util.Date date61 = dateTime58.toDate();
        org.joda.time.DateTime.Property property62 = dateTime58.dayOfMonth();
        org.joda.time.DateTime.Property property63 = dateTime58.dayOfMonth();
        java.lang.String str64 = property63.getAsString();
        org.joda.time.DateTime dateTime66 = property63.addToCopy(837);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes(569);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.halfdays();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.year();
        org.joda.time.DateTime dateTime72 = dateTime54.withChronology(chronology69);
        org.joda.time.DateTime.Property property73 = dateTime72.weekyear();
        boolean boolean74 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime36", (dateTime3.compareTo(dateTime36) == 0) == dateTime3.equals(dateTime36));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1141");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        java.lang.Integer int11 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property26 = dateTime23.centuryOfEra();
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime20, (-1), locale27);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = dateTimeField16.getAsShortText((int) (byte) 10, locale32);
        dateTimeParserBucket5.saveField(dateTimeField16, 4);
        long long38 = dateTimeField16.roundHalfFloor((long) 645);
        long long40 = dateTimeField16.roundFloor((-700L));
        java.lang.String str42 = dateTimeField16.getAsText((long) 925);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        java.lang.String str49 = dateTimeField47.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfEvenCopy();
        int int55 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean58 = localDateTime54.equals((java.lang.Object) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int63 = localDateTime60.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime57.property(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int70 = localDateTime66.get(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime66.year();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusMillis(0);
        boolean boolean77 = localDateTime57.isAfter((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property78 = localDateTime74.centuryOfEra();
        java.lang.String str79 = property78.getName();
        org.joda.time.LocalDateTime localDateTime81 = property78.setCopy(2922789);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusYears(832);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.yearOfEra();
        int int85 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime46", (dateTime23.compareTo(dateTime46) == 0) == dateTime23.equals(dateTime46));
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1142");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours((int) (byte) 0);
        boolean boolean9 = dateTime7.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        boolean boolean14 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 603, chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology16);
        long long25 = chronology16.add(4519556595L, (-489598031L), 21);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.yearOfEra();
        org.joda.time.DurationField durationField28 = durationFieldType1.getField(chronology16);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket34.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property56 = dateTime53.year();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusYears(558);
        boolean boolean64 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime58);
        int int65 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime66 = dateTime58.toLocalDateTime();
        org.joda.time.Chronology chronology67 = dateTime58.getChronology();
        org.joda.time.DurationField durationField68 = durationFieldType1.getField(chronology67);
        java.lang.String str69 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology72);
        java.lang.String str74 = chronology72.toString();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.centuryOfEra();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology72);
        org.joda.time.DurationField durationField78 = durationFieldType1.getField(chronology72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime73", (dateTime5.compareTo(dateTime73) == 0) == dateTime5.equals(dateTime73));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1143");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.Chronology chronology47 = chronology41.withZone(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology47.add(readablePeriod48, 0L, 603);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusWeeks((-593));
        long long62 = chronology47.set((org.joda.time.ReadablePartial) localDateTime60, (long) 685);
        org.joda.time.DurationField durationField63 = chronology47.centuries();
        org.joda.time.DurationField durationField64 = durationFieldType38.getField(chronology47);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField71 = chronology67.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology67.year();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.hourOfDay();
        boolean boolean75 = durationFieldType38.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField76 = chronology67.minuteOfDay();
        org.joda.time.DateTime dateTime77 = dateTime37.withChronology(chronology67);
        org.joda.time.DateTimeField dateTimeField78 = chronology67.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime42", (dateTime25.compareTo(dateTime42) == 0) == dateTime25.equals(dateTime42));
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1144");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMonths(13);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra(274);
        boolean boolean22 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear((-1));
        org.joda.time.DateTime dateTime28 = dateTime24.withMillisOfDay(0);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear((-1));
        org.joda.time.DateTime dateTime47 = dateTime43.plusHours((int) (byte) 100);
        boolean boolean49 = dateTime47.isBefore((long) ' ');
        int int50 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime47);
        int int52 = dateTimeZone40.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime53 = dateTime28.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withWeekyear((-1));
        boolean boolean58 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime57);
        java.util.Date date59 = dateTime28.toDate();
        org.joda.time.DateTime dateTime61 = dateTime28.withYear(687);
        org.joda.time.DateTime dateTime63 = dateTime28.minusMinutes(408);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int69 = localDateTime65.get(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int76 = localDateTime73.get(dateTimeFieldType75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime65.property(dateTimeFieldType75);
        boolean boolean78 = dateTime63.isSupported(dateTimeFieldType75);
        int int79 = localDateTime3.get(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType75.getDurationType();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now(chronology84);
        org.joda.time.DateTimeField dateTimeField86 = chronology84.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.millisOfSecond();
        org.joda.time.DurationField durationField88 = chronology84.seconds();
        org.joda.time.DurationField durationField89 = chronology84.minutes();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.era();
        org.joda.time.DateTimeField dateTimeField91 = chronology84.monthOfYear();
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((long) 854, chronology84);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(chronology84);
        org.joda.time.DateTimeField dateTimeField94 = chronology84.hourOfHalfday();
        org.joda.time.DurationField durationField95 = durationFieldType80.getField(chronology84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime93", (dateTime24.compareTo(dateTime93) == 0) == dateTime24.equals(dateTime93));
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1145");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = chronology9.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((-1L));
        long long15 = dateTimeZone11.convertUTCToLocal((long) 734);
        dateTimeParserBucket5.setZone(dateTimeZone11);
        java.lang.Integer int17 = dateTimeParserBucket5.getPivotYear();
        java.lang.Integer int18 = dateTimeParserBucket5.getPivotYear();
        java.lang.Integer int19 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getName((long) 'u');
        java.lang.String str45 = dateTimeZone39.getNameKey((long) 1978);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar50 = dateTime49.toGregorianCalendar();
        int int51 = dateTime49.getMillisOfSecond();
        org.joda.time.DateTime.Property property52 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime49.minusMinutes(25);
        int int55 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        java.lang.Integer int65 = dateTimeParserBucket61.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket61.setZone(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear((-1));
        org.joda.time.DateTime dateTime73 = dateTime69.plusHours((int) (byte) 100);
        boolean boolean75 = dateTime73.isBefore((long) ' ');
        int int76 = dateTimeZone66.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDateTime localDateTime77 = null;
        boolean boolean78 = dateTimeZone66.isLocalDateTimeGap(localDateTime77);
        long long80 = dateTimeZone39.getMillisKeepLocal(dateTimeZone66, (long) 272);
        java.lang.String str81 = dateTimeZone39.getID();
        dateTimeParserBucket5.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket5.getZone();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 401);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime47", (dateTime10.compareTo(dateTime47) == 0) == dateTime10.equals(dateTime47));
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1146");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        int int15 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        int int17 = dateTime13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(538);
        org.joda.time.DateTime dateTime27 = dateTime23.withWeekyear(274);
        int int28 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.weekyears();
        org.joda.time.DateTime dateTime34 = dateTime23.withChronology(chronology31);
        int int35 = dateTime34.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime32", (dateTime1.compareTo(dateTime32) == 0) == dateTime1.equals(dateTime32));
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1147");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusHours(49);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName(100L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        java.util.Date date16 = dateTime13.toDate();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        int int24 = dateTime19.getDayOfYear();
        int int25 = property17.getDifference((org.joda.time.ReadableInstant) dateTime19);
        long long26 = dateTime19.getMillis();
        int int27 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property28 = dateTime19.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        boolean boolean30 = localDateTime5.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DurationField durationField36 = chronology33.hours();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DurationField durationField42 = chronology39.hours();
        int int43 = durationField36.compareTo(durationField42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DurationField durationField49 = chronology46.hours();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DurationField durationField55 = chronology52.hours();
        int int56 = durationField49.compareTo(durationField55);
        int int57 = durationField36.compareTo(durationField55);
        org.joda.time.DurationFieldType durationFieldType58 = durationField36.getType();
        java.lang.String str59 = durationFieldType58.toString();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        int int67 = dateTimeParserBucket65.getOffset();
        boolean boolean69 = dateTimeParserBucket65.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket65.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology72 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.days();
        org.joda.time.DurationField durationField74 = chronology72.days();
        org.joda.time.DurationField durationField75 = durationFieldType58.getField(chronology72);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime5.withFieldAdded(durationFieldType58, 34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime34", (dateTime13.compareTo(dateTime34) == 0) == dateTime13.equals(dateTime34));
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1148");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.millisOfDay();
        org.joda.time.DurationField durationField11 = chronology3.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfMonth();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale locale14 = builder13.build();
        java.util.Locale.Builder builder16 = builder13.removeUnicodeLocaleAttribute("1969");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = property32.getAsText(locale33);
        java.lang.String str36 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime26, (-1), locale33);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = dateTimeField22.getAsShortText((int) (byte) 10, locale38);
        java.lang.String str41 = locale38.getDisplayName();
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale38.getDisplayName(locale43);
        java.util.Locale.Builder builder45 = builder17.setLocale(locale38);
        java.util.Locale locale46 = builder17.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 379, chronology3, locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime29", (dateTime4.compareTo(dateTime29) == 0) == dateTime4.equals(dateTime29));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1149");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        int int7 = dateTimeParserBucket6.getOffset();
        java.lang.Integer int8 = dateTimeParserBucket6.getPivotYear();
        dateTimeParserBucket6.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int14 = dateTimeZone12.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        dateTimeParserBucket6.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 26751, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        int int27 = dateTime23.get(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = property42.getAsText(locale43);
        java.lang.String str46 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime36, (-1), locale43);
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = dateTimeField32.getAsShortText((int) (byte) 10, locale48);
        long long52 = dateTimeField32.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar58 = dateTime57.toGregorianCalendar();
        int int59 = dateTime57.getMillisOfSecond();
        org.joda.time.DateTime.Property property60 = dateTime57.minuteOfHour();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property66 = dateTime63.centuryOfEra();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = locale67.getLanguage();
        java.lang.String str69 = property66.getAsText(locale67);
        java.lang.String str70 = locale61.getDisplayName(locale67);
        int int71 = property60.getMaximumTextLength(locale67);
        java.util.Set<java.lang.String> strSet72 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str73 = dateTimeField32.getAsText((int) (short) 100, locale67);
        java.util.Locale.setDefault(locale67);
        java.util.Calendar calendar75 = dateTime23.toCalendar(locale67);
        org.joda.time.DateTime.Property property76 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime77 = dateTime23.toDateTimeISO();
        boolean boolean78 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime39", (dateTime15.compareTo(dateTime39) == 0) == dateTime15.equals(dateTime39));
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1150");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        int int14 = dateTime9.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology54 = chronology17.withZone(dateTimeZone48);
        java.lang.String str56 = dateTimeZone48.getShortName((long) 28);
        java.lang.String str58 = dateTimeZone48.getNameKey((long) 745);
        org.joda.time.DateTime dateTime59 = dateTime9.withZoneRetainFields(dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime18", (dateTime1.compareTo(dateTime18) == 0) == dateTime1.equals(dateTime18));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1151");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(139);
        org.joda.time.DateTime dateTime10 = dateTime5.minusSeconds(26752);
        boolean boolean12 = dateTime5.isBefore((long) 18);
        org.joda.time.DateTime dateTime13 = dateTime5.withLaterOffsetAtOverlap();
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology54 = chronology17.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField55 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime56 = dateTime13.withChronology(chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime18", (dateTime1.compareTo(dateTime18) == 0) == dateTime1.equals(dateTime18));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1152");
        java.util.Locale locale1 = new java.util.Locale("2022-02-22T07:30:20.032+00:00:00.052");
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider2);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology7, locale23, (java.lang.Integer) 9, 538);
        java.lang.String str30 = nameProvider2.getShortName(locale23, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str35 = nameProvider2.getName(locale31, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Locale locale36 = null;
        java.lang.String str39 = nameProvider2.getName(locale36, "java.io.IOException: it", "2022-02-22T07:26:30.260Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider2);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.hourOfHalfday();
        long long54 = chronology48.add(26916893L, (long) 452, 507);
        org.joda.time.DateTimeField dateTimeField55 = chronology48.halfdayOfDay();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("1969-11-21T04:00:00.000");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(27000314L, chronology48, locale57, (java.lang.Integer) 26788);
        java.lang.String str62 = nameProvider2.getName(locale57, "956", "-0001-12-22T20:43:35.944+00:00:00.052");
        java.lang.String str63 = locale1.getDisplayLanguage(locale57);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.tz.NameProvider nameProvider66 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusHours((int) (byte) 0);
        boolean boolean73 = dateTime71.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = dateTime71.toString(dateTimeFormatter74);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = locale77.getDisplayName();
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("20");
        java.lang.String str81 = locale77.getDisplayVariant(locale80);
        java.lang.String str82 = dateTime71.toString("1969", locale77);
        org.joda.time.DateTime.Property property83 = dateTime71.hourOfDay();
        org.joda.time.DateTime dateTime84 = dateTime71.withTimeAtStartOfDay();
        java.util.Locale locale85 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean86 = locale85.hasExtensions();
        java.util.Calendar calendar87 = dateTime71.toCalendar(locale85);
        java.lang.String str90 = nameProvider66.getShortName(locale85, "2020", "2022-02-22T07:26:30.740+00:00:00.052");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) 41280, chronology65, locale85);
        boolean boolean92 = locale85.hasExtensions();
        java.lang.String str93 = locale57.getDisplayVariant(locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime69", (dateTime8.compareTo(dateTime69) == 0) == dateTime8.equals(dateTime69));
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1153");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.Chronology chronology12 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology18.hours();
        org.joda.time.DurationField durationField23 = chronology18.weeks();
        org.joda.time.DurationField durationField24 = chronology18.years();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 26781995, chronology18, locale25);
        org.joda.time.DurationField durationField27 = chronology18.hours();
        boolean boolean28 = dateTimeFieldType14.isSupported(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1154");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTime dateTime6 = property4.setCopy(558);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime10.plusHours((int) (byte) 100);
        boolean boolean16 = dateTime14.isBefore((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime14.plusYears(26751557);
        int int21 = dateTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime20.withZoneRetainFields(dateTimeZone25);
        int int27 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        long long31 = dateTimeZone28.nextTransition(24235718400000L);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        java.lang.Integer int51 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket47.setZone(dateTimeZone52);
        dateTimeParserBucket38.setZone(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket38.getZone();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusMonths((int) (byte) 100);
        int[] intArray64 = localDateTime63.getValues();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.minusDays(4);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology71);
        java.lang.String str73 = chronology71.toString();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField75 = chronology71.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField76.getType();
        int int78 = localDateTime68.indexOf(dateTimeFieldType77);
        int int79 = localDateTime58.get(dateTimeFieldType77);
        boolean boolean80 = dateTimeZone28.isLocalDateTimeGap(localDateTime58);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime6.toMutableDateTime(dateTimeZone28);
        boolean boolean84 = dateTime6.isAfter(1645515266408L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime72 and dateTime81", (dateTime72.compareTo(dateTime81) == 0) == dateTime72.equals(dateTime81));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1155");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField15.getType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology21.minutes();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        dateTimeParserBucket35.saveField(dateTimeFieldType39, "it", locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(673L, chronology21, locale41, (java.lang.Integer) 10, 453);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField47 = chronology21.monthOfYear();
        org.joda.time.DurationField durationField48 = chronology21.halfdays();
        boolean boolean49 = dateTimeFieldType16.isSupported(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime46", (dateTime1.compareTo(dateTime46) == 0) == dateTime1.equals(dateTime46));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1156");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((-1));
        org.joda.time.DateTime dateTime10 = dateTime6.withMillisOfDay(0);
        int int11 = dateTime10.getDayOfYear();
        boolean boolean12 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMonths(840);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((-1));
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        java.lang.String str24 = dateTimeZone21.getName(2966400000L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime18, dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(103);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        dateTimeParserBucket34.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        java.lang.String str46 = dateTimeField44.getAsShortText((long) 28);
        dateTimeParserBucket34.saveField(dateTimeField44, 100);
        dateTimeParserBucket34.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket34.getZone();
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) 26757772);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.DurationField durationField62 = chronology58.millis();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.secondOfDay();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DurationField durationField65 = chronology58.weeks();
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale67 = java.util.Locale.getDefault(category66);
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.lang.String str69 = locale68.getLanguage();
        java.util.Set<java.lang.Character> charSet70 = locale68.getExtensionKeys();
        java.util.Locale.setDefault(category66, locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology58, locale68, (java.lang.Integer) 407, 195);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean76 = locale75.hasExtensions();
        java.lang.String str77 = locale68.getDisplayLanguage(locale75);
        java.lang.String str78 = dateTimeZone51.getShortName((long) 26813508, locale75);
        java.lang.String str80 = dateTimeZone51.getShortName(26833067L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.DateTime dateTime82 = dateTime26.withZone(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime59", (dateTime1.compareTo(dateTime59) == 0) == dateTime1.equals(dateTime59));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1157");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.hourOfDay();
        org.joda.time.DateTime dateTime10 = localDateTime4.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfDay(364);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(1167043702046000L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DurationField durationField28 = chronology24.seconds();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = chronology24.minutes();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        dateTimeParserBucket38.saveField(dateTimeFieldType42, "it", locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(673L, chronology24, locale44, (java.lang.Integer) 10, 453);
        java.lang.String str49 = locale44.getDisplayName();
        java.util.Calendar calendar50 = dateTime10.toCalendar(locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime20", (dateTime10.compareTo(dateTime20) == 0) == dateTime10.equals(dateTime20));
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1158");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        int int29 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear((-1));
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 10);
        int int43 = dateTime42.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.withDurationAdded(readableDuration44, (int) (byte) 0);
        boolean boolean47 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime35.minusMonths(173);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        java.util.Date date54 = dateTime51.toDate();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfMonth();
        org.joda.time.DateTime.Property property56 = dateTime51.dayOfMonth();
        java.lang.String str57 = property56.getAsString();
        org.joda.time.DateTime dateTime59 = property56.addToCopy(837);
        org.joda.time.DateTime dateTime61 = dateTime59.withYear(49);
        boolean boolean62 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime35.minus(readablePeriod63);
        org.joda.time.DateTime dateTime65 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfDay();
        org.joda.time.DateTime.Property property67 = dateTime65.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear((-1));
        org.joda.time.DateTime dateTime73 = dateTime71.plusMonths(10);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        int int75 = dateTime73.getYearOfEra();
        org.joda.time.DateTime.Property property76 = dateTime73.secondOfDay();
        org.joda.time.DateTime dateTime78 = dateTime73.withDayOfYear(241);
        boolean boolean80 = dateTime78.isEqual((long) 50);
        org.joda.time.DateTime dateTime82 = dateTime78.withYear(810);
        org.joda.time.Instant instant83 = dateTime78.toInstant();
        org.joda.time.DateTime dateTime85 = dateTime78.plusDays(485);
        long long86 = property67.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime78 and instant83", (dateTime78.compareTo(instant83) == 0) == dateTime78.equals(instant83));
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1159");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale locale10 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        java.util.Date date17 = dateTime14.toDate();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfMonth();
        org.joda.time.DateTime.Property property19 = dateTime14.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = locale10.getDisplayVariant(locale20);
        java.lang.String str24 = locale10.getScript();
        java.lang.String str25 = dateTimeField5.getAsText((long) 761, locale10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime14", (dateTime3.compareTo(dateTime14) == 0) == dateTime3.equals(dateTime14));
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1160");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField14 = chronology8.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField14, and durationField11", !(durationField11.compareTo(durationField14) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField14.compareTo(durationField11))));
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1161");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        java.lang.String str28 = property4.getAsShortText(locale25);
        org.joda.time.DurationField durationField29 = property4.getRangeDurationField();
        boolean boolean30 = durationField29.isSupported();
        long long33 = durationField29.getDifferenceAsLong(26760848L, (-31535999000L));
        org.joda.time.DurationFieldType durationFieldType34 = durationField29.getType();
        java.lang.String str35 = durationFieldType34.toString();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology37, locale38, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime45.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        java.util.Date date56 = dateTime53.toDate();
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property57.getFieldType();
        boolean boolean59 = dateTime45.isSupported(dateTimeFieldType58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.withWeekyear((-1));
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfSecond();
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Calendar calendar68 = dateTime64.toCalendar(locale66);
        java.lang.String str69 = locale66.getScript();
        dateTimeParserBucket43.saveField(dateTimeFieldType58, "Property[minuteOfDay]", locale66);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.halfdayOfDay();
        org.joda.time.DurationField durationField77 = chronology73.millis();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology73.getZone();
        org.joda.time.DateTimeField dateTimeField79 = chronology73.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField80 = chronology73.dayOfWeek();
        org.joda.time.DurationField durationField81 = chronology73.months();
        org.joda.time.DurationField durationField82 = chronology73.months();
        boolean boolean83 = dateTimeFieldType58.isSupported(chronology73);
        org.joda.time.DurationField durationField84 = durationFieldType34.getField(chronology73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime74", (dateTime16.compareTo(dateTime74) == 0) == dateTime16.equals(dateTime74));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1162");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = localDateTime8.getField(0);
        boolean boolean13 = dateTimeField12.isSupported();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyear();
        boolean boolean24 = dateTimeField23.isSupported();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(292L);
        int int27 = localDateTime26.size();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DurationField durationField36 = chronology32.seconds();
        org.joda.time.DurationField durationField37 = chronology32.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.era();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = locale28.getDisplayCountry(locale45);
        java.util.Set<java.lang.String> strSet49 = locale45.getUnicodeLocaleKeys();
        java.lang.String str50 = locale45.getCountry();
        java.lang.String str51 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale45);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime26.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime26.minusMonths(576);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology60, locale61, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField65 = null;
        dateTimeParserBucket64.saveField(dateTimeField65, (int) (short) 0);
        java.util.Locale locale68 = dateTimeParserBucket64.getLocale();
        java.util.Locale.setDefault(category58, locale68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property75 = dateTime72.centuryOfEra();
        java.util.Locale locale76 = java.util.Locale.ITALIAN;
        java.lang.String str77 = locale76.getLanguage();
        java.lang.String str78 = property75.getAsText(locale76);
        java.lang.String str79 = locale70.getDisplayName(locale76);
        java.lang.String str80 = locale76.getISO3Language();
        java.util.Locale.setDefault(category58, locale76);
        java.util.Set<java.lang.String> strSet82 = locale76.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale76.getLanguage();
        java.util.Locale locale84 = null;
        java.lang.String str85 = locale76.getDisplayVariant(locale84);
        java.util.Locale locale86 = locale76.stripExtensions();
        java.lang.String str87 = locale86.getDisplayName();
        java.lang.String str88 = locale86.getVariant();
        java.util.Locale.setDefault(locale86);
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale90.getScript();
        java.lang.String str92 = locale90.getDisplayVariant();
        java.util.Set<java.lang.String> strSet93 = locale90.getUnicodeLocaleAttributes();
        java.lang.String str94 = locale90.getDisplayScript();
        java.lang.String str95 = locale86.getDisplayName(locale90);
        java.lang.String str96 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, 27166380, locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime72", (dateTime17.compareTo(dateTime72) == 0) == dateTime17.equals(dateTime72));
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1163");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.secondOfMinute();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        int int24 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime23.getEra();
        java.lang.String str27 = localDateTime23.toString("1388");
        org.joda.time.Chronology chronology28 = localDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime32.plusMonths(10);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        org.joda.time.DateTime dateTime37 = property36.roundFloorCopy();
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.util.Locale locale48 = dateTimeParserBucket44.getLocale();
        java.util.Locale.setDefault(category38, locale48);
        java.util.Locale locale51 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category38, locale51);
        java.util.Locale locale53 = java.util.Locale.getDefault(category38);
        int int54 = property36.getMaximumTextLength(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 964, chronology28, locale53);
        java.lang.String str56 = property11.getAsShortText(locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1164");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, 853);
        org.joda.time.DateTime dateTime16 = dateTime11.withMillisOfDay(57);
        int int17 = dateTime11.getWeekyear();
        long long18 = dateTime11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded((long) '#', 837);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime20.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime20.withMillisOfSecond(0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        boolean boolean48 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusSeconds(563);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.hourOfDay();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology65, locale66, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField70 = null;
        dateTimeParserBucket69.saveField(dateTimeField70, (int) (short) 0);
        java.lang.Integer int73 = dateTimeParserBucket69.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket69.setZone(dateTimeZone74);
        dateTimeParserBucket60.setZone(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeParserBucket60.getZone();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.minusMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.withWeekyear((-1));
        org.joda.time.DateTime dateTime87 = dateTime83.plusHours((int) (byte) 100);
        int int88 = dateTime83.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str90 = dateTimeFieldType89.getName();
        int int91 = dateTime83.get(dateTimeFieldType89);
        org.joda.time.LocalDateTime.Property property92 = localDateTime78.property(dateTimeFieldType89);
        int int93 = localDateTime52.get(dateTimeFieldType89);
        int int94 = dateTime20.get(dateTimeFieldType89);
        int int95 = dateTime11.get(dateTimeFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime20", (dateTime3.compareTo(dateTime20) == 0) == dateTime3.equals(dateTime20));
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1165");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        strSet17.clear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        boolean boolean24 = strSet17.contains((java.lang.Object) dateTimeZone23);
        java.util.stream.Stream<java.lang.String> strStream25 = strSet17.stream();
        int int26 = strSet17.size();
        java.util.GregorianCalendar[] gregorianCalendarArray27 = new java.util.GregorianCalendar[] {};
        java.util.GregorianCalendar[] gregorianCalendarArray28 = strSet17.toArray(gregorianCalendarArray27);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getMillisOfSecond();
        org.joda.time.DateTime.Property property38 = dateTime35.minuteOfHour();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property44 = dateTime41.centuryOfEra();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = property44.getAsText(locale45);
        java.lang.String str48 = locale39.getDisplayName(locale45);
        int int49 = property38.getMaximumTextLength(locale45);
        java.util.Set<java.lang.String> strSet50 = locale45.getUnicodeLocaleAttributes();
        int int51 = strSet50.size();
        int int52 = strSet50.size();
        boolean boolean53 = strSet31.addAll((java.util.Collection<java.lang.String>) strSet50);
        java.util.Locale locale56 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleKeys();
        boolean boolean58 = strSet50.removeAll((java.util.Collection<java.lang.String>) strSet57);
        boolean boolean60 = strSet50.contains((java.lang.Object) 1645487981948L);
        boolean boolean61 = strSet17.equals((java.lang.Object) boolean60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime33", (dateTime22.compareTo(dateTime33) == 0) == dateTime22.equals(dateTime33));
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1166");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        int int6 = dateTime5.getCenturyOfEra();
        boolean boolean8 = dateTime5.isAfter(1L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear(2022);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property38 = dateTime35.centuryOfEra();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime32, (-1), locale39);
        java.util.Locale.setDefault(locale39);
        java.lang.String str44 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime23, locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        org.joda.time.LocalDateTime.Property property47 = localDateTime23.property(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType45.getDurationType();
        boolean boolean49 = dateTime5.isSupported(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType45.getDurationType();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField73 = null;
        dateTimeParserBucket72.saveField(dateTimeField73, (int) (short) 0);
        java.lang.Integer int76 = dateTimeParserBucket72.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket72.setZone(dateTimeZone77);
        dateTimeParserBucket63.setZone(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeParserBucket63.getZone();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime81);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.hourOfDay();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime84.withYearOfEra(36000000);
        long long89 = chronology53.set((org.joda.time.ReadablePartial) localDateTime84, (-23950053200684L));
        org.joda.time.DateTimeField dateTimeField90 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField91 = chronology53.minuteOfDay();
        boolean boolean92 = durationFieldType50.isSupported(chronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime54", (dateTime1.compareTo(dateTime54) == 0) == dateTime1.equals(dateTime54));
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1167");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        int int16 = localDateTime14.getCenturyOfEra();
        int int17 = localDateTime14.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withDurationAdded(readableDuration18, 386);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        java.lang.Integer int31 = dateTimeParserBucket27.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket27.setZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime35.plusHours((int) (byte) 100);
        boolean boolean41 = dateTime39.isBefore((long) ' ');
        int int42 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime44 = dateTime39.minus((long) 51);
        int int45 = dateTime44.getEra();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear((-1));
        org.joda.time.DateTime dateTime51 = dateTime47.plusHours((int) (byte) 100);
        boolean boolean53 = dateTime51.isBefore((long) ' ');
        org.joda.time.DateTime.Property property54 = dateTime51.weekOfWeekyear();
        org.joda.time.DateTime dateTime56 = dateTime51.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withPeriodAdded(readablePeriod57, 593);
        org.joda.time.DateTime dateTime61 = dateTime56.plusDays(837);
        org.joda.time.DateTime.Property property62 = dateTime56.weekOfWeekyear();
        java.util.Date date63 = dateTime56.toDate();
        boolean boolean64 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime56.getZone();
        org.joda.time.DateTime dateTime67 = dateTime56.plusHours(839);
        long long68 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1168");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        int int17 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMonthOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone21.getOffset(readableInstant23);
        org.joda.time.DateTime dateTime25 = dateTime6.toDateTime(dateTimeZone21);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.minusMinutes(0);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime25.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime25", (dateTime5.compareTo(dateTime25) == 0) == dateTime5.equals(dateTime25));
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1169");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.withChronology(chronology5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        boolean boolean30 = dateTimeZone26.isFixed();
        long long32 = dateTimeZone26.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone26);
        boolean boolean35 = dateTimeZone26.isStandardOffset((long) 2039);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.era();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withWeekyear((-49641120));
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minusMillis(26807154);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays(187);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds(26945778);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfSecond();
        boolean boolean55 = dateTimeZone26.isLocalDateTimeGap(localDateTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime6", (dateTime1.compareTo(dateTime6) == 0) == dateTime1.equals(dateTime6));
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1170");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.minusSeconds(241);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = property42.getAsText(locale43);
        java.lang.String str46 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime36, (-1), locale43);
        java.util.Locale.setDefault(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology21, locale43, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DurationField durationField51 = chronology21.centuries();
        org.joda.time.DurationField durationField52 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField53 = chronology21.year();
        org.joda.time.DateTime dateTime54 = dateTime17.toDateTime(chronology21);
        org.joda.time.DateTime dateTime56 = dateTime17.plusDays(10278964);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime54", (dateTime15.compareTo(dateTime54) == 0) == dateTime15.equals(dateTime54));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1171");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.era();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.dayOfYear();
        boolean boolean24 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        int[] intArray26 = chronology3.get((org.joda.time.ReadablePartial) localDateTime18, (-1510245249275L));
        org.joda.time.DateTimeField dateTimeField27 = chronology3.minuteOfHour();
        org.joda.time.Chronology chronology28 = chronology3.withUTC();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) "2050-11-01T00:00:00.052", chronology3);
        org.joda.time.Chronology chronology30 = chronology3.withUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DurationField durationField39 = chronology35.seconds();
        org.joda.time.DurationField durationField40 = chronology35.minutes();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        boolean boolean47 = dateTime45.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime45.toMutableDateTime(dateTimeZone48);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = dateTimeZone48.getName((long) (byte) 1, locale52);
        org.joda.time.Chronology chronology54 = chronology35.withZone(dateTimeZone48);
        long long58 = chronology54.add((long) 51, (long) 558, 175);
        org.joda.time.DurationField durationField59 = durationFieldType32.getField(chronology54);
        org.joda.time.DateTimeZone dateTimeZone60 = chronology54.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology30.withZone(dateTimeZone60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime43", (dateTime4.compareTo(dateTime43) == 0) == dateTime4.equals(dateTime43));
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1172");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField9 = chronology2.weekyears();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        java.lang.String str16 = dateTimeField14.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfEvenCopy();
        int int22 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.year();
        int int27 = property26.get();
        org.joda.time.DurationField durationField28 = property26.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime30 = property26.setCopy(581);
        int[] intArray32 = chronology2.get((org.joda.time.ReadablePartial) localDateTime30, (long) 617);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusDays(980);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        boolean boolean42 = dateTime40.isEqual((long) (short) 100);
        int int43 = dateTime40.getWeekyear();
        org.joda.time.Chronology chronology44 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider48 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        java.lang.String str55 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.dayOfWeek();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale69 = java.util.Locale.ROOT;
        dateTimeParserBucket63.saveField(dateTimeFieldType67, "it", locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology53, locale69, (java.lang.Integer) 9, 538);
        java.lang.String str76 = nameProvider48.getShortName(locale69, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.lang.String str78 = locale77.getVariant();
        java.lang.String str81 = nameProvider48.getName(locale77, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Set<java.lang.String> strSet82 = locale77.getUnicodeLocaleAttributes();
        java.util.Locale locale83 = locale77.stripExtensions();
        java.util.Locale locale84 = locale83.stripExtensions();
        java.lang.String str85 = dateTimeField46.getAsText((long) 682, locale84);
        int int86 = property35.getMaximumTextLength(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime38", (dateTime3.compareTo(dateTime38) == 0) == dateTime3.equals(dateTime38));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1173");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        java.lang.Integer int8 = dateTimeParserBucket5.getPivotYear();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 814);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        java.lang.String str17 = dateTimeField15.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        int int23 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime22.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.Chronology chronology27 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology26.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        dateTimeParserBucket5.setZone(dateTimeZone30);
        long long34 = dateTimeParserBucket5.computeMillis(false, "2022-02-15T07:29:17.493");
        org.joda.time.Chronology chronology35 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        long long49 = dateTimeField47.roundFloor((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusWeeks((-593));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekyear((-1));
        org.joda.time.DateTime dateTime64 = dateTime60.withMillisOfDay(0);
        org.joda.time.DateTime dateTime65 = localDateTime58.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime58.minusDays(26795614);
        int int68 = dateTimeField47.getMaximumValue((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DurationField durationField69 = dateTimeField47.getLeapDurationField();
        dateTimeParserBucket5.saveField(dateTimeField47, 95);
        int int72 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime60", (dateTime14.compareTo(dateTime60) == 0) == dateTime14.equals(dateTime60));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1174");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        java.lang.Object obj28 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 371);
        int int31 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.Chronology chronology41 = chronology35.withZone(dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology41.add(readablePeriod42, 0L, 603);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.minusWeeks((-593));
        long long56 = chronology41.set((org.joda.time.ReadablePartial) localDateTime54, (long) 685);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 52, chronology41);
        org.joda.time.DateTime dateTime59 = dateTime57.plus((long) 51);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMonths(248);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTime();
        boolean boolean63 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime61);
        dateTimeParserBucket5.setOffset(27284953);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime36", (dateTime19.compareTo(dateTime36) == 0) == dateTime19.equals(dateTime36));
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1175");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        java.util.Date date5 = dateTime2.toDate();
        org.joda.time.DateTime.Property property6 = dateTime2.dayOfMonth();
        org.joda.time.DateTime.Property property7 = dateTime2.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis((long) 26751);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours((int) (byte) 0);
        boolean boolean31 = dateTime29.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime29.toMutableDateTime(dateTimeZone32);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = dateTimeZone32.getName((long) (byte) 1, locale36);
        org.joda.time.Chronology chronology38 = chronology19.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property43 = dateTime40.centuryOfEra();
        org.joda.time.DurationField durationField44 = property43.getRangeDurationField();
        long long45 = property43.remainder();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = locale46.toLanguageTag();
        java.lang.String str50 = property43.getAsText(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology38, locale46, (java.lang.Integer) 180);
        java.util.Locale locale56 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str57 = locale46.getDisplayVariant(locale56);
        java.util.Locale.setDefault(category15, locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(109735689600948L, chronology14, locale56, (java.lang.Integer) 305, 26857154);
        dateTimeParserBucket61.setOffset((java.lang.Integer) 1510271869);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        int int70 = dateTimeField68.getLeapAmount(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField68.getType();
        dateTimeParserBucket61.saveField(dateTimeFieldType71, 249);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime81 = dateTime79.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime84 = dateTime81.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime81.getZone();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology88 = localDateTime87.getChronology();
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(chronology88);
        org.joda.time.LocalDateTime localDateTime90 = org.joda.time.LocalDateTime.now(chronology88);
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now(chronology88);
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime81.toMutableDateTime(chronology88);
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType71.getField(chronology88);
        org.joda.time.DateTimeField dateTimeField94 = chronology88.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime67", (dateTime2.compareTo(dateTime67) == 0) == dateTime2.equals(dateTime67));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1176");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField10 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        java.util.Locale locale16 = new java.util.Locale("DEU", "coreano");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property21 = dateTime18.centuryOfEra();
        org.joda.time.DurationField durationField22 = property21.getRangeDurationField();
        long long23 = property21.remainder();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.toLanguageTag();
        java.lang.String str28 = property21.getAsText(locale24);
        java.lang.String str29 = locale16.getDisplayScript(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(1645514824601L, chronology9, locale24, (java.lang.Integer) 26943427);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime18", (dateTime4.compareTo(dateTime18) == 0) == dateTime4.equals(dateTime18));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1177");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.millisOfDay();
        org.joda.time.DurationField durationField9 = chronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.dayOfYear();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.getISO3Country();
        java.lang.String str23 = locale18.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 914, chronology3, locale18, (java.lang.Integer) 27089800);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime14", (dateTime4.compareTo(dateTime14) == 0) == dateTime4.equals(dateTime14));
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1178");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.DurationField durationField9 = chronology3.weeks();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        int int16 = dateTimeParserBucket15.getOffset();
        java.lang.Integer int17 = dateTimeParserBucket15.getPivotYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology20.millis();
        java.lang.String str24 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.centuryOfEra();
        dateTimeParserBucket15.saveField(dateTimeField26, 6);
        dateTimeParserBucket15.setOffset((java.lang.Integer) 981);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket15.getZone();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.plusSeconds((int) (byte) 1);
        int int41 = localDateTime40.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plus(readablePeriod42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int45 = localDateTime43.get(dateTimeFieldType44);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.setLanguage("DEU");
        java.util.Locale.Builder builder50 = builder47.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((-1));
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths(10);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusHours((int) (byte) 0);
        java.util.Date date62 = dateTime59.toDate();
        org.joda.time.DateTime.Property property63 = dateTime59.dayOfMonth();
        org.joda.time.DateTime.Property property64 = dateTime59.dayOfMonth();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = property64.getAsText(locale65);
        java.lang.String str68 = property57.getAsShortText(locale65);
        org.joda.time.DateTime dateTime70 = property57.addToCopy(0L);
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean72 = locale71.hasExtensions();
        java.lang.String str73 = property57.getAsShortText(locale71);
        java.util.Locale locale74 = java.util.Locale.ITALIAN;
        java.lang.String str75 = locale74.getLanguage();
        java.lang.String str76 = locale74.toLanguageTag();
        java.util.Locale.setDefault(locale74);
        java.lang.String str78 = locale71.getDisplayScript(locale74);
        java.util.Locale.Builder builder79 = builder50.setLocale(locale74);
        dateTimeParserBucket15.saveField(dateTimeFieldType44, "2035-02-22T07:28:09.054Z", locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((-1510244995001L), chronology3, locale74, (java.lang.Integer) 375, 655);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime52", (dateTime4.compareTo(dateTime52) == 0) == dateTime4.equals(dateTime52));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1179");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int7 = localDateTime3.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.withYear(635);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology24.millis();
        org.joda.time.DurationFieldType durationFieldType29 = durationField28.getType();
        boolean boolean30 = localDateTime11.isSupported(durationFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime3.withFieldAdded(durationFieldType29, 533);
        org.joda.time.Chronology chronology33 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(26747984L, chronology33);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale.Builder builder38 = builder36.setLanguageTag("coreano");
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        int int44 = dateTime42.getMillisOfSecond();
        org.joda.time.DateTime dateTime46 = dateTime42.minusYears((int) 'x');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        int int51 = dateTimeField48.getMaximumTextLength(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.Builder builder53 = builder36.setLocale(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((-1446508773164L), chronology33, locale50, (java.lang.Integer) 951, 230);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime40", (dateTime25.compareTo(dateTime40) == 0) == dateTime25.equals(dateTime40));
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1180");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime15.getZone();
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getOffset((long) 'x');
        boolean boolean23 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.lang.String str27 = dateTimeZone25.toString();
        boolean boolean29 = dateTimeZone25.isStandardOffset((long) 170);
        long long33 = dateTimeZone25.convertLocalToUTC((long) 853, false, 26765426L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime37.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime46 = dateTime44.withMinuteOfHour((int) (short) 10);
        int int47 = dateTime46.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.withDurationAdded(readableDuration48, (int) (byte) 0);
        boolean boolean51 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime39.minusMonths(173);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours((int) (byte) 0);
        java.util.Date date58 = dateTime55.toDate();
        org.joda.time.DateTime.Property property59 = dateTime55.dayOfMonth();
        org.joda.time.DateTime.Property property60 = dateTime55.dayOfMonth();
        java.lang.String str61 = property60.getAsString();
        org.joda.time.DateTime dateTime63 = property60.addToCopy(837);
        org.joda.time.DateTime dateTime65 = dateTime63.withYear(49);
        boolean boolean66 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime39.getDayOfMonth();
        org.joda.time.DateTime dateTime69 = dateTime39.minusMinutes(1);
        org.joda.time.DateTime dateTime71 = dateTime39.plusMillis((-52));
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime39.getZone();
        long long74 = dateTimeZone25.getMillisKeepLocal(dateTimeZone72, (long) 386);
        java.lang.String str76 = dateTimeZone72.getNameKey((long) 557);
        long long79 = dateTimeZone72.convertLocalToUTC((long) 530, true);
        dateTimeParserBucket5.setZone(dateTimeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime35", (dateTime11.compareTo(dateTime35) == 0) == dateTime11.equals(dateTime35));
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1181");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        java.lang.Integer int11 = dateTimeParserBucket7.getOffsetInteger();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.centuryOfEra();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj1, chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.year();
        org.joda.time.DurationField durationField18 = chronology12.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(241L, chronology12);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        java.lang.String str25 = chronology23.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology29 = chronology23.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField30 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology29.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.halfdayOfDay();
        org.joda.time.DurationField durationField39 = chronology35.millis();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology35.getZone();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        long long44 = dateTimeZone32.getMillisKeepLocal(dateTimeZone42, (long) 2002);
        boolean boolean46 = dateTimeZone32.isStandardOffset((long) 343);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0, dateTimeZone32);
        int int49 = dateTimeZone32.getOffsetFromLocal(7137849626756L);
        org.joda.time.DateTime dateTime50 = localDateTime19.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology52, locale53, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField57 = null;
        dateTimeParserBucket56.saveField(dateTimeField57, (int) (short) 0);
        java.lang.Integer int60 = dateTimeParserBucket56.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket56.setZone(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekyear((-1));
        org.joda.time.DateTime dateTime68 = dateTime64.plusHours((int) (byte) 100);
        boolean boolean70 = dateTime68.isBefore((long) ' ');
        int int71 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime73 = dateTime68.minusYears(20);
        org.joda.time.DateTime.Property property74 = dateTime73.hourOfDay();
        org.joda.time.DateTime.Property property75 = dateTime73.dayOfMonth();
        java.util.Locale locale79 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str80 = property75.getAsText(locale79);
        org.joda.time.DateTime dateTime82 = property75.setCopy(12);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMillis(815);
        org.joda.time.DateTime dateTime85 = dateTime84.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime86 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime64", (dateTime36.compareTo(dateTime64) == 0) == dateTime36.equals(dateTime64));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1182");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.Chronology chronology13 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property18 = dateTime15.centuryOfEra();
        org.joda.time.DateTime dateTime20 = dateTime15.minusYears(558);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime20.plusYears(7);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        dateTimeParserBucket32.setZone(dateTimeZone46);
        java.lang.String str50 = dateTimeZone46.getNameKey((long) 25);
        long long52 = dateTimeZone46.previousTransition((long) 292278993);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        int int55 = dateTimeZone46.getOffsetFromLocal((-62167962726697L));
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime57 = dateTime26.withZone(dateTimeZone46);
        org.joda.time.Chronology chronology58 = chronology10.withZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.weekyearOfCentury();
        java.lang.String str65 = dateTimeField63.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundHalfEvenCopy();
        int int71 = dateTimeField63.getMinimumValue((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean74 = localDateTime70.equals((java.lang.Object) localDateTime73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        int int76 = localDateTime70.get(dateTimeFieldType75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime70.dayOfYear();
        int int78 = property77.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime83 = property81.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.withFieldAdded(durationFieldType85, 70);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plus(readablePeriod88);
        int int90 = property77.compareTo((org.joda.time.ReadablePartial) localDateTime89);
        int[] intArray92 = chronology10.get((org.joda.time.ReadablePartial) localDateTime89, (long) 1938);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime62", (dateTime15.compareTo(dateTime62) == 0) == dateTime15.equals(dateTime62));
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1183");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        java.lang.Integer int11 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime14.year();
        org.joda.time.DateTime dateTime19 = dateTime14.minusSeconds(241);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(2022);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusHours(49);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime32 = property29.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        java.util.Date date37 = dateTime34.toDate();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfMonth();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = property38.getAsShortText(locale39);
        int int41 = property29.getMaximumShortTextLength(locale39);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale42.getISO3Language();
        java.util.Locale locale46 = locale42.stripExtensions();
        java.lang.String str47 = locale42.getISO3Language();
        java.lang.String str48 = locale39.getDisplayLanguage(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology22, locale42);
        org.joda.time.DateTimeField dateTimeField50 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology22.secondOfDay();
        org.joda.time.ReadablePartial readablePartial52 = null;
        int int53 = dateTimeField51.getMaximumValue(readablePartial52);
        dateTimeParserBucket5.saveField(dateTimeField51, 0);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology58);
        java.lang.String str60 = chronology58.toString();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        java.lang.String str66 = chronology64.toString();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField69 = chronology64.weekyear();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(chronology64);
        int int71 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.weekyearOfCentury();
        java.lang.String str78 = dateTimeField76.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology81 = localDateTime80.getChronology();
        org.joda.time.LocalDateTime.Property property82 = localDateTime80.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime83 = property82.roundHalfEvenCopy();
        int int84 = dateTimeField76.getMinimumValue((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = localDateTime83.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime83);
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = dateTimeField61.getAsText((org.joda.time.ReadablePartial) localDateTime86, locale87);
        int int90 = localDateTime86.size();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime86.withMillisOfDay(514);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime92.plusMonths(4);
        org.joda.time.Chronology chronology95 = localDateTime94.getChronology();
        org.joda.time.DateTimeField dateTimeField96 = chronology95.yearOfEra();
        java.lang.String str97 = dateTimeField96.toString();
        dateTimeParserBucket5.saveField(dateTimeField96, 796);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime59", (dateTime14.compareTo(dateTime59) == 0) == dateTime14.equals(dateTime59));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1184");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        int int26 = dateTimeParserBucket25.getOffset();
        dateTimeParserBucket25.setPivotYear((java.lang.Integer) 290);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        long long35 = property33.remainder();
        org.joda.time.LocalDateTime localDateTime37 = property33.addToCopy(648);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.withMillisOfDay(0);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfMonth();
        org.joda.time.DateTime dateTime45 = property44.withMinimumValue();
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekyear((-1));
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.millisOfSecond();
        org.joda.time.DurationField durationField59 = chronology55.seconds();
        org.joda.time.DurationField durationField60 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.era();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.monthOfYear();
        int int63 = dateTime52.get(dateTimeField62);
        long long66 = dateTimeField62.addWrapField(2595600988L, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField62.getType();
        org.joda.time.DateTime.Property property68 = dateTime45.property(dateTimeFieldType67);
        boolean boolean69 = localDateTime37.isSupported(dateTimeFieldType67);
        dateTimeParserBucket25.saveField(dateTimeFieldType67, 1356);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1185");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property13 = dateTime10.centuryOfEra();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = property13.getAsText(locale14);
        java.lang.String str17 = locale8.getDisplayName(locale14);
        int int18 = property7.getMaximumTextLength(locale14);
        java.util.Set<java.lang.String> strSet19 = locale14.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.String[] strArray31 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "445", "hourOfDay", "778", "ita", "89", "2035", "gio", "2022-02-22T07:25:47.829+00:00:00.052" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours((int) (byte) 0);
        java.util.Date date38 = dateTime35.toDate();
        boolean boolean39 = strSet32.equals((java.lang.Object) dateTime35);
        boolean boolean40 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleAttributes();
        boolean boolean44 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet43);
        org.joda.time.tz.NameProvider nameProvider45 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider45);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfWeek();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        dateTimeParserBucket60.saveField(dateTimeFieldType64, "it", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology50, locale66, (java.lang.Integer) 9, 538);
        java.lang.String str73 = nameProvider45.getShortName(locale66, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Set<java.lang.String> strSet74 = locale66.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator75 = strSet74.spliterator();
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.parse("70");
        boolean boolean78 = strSet74.contains((java.lang.Object) localDateTime77);
        java.lang.Object[] objArray79 = strSet74.toArray();
        boolean boolean80 = strSet43.retainAll((java.util.Collection<java.lang.String>) strSet74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime51", (dateTime2.compareTo(dateTime51) == 0) == dateTime2.equals(dateTime51));
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1186");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime31 = property24.setCopy(12);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        int int38 = dateTimeParserBucket37.getOffset();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = chronology41.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((-1L));
        long long47 = dateTimeZone43.convertUTCToLocal((long) 734);
        dateTimeParserBucket37.setZone(dateTimeZone43);
        java.lang.Integer int49 = dateTimeParserBucket37.getPivotYear();
        long long50 = dateTimeParserBucket37.computeMillis();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy(159);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMonths(0);
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfDay();
        java.lang.String str70 = property69.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        boolean boolean72 = localDateTime54.isSupported(dateTimeFieldType71);
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder74.setLanguage("DEU");
        java.util.Locale.Builder builder77 = builder74.clear();
        java.util.Locale.Builder builder79 = builder77.removeUnicodeLocaleAttribute("Germany");
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str82 = locale80.getDisplayName(locale81);
        java.util.Locale locale83 = locale80.stripExtensions();
        java.util.Locale.Builder builder84 = builder77.setLocale(locale83);
        java.util.Set<java.lang.Character> charSet85 = locale83.getExtensionKeys();
        dateTimeParserBucket37.saveField(dateTimeFieldType71, "2616-01-01T00:00:00.000", locale83);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType71.getDurationType();
        org.joda.time.DateTime dateTime89 = dateTime31.withFieldAdded(durationFieldType87, 27095310);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime42", (dateTime13.compareTo(dateTime42) == 0) == dateTime13.equals(dateTime42));
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1187");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        boolean boolean25 = dateTimeFieldType9.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) '#');
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePartial) localDateTime46, 163296000435L);
        org.joda.time.DateTimeField dateTimeField49 = chronology23.hourOfDay();
        boolean boolean51 = dateTimeField49.isLeap((-111L));
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property58 = dateTime55.centuryOfEra();
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = property58.getAsText(locale59);
        java.lang.String str62 = locale53.getDisplayName(locale59);
        java.lang.String str63 = locale53.getDisplayVariant();
        java.util.Locale locale64 = locale53.stripExtensions();
        java.lang.String str65 = dateTimeField49.getAsText(803000L, locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime55", (dateTime30.compareTo(dateTime55) == 0) == dateTime30.equals(dateTime55));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1188");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology3.months();
        org.joda.time.DurationField durationField7 = chronology3.minutes();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale8.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((-1335598022L), chronology3, locale8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        java.lang.String str22 = dateTimeField20.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        int int28 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime27.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours(980);
        java.lang.String str36 = localDateTime34.toString("-1");
        int int37 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withCenturyOfEra((int) '#');
        int int47 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46);
        dateTimeParserBucket10.saveField(dateTimeField15, 612);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        int int55 = dateTime53.getMillisOfSecond();
        org.joda.time.DateTime dateTime57 = dateTime53.minusYears((int) 'x');
        int int58 = dateTime57.getCenturyOfEra();
        boolean boolean59 = dateTimeParserBucket10.restoreState((java.lang.Object) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime51", (dateTime4.compareTo(dateTime51) == 0) == dateTime4.equals(dateTime51));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1189");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withDurationAdded(readableDuration6, 28);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        boolean boolean17 = localDateTime15.isSupported(dateTimeFieldType16);
        int int18 = localDateTime10.get(dateTimeFieldType16);
        boolean boolean19 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withDayOfYear(175);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        java.lang.String str28 = dateTimeField26.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        int int34 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = property37.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime41 = property37.getLocalDateTime();
        int int42 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        int int43 = localDateTime41.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = dateTime48.toString(dateTimeFormatter51);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        java.lang.Integer int62 = dateTimeParserBucket58.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket58.setZone(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.withWeekyear((-1));
        org.joda.time.DateTime dateTime70 = dateTime66.plusHours((int) (byte) 100);
        boolean boolean72 = dateTime70.isBefore((long) ' ');
        int int73 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) dateTime70);
        long long75 = dateTimeZone63.nextTransition((long) (short) -1);
        boolean boolean76 = dateTime48.equals((java.lang.Object) dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime80 = dateTime78.minusHours(271);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.DateTime dateTime82 = dateTime80.plus(readableDuration81);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime85 = dateTime82.withDurationAdded(readableDuration83, 26796605);
        java.lang.String str86 = dateTime82.toString();
        long long87 = property44.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime46", (dateTime25.compareTo(dateTime46) == 0) == dateTime25.equals(dateTime46));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1190");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        int int7 = dateTime3.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(603);
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds(170);
        boolean boolean36 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime35);
        boolean boolean37 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime12.withYear(170);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property41 = localDateTime12.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = dateTime3.withField(dateTimeFieldType40, 950);
        java.lang.String str44 = dateTime3.toString();
        org.joda.time.DateTime dateTime46 = dateTime3.withMillis(292279045L);
        org.joda.time.DateTime dateTime47 = dateTime3.withTimeAtStartOfDay();
        int int48 = dateTime47.getWeekyear();
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.lang.Integer int59 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.Chronology chronology60 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.year();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.centuryOfEra();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(obj49, chronology60);
        org.joda.time.DateTimeField dateTimeField65 = chronology60.year();
        org.joda.time.DurationField durationField66 = chronology60.halfdays();
        org.joda.time.DateTime dateTime67 = dateTime47.withChronology(chronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime64", (dateTime1.compareTo(dateTime64) == 0) == dateTime1.equals(dateTime64));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1191");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        int int14 = dateTimeZone12.getOffset(537L);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime22.getZone();
        int int28 = dateTimeZone26.getOffset((long) 569);
        java.lang.String str30 = dateTimeZone26.getName(541L);
        long long32 = dateTimeZone12.getMillisKeepLocal(dateTimeZone26, 244800000L);
        java.lang.String str33 = dateTimeZone12.getID();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime7, dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime11", (dateTime1.compareTo(dateTime11) == 0) == dateTime1.equals(dateTime11));
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1192");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.toString();
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone43, (long) 23);
        org.joda.time.DateTime dateTime49 = dateTime13.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime13.getZone();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int58 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int63 = localDateTime60.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.era();
        boolean boolean70 = localDateTime68.isSupported(dateTimeFieldType69);
        boolean boolean71 = localDateTime60.isSupported(dateTimeFieldType69);
        int int72 = dateTime56.get(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType69.getDurationType();
        org.joda.time.Chronology chronology74 = null;
        boolean boolean75 = dateTimeFieldType69.isSupported(chronology74);
        int int76 = dateTime13.get(dateTimeFieldType69);
        org.joda.time.DateTime dateTime78 = dateTime13.withYearOfEra(2020);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime54", (dateTime1.compareTo(dateTime54) == 0) == dateTime1.equals(dateTime54));
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1193");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("DEU");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Germany");
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        dateTimeParserBucket11.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        org.joda.time.DurationField durationField34 = property33.getRangeDurationField();
        long long35 = property33.remainder();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = property33.getAsText(locale36);
        java.lang.String str41 = dateTimeZone25.getName(947L, locale36);
        java.util.Locale.Builder builder42 = builder5.setLocale(locale36);
        java.util.Locale.Builder builder43 = builder42.clear();
        java.util.Locale locale44 = builder42.build();
        java.util.Locale locale45 = locale44.stripExtensions();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime53.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean57 = dateTime56.isEqualNow();
        org.joda.time.DateTime.Property property58 = dateTime56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        org.joda.time.DateTime dateTime60 = property58.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime73 = property72.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withYear((int) (short) 100);
        int int76 = localDateTime68.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        int int77 = dateTimeField66.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68);
        long long80 = dateTimeField66.set(1L, 837);
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = dateTimeField66.getAsText((long) 7, locale82);
        java.lang.String str84 = property58.getAsShortText(locale82);
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleKeys();
        java.lang.String str86 = locale45.getDisplayScript(locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime49", (dateTime30.compareTo(dateTime49) == 0) == dateTime30.equals(dateTime49));
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1194");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-0001-01-01T00:00:00.000+00:00:00.052");
        java.util.Date date2 = dateTime1.toDate();
        org.joda.time.MutableDateTime mutableDateTime3 = dateTime1.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime11.getZone();
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getOffset((long) 'x');
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        boolean boolean24 = dateTimeZone15.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        boolean boolean47 = dateTimeZone44.isFixed();
        boolean boolean48 = dateTimeZone44.isFixed();
        long long50 = dateTimeZone44.convertUTCToLocal((-1L));
        long long52 = dateTimeZone15.getMillisKeepLocal(dateTimeZone44, 3600000L);
        long long54 = dateTimeZone15.previousTransition((long) 490);
        boolean boolean56 = dateTimeZone15.isStandardOffset((long) 14);
        java.lang.String str57 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime58 = dateTime1.withZone(dateTimeZone15);
        java.lang.String str60 = dateTimeZone15.getName(26437112L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime58", (dateTime1.compareTo(dateTime58) == 0) == dateTime1.equals(dateTime58));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1195");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.util.Locale locale25 = java.util.Locale.getDefault(category0);
        java.util.Locale locale27 = new java.util.Locale("0010-02-22T07:27:03.032");
        java.util.Locale locale30 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale27.getDisplayScript(locale30);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        java.lang.String str36 = durationFieldType35.getName();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        java.lang.String str43 = dateTimeField41.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundHalfEvenCopy();
        int int49 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime48.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime48);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.Chronology chronology53 = chronology52.withUTC();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology53.getZone();
        boolean boolean55 = durationFieldType35.isSupported(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.minuteOfHour();
        int int58 = dateTimeField56.getMaximumValue((long) 26);
        java.lang.String str59 = dateTimeField56.toString();
        long long61 = dateTimeField56.roundHalfEven(39139200118L);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology65);
        java.lang.String str67 = chronology65.toString();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.weekOfWeekyear();
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = dateTimeField68.getAsShortText((long) (byte) -1, locale70);
        long long74 = dateTimeField68.add((long) 590, (int) (byte) -1);
        int int75 = dateTimeField68.getMaximumValue();
        java.util.Locale locale79 = new java.util.Locale("Etc/UTC", "499", "2022-02-22T07:25:56.720+00:00:00.052");
        int int80 = dateTimeField68.getMaximumShortTextLength(locale79);
        java.lang.String str81 = dateTimeField56.getAsText(267610, locale79);
        java.util.Locale.setDefault(category0, locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime40", (dateTime14.compareTo(dateTime40) == 0) == dateTime14.equals(dateTime40));
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1196");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(980);
        java.lang.String str20 = localDateTime18.toString("-1");
        int int21 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusWeeks((-593));
        int int32 = localDateTime30.getValue(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear(43);
        boolean boolean37 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (byte) 100);
        boolean boolean57 = dateTime55.isBefore((long) ' ');
        int int58 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime60 = dateTime55.minusYears(20);
        org.joda.time.DateTime.Property property61 = dateTime60.hourOfDay();
        org.joda.time.DateTime.Property property62 = dateTime60.dayOfMonth();
        java.util.Locale locale66 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str67 = property62.getAsText(locale66);
        org.joda.time.DateTime dateTime69 = property62.setCopy(12);
        long long70 = property62.remainder();
        org.joda.time.DateTime dateTime71 = property62.roundHalfFloorCopy();
        org.joda.time.DurationField durationField72 = property62.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType73 = durationField72.getType();
        boolean boolean74 = localDateTime18.isSupported(durationFieldType73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime18.plusMinutes(945);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime51", (dateTime3.compareTo(dateTime51) == 0) == dateTime3.equals(dateTime51));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1197");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.monthOfYear();
        java.lang.String str9 = dateTimeField8.toString();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        java.util.Locale locale21 = dateTimeParserBucket17.getLocale();
        java.util.Locale.setDefault(category11, locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property28 = dateTime25.centuryOfEra();
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = property28.getAsText(locale29);
        java.lang.String str32 = locale23.getDisplayName(locale29);
        java.lang.String str33 = locale29.getISO3Language();
        java.util.Locale.setDefault(category11, locale29);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        int int55 = dateTimeParserBucket54.getOffset();
        java.lang.Integer int56 = dateTimeParserBucket54.getPivotYear();
        java.util.Locale locale57 = dateTimeParserBucket54.getLocale();
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale59.getDisplayLanguage(locale60);
        java.lang.String str63 = locale57.getDisplayName(locale60);
        java.lang.String str64 = localDateTime45.toString("17", locale60);
        java.util.Locale.setDefault(category11, locale60);
        java.util.Locale locale66 = java.util.Locale.getDefault(category11);
        java.util.Locale locale67 = java.util.Locale.getDefault(category11);
        java.util.Locale locale68 = java.util.Locale.getDefault(category11);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime72.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime76 = dateTime74.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime79 = dateTime76.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean80 = dateTime79.isEqualNow();
        org.joda.time.DateTime.Property property81 = dateTime79.secondOfMinute();
        java.util.Locale.Category category82 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology84 = null;
        java.util.Locale locale85 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology84, locale85, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField89 = null;
        dateTimeParserBucket88.saveField(dateTimeField89, (int) (short) 0);
        java.util.Locale locale92 = dateTimeParserBucket88.getLocale();
        java.util.Locale.setDefault(category82, locale92);
        java.lang.String str94 = property81.getAsShortText(locale92);
        java.util.Locale locale95 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str96 = locale92.getDisplayScript(locale95);
        java.util.Locale.setDefault(category11, locale95);
        java.lang.String str98 = dateTimeField8.getAsText((-2283817966403L), locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime72", (dateTime25.compareTo(dateTime72) == 0) == dateTime25.equals(dateTime72));
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1198");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        java.util.Locale locale28 = dateTimeParserBucket5.getLocale();
        dateTimeParserBucket5.setOffset(75203);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int36 = localDateTime32.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        boolean boolean43 = dateTimeFieldType35.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField44 = chronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology39.weekOfWeekyear();
        dateTimeParserBucket5.saveField(dateTimeField47, 387);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime40", (dateTime19.compareTo(dateTime40) == 0) == dateTime19.equals(dateTime40));
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1199");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.halfdays();
        org.joda.time.DurationField durationField8 = chronology3.halfdays();
        org.joda.time.DurationField durationField9 = chronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property16 = dateTime13.minuteOfHour();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = locale17.getDisplayName(locale23);
        int int27 = property16.getMaximumTextLength(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 642, chronology3, locale23);
        org.joda.time.DateTimeField dateTimeField29 = chronology3.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime11", (dateTime4.compareTo(dateTime11) == 0) == dateTime4.equals(dateTime11));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1200");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime9.withMillisOfDay(378);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(799);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        int int23 = dateTimeParserBucket21.getOffset();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.DateTime dateTime27 = dateTime15.toDateTime(chronology24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour((int) (short) 10);
        int int42 = dateTime41.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withDurationAdded(readableDuration43, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime45.withWeekyear(26751);
        org.joda.time.DateTime dateTime50 = dateTime48.minusYears(268);
        org.joda.time.DateTime dateTime52 = dateTime48.plusHours(491);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfSecond();
        org.joda.time.DateTime dateTime54 = dateTime52.withEarlierOffsetAtOverlap();
        boolean boolean55 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime37", (dateTime3.compareTo(dateTime37) == 0) == dateTime3.equals(dateTime37));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1201");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        int int38 = property34.get();
        org.joda.time.DateTime dateTime39 = property34.roundCeilingCopy();
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DurationField durationField47 = chronology43.seconds();
        org.joda.time.DurationField durationField48 = chronology43.minutes();
        org.joda.time.DurationField durationField49 = chronology43.seconds();
        org.joda.time.DateTime dateTime50 = dateTime39.withChronology(chronology43);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.minusWeeks((-593));
        int int61 = localDateTime59.getValue(1);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime69 = dateTime67.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMonths(0);
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime71.withMillisOfSecond((int) '4');
        org.joda.time.Instant instant76 = dateTime71.toInstant();
        org.joda.time.DateTime.Property property77 = dateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property81.getFieldType();
        java.lang.String str83 = dateTimeFieldType82.getName();
        int int84 = dateTime71.get(dateTimeFieldType82);
        int int85 = localDateTime59.indexOf(dateTimeFieldType82);
        org.joda.time.DateTime.Property property86 = dateTime50.property(dateTimeFieldType82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime65", (dateTime13.compareTo(dateTime65) == 0) == dateTime13.equals(dateTime65));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1202");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        int int9 = localDateTime8.size();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime8.toDateTime(readableInstant10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTime dateTime14 = dateTime11.plusHours(51);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(2397228334015455L, 576);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket25.getZone();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone42);
        boolean boolean44 = dateTimeZone42.isFixed();
        long long47 = dateTimeZone42.adjustOffset(2846437113600010L, false);
        long long51 = dateTimeZone42.convertLocalToUTC((long) 708, true, (-44L));
        java.lang.String str52 = dateTimeZone42.getID();
        org.joda.time.DateTime dateTime53 = dateTime17.withZone(dateTimeZone42);
        boolean boolean54 = dateTimeZone42.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant18", (dateTime17.compareTo(instant18) == 0) == dateTime17.equals(instant18));
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1203");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider28);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfWeek();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        dateTimeParserBucket43.saveField(dateTimeFieldType47, "it", locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology33, locale49, (java.lang.Integer) 9, 538);
        java.lang.String str56 = nameProvider28.getShortName(locale49, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.lang.String str58 = locale57.getVariant();
        java.lang.String str61 = nameProvider28.getName(locale57, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.lang.String str62 = locale57.getISO3Country();
        java.util.Set<java.lang.Character> charSet63 = locale57.getExtensionKeys();
        java.lang.String str64 = locale57.getDisplayVariant();
        java.lang.String str65 = locale57.getDisplayCountry();
        int int66 = dateTimeField27.getMaximumTextLength(locale57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime34", (dateTime24.compareTo(dateTime34) == 0) == dateTime24.equals(dateTime34));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1204");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("Etc/UTC");
        int int15 = property11.getMaximumShortTextLength(locale14);
        int int16 = property11.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.util.TimeZone.setDefault(timeZone19);
        int int21 = timeZone19.getRawOffset();
        timeZone19.setID("+00:00");
        boolean boolean24 = property11.equals((java.lang.Object) timeZone19);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        java.lang.String str30 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property37 = dateTime34.centuryOfEra();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = property37.getAsText(locale38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        boolean boolean46 = dateTime44.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime44.toMutableDateTime(dateTimeZone47);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = dateTimeZone47.getName((long) (byte) 1, locale51);
        java.lang.String str53 = locale51.getScript();
        java.lang.String str54 = property37.getAsShortText(locale51);
        java.lang.String str55 = locale51.getDisplayScript();
        java.lang.String str58 = nameProvider32.getName(locale51, "\u671d\u9c9c\u6587", "+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider32);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider32);
        java.util.Locale locale64 = new java.util.Locale("1970-01-01T00:00:00.052", "", "2022-02-22T07:26:02.913+00:00:00.052");
        java.lang.String str67 = nameProvider32.getName(locale64, "DEU", "2022-02-22T07:27:30.244+00:00:00.052");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((-1646060020L), chronology28, locale64, (java.lang.Integer) 506);
        java.lang.String str70 = property11.getAsText(locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1205");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeZone17.getName((long) (byte) 1, locale21);
        org.joda.time.Chronology chronology23 = chronology4.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology4.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 26751806, chronology4);
        org.joda.time.DateTimeField dateTimeField26 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime30.toString(dateTimeFormatter33);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("20");
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        java.lang.String str41 = dateTime30.toString("1969", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology4, locale36, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField44 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology4.dayOfMonth();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField47 = chronology4.hourOfHalfday();
        java.util.Locale locale50 = new java.util.Locale("0581-01-01T00:00:00.052");
        java.lang.String str51 = dateTimeField47.getAsShortText((-220898664000L), locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime46", (dateTime12.compareTo(dateTime46) == 0) == dateTime12.equals(dateTime46));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1206");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime4.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long31 = dateTimeZone19.nextTransition((long) (short) -1);
        boolean boolean32 = dateTime4.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        long long36 = dateTimeZone19.adjustOffset((long) 26752, true);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(795L, dateTimeZone19);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear(151);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        java.lang.String str44 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.weekyear();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        long long53 = chronology42.add(8594L, (long) 970, 0);
        org.joda.time.DateTimeField dateTimeField54 = chronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology42.clockhourOfDay();
        java.lang.String str56 = chronology42.toString();
        org.joda.time.DurationField durationField57 = chronology42.minutes();
        org.joda.time.DurationField durationField58 = chronology42.weeks();
        org.joda.time.DateTimeField dateTimeField59 = chronology42.halfdayOfDay();
        int int60 = dateTime37.get(dateTimeField59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime43", (dateTime2.compareTo(dateTime43) == 0) == dateTime2.equals(dateTime43));
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1207");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        int int6 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime1.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        dateTimeParserBucket23.saveField(dateTimeFieldType27, "it", locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology13, locale29, (java.lang.Integer) 9, 538);
        java.lang.String str36 = nameProvider8.getShortName(locale29, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Set<java.lang.String> strSet37 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str38 = property7.getAsText(locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime14", (dateTime1.compareTo(dateTime14) == 0) == dateTime1.equals(dateTime14));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1208");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int5 = localDateTime1.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        boolean boolean12 = dateTimeFieldType4.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        java.lang.String str32 = dateTimeField30.getAsShortText((long) 28);
        dateTimeParserBucket20.saveField(dateTimeField30, 100);
        dateTimeParserBucket20.setOffset(19);
        java.lang.Object obj37 = dateTimeParserBucket20.saveState();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYear((int) (short) 100);
        int int53 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        int int54 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar59 = dateTime58.toGregorianCalendar();
        int int60 = dateTime58.getMillisOfSecond();
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int63 = localDateTime45.get(dateTimeFieldType62);
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        dateTimeParserBucket20.saveField(dateTimeFieldType62, "DurationField[years]", locale65);
        java.lang.String str68 = dateTimeFieldType62.getName();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType62.getDurationType();
        java.lang.String str70 = dateTimeFieldType62.getName();
        int int71 = localDateTime14.get(dateTimeFieldType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime56", (dateTime9.compareTo(dateTime56) == 0) == dateTime9.equals(dateTime56));
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1209");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths(0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, 853);
        org.joda.time.DateTime dateTime43 = dateTime38.withMillisOfDay(57);
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        int int45 = property25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean46 = dateTime38.isEqualNow();
        org.joda.time.DateTime dateTime48 = dateTime38.withMillis(1669618162104L);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime38.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        boolean boolean55 = dateTime53.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        boolean boolean60 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.monthOfYear();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) dateTime38, chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime51", (dateTime30.compareTo(dateTime51) == 0) == dateTime30.equals(dateTime51));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1210");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear((-1));
        org.joda.time.DateTime dateTime12 = dateTime8.plusHours((int) (byte) 100);
        boolean boolean14 = dateTime12.isBefore((long) ' ');
        org.joda.time.DateTime.Property property15 = dateTime12.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime12.minusMillis(136);
        int int18 = property4.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        int int29 = localDateTime27.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy(375);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.util.Locale locale39 = locale36.stripExtensions();
        java.util.Locale.setDefault(category33, locale39);
        java.util.Locale locale41 = java.util.Locale.getDefault(category33);
        java.util.Locale locale42 = java.util.Locale.getDefault(category33);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider43);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        java.lang.String str50 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfWeek();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        dateTimeParserBucket58.saveField(dateTimeFieldType62, "it", locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology48, locale64, (java.lang.Integer) 9, 538);
        java.lang.String str71 = nameProvider43.getShortName(locale64, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.util.Locale locale75 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str76 = locale72.getDisplayCountry(locale75);
        java.lang.String str77 = locale75.getCountry();
        java.util.Locale locale78 = locale75.stripExtensions();
        java.lang.String str81 = nameProvider43.getName(locale75, "2022-02-22T07:27:52.224+00:00:00.052", "2022-02-22T07:00:28.528+00:00:00.052");
        java.util.Locale locale83 = new java.util.Locale("gio");
        java.lang.String str84 = locale75.getDisplayScript(locale83);
        java.util.Locale.setDefault(category33, locale75);
        java.lang.String str86 = property30.getAsText(locale75);
        java.lang.String str87 = property4.getAsShortText(locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime49", (dateTime1.compareTo(dateTime49) == 0) == dateTime1.equals(dateTime49));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1211");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-0001-01-01T00:00:00.000+00:00:00.052");
        java.util.Date date2 = dateTime1.toDate();
        org.joda.time.MutableDateTime mutableDateTime3 = dateTime1.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime11.getZone();
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getOffset((long) 'x');
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        boolean boolean24 = dateTimeZone15.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        boolean boolean47 = dateTimeZone44.isFixed();
        boolean boolean48 = dateTimeZone44.isFixed();
        long long50 = dateTimeZone44.convertUTCToLocal((-1L));
        long long52 = dateTimeZone15.getMillisKeepLocal(dateTimeZone44, 3600000L);
        long long54 = dateTimeZone15.previousTransition((long) 490);
        boolean boolean56 = dateTimeZone15.isStandardOffset((long) 14);
        java.lang.String str57 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime58 = dateTime1.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime58", (mutableDateTime3.compareTo(dateTime58) == 0) == mutableDateTime3.equals(dateTime58));
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1212");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("Etc/UTC");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(2022);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = property33.getAsText(locale34);
        java.lang.String str37 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, (-1), locale34);
        java.util.Locale.setDefault(locale34);
        java.lang.String str39 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale34);
        java.lang.String str40 = locale3.getDisplayScript(locale34);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        java.util.Date date54 = dateTime51.toDate();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfMonth();
        org.joda.time.DateTime.Property property56 = dateTime51.dayOfMonth();
        java.lang.String str57 = property56.getAsString();
        boolean boolean58 = localDateTime49.equals((java.lang.Object) property56);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.toLanguageTag();
        int int63 = property56.getMaximumShortTextLength(locale59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar68 = dateTime67.toGregorianCalendar();
        int int69 = dateTime67.getMillisOfSecond();
        org.joda.time.DateTime.Property property70 = dateTime67.minuteOfHour();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property76 = dateTime73.centuryOfEra();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = property76.getAsText(locale77);
        java.lang.String str80 = locale71.getDisplayName(locale77);
        int int81 = property70.getMaximumTextLength(locale77);
        java.lang.String str82 = locale59.getDisplayVariant(locale77);
        java.lang.String str83 = locale3.getDisplayScript(locale59);
        java.lang.String str84 = locale3.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(259258999L, chronology1, locale3);
        java.util.Locale locale86 = dateTimeParserBucket85.getLocale();
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology89 = localDateTime88.getChronology();
        org.joda.time.LocalDateTime localDateTime90 = org.joda.time.LocalDateTime.now(chronology89);
        org.joda.time.DateTimeField dateTimeField91 = chronology89.secondOfMinute();
        org.joda.time.DurationField durationField92 = chronology89.millis();
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(chronology89);
        org.joda.time.DateTimeZone dateTimeZone94 = chronology89.getZone();
        int int96 = dateTimeZone94.getOffset(7L);
        dateTimeParserBucket85.setZone(dateTimeZone94);
        int int99 = dateTimeZone94.getStandardOffset((long) 41367);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime93", (dateTime30.compareTo(dateTime93) == 0) == dateTime30.equals(dateTime93));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1213");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime8.getFields();
        int int12 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime8);
        int int13 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getEra();
        java.lang.String str32 = localDateTime28.toString("1388");
        org.joda.time.Chronology chronology33 = localDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths(10);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.util.Locale locale53 = dateTimeParserBucket49.getLocale();
        java.util.Locale.setDefault(category43, locale53);
        java.util.Locale locale56 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category43, locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category43);
        int int59 = property41.getMaximumTextLength(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 964, chronology33, locale58);
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str64 = locale61.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property69 = dateTime66.centuryOfEra();
        org.joda.time.DurationField durationField70 = property69.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.withWeekyear((-1));
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths(10);
        org.joda.time.DateTime.Property property77 = dateTime76.minuteOfDay();
        org.joda.time.DurationField durationField78 = property77.getDurationField();
        org.joda.time.DateTime dateTime80 = property77.addToCopy((long) 25);
        java.util.Locale locale81 = java.util.Locale.UK;
        java.lang.String str82 = property77.getAsShortText(locale81);
        java.lang.String str83 = property69.getAsShortText(locale81);
        java.lang.String str84 = locale61.getDisplayScript(locale81);
        java.util.Locale.setDefault(locale81);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 26893192, chronology33, locale81);
        java.lang.String str87 = property14.getAsText(locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }
}


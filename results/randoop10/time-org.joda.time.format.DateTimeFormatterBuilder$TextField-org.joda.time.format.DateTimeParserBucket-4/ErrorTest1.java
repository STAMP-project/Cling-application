import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0501");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy((-1510244619764L));
        int int34 = dateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime42.getZone();
        boolean boolean47 = dateTimeZone46.isFixed();
        int int49 = dateTimeZone46.getOffset((long) 'x');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        int int52 = dateTimeZone46.getOffsetFromLocal((long) 778);
        int int54 = dateTimeZone46.getOffsetFromLocal((long) 9);
        java.lang.String str56 = dateTimeZone46.getNameKey((long) 26781995);
        org.joda.time.DateTime dateTime57 = dateTime33.withZoneRetainFields(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime38", (dateTime13.compareTo(dateTime38) == 0) == dateTime13.equals(dateTime38));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0502");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DurationField durationField14 = chronology9.eras();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        dateTimeParserBucket37.saveField(dateTimeFieldType41, "it", locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology27, locale43, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology18, locale43);
        java.lang.String str49 = locale43.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale43, (java.lang.Integer) 1052);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMonths((int) (byte) 100);
        int[] intArray57 = localDateTime56.getValues();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusDays(4);
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.secondOfMinute();
        org.joda.time.DurationField durationField61 = property60.getDurationField();
        boolean boolean62 = dateTimeParserBucket51.restoreState((java.lang.Object) durationField61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField61, and durationField14", !(durationField14.compareTo(durationField61) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField61.compareTo(durationField14))));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0503");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.DateTimeField dateTimeField28 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField7, and durationField8", !(durationField30.compareTo(durationField7) == 0) || (Math.signum(durationField30.compareTo(durationField8)) == Math.signum(durationField7.compareTo(durationField8))));
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0504");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category0, locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("87");
        java.lang.String str24 = dateTimeField20.getAsText((long) 383, locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime36 = property35.roundCeilingCopy();
        org.joda.time.DateTime dateTime37 = property35.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar42 = dateTime41.toGregorianCalendar();
        int int43 = dateTime41.getMillisOfSecond();
        org.joda.time.DateTime.Property property44 = dateTime41.minuteOfHour();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = property50.getAsText(locale51);
        java.lang.String str54 = locale45.getDisplayName(locale51);
        int int55 = property44.getMaximumTextLength(locale51);
        java.lang.String str56 = locale51.getISO3Language();
        java.lang.String str57 = locale51.getLanguage();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale58.getDisplayName();
        java.lang.String str60 = locale51.getDisplayLanguage(locale58);
        int int61 = property35.getMaximumTextLength(locale51);
        java.lang.String str62 = locale51.getDisplayScript();
        java.util.Locale.setDefault(category0, locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime32", (dateTime18.compareTo(dateTime32) == 0) == dateTime18.equals(dateTime32));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0505");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis(17);
        org.joda.time.DateTime.Property property11 = dateTime8.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        java.lang.String str13 = durationFieldType12.getName();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        int int21 = dateTime18.getWeekyear();
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyear();
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.util.Locale locale28 = java.util.Locale.getDefault(category26);
        java.util.Locale.setDefault(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((-37742111999221L), chronology22, locale28, (java.lang.Integer) 508);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.era();
        boolean boolean33 = durationFieldType12.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTime dateTime36 = dateTime8.withChronology(chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0506");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime26.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        int int33 = mutableDateTime31.get(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField39 = chronology36.millis();
        boolean boolean40 = dateTimeFieldType32.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.halfdayOfDay();
        dateTimeParserBucket5.saveField(dateTimeField42, 139);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekyearOfCentury();
        org.joda.time.DurationField durationField50 = chronology47.months();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.weekyear();
        dateTimeParserBucket5.saveField(dateTimeField54, (-49641120));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime48", (dateTime24.compareTo(dateTime48) == 0) == dateTime24.equals(dateTime48));
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0507");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) '#', 837);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime1.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology13.months();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        java.lang.String str28 = dateTimeField26.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        int int34 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean37 = localDateTime33.equals((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.millisOfSecond();
        int[] intArray42 = chronology13.get((org.joda.time.ReadablePartial) localDateTime36, 0L);
        org.joda.time.DateTimeField dateTimeField43 = chronology13.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime10.toMutableDateTime(chronology13);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.year();
        org.joda.time.DurationField durationField53 = durationFieldType45.getField(chronology48);
        java.lang.String str54 = durationFieldType45.getName();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        boolean boolean63 = localDateTime61.isSupported(dateTimeFieldType62);
        int int64 = localDateTime56.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withYear(635);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology69.millis();
        org.joda.time.DurationFieldType durationFieldType74 = durationField73.getType();
        boolean boolean75 = localDateTime56.isSupported(durationFieldType74);
        java.lang.String str76 = durationFieldType74.toString();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology78, locale79, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology83 = dateTimeParserBucket82.getChronology();
        int int84 = dateTimeParserBucket82.getOffset();
        boolean boolean86 = dateTimeParserBucket82.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket82.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology89 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.weekyear();
        boolean boolean91 = durationFieldType74.isSupported(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfWeek();
        org.joda.time.DurationField durationField93 = durationFieldType45.getField(chronology89);
        org.joda.time.DateTime dateTime95 = dateTime10.withFieldAdded(durationFieldType45, 26942462);
        int int96 = dateTime95.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime44", (dateTime1.compareTo(mutableDateTime44) == 0) == dateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0508");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = property23.roundHalfEvenCopy();
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime41.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime41.getZone();
        boolean boolean47 = dateTime41.equals((java.lang.Object) "cinese (Cina)");
        org.joda.time.DateTime dateTime49 = dateTime41.withCenturyOfEra(1978);
        org.joda.time.Instant instant50 = dateTime49.toInstant();
        org.joda.time.DateTime dateTime52 = dateTime49.plusHours(170);
        int int53 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0509");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime23.plusDays(0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        boolean boolean51 = dateTimeZone48.isFixed();
        long long54 = dateTimeZone48.adjustOffset(1014721200000L, false);
        long long56 = dateTimeZone48.convertUTCToLocal(1014721200000L);
        org.joda.time.DateTime dateTime57 = dateTime28.toDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyearOfCentury();
        java.lang.String str64 = dateTimeField62.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = property68.roundHalfEvenCopy();
        int int70 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean73 = localDateTime69.equals((java.lang.Object) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int78 = localDateTime75.get(dateTimeFieldType77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime72.property(dateTimeFieldType77);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology82 = localDateTime81.getChronology();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField84 = property83.getField();
        boolean boolean85 = localDateTime72.equals((java.lang.Object) dateTimeField84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime72.withYearOfCentury(38);
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.millisOfSecond();
        boolean boolean89 = dateTimeZone48.isLocalDateTimeGap(localDateTime87);
        boolean boolean90 = dateTimeZone48.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime61", (dateTime18.compareTo(dateTime61) == 0) == dateTime18.equals(dateTime61));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0510");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (-1), locale23);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = dateTimeField12.getAsShortText((int) (byte) 10, locale28);
        java.lang.String str31 = locale28.getDisplayName();
        java.util.Set<java.lang.String> strSet32 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale28.getDisplayName(locale33);
        int int35 = dateTimeField7.getMaximumTextLength(locale33);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        java.util.Locale locale44 = dateTimeParserBucket42.getLocale();
        java.lang.Object obj45 = dateTimeParserBucket42.saveState();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        java.lang.String str50 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = dateTimeField53.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField53.getType();
        java.util.Locale locale60 = new java.util.Locale("\uc601\uc5b4", "java.io.IOException: ISOChronology[UTC]", "89");
        java.lang.String str61 = dateTimeField53.getAsShortText(537L, locale60);
        dateTimeParserBucket42.saveField(dateTimeField53, 710);
        long long66 = dateTimeParserBucket42.computeMillis(false, "101");
        java.util.Locale locale67 = dateTimeParserBucket42.getLocale();
        java.lang.String str68 = dateTimeField7.getAsShortText((long) 51, locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime19", (dateTime3.compareTo(dateTime19) == 0) == dateTime3.equals(dateTime19));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0511");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.halfdays();
        org.joda.time.DurationField durationField8 = chronology3.halfdays();
        org.joda.time.DurationField durationField9 = chronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property16 = dateTime13.minuteOfHour();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = locale17.getDisplayName(locale23);
        int int27 = property16.getMaximumTextLength(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 642, chronology3, locale23);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusWeeks(855);
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withCenturyOfEra(486);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        java.lang.String str48 = dateTimeFieldType46.getName();
        int int49 = localDateTime44.indexOf(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField56 = chronology52.halfdays();
        org.joda.time.DurationField durationField57 = chronology52.weeks();
        boolean boolean58 = dateTimeFieldType46.isSupported(chronology52);
        java.lang.String str59 = dateTimeFieldType46.toString();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField67 = null;
        dateTimeParserBucket66.saveField(dateTimeField67, (int) (short) 0);
        java.lang.Integer int70 = dateTimeParserBucket66.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket66.setZone(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withWeekyear((-1));
        org.joda.time.DateTime dateTime78 = dateTime74.plusHours((int) (byte) 100);
        boolean boolean80 = dateTime78.isBefore((long) ' ');
        int int81 = dateTimeZone71.getOffset((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime83 = dateTime78.minusYears(20);
        org.joda.time.DateTime.Property property84 = dateTime83.hourOfDay();
        org.joda.time.DateTime.Property property85 = dateTime83.dayOfMonth();
        java.util.Locale locale89 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str90 = property85.getAsText(locale89);
        java.util.Set<java.lang.String> strSet91 = locale89.getUnicodeLocaleAttributes();
        java.util.Locale locale92 = java.util.Locale.CANADA;
        boolean boolean93 = strSet91.equals((java.lang.Object) locale92);
        dateTimeParserBucket28.saveField(dateTimeFieldType46, "2616-01-01T00:00:00.052", locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime11", (dateTime4.compareTo(dateTime11) == 0) == dateTime4.equals(dateTime11));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0512");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        int int28 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology32.millis();
        java.lang.String str36 = chronology32.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, chronology32);
        org.joda.time.LocalDateTime.Property property38 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = property38.setCopy(382);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime54.plusHours((int) (byte) 100);
        boolean boolean60 = dateTime58.isBefore((long) ' ');
        int int61 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime63 = dateTime58.minusYears(20);
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfMonth();
        org.joda.time.DateTime.Property property71 = dateTime66.dayOfMonth();
        int int72 = property64.getDifference((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime74 = property64.addToCopy(52L);
        org.joda.time.DateTime dateTime76 = property64.addToCopy(26761309L);
        boolean boolean77 = property38.equals((java.lang.Object) property64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime54", (dateTime3.compareTo(dateTime54) == 0) == dateTime3.equals(dateTime54));
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0513");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DurationField durationField6 = chronology2.eras();
        org.joda.time.DurationFieldType durationFieldType7 = durationField6.getType();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMonths(0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded(readableDuration20, 853);
        org.joda.time.DateTime dateTime24 = dateTime19.withMillisOfDay(57);
        org.joda.time.Instant instant25 = dateTime19.toInstant();
        int int26 = dateTime19.getMinuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) dateTime19, chronology33);
        org.joda.time.DateTimeField dateTimeField38 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.dayOfMonth();
        boolean boolean40 = durationFieldType7.isSupported(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField6", Math.signum(durationField5.compareTo(durationField6)) == -Math.signum(durationField6.compareTo(durationField5)));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0514");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime4.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long31 = dateTimeZone19.nextTransition((long) (short) -1);
        boolean boolean32 = dateTime4.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(5521000L, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks(62833460);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        java.lang.String str42 = dateTimeField40.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        int int48 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime52 = property50.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property50.getFieldType();
        org.joda.time.LocalDateTime.Property property55 = localDateTime35.property(dateTimeFieldType54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime39", (dateTime2.compareTo(dateTime39) == 0) == dateTime2.equals(dateTime39));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0515");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getName(1L);
        int int15 = dateTimeZone11.getOffsetFromLocal(445L);
        long long18 = dateTimeZone11.convertLocalToUTC(26765426L, true);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        org.joda.time.DateTime dateTime22 = property20.withMaximumValue();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (byte) 100);
        boolean boolean42 = dateTime40.isBefore((long) ' ');
        int int43 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = dateTime40.minusYears(20);
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime47 = property46.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime50 = dateTime47.plusHours(840);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean52 = dateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTime.Property property53 = dateTime50.year();
        boolean boolean54 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime36", (dateTime3.compareTo(dateTime36) == 0) == dateTime3.equals(dateTime36));
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0516");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) '#', 837);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime1.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology13.months();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        java.lang.String str28 = dateTimeField26.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        int int34 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean37 = localDateTime33.equals((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.millisOfSecond();
        int[] intArray42 = chronology13.get((org.joda.time.ReadablePartial) localDateTime36, 0L);
        org.joda.time.DateTimeField dateTimeField43 = chronology13.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime10.toMutableDateTime(chronology13);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.year();
        org.joda.time.DurationField durationField53 = durationFieldType45.getField(chronology48);
        java.lang.String str54 = durationFieldType45.getName();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        boolean boolean63 = localDateTime61.isSupported(dateTimeFieldType62);
        int int64 = localDateTime56.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withYear(635);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology69.millis();
        org.joda.time.DurationFieldType durationFieldType74 = durationField73.getType();
        boolean boolean75 = localDateTime56.isSupported(durationFieldType74);
        java.lang.String str76 = durationFieldType74.toString();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology78, locale79, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology83 = dateTimeParserBucket82.getChronology();
        int int84 = dateTimeParserBucket82.getOffset();
        boolean boolean86 = dateTimeParserBucket82.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket82.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology89 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.weekyear();
        boolean boolean91 = durationFieldType74.isSupported(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfWeek();
        org.joda.time.DurationField durationField93 = durationFieldType45.getField(chronology89);
        org.joda.time.DateTime dateTime95 = dateTime10.withFieldAdded(durationFieldType45, 26942462);
        java.util.GregorianCalendar gregorianCalendar96 = dateTime95.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0517");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.withChronology(chronology5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        boolean boolean30 = dateTimeZone26.isFixed();
        long long32 = dateTimeZone26.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone26);
        java.lang.String str34 = dateTimeZone26.getID();
        boolean boolean36 = dateTimeZone26.isStandardOffset(26924539L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime6", (dateTime1.compareTo(dateTime6) == 0) == dateTime1.equals(dateTime6));
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0518");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        boolean boolean12 = dateTime8.isAfter((long) 950);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket25.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.toString();
        long long47 = dateTimeZone19.getMillisKeepLocal(dateTimeZone42, (long) 23);
        org.joda.time.DateTime dateTime48 = dateTime8.toDateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = dateTime48.toString(dateTimeFormatter49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime14", (dateTime3.compareTo(dateTime14) == 0) == dateTime3.equals(dateTime14));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0519");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours((int) (byte) 0);
        boolean boolean8 = dateTime6.isEqual((long) (short) 100);
        int int9 = dateTime6.getWeekyear();
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category14);
        java.util.Locale.setDefault(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-37742111999221L), chronology10, locale16, (java.lang.Integer) 508);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.era();
        boolean boolean21 = durationFieldType0.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology31 = chronology25.withZone(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plus(readablePeriod34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMonths(26837);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        int int44 = dateTime42.getMillisOfSecond();
        org.joda.time.DateTime dateTime46 = dateTime42.minusYears((int) 'x');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        int int51 = dateTimeField48.getMaximumTextLength(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime32, 175, locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime26", (dateTime4.compareTo(dateTime26) == 0) == dateTime4.equals(dateTime26));
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0520");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        java.util.Date date16 = dateTime13.toDate();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.DateTime.Property property18 = dateTime13.dayOfMonth();
        java.lang.String str19 = property18.getAsString();
        boolean boolean20 = localDateTime11.equals((java.lang.Object) property18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DurationField durationField29 = chronology25.seconds();
        org.joda.time.DurationField durationField30 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = chronology25.minutes();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        dateTimeParserBucket39.saveField(dateTimeFieldType43, "it", locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(673L, chronology25, locale45, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology50, locale51, (java.lang.Integer) 597);
        java.lang.String str54 = property18.getAsText(locale51);
        java.util.Locale.Builder builder55 = builder2.setLocale(locale51);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology58);
        java.lang.String str60 = chronology58.toString();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.weekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology58.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyearOfCentury();
        java.lang.String str72 = dateTimeField70.getAsShortText(10L);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = dateTimeField70.getAsText(0L, locale74);
        java.lang.String str76 = dateTimeField64.getAsText(0, locale74);
        java.util.Locale locale77 = java.util.Locale.KOREA;
        int int78 = dateTimeField64.getMaximumShortTextLength(locale77);
        java.lang.String str80 = locale77.getExtension('u');
        java.util.Set<java.lang.Character> charSet81 = locale77.getExtensionKeys();
        boolean boolean82 = locale77.hasExtensions();
        java.util.Locale locale86 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.lang.String str87 = locale77.getDisplayScript(locale86);
        java.lang.String str89 = locale77.getExtension('a');
        java.util.Locale.Builder builder90 = builder55.setLocale(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime59", (dateTime13.compareTo(dateTime59) == 0) == dateTime13.equals(dateTime59));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0521");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = chronology2.months();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfHalfday();
        long long10 = dateTimeField8.roundCeiling(2055741972825L);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        java.lang.Integer int21 = dateTimeParserBucket17.getOffsetInteger();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        int int24 = dateTimeField23.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusMillis((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.minus(readablePeriod40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale42.getISO3Language();
        java.util.Locale locale46 = locale42.stripExtensions();
        java.lang.String str47 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, locale46);
        java.lang.String str48 = dateTimeField8.getAsText((-62167962718010L), locale46);
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str52 = dateTimeField8.getAsText(273, locale51);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withYear((int) (short) 10);
        int int59 = localDateTime58.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.plusMinutes(284);
        org.joda.time.LocalDateTime.Property property62 = localDateTime58.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusHours((int) (byte) 0);
        boolean boolean69 = dateTime67.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone71 = dateTimeZone70.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime67.toMutableDateTime(dateTimeZone70);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = dateTimeZone70.getName((long) (byte) 1, locale74);
        java.lang.String str76 = locale74.getScript();
        java.lang.String str77 = locale74.getScript();
        java.util.Locale.setDefault(locale74);
        java.lang.String str79 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime58, 473, locale74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime65", (dateTime3.compareTo(dateTime65) == 0) == dateTime3.equals(dateTime65));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0522");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField22 = chronology2.halfdays();
        boolean boolean23 = durationField22.isPrecise();
        org.joda.time.DurationFieldType durationFieldType24 = durationField22.getType();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        boolean boolean30 = durationFieldType24.isSupported(chronology27);
        java.lang.String str31 = durationFieldType24.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime34.year();
        org.joda.time.DateTime dateTime39 = dateTime34.minusSeconds(241);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds(2022);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusHours(49);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime52 = property49.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        java.util.Date date57 = dateTime54.toDate();
        org.joda.time.DateTime.Property property58 = dateTime54.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = property58.getAsShortText(locale59);
        int int61 = property49.getMaximumShortTextLength(locale59);
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale62.getISO3Language();
        java.util.Locale locale66 = locale62.stripExtensions();
        java.lang.String str67 = locale62.getISO3Language();
        java.lang.String str68 = locale59.getDisplayLanguage(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology42, locale62);
        org.joda.time.DurationField durationField70 = durationFieldType24.getField(chronology42);
        java.lang.String str71 = durationFieldType24.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField70", (durationField22.compareTo(durationField70) == 0) == durationField22.equals(durationField70));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0523");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.centuryOfEra();
        org.joda.time.DurationField durationField42 = chronology35.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.halfdayOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.halfdayOfDay();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        int int56 = dateTimeField52.getMaximumShortTextLength(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale53, (java.lang.Integer) 149);
        int int59 = dateTimeField43.getMaximumTextLength(locale53);
        java.lang.String str60 = locale53.getDisplayName();
        java.lang.String str61 = locale53.getDisplayName();
        int int62 = property32.getMaximumTextLength(locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime36", (dateTime19.compareTo(dateTime36) == 0) == dateTime19.equals(dateTime36));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0524");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.halfdays();
        org.joda.time.DurationField durationField8 = chronology3.halfdays();
        org.joda.time.DurationField durationField9 = chronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property16 = dateTime13.minuteOfHour();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = locale17.getDisplayName(locale23);
        int int27 = property16.getMaximumTextLength(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 642, chronology3, locale23);
        org.joda.time.DateTimeField dateTimeField29 = chronology3.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime11", (dateTime4.compareTo(dateTime11) == 0) == dateTime4.equals(dateTime11));
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0525");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("years");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar10 = dateTime9.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime9.withChronology(chronology13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        boolean boolean37 = dateTimeZone34.isFixed();
        boolean boolean38 = dateTimeZone34.isFixed();
        long long40 = dateTimeZone34.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime41 = dateTime14.withZone(dateTimeZone34);
        boolean boolean42 = languageRange1.equals((java.lang.Object) dateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime14", (dateTime9.compareTo(dateTime14) == 0) == dateTime9.equals(dateTime14));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0526");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.DateTime dateTime15 = property12.roundCeilingCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime24.getZone();
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getOffset((long) 'x');
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime15, dateTimeZone28);
        int int33 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime.Property property34 = dateTime32.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (byte) 100);
        boolean boolean42 = dateTime40.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours((int) (byte) 0);
        java.util.Date date47 = dateTime44.toDate();
        boolean boolean48 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime50 = dateTime44.minusSeconds(241);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.plus(readablePeriod51);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfSecond();
        org.joda.time.DurationField durationField60 = chronology56.seconds();
        org.joda.time.DurationField durationField61 = chronology56.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology56.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(chronology70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property77 = dateTime74.centuryOfEra();
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        java.lang.String str79 = locale78.getLanguage();
        java.lang.String str80 = property77.getAsText(locale78);
        java.lang.String str81 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDateTime71, (-1), locale78);
        java.util.Locale.setDefault(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology56, locale78, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DurationField durationField86 = chronology56.centuries();
        org.joda.time.DurationField durationField87 = chronology56.months();
        org.joda.time.DateTimeField dateTimeField88 = chronology56.year();
        org.joda.time.DateTime dateTime89 = dateTime52.toDateTime(chronology56);
        org.joda.time.DateTime dateTime91 = dateTime52.plusDays(10278964);
        int int92 = property34.getDifference((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime36", (dateTime3.compareTo(dateTime36) == 0) == dateTime3.equals(dateTime36));
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0527");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        int int16 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusWeeks(405);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = localDateTime14.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((-1));
        org.joda.time.DateTime dateTime45 = dateTime41.plusHours((int) (byte) 100);
        boolean boolean47 = dateTime45.isBefore((long) ' ');
        int int48 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime45);
        dateTimeParserBucket27.setZone(dateTimeZone38);
        long long52 = dateTimeZone38.convertLocalToUTC((long) 59, false);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-6216719500799352L), dateTimeZone38);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds(575);
        boolean boolean56 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime41", (dateTime3.compareTo(dateTime41) == 0) == dateTime3.equals(dateTime41));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0528");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((long) 25);
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = property6.getAsShortText(locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(10);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateTime dateTime21 = property18.addToCopy((long) 25);
        int int22 = property6.getDifference((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = dateTime21.isBefore((long) 304);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime21.toMutableDateTimeISO();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.era();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime21.toMutableDateTime(chronology32);
        org.joda.time.DurationField durationField38 = chronology32.minutes();
        long long40 = durationField38.getMillis((long) 2002);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime37", (dateTime9.compareTo(mutableDateTime37) == 0) == dateTime9.equals(mutableDateTime37));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0529");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillisOfSecond((int) '4');
        org.joda.time.Instant instant14 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime9.plusHours(682);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology20.seconds();
        org.joda.time.DurationField durationField25 = chronology20.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.era();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology20.minutes();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        dateTimeParserBucket34.saveField(dateTimeFieldType38, "it", locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(673L, chronology20, locale40, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket59.setZone(dateTimeZone64);
        dateTimeParserBucket50.setZone(dateTimeZone64);
        java.lang.String str68 = dateTimeZone64.getNameKey((long) 25);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        boolean boolean72 = dateTime70.isBefore(readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime70.toMutableDateTime(dateTimeZone73);
        long long77 = dateTimeZone73.nextTransition(97701L);
        long long79 = dateTimeZone64.getMillisKeepLocal(dateTimeZone73, (long) 241);
        dateTimeParserBucket44.setZone(dateTimeZone64);
        boolean boolean82 = dateTimeZone64.isStandardOffset(17959994763123L);
        org.joda.time.DateTime dateTime83 = dateTime9.toDateTime(dateTimeZone64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime70", (dateTime3.compareTo(dateTime70) == 0) == dateTime3.equals(dateTime70));
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0530");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.halfdayOfDay();
        java.lang.String str41 = dateTimeField40.getName();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property48 = dateTime45.centuryOfEra();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = property48.getAsText(locale49);
        java.lang.String str52 = locale43.getDisplayName(locale49);
        java.lang.String str53 = locale49.getISO3Language();
        boolean boolean54 = locale49.hasExtensions();
        java.lang.String str55 = dateTimeField40.getAsText((-630793759707L), locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime45", (dateTime3.compareTo(dateTime45) == 0) == dateTime3.equals(dateTime45));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0531");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime3.withDayOfMonth(19);
        org.joda.time.Chronology chronology9 = dateTime3.getChronology();
        int int10 = dateTime3.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime15.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime32.getZone();
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime21, chronology34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        java.lang.String str40 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = dateTimeField41.getAsShortText((long) (byte) -1, locale43);
        java.util.Locale locale45 = locale43.stripExtensions();
        java.lang.String str46 = locale45.getScript();
        java.lang.String str47 = locale45.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 3, chronology34, locale45);
        org.joda.time.DateTime dateTime49 = dateTime3.toDateTime(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime26", (dateTime1.compareTo(dateTime26) == 0) == dateTime1.equals(dateTime26));
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0532");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.Chronology chronology47 = chronology41.withZone(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology47.add(readablePeriod48, 0L, 603);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusWeeks((-593));
        long long62 = chronology47.set((org.joda.time.ReadablePartial) localDateTime60, (long) 685);
        org.joda.time.DurationField durationField63 = chronology47.centuries();
        org.joda.time.DurationField durationField64 = durationFieldType38.getField(chronology47);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField71 = chronology67.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology67.year();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.hourOfDay();
        boolean boolean75 = durationFieldType38.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField76 = chronology67.minuteOfDay();
        org.joda.time.DateTime dateTime77 = dateTime37.withChronology(chronology67);
        org.joda.time.DurationField durationField78 = chronology67.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime77", (dateTime37.compareTo(dateTime77) == 0) == dateTime37.equals(dateTime77));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0533");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(441);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime21.toMutableDateTime(dateTimeZone24);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = dateTimeZone24.getName((long) (byte) 1, locale28);
        org.joda.time.Chronology chronology30 = chronology11.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property35 = dateTime32.centuryOfEra();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        long long37 = property35.remainder();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = property35.getAsText(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology30, locale38, (java.lang.Integer) 180);
        dateTimeParserBucket44.setOffset(818);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int52 = localDateTime48.get(dateTimeFieldType51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.millisOfSecond();
        org.joda.time.DurationField durationField61 = chronology57.seconds();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime54, chronology57);
        org.joda.time.DateTimeField dateTimeField63 = chronology57.dayOfWeek();
        dateTimeParserBucket44.saveField(dateTimeField63, 569);
        org.joda.time.Chronology chronology66 = dateTimeParserBucket44.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(chronology69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plus(readableDuration71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfMonth();
        long long74 = property73.remainder();
        org.joda.time.LocalDateTime localDateTime75 = property73.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.minusMinutes(970);
        long long81 = chronology66.set((org.joda.time.ReadablePartial) localDateTime75, 2711478993L);
        org.joda.time.DateTime dateTime82 = dateTime6.withChronology(chronology66);
        org.joda.time.DateTime dateTime84 = dateTime6.plusDays(431);
        org.joda.time.DateTime.Property property85 = dateTime84.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime82", (dateTime6.compareTo(dateTime82) == 0) == dateTime6.equals(dateTime82));
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0534");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long30 = dateTime28.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime28.getZone();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1644910003302L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DurationField durationField40 = chronology37.hours();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DurationField durationField47 = chronology43.seconds();
        org.joda.time.DurationField durationField48 = chronology43.minutes();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.era();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.lang.String str57 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale56);
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology37, locale56);
        java.lang.String str60 = dateTimeZone31.getName(1645514809390L, locale56);
        java.lang.String str61 = dateTimeField16.getAsText(26977632, locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0535");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        long long39 = dateTimeZone33.adjustOffset(1014721200000L, false);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime10.toMutableDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DurationField durationField47 = chronology43.seconds();
        org.joda.time.DurationField durationField48 = chronology43.minutes();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.era();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.weekOfWeekyear();
        long long53 = dateTimeField50.addWrapField(0L, 538);
        boolean boolean54 = dateTimeZone33.equals((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime13", (dateTime10.compareTo(dateTime13) == 0) == dateTime10.equals(dateTime13));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0536");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) '#', 837);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        boolean boolean17 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime19.year();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(558);
        boolean boolean30 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.minus((long) 597);
        org.joda.time.DateTime.Property property33 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DurationField durationField42 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        strSet52.clear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        boolean boolean59 = strSet52.contains((java.lang.Object) dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime34.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) instant16, dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readablePeriod63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant16", (dateTime1.compareTo(instant16) == 0) == dateTime1.equals(instant16));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0537");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 593);
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology4, locale5, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField9 = null;
        dateTimeParserBucket8.saveField(dateTimeField9, (int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        java.lang.Integer int21 = dateTimeParserBucket17.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket17.setZone(dateTimeZone22);
        dateTimeParserBucket8.setZone(dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.getName((long) 'u');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readableDuration32);
        int int34 = localDateTime33.getMinuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime27.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime35.withYearOfEra(610);
        boolean boolean39 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime35.toString(dateTimeFormatter40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant2", (dateTime1.compareTo(instant2) == 0) == dateTime1.equals(instant2));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0538");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = dateTimeField4.getAsShortText((int) (byte) 10, locale20);
        long long24 = dateTimeField4.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getMillisOfSecond();
        org.joda.time.DateTime.Property property32 = dateTime29.minuteOfHour();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property38 = dateTime35.centuryOfEra();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = locale33.getDisplayName(locale39);
        int int43 = property32.getMaximumTextLength(locale39);
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str45 = dateTimeField4.getAsText((int) (short) 100, locale39);
        java.util.Locale.setDefault(locale39);
        java.util.Locale locale47 = locale39.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime49.toMutableDateTime();
        int int53 = dateTime49.getMillisOfSecond();
        org.joda.time.DateTime.Property property54 = dateTime49.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology61);
        java.lang.String str63 = chronology61.toString();
        org.joda.time.DurationField durationField64 = chronology61.hours();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.millisOfSecond();
        org.joda.time.DurationField durationField71 = chronology67.seconds();
        org.joda.time.DurationField durationField72 = chronology67.minutes();
        org.joda.time.DateTimeField dateTimeField73 = chronology67.era();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readablePeriod78);
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = dateTimeField73.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, locale80);
        java.util.Set<java.lang.String> strSet82 = locale80.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology61, locale80);
        org.joda.time.DurationField durationField84 = durationFieldType57.getField(chronology61);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("87");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology61, locale86, (java.lang.Integer) 999, 14);
        java.lang.String str90 = property54.getAsShortText(locale86);
        java.lang.String str91 = locale39.getDisplayScript(locale86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime62", (dateTime11.compareTo(dateTime62) == 0) == dateTime11.equals(dateTime62));
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0539");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime.Property property5 = dateTime3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        long long9 = dateTimeZone6.getMillisKeepLocal(dateTimeZone7, (long) 634);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(19);
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime.Property property14 = dateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        dateTimeParserBucket28.saveField(dateTimeFieldType32, "it", locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology18, locale34, (java.lang.Integer) 9, 538);
        java.lang.String str39 = locale34.getLanguage();
        java.lang.String str40 = locale34.getScript();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = locale34.getDisplayLanguage(locale41);
        boolean boolean43 = property14.equals((java.lang.Object) locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0540");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.toString();
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone43, (long) 23);
        org.joda.time.DateTime dateTime49 = dateTime13.toDateTime(dateTimeZone43);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        int int57 = localDateTime56.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusYears((-292275054));
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.halfdayOfDay();
        org.joda.time.DurationField durationField70 = chronology66.millis();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.weekyearOfCentury();
        boolean boolean72 = strSet63.contains((java.lang.Object) chronology66);
        java.util.Locale locale73 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology66, locale73, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(chronology66);
        boolean boolean77 = localDateTime56.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.DateTime dateTime78 = dateTime49.withFields((org.joda.time.ReadablePartial) localDateTime76);
        int int79 = dateTime49.getYearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay80 = dateTime49.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime67", (dateTime1.compareTo(dateTime67) == 0) == dateTime1.equals(dateTime67));
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0541");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        java.lang.String str12 = dateTimeField10.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        int int18 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        int int22 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        java.lang.String str48 = dateTimeZone44.getNameKey((long) 25);
        long long50 = dateTimeZone44.previousTransition((long) 292278993);
        long long54 = dateTimeZone44.convertLocalToUTC(120100L, false, (long) 26751);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone44);
        long long56 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime55.plusMinutes(137);
        int int59 = dateTime58.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime55", (dateTime9.compareTo(dateTime55) == 0) == dateTime9.equals(dateTime55));
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0542");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeZone17.getName((long) (byte) 1, locale21);
        org.joda.time.Chronology chronology23 = chronology4.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology4.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 26751806, chronology4);
        org.joda.time.DateTimeField dateTimeField26 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime30.toString(dateTimeFormatter33);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("20");
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        java.lang.String str41 = dateTime30.toString("1969", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology4, locale36, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField44 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology4.dayOfMonth();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime46", (dateTime12.compareTo(dateTime46) == 0) == dateTime12.equals(dateTime46));
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        boolean boolean3 = dateTime1.isBefore((long) 241);
        org.joda.time.DateTime dateTime5 = dateTime1.minusHours(400);
        org.joda.time.DateTime dateTime7 = dateTime1.plus((long) 1052);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology18);
        org.joda.time.DateTime dateTime25 = dateTime1.plusMinutes(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis(910800000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime23", (dateTime25.compareTo(dateTime23) == 0) == dateTime25.equals(dateTime23));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0544");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray27 = localDateTime26.getValues();
        int[] intArray29 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localDateTime23, 0, intArray27, (int) (short) 10);
        int int30 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime12, intArray27);
        int int31 = localDateTime12.size();
        org.joda.time.Chronology chronology32 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale34.getDisplayLanguage();
        java.util.Locale locale39 = new java.util.Locale("", "22");
        java.lang.String str40 = locale34.getDisplayCountry(locale39);
        java.util.Locale.setDefault(locale39);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 385, chronology32, locale42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekyear((-1));
        org.joda.time.DateTime dateTime50 = dateTime46.plusHours((int) (byte) 100);
        boolean boolean52 = dateTime50.isBefore((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.plus(readablePeriod53);
        org.joda.time.DateTime dateTime56 = dateTime50.plusYears(26751557);
        int int57 = dateTime56.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.minus(readableDuration59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis(26771354);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime65 = dateTime62.withDurationAdded(readableDuration63, 346);
        org.joda.time.DateTime.Property property66 = dateTime65.centuryOfEra();
        boolean boolean67 = dateTimeParserBucket44.restoreState((java.lang.Object) property66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime46", (dateTime4.compareTo(dateTime46) == 0) == dateTime4.equals(dateTime46));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0545");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField15.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField15.getType();
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 623);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        boolean boolean30 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property39 = dateTime36.centuryOfEra();
        org.joda.time.DateTime dateTime41 = dateTime36.minusYears(558);
        org.joda.time.DateTime dateTime42 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.DateTime dateTime46 = dateTime42.minusYears(453);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis(899);
        boolean boolean49 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime46.getZone();
        boolean boolean52 = dateTimeZone50.isStandardOffset(1009843200597L);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime61.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusMillis(603);
        int int78 = localDateTime77.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.plusSeconds(170);
        boolean boolean81 = localDateTime70.isAfter((org.joda.time.ReadablePartial) localDateTime80);
        boolean boolean82 = localDateTime57.isEqual((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.Chronology chronology83 = localDateTime57.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.seconds();
        boolean boolean85 = dateTimeZone50.equals((java.lang.Object) chronology83);
        org.joda.time.DateTimeField dateTimeField86 = chronology83.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField87 = chronology83.dayOfWeek();
        boolean boolean88 = dateTimeFieldType17.isSupported(chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime21", (dateTime11.compareTo(dateTime21) == 0) == dateTime11.equals(dateTime21));
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0546");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime15.getZone();
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getOffset((long) 'x');
        boolean boolean23 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeZone19);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 92);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 176);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DurationField durationField34 = chronology30.seconds();
        org.joda.time.DurationField durationField35 = chronology30.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        boolean boolean42 = dateTime40.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime40.toMutableDateTime(dateTimeZone43);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = dateTimeZone43.getName((long) (byte) 1, locale47);
        org.joda.time.Chronology chronology49 = chronology30.withZone(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField51 = chronology30.dayOfYear();
        dateTimeParserBucket5.saveField(dateTimeField51, 41345008);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime38", (dateTime11.compareTo(dateTime38) == 0) == dateTime11.equals(dateTime38));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0547");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        long long15 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(10);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear((int) (short) 100);
        int int46 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int47 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        long long50 = dateTimeField36.set(1L, 837);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = dateTimeField36.getAsText((long) 7, locale52);
        org.joda.time.DateTime dateTime54 = property29.setCopy("999", locale52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours((int) (byte) 0);
        boolean boolean60 = dateTime58.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime58.toMutableDateTime(dateTimeZone61);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = dateTimeZone61.getName((long) (byte) 1, locale65);
        java.lang.String str68 = locale65.getUnicodeLocaleType("52");
        java.lang.String str69 = locale52.getDisplayVariant(locale65);
        dateTimeParserBucket5.saveField(dateTimeFieldType18, "117", locale65);
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology72, locale73, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        int int78 = dateTimeParserBucket76.getOffset();
        org.joda.time.Chronology chronology79 = dateTimeParserBucket76.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.eras();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.centuryOfEra();
        boolean boolean82 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology79);
        org.joda.time.DurationField durationField83 = chronology79.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField80, durationField83, and durationField80", !(durationField80.compareTo(durationField83) == 0) || (Math.signum(durationField80.compareTo(durationField80)) == Math.signum(durationField83.compareTo(durationField80))));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0548");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime29 = dateTime23.withFieldAdded(durationFieldType27, 817);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket36.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property58 = dateTime55.year();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        org.joda.time.DateTime dateTime65 = dateTime60.minusYears(558);
        boolean boolean66 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime60);
        int int67 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.centuryOfEra();
        int int73 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology74 = dateTime71.getChronology();
        org.joda.time.Instant instant75 = dateTime71.toInstant();
        boolean boolean76 = dateTime29.isAfter((org.joda.time.ReadableInstant) instant75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime71", (dateTime18.compareTo(dateTime71) == 0) == dateTime18.equals(dateTime71));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0549");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        dateTimeParserBucket30.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        java.lang.String str42 = dateTimeField40.getAsShortText((long) 28);
        dateTimeParserBucket30.saveField(dateTimeField40, 100);
        boolean boolean46 = dateTimeField40.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy((-592L));
        int int52 = property49.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = property49.addToCopy(593);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime54, 608, locale56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.withCenturyOfEra(663);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology70, locale71, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField75 = null;
        dateTimeParserBucket74.saveField(dateTimeField75, (int) (short) 0);
        java.lang.Integer int78 = dateTimeParserBucket74.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket74.setZone(dateTimeZone79);
        dateTimeParserBucket65.setZone(dateTimeZone79);
        java.util.TimeZone timeZone82 = dateTimeZone79.toTimeZone();
        long long84 = dateTimeZone79.convertUTCToLocal((long) 441);
        org.joda.time.DateTime dateTime85 = localDateTime54.toDateTime(dateTimeZone79);
        long long87 = chronology21.set((org.joda.time.ReadablePartial) localDateTime54, (long) 687);
        org.joda.time.DurationField durationField88 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField89 = chronology21.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField88", (durationField6.compareTo(durationField88) == 0) == durationField6.equals(durationField88));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0550");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 593);
        org.joda.time.DateTime dateTime15 = dateTime10.plusDays(837);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        int int24 = dateTimeParserBucket23.getOffset();
        long long25 = dateTimeParserBucket23.computeMillis();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        dateTimeParserBucket23.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str41 = dateTimeZone36.getName((long) 602);
        boolean boolean42 = mutableDateTime17.equals((java.lang.Object) dateTimeZone36);
        java.lang.String str43 = mutableDateTime17.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0551");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMillis(814);
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        dateTimeParserBucket21.saveField(dateTimeFieldType25, "it", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology11, locale27, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.halfdayOfDay();
        org.joda.time.DurationField durationField38 = chronology34.millis();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology34.getZone();
        long long41 = dateTimeZone39.convertUTCToLocal((long) 558);
        dateTimeParserBucket31.setZone(dateTimeZone39);
        java.util.Locale locale43 = dateTimeParserBucket31.getLocale();
        java.lang.String str44 = property7.getAsText(locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime12", (dateTime1.compareTo(dateTime12) == 0) == dateTime1.equals(dateTime12));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0552");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = chronology4.minutes();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        dateTimeParserBucket18.saveField(dateTimeFieldType22, "it", locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(673L, chronology4, locale24, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology29, locale30, (java.lang.Integer) 597);
        java.lang.String str33 = chronology29.toString();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.minuteOfHour();
        int int42 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusSeconds(1970);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime46.toMutableDateTime();
        int int50 = dateTime46.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime46.centuryOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundCeilingCopy();
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime55 = dateTime52.plus((long) 191);
        int int56 = dateTime52.getMinuteOfDay();
        org.joda.time.Instant instant57 = dateTime52.toInstant();
        org.joda.time.DateTime dateTime58 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime60.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.monthOfYear();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.era();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        long long72 = dateTimeField70.roundHalfEven(1970999L);
        long long74 = dateTimeField70.roundHalfCeiling(0L);
        org.joda.time.ReadablePartial readablePartial75 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime77.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime84.withDurationAdded(readableDuration85, 122);
        int[] intArray88 = localDateTime87.getValues();
        int int89 = dateTimeField70.getMinimumValue(readablePartial75, intArray88);
        chronology29.validate((org.joda.time.ReadablePartial) localDateTime44, intArray88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and instant57", (dateTime52.compareTo(instant57) == 0) == dateTime52.equals(instant57));
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0553");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) '#', 837);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        boolean boolean17 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime19.year();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(558);
        boolean boolean30 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.minus((long) 597);
        org.joda.time.DateTime.Property property33 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DurationField durationField42 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        strSet52.clear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        boolean boolean59 = strSet52.contains((java.lang.Object) dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime34.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) instant16, dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusHours(37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant16", (dateTime1.compareTo(instant16) == 0) == dateTime1.equals(instant16));
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0554");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(99);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.DateTime.Property property19 = dateTime17.year();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology23.seconds();
        org.joda.time.DurationField durationField28 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        boolean boolean35 = dateTime33.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = dateTimeZone36.getName((long) (byte) 1, locale40);
        org.joda.time.Chronology chronology42 = chronology23.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property47 = dateTime44.centuryOfEra();
        org.joda.time.DurationField durationField48 = property47.getRangeDurationField();
        long long49 = property47.remainder();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.toLanguageTag();
        java.lang.String str54 = property47.getAsText(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology42, locale50, (java.lang.Integer) 180);
        java.lang.Integer int57 = dateTimeParserBucket56.getPivotYear();
        java.lang.Integer int58 = dateTimeParserBucket56.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = property63.getAsText(locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours((int) (byte) 0);
        boolean boolean72 = dateTime70.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime70.toMutableDateTime(dateTimeZone73);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = dateTimeZone73.getName((long) (byte) 1, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str80 = property63.getAsShortText(locale77);
        int int81 = property63.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property63.getFieldType();
        java.lang.String str83 = dateTimeFieldType82.toString();
        java.util.Locale locale88 = new java.util.Locale("2022-02-22T07:26:59.243+00:00:00.052", "869", "2022-02-22T07:27:19.699+00:00:00.052");
        dateTimeParserBucket56.saveField(dateTimeFieldType82, "1047", locale88);
        boolean boolean90 = dateTime17.isSupported(dateTimeFieldType82);
        int int91 = dateTime17.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0555");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology8.add(readablePeriod9, 0L, 603);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.hourOfHalfday();
        int int16 = dateTimeField14.get(536484361101L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) (short) 100);
        int int24 = localDateTime23.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMillis(2675822);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.clear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        java.util.Date date43 = dateTime40.toDate();
        org.joda.time.DateTime.Property property44 = dateTime40.dayOfMonth();
        org.joda.time.DateTime.Property property45 = dateTime40.dayOfMonth();
        java.lang.String str46 = property45.getAsString();
        boolean boolean47 = localDateTime38.equals((java.lang.Object) property45);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfSecond();
        org.joda.time.DurationField durationField56 = chronology52.seconds();
        org.joda.time.DurationField durationField57 = chronology52.minutes();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.era();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField60 = chronology52.minutes();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField67 = null;
        dateTimeParserBucket66.saveField(dateTimeField67, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale72 = java.util.Locale.ROOT;
        dateTimeParserBucket66.saveField(dateTimeFieldType70, "it", locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket(673L, chronology52, locale72, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology77, locale78, (java.lang.Integer) 597);
        java.lang.String str81 = property45.getAsText(locale78);
        java.util.Locale.Builder builder82 = builder29.setLocale(locale78);
        java.lang.String str83 = locale78.getVariant();
        java.lang.String str84 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime40", (dateTime3.compareTo(dateTime40) == 0) == dateTime3.equals(dateTime40));
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0556");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        java.util.Date date5 = dateTime2.toDate();
        org.joda.time.DateTime.Property property6 = dateTime2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear((-1));
        org.joda.time.DateTime dateTime12 = dateTime8.plusHours((int) (byte) 100);
        int int13 = dateTime8.getDayOfYear();
        int int14 = property6.getDifference((org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str15 = property6.getAsText();
        org.joda.time.DateTime dateTime16 = property6.withMaximumValue();
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        int int18 = dateTime16.getYear();
        org.joda.time.DateTime.Property property19 = dateTime16.yearOfEra();
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readableDuration28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyearOfCentury();
        java.lang.String str36 = dateTimeField34.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfEvenCopy();
        int int42 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean45 = localDateTime41.equals((java.lang.Object) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int50 = localDateTime47.get(dateTimeFieldType49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime44.property(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType49.getRangeDurationType();
        int int53 = localDateTime29.get(dateTimeFieldType49);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        boolean boolean56 = localDateTime29.equals((java.lang.Object) category54);
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category57, locale58);
        boolean boolean60 = locale58.hasExtensions();
        java.util.Locale.setDefault(category54, locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(26826105L, chronology20, locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime33", (dateTime2.compareTo(dateTime33) == 0) == dateTime2.equals(dateTime33));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0557");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        dateTimeParserBucket30.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        java.lang.String str42 = dateTimeField40.getAsShortText((long) 28);
        dateTimeParserBucket30.saveField(dateTimeField40, 100);
        boolean boolean46 = dateTimeField40.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy((-592L));
        int int52 = property49.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = property49.addToCopy(593);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime54, 608, locale56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.withCenturyOfEra(663);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology70, locale71, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField75 = null;
        dateTimeParserBucket74.saveField(dateTimeField75, (int) (short) 0);
        java.lang.Integer int78 = dateTimeParserBucket74.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket74.setZone(dateTimeZone79);
        dateTimeParserBucket65.setZone(dateTimeZone79);
        java.util.TimeZone timeZone82 = dateTimeZone79.toTimeZone();
        long long84 = dateTimeZone79.convertUTCToLocal((long) 441);
        org.joda.time.DateTime dateTime85 = localDateTime54.toDateTime(dateTimeZone79);
        long long87 = chronology21.set((org.joda.time.ReadablePartial) localDateTime54, (long) 687);
        org.joda.time.DurationField durationField88 = chronology21.seconds();
        org.joda.time.DurationField durationField89 = chronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField88", (durationField6.compareTo(durationField88) == 0) == durationField6.equals(durationField88));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0558");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField6, and durationField13", !(durationField28.compareTo(durationField6) == 0) || (Math.signum(durationField28.compareTo(durationField13)) == Math.signum(durationField6.compareTo(durationField13))));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0559");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(837L, dateTimeZone1);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(648);
        boolean boolean12 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket19.getZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone36);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.getDefault(category39);
        java.lang.String str42 = dateTimeZone36.getShortName((long) 593, locale41);
        org.joda.time.DateTime dateTime43 = dateTime11.toDateTime(dateTimeZone36);
        boolean boolean44 = dateTime11.isBeforeNow();
        org.joda.time.Instant instant45 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime47 = dateTime11.withYear(26928);
        org.joda.time.DateMidnight dateMidnight48 = dateTime11.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant45", (dateTime11.compareTo(instant45) == 0) == dateTime11.equals(instant45));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0560");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField9 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField10.getType();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(4);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMonths(175);
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        boolean boolean26 = dateTime24.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        boolean boolean31 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfEvenCopy();
        java.lang.String str40 = property38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property38.getFieldType();
        int int42 = dateTime34.get(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property47 = dateTime44.centuryOfEra();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = property47.getAsText(locale48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (byte) 0);
        boolean boolean56 = dateTime54.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone57);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = dateTimeZone57.getName((long) (byte) 1, locale61);
        java.lang.String str63 = locale61.getScript();
        java.lang.String str64 = property47.getAsShortText(locale61);
        int int65 = property47.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property47.getFieldType();
        boolean boolean67 = dateTime34.isSupported(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekyear((-1));
        org.joda.time.DateTime dateTime74 = dateTime70.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.plus(readableDuration75);
        org.joda.time.DateTime dateTime78 = dateTime76.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime80 = dateTime76.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime80.toMutableDateTime();
        org.joda.time.Chronology chronology82 = mutableDateTime81.getChronology();
        org.joda.time.DurationField durationField83 = durationFieldType68.getField(chronology82);
        java.lang.String str84 = durationFieldType68.toString();
        boolean boolean85 = localDateTime19.isSupported(durationFieldType68);
        int int86 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime22", (dateTime3.compareTo(dateTime22) == 0) == dateTime3.equals(dateTime22));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0561");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear((int) (short) 100);
        int int16 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        int int17 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        int int23 = dateTime21.getMillisOfSecond();
        org.joda.time.DateTime dateTime24 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology25 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.weekyear();
        boolean boolean33 = property32.isLeap();
        org.joda.time.LocalDateTime localDateTime35 = property32.addToCopy((long) 26775034);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        java.lang.String str49 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        java.lang.String str55 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.weekyear();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology53);
        int int60 = dateTimeField50.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59);
        boolean boolean61 = localDateTime44.equals((java.lang.Object) dateTimeField50);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = dateTimeField50.getAsText(90000000L, locale64);
        java.lang.String str67 = locale64.getDisplayLanguage();
        java.lang.String str68 = locale64.getScript();
        int int69 = property32.getMaximumShortTextLength(locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 26846, chronology25, locale64, (java.lang.Integer) 1000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime48", (dateTime19.compareTo(dateTime48) == 0) == dateTime19.equals(dateTime48));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0562");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime23.toMutableDateTime(dateTimeZone26);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = dateTimeZone26.getName((long) (byte) 1, locale30);
        org.joda.time.Chronology chronology32 = chronology13.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology13.getZone();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 26751806, chronology13);
        org.joda.time.DateTimeField dateTimeField35 = chronology13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours((int) (byte) 0);
        boolean boolean41 = dateTime39.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = dateTime39.toString(dateTimeFormatter42);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale45.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("20");
        java.lang.String str49 = locale45.getDisplayVariant(locale48);
        java.lang.String str50 = dateTime39.toString("1969", locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology13, locale45, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField53 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology13.dayOfMonth();
        boolean boolean55 = durationFieldType8.isSupported(chronology13);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology58);
        java.lang.String str60 = chronology58.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.Chronology chronology64 = chronology58.withZone(dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        long long68 = chronology64.add(readablePeriod65, 0L, 603);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology64);
        org.joda.time.DurationField durationField70 = durationFieldType8.getField(chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0563");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        boolean boolean34 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        java.lang.String str37 = chronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime17.toDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.halfdayOfDay();
        org.joda.time.DurationField durationField46 = chronology42.millis();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.dayOfWeek();
        org.joda.time.DurationField durationField50 = chronology42.months();
        org.joda.time.DurationField durationField51 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField52 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField53 = chronology42.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime17.toMutableDateTime(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime43", (dateTime13.compareTo(dateTime43) == 0) == dateTime13.equals(dateTime43));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0564");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology32);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        org.joda.time.DurationField durationField63 = property62.getRangeDurationField();
        long long64 = property62.remainder();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = property62.getAsText(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology57, locale65, (java.lang.Integer) 180);
        org.joda.time.DateTimeField dateTimeField72 = chronology57.minuteOfHour();
        org.joda.time.DurationField durationField73 = durationFieldType23.getField(chronology57);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.halfdayOfDay();
        org.joda.time.DurationField durationField80 = chronology76.millis();
        org.joda.time.DateTimeZone dateTimeZone81 = chronology76.getZone();
        org.joda.time.DateTimeField dateTimeField82 = chronology76.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField83 = chronology76.dayOfWeek();
        org.joda.time.DurationField durationField84 = chronology76.months();
        org.joda.time.DateTimeField dateTimeField85 = chronology76.year();
        boolean boolean86 = durationFieldType23.isSupported(chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime77", (dateTime46.compareTo(dateTime77) == 0) == dateTime46.equals(dateTime77));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0565");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = property15.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        java.lang.String str21 = dateTimeField19.getAsShortText((long) 38);
        long long24 = dateTimeField19.add((long) 118, 453);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField19.getAsText((long) 876, locale26);
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        java.util.Locale locale40 = dateTimeParserBucket36.getLocale();
        java.util.Locale.setDefault(category30, locale40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property47 = dateTime44.centuryOfEra();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = property47.getAsText(locale48);
        java.lang.String str51 = locale42.getDisplayName(locale48);
        java.lang.String str52 = locale48.getISO3Language();
        java.util.Locale.setDefault(category30, locale48);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime55.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology69, locale70, (java.lang.Integer) (-1), (int) (byte) -1);
        int int74 = dateTimeParserBucket73.getOffset();
        java.lang.Integer int75 = dateTimeParserBucket73.getPivotYear();
        java.util.Locale locale76 = dateTimeParserBucket73.getLocale();
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale79 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean80 = locale79.hasExtensions();
        java.lang.String str81 = locale78.getDisplayLanguage(locale79);
        java.lang.String str82 = locale76.getDisplayName(locale79);
        java.lang.String str83 = localDateTime64.toString("17", locale79);
        java.util.Locale.setDefault(category30, locale79);
        java.util.Set<java.lang.Character> charSet85 = locale79.getExtensionKeys();
        java.lang.String str86 = locale26.getDisplayCountry(locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime44", (dateTime3.compareTo(dateTime44) == 0) == dateTime3.equals(dateTime44));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0566");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        java.lang.Object obj22 = dateTimeParserBucket5.saveState();
        java.util.Locale locale26 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        boolean boolean29 = dateTimeParserBucket5.restoreState((java.lang.Object) locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.getNameKey(52L);
        long long37 = dateTimeZone30.convertLocalToUTC((long) 227, false, 1014721200000L);
        java.lang.String str38 = dateTimeZone30.getID();
        dateTimeParserBucket5.setZone(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DurationField durationField47 = chronology43.seconds();
        org.joda.time.DurationField durationField48 = chronology43.minutes();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.era();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.lang.String str57 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = dateTimeField63.getAsShortText((long) (byte) -1, locale65);
        java.util.Locale locale67 = locale65.stripExtensions();
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = locale56.getDisplayVariant(locale65);
        java.lang.String str70 = locale65.getVariant();
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale65.getDisplayScript(locale71);
        java.lang.String str73 = dateTimeZone30.getName((long) 771, locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime61", (dateTime31.compareTo(dateTime61) == 0) == dateTime31.equals(dateTime61));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0567");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        dateTimeParserBucket21.saveField(dateTimeFieldType28, "97", locale30);
        int int33 = localDateTime13.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime9.withField(dateTimeFieldType28, 12);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.era();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.monthOfYear();
        int int52 = dateTime41.get(dateTimeField51);
        org.joda.time.DateTime dateTime54 = dateTime41.plusYears(2022);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime57 = dateTime41.withDurationAdded(readableDuration55, 555);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withWeekyear((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean63 = dateTime61.isSupported(dateTimeFieldType62);
        boolean boolean64 = dateTime57.isSupported(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime76 = dateTime73.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTime dateTime78 = dateTime76.plusHours(712);
        org.joda.time.Chronology chronology79 = dateTime78.getChronology();
        org.joda.time.DateTime dateTime81 = dateTime78.withMillisOfSecond(912);
        boolean boolean82 = dateTime57.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime69", (dateTime37.compareTo(dateTime69) == 0) == dateTime37.equals(dateTime69));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0568");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime8.getZone();
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getOffset((long) 'x');
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readableDuration19);
        boolean boolean21 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        java.lang.Integer int40 = dateTimeParserBucket36.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket36.setZone(dateTimeZone41);
        dateTimeParserBucket27.setZone(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isFixed();
        boolean boolean45 = dateTimeZone41.isFixed();
        long long47 = dateTimeZone41.convertUTCToLocal((-1L));
        long long49 = dateTimeZone12.getMillisKeepLocal(dateTimeZone41, 3600000L);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = dateTimeZone41.getShortName(1645514761692L, locale51);
        long long58 = dateTimeZone41.convertLocalToUTC(0L, true, 8078400920L);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) (-1510244619764L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = property71.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYear((int) (short) 100);
        int int75 = localDateTime67.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        int int76 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar81 = dateTime80.toGregorianCalendar();
        int int82 = dateTime80.getMillisOfSecond();
        org.joda.time.DateTime dateTime83 = localDateTime67.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        int int84 = localDateTime67.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime67.withMillisOfDay(484);
        boolean boolean87 = localDateTime59.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime78", (dateTime4.compareTo(dateTime78) == 0) == dateTime4.equals(dateTime78));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0569");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        boolean boolean12 = dateTime8.isAfter((long) 950);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket25.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.toString();
        long long47 = dateTimeZone19.getMillisKeepLocal(dateTimeZone42, (long) 23);
        org.joda.time.DateTime dateTime48 = dateTime8.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime50 = dateTime48.withCenturyOfEra(334);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime14", (dateTime3.compareTo(dateTime14) == 0) == dateTime3.equals(dateTime14));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0570");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, 853);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateTime dateTime17 = dateTime14.withYear(625);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        dateTimeParserBucket23.setZone(dateTimeZone37);
        java.lang.String str41 = dateTimeZone37.getName((long) 'u');
        java.lang.String str43 = dateTimeZone37.getNameKey((long) 1978);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTime.Property property50 = dateTime47.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime47.minusMinutes(25);
        int int53 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime47);
        java.lang.String str55 = dateTimeZone37.getShortName((long) 694);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) dateTime17, dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime45", (dateTime3.compareTo(dateTime45) == 0) == dateTime3.equals(dateTime45));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0571");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology8.add(readablePeriod9, 0L, 603);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusWeeks((-593));
        long long23 = chronology8.set((org.joda.time.ReadablePartial) localDateTime21, (long) 685);
        int int24 = localDateTime21.getEra();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra(7);
        boolean boolean52 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths(10);
        org.joda.time.DateTime.Property property59 = dateTime58.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int65 = localDateTime63.get(dateTimeFieldType64);
        int int66 = dateTime58.get(dateTimeFieldType64);
        boolean boolean67 = localDateTime51.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime51.plusMonths(828);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime54", (dateTime3.compareTo(dateTime54) == 0) == dateTime3.equals(dateTime54));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0572");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayLanguage(locale11);
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.util.Set<java.lang.String> strSet15 = locale8.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        dateTimeParserBucket29.saveField(dateTimeFieldType33, "it", locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology19, locale35, (java.lang.Integer) 9, 538);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator41 = strSet40.spliterator();
        boolean boolean42 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.Iterator<java.lang.String> strItor43 = strSet15.iterator();
        java.util.Set<java.lang.String> strSet44 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfHour();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property57 = dateTime54.centuryOfEra();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = property57.getAsText(locale58);
        java.lang.String str61 = locale52.getDisplayName(locale58);
        int int62 = property51.getMaximumTextLength(locale58);
        java.util.Set<java.lang.String> strSet63 = locale58.getUnicodeLocaleAttributes();
        boolean boolean64 = strSet44.removeAll((java.util.Collection<java.lang.String>) strSet63);
        java.lang.Object[] objArray65 = strSet44.toArray();
        java.lang.Object[] objArray66 = strSet44.toArray();
        boolean boolean67 = strSet15.removeAll((java.util.Collection<java.lang.String>) strSet44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime46", (dateTime20.compareTo(dateTime46) == 0) == dateTime20.equals(dateTime46));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(457087L, dateTimeZone1);
        long long6 = dateTimeZone1.adjustOffset((long) 1, true);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12);
        int int16 = localDateTime15.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyearOfCentury();
        java.util.Locale locale30 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = locale30.getDisplayScript();
        int int33 = dateTimeField26.getMaximumShortTextLength(locale30);
        java.util.Calendar calendar34 = dateTime7.toCalendar(locale30);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        int int41 = property40.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property40.addToCopy(608);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfWeek();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.lang.Integer int54 = dateTimeParserBucket50.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket50.setZone(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime dateTime62 = dateTime58.plusHours((int) (byte) 100);
        boolean boolean64 = dateTime62.isBefore((long) ' ');
        int int65 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int72 = localDateTime69.get(dateTimeFieldType71);
        int int73 = dateTime67.get(dateTimeFieldType71);
        int int74 = localDateTime43.get(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime43.withYearOfEra(151);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime43.minusDays(395);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.secondOfMinute();
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("1969-12-07T00:00:00.052");
        java.lang.String str82 = property79.getAsShortText(locale81);
        java.lang.String str83 = locale30.getDisplayName(locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar22 and calendar34", (gregorianCalendar22.compareTo(calendar34) == 0) == gregorianCalendar22.equals(calendar34));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0574");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.minutes();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        dateTimeParserBucket22.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket22.getZone();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        org.joda.time.DurationField durationField47 = chronology44.eras();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTime dateTime49 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.plus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(chronology61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plus(readableDuration63);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusMonths((int) (byte) 100);
        int[] intArray71 = localDateTime70.getValues();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.minusDays(4);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.minus(readableDuration74);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology78);
        java.lang.String str80 = chronology78.toString();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField83 = chronology78.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = dateTimeField83.getType();
        int int85 = localDateTime75.indexOf(dateTimeFieldType84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime64.withField(dateTimeFieldType84, 590);
        java.lang.String str88 = dateTimeFieldType84.getName();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime40.withField(dateTimeFieldType84, 487);
        int[] intArray92 = chronology12.get((org.joda.time.ReadablePartial) localDateTime90, (long) 537);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime45", (dateTime1.compareTo(dateTime45) == 0) == dateTime1.equals(dateTime45));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0575");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        boolean boolean25 = dateTimeFieldType9.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) '#');
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePartial) localDateTime46, 163296000435L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField50 = chronology23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        org.joda.time.Chronology chronology55 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 585, chronology55);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfSecond();
        org.joda.time.DurationField durationField64 = chronology60.seconds();
        org.joda.time.DurationField durationField65 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.era();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology60.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime75 = property74.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withDayOfYear(100);
        int[] intArray79 = chronology60.get((org.joda.time.ReadablePartial) localDateTime75, (long) 863);
        int int80 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDateTime57, intArray79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime53", (dateTime30.compareTo(dateTime53) == 0) == dateTime30.equals(dateTime53));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0576");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField14 = dateTimeField13.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField14, and durationField11", !(durationField11.compareTo(durationField14) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField14.compareTo(durationField11))));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0577");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        long long8 = dateTimeField6.remainder(52L);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField6.getType();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = property16.addWrapFieldToCopy(619);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusSeconds(275);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        java.lang.Integer int31 = dateTimeParserBucket27.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket27.setZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime35.plusHours((int) (byte) 100);
        boolean boolean41 = dateTime39.isBefore((long) ' ');
        int int42 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField58 = null;
        dateTimeParserBucket57.saveField(dateTimeField58, (int) (short) 0);
        java.lang.Integer int61 = dateTimeParserBucket57.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket57.setZone(dateTimeZone62);
        dateTimeParserBucket48.setZone(dateTimeZone62);
        boolean boolean65 = dateTimeZone62.isFixed();
        boolean boolean66 = dateTimeZone62.isFixed();
        long long68 = dateTimeZone62.previousTransition((long) 2);
        long long70 = dateTimeZone32.getMillisKeepLocal(dateTimeZone62, (long) 233);
        long long73 = dateTimeZone32.convertLocalToUTC(3142800120L, true);
        org.joda.time.DateTime dateTime74 = localDateTime18.toDateTime(dateTimeZone32);
        int int75 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0578");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.minusMinutes(576);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra(26798335);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        long long27 = dateTimeParserBucket25.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        int int33 = dateTime31.getMillisOfSecond();
        org.joda.time.DateTime.Property property34 = dateTime31.minuteOfHour();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property40 = dateTime37.centuryOfEra();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = property40.getAsText(locale41);
        java.lang.String str44 = locale35.getDisplayName(locale41);
        int int45 = property34.getMaximumTextLength(locale41);
        java.util.Set<java.lang.String> strSet46 = locale41.getUnicodeLocaleAttributes();
        int int47 = strSet46.size();
        boolean boolean48 = dateTimeParserBucket25.restoreState((java.lang.Object) int47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) 0);
        java.util.Date date53 = dateTime50.toDate();
        org.joda.time.DateTime.Property property54 = dateTime50.dayOfMonth();
        org.joda.time.DateTime.Property property55 = dateTime50.dayOfMonth();
        org.joda.time.DateTime dateTime57 = dateTime50.plusMonths(19);
        org.joda.time.DateTime dateTime59 = dateTime50.plusHours(100);
        org.joda.time.DateTime.Property property60 = dateTime50.dayOfYear();
        int int61 = property60.getMaximumValueOverall();
        boolean boolean62 = dateTimeParserBucket25.restoreState((java.lang.Object) property60);
        org.joda.time.DateTime dateTime63 = property60.roundFloorCopy();
        org.joda.time.DateTime dateTime65 = dateTime63.withCenturyOfEra(420);
        boolean boolean66 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime29", (dateTime3.compareTo(dateTime29) == 0) == dateTime3.equals(dateTime29));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0579");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((-1));
        int int9 = dateTime6.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.plus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        boolean boolean22 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.minutes();
        org.joda.time.DateTime dateTime28 = dateTime6.withChronology(chronology24);
        org.joda.time.Chronology chronology29 = chronology24.withUTC();
        org.joda.time.DateTime dateTime30 = dateTime3.toDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime31 = dateTime3.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime3", (dateTime6.compareTo(dateTime3) == 0) == dateTime6.equals(dateTime3));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0580");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        boolean boolean10 = dateTime8.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks((int) 'a');
        boolean boolean15 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        java.lang.String str24 = property22.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property22.getFieldType();
        int int26 = dateTime18.get(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology29, locale30, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DurationField durationField44 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology39.minutes();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        dateTimeParserBucket53.saveField(dateTimeFieldType57, "it", locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(673L, chronology39, locale59, (java.lang.Integer) 10, 453);
        java.lang.String str64 = locale30.getDisplayVariant(locale59);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime72.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.millisOfSecond();
        boolean boolean81 = dateTimeZone76.isLocalDateTimeGap(localDateTime78);
        java.util.Locale locale86 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale86);
        java.lang.String str88 = dateTimeZone76.getShortName((long) 44, locale86);
        java.lang.String str89 = locale30.getDisplayScript(locale86);
        java.lang.String str90 = dateTime18.toString("2035", locale30);
        java.lang.String str91 = property4.getAsShortText(locale30);
        java.lang.String str92 = locale30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime68", (dateTime6.compareTo(dateTime68) == 0) == dateTime6.equals(dateTime68));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0581");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        java.lang.String str26 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology24);
        int int31 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime30);
        boolean boolean32 = localDateTime15.equals((java.lang.Object) dateTimeField21);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime15.plusMinutes(551);
        int int35 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plus(readableDuration41);
        int[] intArray43 = localDateTime42.getValues();
        chronology4.validate((org.joda.time.ReadablePartial) localDateTime15, intArray43);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        java.lang.String str50 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfWeek();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        dateTimeParserBucket58.saveField(dateTimeFieldType62, "it", locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology48, locale64, (java.lang.Integer) 9, 538);
        java.util.Set<java.lang.String> strSet69 = locale64.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 288, chronology4, locale64, (java.lang.Integer) 450, 845);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0582");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime24.year();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusYears(558);
        boolean boolean35 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra();
        int int42 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime40);
        int int44 = dateTimeZone22.getStandardOffset(213960147L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime40", (dateTime24.compareTo(dateTime40) == 0) == dateTime24.equals(dateTime40));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0583");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property9 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(558);
        boolean boolean12 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime14 = dateTime6.minus((long) 597);
        org.joda.time.DateTime.Property property15 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.era();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, locale32);
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleAttributes();
        strSet34.clear();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        boolean boolean41 = strSet34.contains((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime16.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone40);
        boolean boolean44 = dateTimeZone40.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0584");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DurationField durationField6 = chronology2.weeks();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(512);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        dateTimeParserBucket24.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        java.lang.String str36 = dateTimeField34.getAsShortText((long) 28);
        dateTimeParserBucket24.saveField(dateTimeField34, 100);
        boolean boolean40 = dateTimeField34.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((-592L));
        int int46 = property43.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime48 = property43.addToCopy(593);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime48, 608, locale50);
        org.joda.time.Chronology chronology52 = localDateTime48.getChronology();
        boolean boolean53 = dateTimeFieldType18.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = chronology59.months();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField64 = chronology59.monthOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType(0);
        int[] intArray69 = chronology52.get((org.joda.time.ReadablePartial) localDateTime65, (long) 29);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray69);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar75 = dateTime74.toGregorianCalendar();
        int int76 = dateTime74.getMillisOfSecond();
        org.joda.time.DateTime dateTime78 = dateTime74.minusYears((int) 'x');
        org.joda.time.Chronology chronology79 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.centuryOfEra();
        java.util.Locale.Category category82 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale83 = java.util.Locale.getDefault(category82);
        java.lang.String str84 = dateTimeField80.getAsText((long) 'a', locale83);
        long long86 = dateTimeField80.remainder((long) 538);
        int int88 = dateTimeField80.get((long) 662);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = dateTimeField80.getType();
        int int90 = localDateTime17.get(dateTimeFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime72", (dateTime7.compareTo(dateTime72) == 0) == dateTime7.equals(dateTime72));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0585");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(648);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(569);
        org.joda.time.DateTime dateTime14 = dateTime10.plusDays(575);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime16 = property15.withMaximumValue();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.joda.time.DurationField durationField27 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime32.toMutableDateTime(dateTimeZone35);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = dateTimeZone35.getName((long) (byte) 1, locale39);
        org.joda.time.Chronology chronology41 = chronology22.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField42 = chronology22.halfdays();
        org.joda.time.DurationField durationField43 = chronology22.centuries();
        org.joda.time.DurationField durationField44 = chronology22.centuries();
        long long46 = durationField44.getMillis(817);
        boolean boolean47 = durationField44.isSupported();
        org.joda.time.DurationFieldType durationFieldType48 = durationField44.getType();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.era();
        boolean boolean60 = durationFieldType48.isSupported(chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale64.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology63, locale64, (java.lang.Integer) 227);
        int int70 = dateTimeField61.getMaximumShortTextLength(locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(1645514976413L, chronology17, locale64, (java.lang.Integer) 67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField18 and durationField26", Math.signum(durationField18.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField18)));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0586");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour((int) (short) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(readableDuration14, (int) (byte) 0);
        org.joda.time.DateTime dateTime17 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear(26751);
        org.joda.time.DateTime dateTime21 = dateTime19.minusYears(268);
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours(491);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime31.getZone();
        boolean boolean36 = dateTimeZone35.isFixed();
        int int38 = dateTimeZone35.getOffset((long) 'x');
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readableDuration42);
        boolean boolean44 = dateTimeZone35.isLocalDateTimeGap(localDateTime43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket59.setZone(dateTimeZone64);
        dateTimeParserBucket50.setZone(dateTimeZone64);
        boolean boolean67 = dateTimeZone64.isFixed();
        boolean boolean68 = dateTimeZone64.isFixed();
        long long70 = dateTimeZone64.convertUTCToLocal((-1L));
        long long72 = dateTimeZone35.getMillisKeepLocal(dateTimeZone64, 3600000L);
        long long74 = dateTimeZone35.previousTransition((long) 490);
        boolean boolean76 = dateTimeZone35.isStandardOffset((long) 14);
        java.lang.String str77 = dateTimeZone35.getID();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone35);
        int int79 = dateTime78.getSecondOfMinute();
        boolean boolean80 = dateTime19.equals((java.lang.Object) dateTime78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime27", (dateTime8.compareTo(dateTime27) == 0) == dateTime8.equals(dateTime27));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0587");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        org.joda.time.DateTimeField dateTimeField26 = chronology3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        int int32 = localDateTime31.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime31.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDayOfYear(36);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.withMillisOfDay(0);
        int int42 = dateTime41.getDayOfYear();
        org.joda.time.DateTime dateTime44 = dateTime41.withYear(139);
        org.joda.time.DateTime dateTime46 = dateTime44.plusYears(994);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths(897);
        org.joda.time.DateTime dateTime49 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime37", (dateTime4.compareTo(dateTime37) == 0) == dateTime4.equals(dateTime37));
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0588");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(26751557);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.minus(readablePeriod29);
        org.joda.time.DateTime.Property property31 = dateTime27.secondOfDay();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime27.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime27.plus(148150960135L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime39", (dateTime27.compareTo(dateTime39) == 0) == dateTime27.equals(dateTime39));
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0589");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(837);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(49);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMonths(0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(readableDuration24, 853);
        org.joda.time.DateTime dateTime28 = dateTime23.withMillisOfDay(57);
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        int int30 = dateTime23.getMinuteOfDay();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfDay();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.dayOfMonth();
        org.joda.time.DateTime dateTime44 = dateTime9.toDateTime(chronology37);
        org.joda.time.DurationField durationField45 = chronology37.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0590");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.halfdays();
        org.joda.time.DurationField durationField8 = chronology3.halfdays();
        org.joda.time.DurationField durationField9 = chronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property16 = dateTime13.minuteOfHour();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = locale17.getDisplayName(locale23);
        int int27 = property16.getMaximumTextLength(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 642, chronology3, locale23);
        dateTimeParserBucket28.setOffset(877);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime11", (dateTime4.compareTo(dateTime11) == 0) == dateTime4.equals(dateTime11));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0591");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plus(readableDuration29);
        int int31 = localDateTime30.getMinuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.millisOfSecond();
        org.joda.time.DateTime dateTime49 = dateTime32.toDateTime(chronology44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime53.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = null;
        dateTimeParserBucket71.saveField(dateTimeField72, (int) (short) 0);
        java.lang.Integer int75 = dateTimeParserBucket71.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket71.setZone(dateTimeZone76);
        dateTimeParserBucket62.setZone(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket62.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        java.lang.String str81 = dateTimeZone79.toString();
        java.lang.String str82 = dateTimeZone79.toString();
        long long84 = dateTimeZone56.getMillisKeepLocal(dateTimeZone79, (long) 23);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone56);
        int int87 = dateTimeZone56.getOffsetFromLocal(26852203L);
        org.joda.time.DateTime dateTime88 = dateTime49.withZone(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime49", (dateTime32.compareTo(dateTime49) == 0) == dateTime32.equals(dateTime49));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0592");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        int int12 = dateTime11.getEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime11.minusHours(22);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        dateTimeParserBucket22.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        java.lang.String str34 = dateTimeField32.getAsShortText((long) 28);
        dateTimeParserBucket22.saveField(dateTimeField32, 100);
        dateTimeParserBucket22.setOffset(19);
        java.lang.Object obj39 = dateTimeParserBucket22.saveState();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYear((int) (short) 100);
        int int55 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        int int56 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar61 = dateTime60.toGregorianCalendar();
        int int62 = dateTime60.getMillisOfSecond();
        org.joda.time.DateTime dateTime63 = localDateTime47.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int65 = localDateTime47.get(dateTimeFieldType64);
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = locale67.getLanguage();
        dateTimeParserBucket22.saveField(dateTimeFieldType64, "DurationField[years]", locale67);
        java.lang.String str70 = dateTimeFieldType64.getName();
        org.joda.time.DateTime.Property property71 = dateTime11.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime72 = property71.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime58", (dateTime3.compareTo(dateTime58) == 0) == dateTime3.equals(dateTime58));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.LocalDate localDate6 = dateTime5.toLocalDate();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime5.withDurationAdded((long) 180, 608);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra(307);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(413);
        int int15 = dateTime12.getHourOfDay();
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfEvenCopy();
        java.lang.String str22 = property20.getAsText();
        int int23 = property20.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property20.setCopy(214);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(778);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime35.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean39 = dateTime38.isEqualNow();
        org.joda.time.DateTime.Property property40 = dateTime38.secondOfMinute();
        org.joda.time.DateTime dateTime42 = property40.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField43 = property40.getField();
        java.lang.String str44 = property40.getName();
        org.joda.time.DateTime dateTime45 = property40.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        boolean boolean52 = localDateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int61 = localDateTime59.get(dateTimeFieldType60);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology63, locale64, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField68 = null;
        dateTimeParserBucket67.saveField(dateTimeField68, (int) (short) 0);
        java.lang.Integer int71 = dateTimeParserBucket67.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket67.setZone(dateTimeZone72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale76 = java.util.Locale.GERMANY;
        java.lang.String str77 = locale76.getDisplayName();
        dateTimeParserBucket67.saveField(dateTimeFieldType74, "97", locale76);
        int int79 = localDateTime59.get(dateTimeFieldType74);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime55.withField(dateTimeFieldType74, 12);
        boolean boolean82 = dateTime45.isSupported(dateTimeFieldType74);
        int int83 = localDateTime25.indexOf(dateTimeFieldType74);
        org.joda.time.DateTime.Property property84 = dateTime12.property(dateTimeFieldType74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime31", (dateTime1.compareTo(dateTime31) == 0) == dateTime1.equals(dateTime31));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0594");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) '#', 837);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        boolean boolean17 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime19.year();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(558);
        boolean boolean30 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.minus((long) 597);
        org.joda.time.DateTime.Property property33 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DurationField durationField42 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        strSet52.clear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        boolean boolean59 = strSet52.contains((java.lang.Object) dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime34.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) instant16, dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusMonths(357);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant16", (dateTime1.compareTo(instant16) == 0) == dateTime1.equals(instant16));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0595");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfMonth();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getMillisOfSecond();
        org.joda.time.DateTime.Property property25 = dateTime22.minuteOfHour();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        java.lang.String str35 = locale26.getDisplayName(locale32);
        int int36 = property25.getMaximumTextLength(locale32);
        java.lang.String str37 = locale17.getDisplayName(locale32);
        java.util.Locale.setDefault(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(26795394L, chronology9, locale17, (java.lang.Integer) 877, 584);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0596");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        int int10 = dateTime7.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.plus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        boolean boolean18 = dateTime16.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        boolean boolean23 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.DateTime dateTime29 = dateTime7.withChronology(chronology25);
        org.joda.time.Chronology chronology30 = chronology25.withUTC();
        org.joda.time.DateTime dateTime31 = dateTime4.toDateTime(chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) 4800000L, chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime7", (dateTime4.compareTo(dateTime7) == 0) == dateTime4.equals(dateTime7));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0597");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) (short) 100);
        int int28 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        int int29 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        int int35 = dateTime33.getMillisOfSecond();
        org.joda.time.DateTime dateTime36 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        int int38 = dateTime33.getWeekyear();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime33.withPeriodAdded(readablePeriod39, 624);
        org.joda.time.DateTime dateTime43 = dateTime33.minusMonths(944);
        long long44 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.lang.Integer int54 = dateTimeParserBucket50.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket50.setZone(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime dateTime62 = dateTime58.plusHours((int) (byte) 100);
        boolean boolean64 = dateTime62.isBefore((long) ' ');
        int int65 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.minusYears(20);
        org.joda.time.DateTime.Property property68 = dateTime67.hourOfDay();
        org.joda.time.DateTime dateTime70 = property68.addToCopy(26751557);
        org.joda.time.DateTime dateTime72 = dateTime70.withCenturyOfEra(9);
        boolean boolean73 = property12.equals((java.lang.Object) 9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0598");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime15.getZone();
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getOffset((long) 'x');
        boolean boolean23 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeZone19);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 92);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 176);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 197);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DurationField durationField36 = chronology32.seconds();
        org.joda.time.DurationField durationField37 = chronology32.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        boolean boolean44 = dateTime42.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime42.toMutableDateTime(dateTimeZone45);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = dateTimeZone45.getName((long) (byte) 1, locale49);
        org.joda.time.Chronology chronology51 = chronology32.withZone(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.weekyearOfCentury();
        java.lang.String str58 = dateTimeField56.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfEvenCopy();
        int int64 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localDateTime63.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime63);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.dayOfWeek();
        boolean boolean68 = dateTimeZone45.isLocalDateTimeGap(localDateTime66);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.minuteOfHour();
        java.lang.String str70 = property69.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        dateTimeParserBucket5.saveField(dateTimeFieldType71, 646);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime55", (dateTime40.compareTo(dateTime55) == 0) == dateTime40.equals(dateTime55));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0599");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 130, chronology4);
        java.util.Locale locale17 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 1419, chronology4, locale17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusMonths((int) (byte) 100);
        int[] intArray25 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusDays(4);
        int int28 = localDateTime27.size();
        org.joda.time.Chronology chronology29 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        int int36 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime.Property property37 = dateTime32.centuryOfEra();
        org.joda.time.DateTime dateTime38 = property37.roundCeilingCopy();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        java.util.Locale locale46 = dateTimeParserBucket44.getLocale();
        boolean boolean47 = property37.equals((java.lang.Object) locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology29, locale46, (java.lang.Integer) 325);
        org.joda.time.DateTimeField dateTimeField50 = chronology29.yearOfEra();
        dateTimeParserBucket18.saveField(dateTimeField50, 92);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        java.lang.String str57 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.weekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.weekyear();
        long long66 = chronology55.add(8594L, (long) 970, 0);
        org.joda.time.DateTimeField dateTimeField67 = chronology55.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology55.millisOfSecond();
        dateTimeParserBucket18.saveField(dateTimeField68, 538);
        long long73 = dateTimeField68.add((-1659599535L), 90);
        java.util.Locale locale76 = java.util.Locale.UK;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusHours((int) (byte) 0);
        boolean boolean82 = dateTime80.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone84 = dateTimeZone83.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime80.toMutableDateTime(dateTimeZone83);
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = dateTimeZone83.getName((long) (byte) 1, locale87);
        java.lang.String str90 = locale87.getUnicodeLocaleType("52");
        java.lang.String str91 = locale76.getDisplayLanguage(locale87);
        java.lang.String str92 = locale87.getScript();
        java.lang.String str93 = locale87.getScript();
        long long94 = dateTimeField68.set(41364339L, "695", locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime56", (dateTime32.compareTo(dateTime56) == 0) == dateTime32.equals(dateTime56));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0600");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        long long28 = dateTimeParserBucket25.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        boolean boolean39 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        java.lang.String str42 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfDay();
        dateTimeParserBucket25.saveField(dateTimeField43, 940);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime30", (dateTime4.compareTo(dateTime30) == 0) == dateTime4.equals(dateTime30));
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0601");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        int int16 = dateTimeField14.getMinimumValue((long) 22);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMillis(603);
        int int24 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusSeconds(284);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime28.toMutableDateTime();
        int int32 = dateTime28.getMillisOfSecond();
        org.joda.time.DateTime.Property property33 = dateTime28.centuryOfEra();
        org.joda.time.DateTime dateTime34 = property33.roundCeilingCopy();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale42 = dateTimeParserBucket40.getLocale();
        boolean boolean43 = property33.equals((java.lang.Object) locale42);
        java.lang.String str44 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale42);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = property47.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 70);
        java.lang.String str54 = durationFieldType51.getName();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime26.withFieldAdded(durationFieldType51, 439);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.halfdayOfDay();
        org.joda.time.DurationField durationField63 = chronology59.millis();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology59.getZone();
        org.joda.time.DateTimeField dateTimeField65 = chronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.era();
        org.joda.time.DurationField durationField67 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField68 = chronology59.dayOfMonth();
        boolean boolean69 = durationFieldType51.isSupported(chronology59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime60", (dateTime1.compareTo(dateTime60) == 0) == dateTime1.equals(dateTime60));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0602");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        java.lang.String str19 = property17.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property17.getFieldType();
        int int21 = dateTime13.get(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property26 = dateTime23.centuryOfEra();
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = property26.getAsText(locale27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        boolean boolean35 = dateTime33.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = dateTimeZone36.getName((long) (byte) 1, locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = property26.getAsShortText(locale40);
        int int44 = property26.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property26.getFieldType();
        boolean boolean46 = dateTime13.isSupported(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType45.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.dayOfWeek();
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology66, locale67, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField71 = null;
        dateTimeParserBucket70.saveField(dateTimeField71, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        dateTimeParserBucket70.saveField(dateTimeFieldType74, "it", locale76);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology60, locale76, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology51, locale76);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType45.getField(chronology51);
        boolean boolean83 = dateTimeField82.isLenient();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime52", (dateTime1.compareTo(dateTime52) == 0) == dateTime1.equals(dateTime52));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0603");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField50 = chronology45.eras();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField47 and durationField50", Math.signum(durationField47.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField47)));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0604");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.Chronology chronology18 = chronology12.withZone(dateTimeZone16);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long22 = dateTimeZone16.adjustOffset((long) 127, true);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        int int34 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime30.getZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(100L, dateTimeZone35);
        java.util.Date date37 = localDateTime36.toDate();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusWeeks(359);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.yearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (byte) 0);
        boolean boolean56 = dateTime54.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone57);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = dateTimeZone57.getName((long) (byte) 1, locale61);
        org.joda.time.Chronology chronology63 = chronology44.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField64.getType();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property71 = dateTime68.centuryOfEra();
        java.util.Locale locale72 = java.util.Locale.ITALIAN;
        java.lang.String str73 = locale72.getLanguage();
        java.lang.String str74 = property71.getAsText(locale72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.plusHours((int) (byte) 0);
        boolean boolean80 = dateTime78.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone82 = dateTimeZone81.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime78.toMutableDateTime(dateTimeZone81);
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = dateTimeZone81.getName((long) (byte) 1, locale85);
        java.lang.String str87 = locale85.getScript();
        java.lang.String str88 = property71.getAsShortText(locale85);
        java.lang.String str89 = locale85.getDisplayScript();
        java.lang.String str90 = locale85.getDisplayScript();
        java.lang.String str91 = locale85.getISO3Language();
        java.lang.String str92 = locale85.getVariant();
        int int93 = dateTimeField64.getMaximumShortTextLength(locale85);
        boolean boolean94 = localDateTime41.equals((java.lang.Object) dateTimeField64);
        boolean boolean95 = dateTimeZone16.isLocalDateTimeGap(localDateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime25", (dateTime13.compareTo(dateTime25) == 0) == dateTime13.equals(dateTime25));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0605");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        long long15 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(10);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear((int) (short) 100);
        int int46 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int47 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        long long50 = dateTimeField36.set(1L, 837);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = dateTimeField36.getAsText((long) 7, locale52);
        org.joda.time.DateTime dateTime54 = property29.setCopy("999", locale52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours((int) (byte) 0);
        boolean boolean60 = dateTime58.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime58.toMutableDateTime(dateTimeZone61);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = dateTimeZone61.getName((long) (byte) 1, locale65);
        java.lang.String str68 = locale65.getUnicodeLocaleType("52");
        java.lang.String str69 = locale52.getDisplayVariant(locale65);
        dateTimeParserBucket5.saveField(dateTimeFieldType18, "117", locale65);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType18.getDurationType();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType18.getDurationType();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType18.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology76);
        java.lang.String str78 = chronology76.toString();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField80 = chronology76.hourOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology76.monthOfYear();
        org.joda.time.DateTimeField dateTimeField82 = chronology76.clockhourOfDay();
        org.joda.time.DurationField durationField83 = durationFieldType73.getField(chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime77", (dateTime22.compareTo(dateTime77) == 0) == dateTime22.equals(dateTime77));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0606");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekyear((-1));
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours((int) (byte) 100);
        boolean boolean35 = dateTime33.isBefore((long) ' ');
        int int36 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime33);
        long long38 = dateTimeZone26.nextTransition((long) (short) -1);
        boolean boolean39 = dateTime11.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int[] intArray41 = localDateTime40.getValues();
        chronology4.validate((org.joda.time.ReadablePartial) localDateTime6, intArray41);
        org.joda.time.DateTimeField dateTimeField43 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology4.yearOfEra();
        org.joda.time.DurationField durationField45 = chronology4.minutes();
        java.util.Locale locale48 = new java.util.Locale("2035-02-12T07:26:03.689Z", "10");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(920L, chronology4, locale48, (java.lang.Integer) 51, 162);
        long long53 = dateTimeParserBucket51.computeMillis(false);
        dateTimeParserBucket51.setOffset((java.lang.Integer) 893);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.millisOfSecond();
        org.joda.time.DurationField durationField63 = chronology59.seconds();
        org.joda.time.DurationField durationField64 = chronology59.minutes();
        org.joda.time.DateTimeField dateTimeField65 = chronology59.era();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.monthOfYear();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 854, chronology59);
        org.joda.time.DateTimeField dateTimeField68 = chronology59.centuryOfEra();
        dateTimeParserBucket51.saveField(dateTimeField68, 811);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField45 and durationField64", (durationField45.compareTo(durationField64) == 0) == durationField45.equals(durationField64));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0607");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField22 = chronology2.halfdays();
        boolean boolean23 = durationField22.isPrecise();
        org.joda.time.DurationFieldType durationFieldType24 = durationField22.getType();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        boolean boolean30 = durationFieldType24.isSupported(chronology27);
        java.lang.String str31 = durationFieldType24.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime34.year();
        org.joda.time.DateTime dateTime39 = dateTime34.minusSeconds(241);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds(2022);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusHours(49);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime52 = property49.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        java.util.Date date57 = dateTime54.toDate();
        org.joda.time.DateTime.Property property58 = dateTime54.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = property58.getAsShortText(locale59);
        int int61 = property49.getMaximumShortTextLength(locale59);
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale62.getISO3Language();
        java.util.Locale locale66 = locale62.stripExtensions();
        java.lang.String str67 = locale62.getISO3Language();
        java.lang.String str68 = locale59.getDisplayLanguage(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology42, locale62);
        org.joda.time.DurationField durationField70 = durationFieldType24.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField71 = chronology42.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField70", (durationField22.compareTo(durationField70) == 0) == durationField22.equals(durationField70));
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0608");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        org.joda.time.DurationField durationField19 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology14.months();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        java.lang.String str29 = dateTimeField27.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int int35 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean38 = localDateTime34.equals((java.lang.Object) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.millisOfSecond();
        int[] intArray43 = chronology14.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        org.joda.time.DateTimeField dateTimeField44 = chronology14.secondOfMinute();
        java.util.Locale locale48 = new java.util.Locale("Property[secondOfDay]", "era");
        java.lang.String str49 = dateTimeField44.getAsText(120L, locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 743, chronology3, locale48, (java.lang.Integer) 228);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        java.lang.String str57 = chronology54.toString();
        org.joda.time.DurationField durationField58 = chronology54.weekyears();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.yearOfCentury();
        dateTimeParserBucket51.saveField(dateTimeField59, 86368);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusHours((int) (byte) 0);
        java.util.Date date66 = dateTime63.toDate();
        org.joda.time.DateTime.Property property67 = dateTime63.dayOfMonth();
        java.lang.String str68 = property67.getAsString();
        int int69 = property67.getMaximumValue();
        int int70 = property67.getMinimumValueOverall();
        org.joda.time.DateTime dateTime71 = property67.roundHalfCeilingCopy();
        int int72 = dateTime71.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime71.getZone();
        dateTimeParserBucket51.setZone(dateTimeZone73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime63", (dateTime4.compareTo(dateTime63) == 0) == dateTime4.equals(dateTime63));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0609");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        long long10 = dateTimeParserBucket5.computeMillis(false, "2022-02-22T07:27:10.953+00:00:00.052");
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYear(2022);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property40 = dateTime37.centuryOfEra();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = property40.getAsText(locale41);
        java.lang.String str44 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime34, (-1), locale41);
        java.util.Locale.setDefault(locale41);
        java.lang.String str46 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        org.joda.time.LocalDateTime.Property property49 = localDateTime25.property(dateTimeFieldType47);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType47.getDurationType();
        dateTimeParserBucket5.saveField(dateTimeFieldType47, 672);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        java.lang.Integer int62 = dateTimeParserBucket58.getOffsetInteger();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfDay();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology63);
        boolean boolean67 = dateTimeFieldType47.isSupported(chronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime66", (dateTime37.compareTo(dateTime66) == 0) == dateTime37.equals(dateTime66));
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0610");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType17.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        boolean boolean39 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property55 = dateTime52.centuryOfEra();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime49, (-1), locale56);
        java.util.Calendar calendar60 = dateTime40.toCalendar(locale56);
        java.lang.String str61 = locale56.getDisplayScript();
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.setLanguageTag("coreano");
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder69 = builder68.clear();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = locale56.getDisplayScript(locale70);
        int int72 = dateTimeField28.getMaximumShortTextLength(locale56);
        boolean boolean73 = dateTimeField28.isSupported();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0611");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.LocalDate localDate6 = dateTime5.toLocalDate();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime5.withDurationAdded((long) 180, 608);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra(307);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(413);
        int int15 = dateTime12.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology22.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        boolean boolean28 = strSet19.contains((java.lang.Object) chronology22);
        java.util.Locale locale29 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology22, locale29, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int46 = localDateTime42.get(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology49);
        java.lang.String str51 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.weekOfWeekyear();
        boolean boolean53 = dateTimeFieldType45.isSupported(chronology49);
        org.joda.time.LocalDateTime.Property property54 = localDateTime36.property(dateTimeFieldType45);
        dateTimeParserBucket31.saveField(dateTimeFieldType45, 293);
        java.lang.Object obj57 = dateTimeParserBucket31.saveState();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket31.getZone();
        java.lang.String str59 = dateTimeZone58.getID();
        org.joda.time.DateTime dateTime60 = dateTime12.withZoneRetainFields(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime23", (dateTime1.compareTo(dateTime23) == 0) == dateTime1.equals(dateTime23));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0612");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        java.lang.String str6 = dateTimeZone4.getNameKey((-1L));
        long long8 = dateTimeZone4.convertUTCToLocal((long) 734);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        long long11 = dateTimeZone4.convertUTCToLocal(0L);
        java.lang.String str13 = dateTimeZone4.getName((-31948L));
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DurationField durationField22 = chronology18.seconds();
        org.joda.time.DurationField durationField23 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        boolean boolean30 = dateTime28.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime(dateTimeZone31);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = dateTimeZone31.getName((long) (byte) 1, locale35);
        org.joda.time.Chronology chronology37 = chronology18.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        org.joda.time.DurationField durationField43 = property42.getRangeDurationField();
        long long44 = property42.remainder();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = property42.getAsText(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology37, locale45, (java.lang.Integer) 180);
        dateTimeParserBucket51.setOffset(818);
        java.lang.Object obj54 = dateTimeParserBucket51.saveState();
        int int55 = dateTimeParserBucket51.getOffset();
        int int56 = dateTimeParserBucket51.getOffset();
        java.lang.Object obj57 = dateTimeParserBucket51.saveState();
        java.util.Locale locale58 = dateTimeParserBucket51.getLocale();
        java.lang.String str59 = dateTimeZone4.getName((long) 510, locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime26", (dateTime3.compareTo(dateTime26) == 0) == dateTime3.equals(dateTime26));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0613");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.DateTime dateTime39 = dateTime30.plusHours(100);
        org.joda.time.DateTime.Property property40 = dateTime30.dayOfYear();
        int int41 = property40.getMaximumValueOverall();
        boolean boolean42 = dateTimeParserBucket5.restoreState((java.lang.Object) property40);
        org.joda.time.DateTime dateTime43 = property40.roundFloorCopy();
        org.joda.time.DateTime dateTime44 = property40.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = dateTime48.toString(dateTimeFormatter51);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("20");
        java.lang.String str58 = locale54.getDisplayVariant(locale57);
        java.lang.String str59 = dateTime48.toString("1969", locale54);
        org.joda.time.DateTime.Property property60 = dateTime48.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime48.withTimeAtStartOfDay();
        int int62 = property40.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateMidnight dateMidnight63 = dateTime48.toDateMidnight();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        java.lang.String str70 = dateTimeField68.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfEvenCopy();
        int int76 = dateTimeField68.getMinimumValue((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int82 = localDateTime78.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime78.withCenturyOfEra((int) (byte) 0);
        int int85 = dateTimeField68.getMaximumValue((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property90 = localDateTime87.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime87.plusMillis(603);
        int int93 = localDateTime92.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime95 = localDateTime92.plusSeconds(170);
        java.util.Locale locale96 = null;
        java.lang.String str97 = dateTimeField68.getAsShortText((org.joda.time.ReadablePartial) localDateTime95, locale96);
        org.joda.time.DateTime dateTime98 = dateTime48.withFields((org.joda.time.ReadablePartial) localDateTime95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime67", (dateTime48.compareTo(dateTime67) == 0) == dateTime48.equals(dateTime67));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0614");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 484, chronology3, locale7, (java.lang.Integer) 348, 2020);
        java.lang.Integer int11 = dateTimeParserBucket10.getOffsetInteger();
        dateTimeParserBucket10.setOffset(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.setLanguageTag("coreano");
        java.util.Locale.Builder builder23 = builder20.setExtension('a', "26");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((-1));
        org.joda.time.DateTime dateTime29 = dateTime25.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        java.lang.String str38 = dateTimeZone36.toString();
        boolean boolean40 = dateTimeZone36.isStandardOffset((long) 170);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        java.util.Set<java.lang.Character> charSet50 = locale47.getExtensionKeys();
        boolean boolean51 = dateTimeZone36.equals((java.lang.Object) locale47);
        java.util.Locale.Builder builder52 = builder20.setLocale(locale47);
        dateTimeParserBucket10.saveField(dateTimeFieldType14, "", locale47);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfSecond();
        org.joda.time.DurationField durationField60 = chronology56.seconds();
        org.joda.time.DurationField durationField61 = chronology56.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology56.secondOfDay();
        org.joda.time.DurationField durationField66 = chronology56.weekyears();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType14.getField(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime25", (dateTime4.compareTo(dateTime25) == 0) == dateTime4.equals(dateTime25));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0615");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillis(41188866L);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(26807154);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property23 = dateTime20.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime20.minusYears(558);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) ' ');
        org.joda.time.DateTime dateTime29 = dateTime25.plusYears(7);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(585);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime31.getZone();
        org.joda.time.DateTime dateTime34 = dateTime16.withZoneRetainFields(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime20", (dateTime13.compareTo(dateTime20) == 0) == dateTime13.equals(dateTime20));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0616");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.lang.String str16 = property15.getAsString();
        boolean boolean17 = localDateTime8.equals((java.lang.Object) property15);
        org.joda.time.DateTime dateTime18 = property15.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        int int26 = dateTimeParserBucket24.getOffset();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime18.toMutableDateTime(chronology27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime33.year();
        org.joda.time.DateTime dateTime38 = dateTime33.minusSeconds(241);
        org.joda.time.DateTime dateTime40 = dateTime33.plusMillis(608);
        org.joda.time.DateTime dateTime42 = dateTime40.withCenturyOfEra(58);
        org.joda.time.DateTime dateTime44 = dateTime40.minusWeeks(3);
        int int45 = dateTime44.getMillisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        dateTimeParserBucket51.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfMinute();
        java.lang.String str63 = dateTimeField61.getAsShortText((long) 28);
        dateTimeParserBucket51.saveField(dateTimeField61, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket51.saveField(dateTimeFieldType66, 26761064);
        int int69 = dateTime44.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime71 = dateTime44.minusMinutes(26798283);
        boolean boolean72 = mutableDateTime31.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = dateTime71.withEra(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime31", (dateTime18.compareTo(mutableDateTime31) == 0) == dateTime18.equals(mutableDateTime31));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0617");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        int int7 = dateTimeParserBucket6.getOffset();
        java.lang.Integer int8 = dateTimeParserBucket6.getPivotYear();
        dateTimeParserBucket6.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int14 = dateTimeZone12.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        dateTimeParserBucket6.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 26751, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(26757);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        java.util.Locale locale30 = dateTimeParserBucket28.getLocale();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plus(readableDuration35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfMonth();
        long long38 = property37.remainder();
        org.joda.time.LocalDateTime localDateTime40 = property37.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int42 = localDateTime40.get(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear((-1));
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths(10);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfDay();
        int int51 = dateTime49.getYearOfEra();
        org.joda.time.DateTime.Property property52 = dateTime49.secondOfDay();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime66 = property65.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYear((int) (short) 100);
        int int69 = localDateTime61.compareTo((org.joda.time.ReadablePartial) localDateTime68);
        int int70 = dateTimeField59.getMinimumValue((org.joda.time.ReadablePartial) localDateTime61);
        long long73 = dateTimeField59.set(1L, 837);
        java.util.Locale locale75 = java.util.Locale.TAIWAN;
        java.lang.String str76 = dateTimeField59.getAsText((long) 7, locale75);
        org.joda.time.DateTime dateTime77 = property52.setCopy("999", locale75);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusHours((int) (byte) 0);
        boolean boolean83 = dateTime81.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone85 = dateTimeZone84.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime81.toMutableDateTime(dateTimeZone84);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = dateTimeZone84.getName((long) (byte) 1, locale88);
        java.lang.String str91 = locale88.getUnicodeLocaleType("52");
        java.lang.String str92 = locale75.getDisplayVariant(locale88);
        dateTimeParserBucket28.saveField(dateTimeFieldType41, "117", locale88);
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType41.getDurationType();
        boolean boolean95 = localDateTime22.isSupported(durationFieldType94);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime18.withFieldAdded(durationFieldType94, 2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime45", (dateTime15.compareTo(dateTime45) == 0) == dateTime15.equals(dateTime45));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0618");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (byte) 100);
        int[] intArray7 = localDateTime6.getValues();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        int int10 = localDateTime9.size();
        org.joda.time.Chronology chronology11 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        int int18 = dateTime14.getMillisOfSecond();
        org.joda.time.DateTime.Property property19 = dateTime14.centuryOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundCeilingCopy();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        java.util.Locale locale28 = dateTimeParserBucket26.getLocale();
        boolean boolean29 = property19.equals((java.lang.Object) locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology11, locale28, (java.lang.Integer) 325);
        org.joda.time.DateTimeField dateTimeField32 = chronology11.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime40.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean44 = dateTime43.isEqualNow();
        org.joda.time.DateTime.Property property45 = dateTime43.secondOfMinute();
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        java.util.Locale locale56 = dateTimeParserBucket52.getLocale();
        java.util.Locale.setDefault(category46, locale56);
        java.lang.String str58 = property45.getAsShortText(locale56);
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = locale56.getDisplayScript(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(8553600999L, chronology11, locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime36", (dateTime14.compareTo(dateTime36) == 0) == dateTime14.equals(dateTime36));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(676);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.year();
        org.joda.time.DurationField durationField19 = durationFieldType11.getField(chronology14);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) str10, chronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0620");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category0, locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("87");
        java.lang.String str24 = dateTimeField20.getAsText((long) 383, locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) (byte) 0);
        boolean boolean36 = dateTime34.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        boolean boolean41 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime34.minus(readablePeriod42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket49.setZone(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale58.getDisplayName();
        dateTimeParserBucket49.saveField(dateTimeFieldType56, "97", locale58);
        java.util.Calendar calendar61 = dateTime34.toCalendar(locale58);
        java.lang.String str62 = locale58.getCountry();
        java.util.Locale locale66 = new java.util.Locale("1378-01-01T00:00:00.087", "", "\uc601\uc5b4");
        java.lang.String str67 = locale58.getDisplayLanguage(locale66);
        java.util.Locale.setDefault(category0, locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime32", (dateTime18.compareTo(dateTime32) == 0) == dateTime18.equals(dateTime32));
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0621");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        int int5 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = property2.addToCopy(593);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime dateTime13 = dateTime9.plusHours((int) (byte) 100);
        boolean boolean15 = dateTime13.isBefore((long) ' ');
        org.joda.time.DateTime.Property property16 = dateTime13.weekOfWeekyear();
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.withMillisOfDay(0);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-1));
        org.joda.time.DateTime dateTime42 = dateTime38.plusHours((int) (byte) 100);
        boolean boolean44 = dateTime42.isBefore((long) ' ');
        int int45 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime42);
        int int47 = dateTimeZone35.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime48 = dateTime23.withZoneRetainFields(dateTimeZone35);
        int int49 = property2.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime51 = property2.addWrapFieldToCopy(671);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.era();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfSecond(588);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime64.getZone();
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        org.joda.time.DateTime dateTime67 = localDateTime54.toDateTime(dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime58", (dateTime9.compareTo(dateTime58) == 0) == dateTime9.equals(dateTime58));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0622");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime1.withWeekyear(3);
        org.joda.time.Instant instant8 = dateTime1.toInstant();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        java.lang.Integer int31 = dateTimeParserBucket27.getOffsetInteger();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType18.isSupported(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.weekyears();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        java.lang.String str42 = dateTimeField40.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        int int48 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = property51.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) '#');
        int[] intArray57 = chronology32.get((org.joda.time.ReadablePartial) localDateTime55, 163296000435L);
        org.joda.time.DateTimeField dateTimeField58 = chronology32.hourOfDay();
        boolean boolean60 = dateTimeField58.isLeap((-111L));
        int int61 = instant8.get(dateTimeField58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        int int6 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime5.weekyear();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        org.joda.time.DateTime dateTime10 = property7.setCopy(876);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.era();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusHours(241);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusSeconds(151);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DurationField durationField35 = chronology31.centuries();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DurationField durationField37 = chronology31.weeks();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.monthOfYear();
        org.joda.time.DurationField durationField39 = durationFieldType28.getField(chronology31);
        boolean boolean40 = localDateTime25.isSupported(durationFieldType28);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        dateTimeParserBucket46.saveField(dateTimeFieldType50, "it", locale52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekOfWeekyear();
        boolean boolean66 = dateTimeFieldType50.isSupported(chronology64);
        org.joda.time.DurationField durationField67 = chronology64.weekyears();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.weekyearOfCentury();
        java.lang.String str74 = dateTimeField72.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime.Property property78 = localDateTime76.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime79 = property78.roundHalfEvenCopy();
        int int80 = dateTimeField72.getMinimumValue((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = localDateTime79.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime79);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime85 = property83.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minusDays((int) '#');
        int[] intArray89 = chronology64.get((org.joda.time.ReadablePartial) localDateTime87, 163296000435L);
        org.joda.time.DurationField durationField90 = durationFieldType28.getField(chronology64);
        org.joda.time.DateTime dateTime92 = dateTime10.withFieldAdded(durationFieldType28, 219);
        org.joda.time.DateTime.Property property93 = dateTime10.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime6.minusYears(882);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        int int21 = mutableDateTime19.get(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField27 = chronology24.millis();
        boolean boolean28 = dateTimeFieldType20.isSupported(chronology24);
        org.joda.time.DurationField durationField29 = chronology24.centuries();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology24, locale30);
        boolean boolean33 = dateTime9.equals((java.lang.Object) dateTimeParserBucket32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime9.withPeriodAdded(readablePeriod34, 267);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.weekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.centuryOfEra();
        org.joda.time.DurationField durationField47 = chronology40.halfdays();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 319, chronology40);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime36.toMutableDateTime(chronology40);
        boolean boolean51 = mutableDateTime49.isAfter((long) 727);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0625");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        int int8 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = dateTime10.withChronology(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(882);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        int int23 = dateTime21.getMillisOfSecond();
        org.joda.time.DateTime.Property property24 = dateTime21.minuteOfHour();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property30 = dateTime27.centuryOfEra();
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = property30.getAsText(locale31);
        java.lang.String str34 = locale25.getDisplayName(locale31);
        int int35 = property24.getMaximumTextLength(locale31);
        java.util.Set<java.lang.String> strSet36 = locale31.getUnicodeLocaleAttributes();
        int int37 = strSet36.size();
        int int38 = strSet36.size();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusMillis(603);
        int int64 = localDateTime63.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusSeconds(170);
        boolean boolean67 = localDateTime56.isAfter((org.joda.time.ReadablePartial) localDateTime66);
        boolean boolean68 = localDateTime43.isEqual((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime43.withYear(170);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property72 = localDateTime43.property(dateTimeFieldType71);
        boolean boolean73 = strSet36.remove((java.lang.Object) dateTimeFieldType71);
        org.joda.time.DateTime dateTime75 = dateTime15.withField(dateTimeFieldType71, 603);
        dateTimeParserBucket5.saveField(dateTimeFieldType71, 329);
        java.lang.String str78 = dateTimeFieldType71.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime15", (dateTime10.compareTo(dateTime15) == 0) == dateTime10.equals(dateTime15));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0626");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) (byte) 0);
        boolean boolean11 = dateTime9.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        boolean boolean16 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        java.lang.String str25 = property23.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property23.getFieldType();
        int int27 = dateTime19.get(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = property32.getAsText(locale33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours((int) (byte) 0);
        boolean boolean41 = dateTime39.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime(dateTimeZone42);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = dateTimeZone42.getName((long) (byte) 1, locale46);
        java.lang.String str48 = locale46.getScript();
        java.lang.String str49 = property32.getAsShortText(locale46);
        int int50 = property32.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property32.getFieldType();
        boolean boolean52 = dateTime19.isSupported(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        java.lang.String str59 = chronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        java.lang.String str68 = chronology66.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.dayOfWeek();
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology72, locale73, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField77 = null;
        dateTimeParserBucket76.saveField(dateTimeField77, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale82 = java.util.Locale.ROOT;
        dateTimeParserBucket76.saveField(dateTimeFieldType80, "it", locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology66, locale82, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology57, locale82);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType51.getField(chronology57);
        int int89 = localDateTime1.get(dateTimeFieldType51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime58", (dateTime13.compareTo(dateTime58) == 0) == dateTime13.equals(dateTime58));
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0627");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket12.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.lang.String str31 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.toString();
        long long34 = dateTimeZone6.getMillisKeepLocal(dateTimeZone29, (long) 23);
        int int36 = dateTimeZone6.getOffsetFromLocal((long) 749);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        java.lang.String str43 = dateTimeField41.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundHalfEvenCopy();
        int int49 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean52 = localDateTime48.equals((java.lang.Object) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int57 = localDateTime54.get(dateTimeFieldType56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime51.property(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        boolean boolean64 = localDateTime51.equals((java.lang.Object) dateTimeField63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime51.withYearOfCentury(38);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDurationAdded(readableDuration68, 446);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.plusMonths((int) (byte) 100);
        int[] intArray79 = localDateTime78.getValues();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime72.withFields((org.joda.time.ReadablePartial) localDateTime78);
        boolean boolean81 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        boolean boolean82 = dateTimeZone6.equals((java.lang.Object) boolean81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime40", (dateTime1.compareTo(dateTime40) == 0) == dateTime1.equals(dateTime40));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0628");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        int int6 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.addToCopy(608);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekyear((-1));
        org.joda.time.DateTime dateTime27 = dateTime23.plusHours((int) (byte) 100);
        boolean boolean29 = dateTime27.isBefore((long) ' ');
        int int30 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime27.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int37 = localDateTime34.get(dateTimeFieldType36);
        int int38 = dateTime32.get(dateTimeFieldType36);
        int int39 = localDateTime8.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime8.withYearOfEra(151);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime8.minusDays(395);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime50 = property48.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime52 = property48.addWrapFieldToCopy(420);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYear(0);
        int int56 = localDateTime53.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyearOfCentury();
        java.lang.String str72 = dateTimeField70.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundHalfEvenCopy();
        int int78 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean81 = localDateTime77.equals((java.lang.Object) localDateTime80);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int86 = localDateTime83.get(dateTimeFieldType85);
        org.joda.time.LocalDateTime.Property property87 = localDateTime80.property(dateTimeFieldType85);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType85.getRangeDurationType();
        int int89 = localDateTime65.get(dateTimeFieldType85);
        int int90 = localDateTime53.get(dateTimeFieldType85);
        boolean boolean91 = localDateTime52.isSupported(dateTimeFieldType85);
        boolean boolean92 = localDateTime43.isSupported(dateTimeFieldType85);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime43.withMillisOfDay(992);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime69", (dateTime23.compareTo(dateTime69) == 0) == dateTime23.equals(dateTime69));
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0629");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        int int2 = strSet0.size();
        int int3 = strSet0.size();
        java.lang.Object[] objArray4 = strSet0.toArray();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getMillisOfSecond();
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        int int22 = property11.getMaximumTextLength(locale18);
        java.util.Set<java.lang.String> strSet23 = locale18.getUnicodeLocaleAttributes();
        int int24 = strSet23.size();
        int int25 = strSet23.size();
        java.util.Set<java.lang.String> strSet26 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray27 = strSet26.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet26.spliterator();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime32.withYear(832);
        boolean boolean38 = strSet26.equals((java.lang.Object) 832);
        boolean boolean39 = strSet23.containsAll((java.util.Collection<java.lang.String>) strSet26);
        boolean boolean40 = strSet0.equals((java.lang.Object) boolean39);
        strSet0.clear();
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider42);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        java.lang.String str49 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.dayOfWeek();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField58 = null;
        dateTimeParserBucket57.saveField(dateTimeField58, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        dateTimeParserBucket57.saveField(dateTimeFieldType61, "it", locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology47, locale63, (java.lang.Integer) 9, 538);
        java.lang.String str70 = nameProvider42.getShortName(locale63, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Set<java.lang.String> strSet71 = locale63.getUnicodeLocaleAttributes();
        boolean boolean72 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime48", (dateTime6.compareTo(dateTime48) == 0) == dateTime6.equals(dateTime48));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0630");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        long long9 = dateTimeZone7.convertUTCToLocal((long) 558);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        org.joda.time.Chronology chronology17 = chronology14.withUTC();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMillis((int) (short) 1);
        long long31 = chronology17.set((org.joda.time.ReadablePartial) localDateTime29, 0L);
        org.joda.time.DateTimeField dateTimeField32 = chronology17.secondOfMinute();
        java.util.Locale locale35 = new java.util.Locale("java.io.IOException: java.io.IOException", "+00:00:00.004");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(1645514776529L, chronology17, locale35);
        java.lang.String str37 = dateTimeZone7.getShortName((long) 813, locale35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        boolean boolean44 = dateTime42.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        boolean boolean49 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime42.secondOfDay();
        org.joda.time.Chronology chronology51 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime42.withMillisOfSecond(258);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDateTime57.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.plus(readableDuration66);
        int int68 = dateTime67.getYear();
        boolean boolean69 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property70 = dateTime67.era();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder71.setLanguage("DEU");
        java.util.Locale.Builder builder74 = builder71.clearExtensions();
        java.util.Locale.Builder builder75 = builder71.clear();
        java.util.Locale locale76 = builder71.build();
        int int77 = property70.getMaximumTextLength(locale76);
        java.lang.String str78 = dateTimeZone7.getShortName(26975060L, locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime40", (dateTime3.compareTo(dateTime40) == 0) == dateTime3.equals(dateTime40));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0631");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField15.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField15.getType();
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 623);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DurationField durationField28 = chronology24.seconds();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.minuteOfDay();
        boolean boolean31 = dateTimeFieldType20.isSupported(chronology24);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.util.Locale locale43 = dateTimeParserBucket39.getLocale();
        java.util.Locale.setDefault(category33, locale43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = property50.getAsText(locale51);
        java.lang.String str54 = locale45.getDisplayName(locale51);
        java.lang.String str55 = locale51.getISO3Language();
        java.util.Locale.setDefault(category33, locale51);
        java.util.Set<java.lang.String> strSet57 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str58 = locale51.getLanguage();
        dateTimeParserBucket5.saveField(dateTimeFieldType20, "26785", locale51);
        java.lang.Integer int60 = dateTimeParserBucket5.getOffsetInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime47", (dateTime11.compareTo(dateTime47) == 0) == dateTime11.equals(dateTime47));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0632");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int5 = localDateTime1.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        boolean boolean12 = dateTimeFieldType4.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        int int22 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        java.lang.String str24 = dateTimeField14.getAsShortText((long) 465);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        int int32 = dateTimeField30.getLeapAmount(1L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 139, chronology36);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        dateTimeParserBucket46.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        java.lang.String str58 = dateTimeField56.getAsShortText((long) 28);
        dateTimeParserBucket46.saveField(dateTimeField56, 100);
        dateTimeParserBucket46.setOffset(19);
        java.lang.Object obj63 = dateTimeParserBucket46.saveState();
        java.util.Locale locale67 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale67);
        java.util.Set<java.lang.Character> charSet69 = locale67.getExtensionKeys();
        boolean boolean70 = dateTimeParserBucket46.restoreState((java.lang.Object) locale67);
        java.lang.String str71 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 855, locale67);
        java.lang.String str72 = dateTimeField14.getAsText(687, locale67);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        java.lang.String str75 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone73);
        int int78 = dateTimeZone73.getOffset((long) 487);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology82 = localDateTime81.getChronology();
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.now(chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.millisOfSecond();
        org.joda.time.DurationField durationField86 = dateTimeField85.getLeapDurationField();
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.lang.String str89 = locale88.getLanguage();
        java.lang.String str90 = dateTimeField85.getAsText(457087L, locale88);
        java.lang.String str91 = locale88.getISO3Language();
        java.lang.String str92 = dateTimeZone73.getName(783L, locale88);
        java.lang.String str93 = locale67.getDisplayVariant(locale88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime76", (dateTime9.compareTo(dateTime76) == 0) == dateTime9.equals(dateTime76));
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0633");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths((int) (byte) 100);
        int[] intArray49 = localDateTime48.getValues();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusMonths(49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusMillis(270);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.minusSeconds(648);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        java.lang.String str57 = durationFieldType56.getName();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyearOfCentury();
        java.lang.String str64 = dateTimeField62.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = property68.roundHalfEvenCopy();
        int int70 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = localDateTime69.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime69);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.Chronology chronology74 = chronology73.withUTC();
        org.joda.time.DateTimeZone dateTimeZone75 = chronology74.getZone();
        boolean boolean76 = durationFieldType56.isSupported(chronology74);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology80);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now(chronology80);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 139, chronology80);
        boolean boolean84 = durationFieldType56.isSupported(chronology80);
        boolean boolean85 = localDateTime55.isSupported(durationFieldType56);
        java.util.Locale locale87 = null;
        java.lang.String str88 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime55, 348, locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime61", (dateTime8.compareTo(dateTime61) == 0) == dateTime8.equals(dateTime61));
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0634");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType1.getField(chronology4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.lang.String str26 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (-1), locale23);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = dateTimeField12.getAsShortText((int) (byte) 10, locale28);
        long long32 = dateTimeField12.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getMillisOfSecond();
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfHour();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        java.lang.String str50 = locale41.getDisplayName(locale47);
        int int51 = property40.getMaximumTextLength(locale47);
        java.util.Set<java.lang.String> strSet52 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str53 = dateTimeField12.getAsText((int) (short) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 685, chronology4, locale47, (java.lang.Integer) 558, 19);
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = property62.getAsText(locale63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusHours((int) (byte) 0);
        boolean boolean71 = dateTime69.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime69.toMutableDateTime(dateTimeZone72);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = dateTimeZone72.getName((long) (byte) 1, locale76);
        java.lang.String str78 = locale76.getScript();
        java.lang.String str79 = property62.getAsShortText(locale76);
        java.lang.String str80 = locale76.getDisplayScript();
        java.lang.String str83 = nameProvider57.getName(locale76, "\u671d\u9c9c\u6587", "+00:00:00.052");
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.lang.String str85 = locale84.getDisplayName();
        boolean boolean86 = locale84.hasExtensions();
        java.lang.String str89 = nameProvider57.getShortName(locale84, "2022-02-22T07:25:58.449+00:00:00.052", "java.io.IOException: ISOChronology[+00:00:00.052]");
        java.util.Locale locale92 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str93 = locale92.getDisplayVariant();
        java.lang.String str94 = locale84.getDisplayName(locale92);
        java.lang.String str95 = locale47.getDisplayName(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime19", (dateTime5.compareTo(dateTime19) == 0) == dateTime5.equals(dateTime19));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0635");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusMonths((int) (byte) 100);
        int[] intArray47 = localDateTime46.getValues();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusDays(4);
        int int50 = localDateTime49.size();
        org.joda.time.Chronology chronology51 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.hours();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime54.toMutableDateTime();
        int int58 = dateTime54.getMillisOfSecond();
        org.joda.time.DateTime.Property property59 = dateTime54.centuryOfEra();
        org.joda.time.DateTime dateTime60 = property59.roundCeilingCopy();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        java.util.Locale locale68 = dateTimeParserBucket66.getLocale();
        boolean boolean69 = property59.equals((java.lang.Object) locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology51, locale68, (java.lang.Integer) 325);
        java.lang.String str72 = locale68.getLanguage();
        java.lang.String str73 = timeZone40.getDisplayName(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime54", (dateTime3.compareTo(dateTime54) == 0) == dateTime3.equals(dateTime54));
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0636");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        int int10 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property11 = dateTime5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime5.getZone();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        int int21 = dateTimeParserBucket19.getOffset();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        java.lang.String str26 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField29.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField29.getType();
        dateTimeParserBucket19.saveField(dateTimeFieldType31, 623);
        org.joda.time.DateTime dateTime35 = dateTime13.withField(dateTimeFieldType31, 659);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0637");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        java.lang.String str28 = property4.getAsShortText(locale25);
        org.joda.time.DateTime dateTime29 = property4.withMinimumValue();
        org.joda.time.DateTime dateTime30 = property4.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime dateTime34 = dateTime30.withSecondOfMinute(56);
        int int35 = dateTime34.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.minuteOfDay();
        org.joda.time.DateTime dateTime43 = dateTime34.toDateTime(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0638");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale locale10 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        int int18 = dateTime16.getMillisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime16.minusYears((int) 'x');
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.centuryOfEra();
        long long25 = dateTimeField22.getDifferenceAsLong(1728000004L, (long) 72);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = locale26.getISO3Country();
        java.lang.String str29 = locale7.getDisplayLanguage(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime14", (dateTime4.compareTo(dateTime14) == 0) == dateTime4.equals(dateTime14));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0639");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.Locale.FilteringMode filteringMode20 = null;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18, filteringMode20);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList18, filteringMode22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        dateTimeParserBucket37.saveField(dateTimeFieldType41, "it", locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology27, locale43, (java.lang.Integer) 9, 538);
        java.util.Set<java.lang.String> strSet48 = locale43.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Set<java.lang.String> strSet50 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar55 = dateTime54.toGregorianCalendar();
        int int56 = dateTime54.getMillisOfSecond();
        org.joda.time.DateTime.Property property57 = dateTime54.minuteOfHour();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = property63.getAsText(locale64);
        java.lang.String str67 = locale58.getDisplayName(locale64);
        int int68 = property57.getMaximumTextLength(locale64);
        java.util.Set<java.lang.String> strSet69 = locale64.getUnicodeLocaleAttributes();
        boolean boolean70 = strSet50.removeAll((java.util.Collection<java.lang.String>) strSet69);
        strSet69.clear();
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Set<java.lang.String> strSet75 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strSet75);
        boolean boolean77 = strSet75.isEmpty();
        strSet75.clear();
        boolean boolean79 = strSet69.containsAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean80 = strSet48.containsAll((java.util.Collection<java.lang.String>) strSet69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime52", (dateTime28.compareTo(dateTime52) == 0) == dateTime28.equals(dateTime52));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0640");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj21 = dateTimeParserBucket5.saveState();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 20, chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfDay();
        dateTimeParserBucket5.saveField(dateTimeField29, 303);
        java.util.Locale locale32 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        int int39 = dateTime36.getWeekyear();
        org.joda.time.Chronology chronology40 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        int int44 = dateTimeField41.getDifference(0L, (long) 442);
        dateTimeParserBucket5.saveField(dateTimeField41, 19045);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 474);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime34", (dateTime26.compareTo(dateTime34) == 0) == dateTime26.equals(dateTime34));
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0641");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(902);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(31);
        org.joda.time.DateTime dateTime43 = dateTime39.plusSeconds(384);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyearOfCentury();
        java.lang.String str50 = dateTimeField48.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = property54.roundHalfEvenCopy();
        int int56 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime55.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusHours(980);
        int int63 = localDateTime60.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusWeeks((-593));
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withWeekyear((-1));
        org.joda.time.DateTime dateTime78 = dateTime74.withMillisOfDay(0);
        org.joda.time.DateTime dateTime79 = localDateTime72.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean81 = dateTime79.isEqual((-1136820000L));
        org.joda.time.DateTime dateTime83 = dateTime79.withYear(26776135);
        org.joda.time.DateTime dateTime84 = localDateTime60.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime85 = dateTime43.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.DateTime.Property property86 = dateTime85.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime47", (dateTime13.compareTo(dateTime47) == 0) == dateTime13.equals(dateTime47));
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0642");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (byte) 100);
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusDays(4);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField31.getType();
        int int33 = localDateTime23.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime12.withField(dateTimeFieldType32, 590);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfSecond(139);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        int int46 = dateTimeField45.getMaximumValue();
        java.util.Locale locale47 = null;
        int int48 = dateTimeField45.getMaximumShortTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = property63.getAsText(locale64);
        java.lang.String str67 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime57, (-1), locale64);
        int int68 = localDateTime57.getYearOfEra();
        int int69 = localDateTime57.getDayOfYear();
        org.joda.time.DateTime dateTime70 = localDateTime57.toDateTime();
        int int71 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.weekyearOfCentury();
        java.lang.String str78 = dateTimeField76.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology81 = localDateTime80.getChronology();
        org.joda.time.LocalDateTime.Property property82 = localDateTime80.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime83 = property82.roundHalfEvenCopy();
        int int84 = dateTimeField76.getMinimumValue((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean87 = localDateTime83.equals((java.lang.Object) localDateTime86);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology90 = localDateTime89.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int92 = localDateTime89.get(dateTimeFieldType91);
        org.joda.time.LocalDateTime.Property property93 = localDateTime86.property(dateTimeFieldType91);
        int int94 = localDateTime57.get(dateTimeFieldType91);
        boolean boolean95 = localDateTime35.isSupported(dateTimeFieldType91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime60", (dateTime27.compareTo(dateTime60) == 0) == dateTime27.equals(dateTime60));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0643");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(99);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime19 = dateTime10.minusMinutes(713);
        boolean boolean21 = dateTime19.equals((java.lang.Object) "DateTimeField[yearOfCentury]");
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime23.year();
        org.joda.time.DateTime dateTime28 = dateTime23.minusSeconds(241);
        org.joda.time.DateTime dateTime30 = dateTime23.plusMillis(608);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(58);
        org.joda.time.DateTime dateTime34 = dateTime30.minusWeeks(3);
        int int35 = dateTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        java.lang.String str53 = dateTimeField51.getAsShortText((long) 28);
        dateTimeParserBucket41.saveField(dateTimeField51, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket41.saveField(dateTimeFieldType56, 26761064);
        int int59 = dateTime34.get(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = property63.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYear(2022);
        org.joda.time.Chronology chronology69 = localDateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType56.getField(chronology69);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime19.toMutableDateTime(chronology69);
        int int72 = dateTime19.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime23", (dateTime3.compareTo(dateTime23) == 0) == dateTime3.equals(dateTime23));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0644");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        java.lang.String str5 = dateTimeField4.toString();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        dateTimeParserBucket20.saveField(dateTimeFieldType24, "it", locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime14.property(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = property32.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear((int) (short) 10);
        int int38 = localDateTime35.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readablePeriod44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 10);
        int int59 = dateTime58.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.withDurationAdded(readableDuration60, (int) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime52.minusMillis(663);
        int int66 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        int int67 = localDateTime65.getYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property72 = dateTime69.centuryOfEra();
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = property72.getAsText(locale73);
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        java.lang.String str77 = locale73.getDisplayCountry();
        java.lang.String str78 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime65, locale73);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime65.plus(readablePeriod79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime54", (dateTime3.compareTo(dateTime54) == 0) == dateTime3.equals(dateTime54));
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0645");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = property4.getAsText(locale5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTime(dateTimeZone14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = dateTimeZone14.getName((long) (byte) 1, locale18);
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = property4.getAsShortText(locale18);
        int int22 = property4.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        int int41 = localDateTime39.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMonthOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime46 = localDateTime43.toDateTime(dateTimeZone45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = dateTimeZone45.getOffset(readableInstant47);
        org.joda.time.DateTime dateTime49 = dateTime30.toDateTime(dateTimeZone45);
        long long50 = dateTime49.getMillis();
        long long51 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime27", (dateTime1.compareTo(dateTime27) == 0) == dateTime1.equals(dateTime27));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0646");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfWeek();
        dateTimeParserBucket5.saveField(dateTimeField16, 740);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        org.joda.time.DateTime.Property property27 = dateTime24.weekOfWeekyear();
        int int28 = dateTime24.getDayOfYear();
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.years();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.era();
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.dayOfMonth();
        int[] intArray44 = chronology29.get((org.joda.time.ReadablePartial) localDateTime39, (long) 258);
        org.joda.time.DateTimeField dateTimeField45 = chronology29.era();
        dateTimeParserBucket5.saveField(dateTimeField45, 316);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime20", (dateTime11.compareTo(dateTime20) == 0) == dateTime11.equals(dateTime20));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0647");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime1.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        int int13 = dateTimeZone11.getStandardOffset(0L);
        int int15 = dateTimeZone11.getOffset((long) 883);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str19 = durationFieldType18.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.joda.time.DurationField durationField27 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField30 = durationFieldType18.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = dateTimeField36.getAsShortText((long) (byte) -1, locale38);
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology22, locale38, (java.lang.Integer) 992, 405);
        java.util.Locale locale46 = dateTimeParserBucket45.getLocale();
        java.lang.String str47 = dateTimeZone11.getShortName((-32279947L), locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0648");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plus(readableDuration29);
        int int31 = localDateTime30.getMinuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.millisOfSecond();
        org.joda.time.DateTime dateTime49 = dateTime32.toDateTime(chronology44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime53.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = null;
        dateTimeParserBucket71.saveField(dateTimeField72, (int) (short) 0);
        java.lang.Integer int75 = dateTimeParserBucket71.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket71.setZone(dateTimeZone76);
        dateTimeParserBucket62.setZone(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket62.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        java.lang.String str81 = dateTimeZone79.toString();
        java.lang.String str82 = dateTimeZone79.toString();
        long long84 = dateTimeZone56.getMillisKeepLocal(dateTimeZone79, (long) 23);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone56);
        int int87 = dateTimeZone56.getOffsetFromLocal(26852203L);
        org.joda.time.DateTime dateTime88 = dateTime49.withZone(dateTimeZone56);
        int int90 = dateTimeZone56.getOffset(1586849398000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime49", (dateTime32.compareTo(dateTime49) == 0) == dateTime32.equals(dateTime49));
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0649");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        java.lang.Integer int22 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        long long28 = dateTimeZone24.adjustOffset(493L, true);
        java.util.Locale locale30 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property45 = dateTime42.centuryOfEra();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = property45.getAsText(locale46);
        java.lang.String str49 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime39, (-1), locale46);
        java.util.Set<java.lang.Character> charSet50 = locale46.getExtensionKeys();
        java.lang.String str51 = locale30.getDisplayLanguage(locale46);
        java.lang.String str52 = dateTimeZone24.getShortName((long) (short) 0, locale46);
        dateTimeParserBucket5.setZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime42", (dateTime25.compareTo(dateTime42) == 0) == dateTime25.equals(dateTime42));
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0650");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology17);
        int int24 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23);
        boolean boolean25 = localDateTime8.equals((java.lang.Object) dateTimeField14);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = dateTimeField14.getAsText(90000000L, locale28);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clearExtensions();
        java.util.Locale.Builder builder35 = builder33.setLanguageTag("coreano");
        java.util.Locale.Builder builder36 = builder35.clear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.DurationField durationField44 = chronology40.seconds();
        org.joda.time.DurationField durationField45 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours((int) (byte) 0);
        boolean boolean52 = dateTime50.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime50.toMutableDateTime(dateTimeZone53);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = dateTimeZone53.getName((long) (byte) 1, locale57);
        org.joda.time.Chronology chronology59 = chronology40.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property64 = dateTime61.centuryOfEra();
        org.joda.time.DurationField durationField65 = property64.getRangeDurationField();
        long long66 = property64.remainder();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.lang.String str70 = locale67.toLanguageTag();
        java.lang.String str71 = property64.getAsText(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology59, locale67, (java.lang.Integer) 180);
        java.util.Locale locale77 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str78 = locale67.getDisplayVariant(locale77);
        java.util.Locale.Builder builder79 = builder36.setLocale(locale67);
        java.util.Locale locale80 = builder36.build();
        java.lang.String str81 = dateTimeField14.getAsText(92, locale80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime48", (dateTime12.compareTo(dateTime48) == 0) == dateTime12.equals(dateTime48));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0651");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 270, dateTimeZone2);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime7.withMillisOfDay(0);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket18.setZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (byte) 100);
        boolean boolean32 = dateTime30.isBefore((long) ' ');
        int int33 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        int int35 = dateTimeZone23.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime36 = dateTime11.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-1));
        boolean boolean41 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime40);
        java.util.Date date42 = dateTime11.toDate();
        org.joda.time.DateTime dateTime44 = dateTime11.plusYears(575);
        int int45 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime52 = property49.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withWeekyear((int) (short) 10);
        int int55 = localDateTime52.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.withDayOfYear((int) (byte) 100);
        int int58 = localDateTime52.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.plusDays(908);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.weekyearOfCentury();
        java.lang.String str67 = dateTimeField65.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfEvenCopy();
        int int73 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean76 = localDateTime72.equals((java.lang.Object) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int81 = localDateTime78.get(dateTimeFieldType80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime75.property(dateTimeFieldType80);
        int int83 = localDateTime60.get(dateTimeFieldType80);
        java.lang.String str84 = dateTimeFieldType80.toString();
        boolean boolean85 = dateTime11.isSupported(dateTimeFieldType80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime64", (dateTime5.compareTo(dateTime64) == 0) == dateTime5.equals(dateTime64));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0652");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = property26.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear((int) (short) 10);
        int int32 = localDateTime29.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, 233);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.minusWeeks(279);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DurationField durationField49 = chronology45.seconds();
        org.joda.time.DurationField durationField50 = chronology45.minutes();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.era();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField53 = chronology45.clockhourOfDay();
        org.joda.time.DurationField durationField54 = dateTimeField53.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime61 = property58.addWrapFieldToCopy(28);
        int int62 = dateTimeField53.getMinimumValue((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        java.lang.String str68 = chronology66.toString();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone71 = dateTimeZone70.toTimeZone();
        org.joda.time.Chronology chronology72 = chronology66.withZone(dateTimeZone70);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        long long76 = chronology72.add(readablePeriod73, 0L, 603);
        org.joda.time.DurationField durationField77 = chronology72.minutes();
        org.joda.time.DurationField durationField78 = chronology72.minutes();
        long long81 = durationField78.getValueAsLong(26751806L, (long) (short) 10);
        java.lang.String str82 = durationField78.toString();
        long long85 = durationField78.getDifferenceAsLong((long) 954, (long) 349);
        boolean boolean86 = localDateTime61.equals((java.lang.Object) long85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField50 and durationField77", (durationField50.compareTo(durationField77) == 0) == durationField50.equals(durationField77));
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0653");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long9 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        java.lang.Integer int28 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone29);
        dateTimeParserBucket15.setZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket15.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str36 = dateTimeFieldType35.getName();
        int int37 = dateTime34.get(dateTimeFieldType35);
        dateTimeParserBucket5.saveField(dateTimeFieldType35, 26776413);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket5.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.Chronology chronology50 = chronology44.withZone(dateTimeZone48);
        org.joda.time.DurationField durationField51 = chronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(26809566L, dateTimeZone53);
        int int56 = dateTimeZone53.getOffsetFromLocal((long) 268);
        long long59 = dateTimeZone53.adjustOffset((long) ' ', false);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 593);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMillis(837);
        int int64 = dateTime63.getWeekyear();
        org.joda.time.DateTime dateTime66 = dateTime63.withYear(908);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime63.getZone();
        boolean boolean68 = dateTimeZone53.equals((java.lang.Object) dateTimeZone67);
        org.joda.time.Chronology chronology69 = chronology40.withZone(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime45", (dateTime34.compareTo(dateTime45) == 0) == dateTime34.equals(dateTime45));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0654");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType11, 16);
        org.joda.time.DateTime.Property property15 = dateTime5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        java.lang.String str19 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(837L, dateTimeZone17);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(648);
        boolean boolean28 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.lang.Integer int48 = dateTimeParserBucket44.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone49);
        dateTimeParserBucket35.setZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket35.getZone();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone52);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.util.Locale locale57 = java.util.Locale.getDefault(category55);
        java.lang.String str58 = dateTimeZone52.getShortName((long) 593, locale57);
        org.joda.time.DateTime dateTime59 = dateTime27.toDateTime(dateTimeZone52);
        boolean boolean60 = dateTime27.isBeforeNow();
        org.joda.time.Instant instant61 = dateTime27.toInstant();
        int int62 = property15.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant61", (dateTime27.compareTo(instant61) == 0) == dateTime27.equals(instant61));
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0655");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DurationField durationField41 = chronology39.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime40", (dateTime3.compareTo(dateTime40) == 0) == dateTime3.equals(dateTime40));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0656");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = chronology9.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((-1L));
        long long15 = dateTimeZone11.convertUTCToLocal((long) 734);
        dateTimeParserBucket5.setZone(dateTimeZone11);
        int int18 = dateTimeZone11.getStandardOffset(136L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(942);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DurationField durationField29 = chronology25.seconds();
        org.joda.time.DurationField durationField30 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        boolean boolean37 = dateTime35.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTime(dateTimeZone38);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeZone38.getName((long) (byte) 1, locale42);
        org.joda.time.Chronology chronology44 = chronology25.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone45 = chronology25.getZone();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 26751806, chronology25);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths(537);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (byte) 0);
        boolean boolean56 = dateTime54.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone57);
        java.util.TimeZone timeZone60 = dateTimeZone57.toTimeZone();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime48, dateTimeZone57);
        java.lang.String str62 = localDateTime61.toString();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.yearOfCentury();
        boolean boolean64 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime33", (dateTime10.compareTo(dateTime33) == 0) == dateTime10.equals(dateTime33));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0657");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 26757772);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology29.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.secondOfDay();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DurationField durationField36 = chronology29.weeks();
        java.util.Locale.Category category37 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.util.Locale.setDefault(category37, locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology29, locale39, (java.lang.Integer) 407, 195);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale39.getDisplayLanguage(locale46);
        java.lang.String str49 = dateTimeZone22.getShortName((long) 26813508, locale46);
        java.lang.String str50 = locale46.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property55 = dateTime52.year();
        org.joda.time.DateTime dateTime57 = dateTime52.minusSeconds(241);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.plus(readableDuration58);
        org.joda.time.DateTime.Property property60 = dateTime57.millisOfDay();
        org.joda.time.DateTime dateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime62 = property60.roundHalfEvenCopy();
        java.lang.String str63 = property60.getName();
        boolean boolean64 = locale46.equals((java.lang.Object) property60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime52", (dateTime30.compareTo(dateTime52) == 0) == dateTime30.equals(dateTime52));
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0658");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket5.saveField(dateTimeFieldType22, 950);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        org.joda.time.DurationField durationField32 = chronology28.seconds();
        org.joda.time.DurationField durationField33 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) 0);
        boolean boolean40 = dateTime38.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime38.toMutableDateTime(dateTimeZone41);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = dateTimeZone41.getName((long) (byte) 1, locale45);
        org.joda.time.Chronology chronology47 = chronology28.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone48 = chronology28.getZone();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 26751806, chronology28);
        org.joda.time.DateTimeField dateTimeField50 = chronology28.centuryOfEra();
        org.joda.time.DurationField durationField51 = dateTimeField50.getLeapDurationField();
        dateTimeParserBucket5.saveField(dateTimeField50, 900);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology56);
        java.lang.String str58 = chronology56.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        org.joda.time.Chronology chronology62 = chronology56.withZone(dateTimeZone60);
        org.joda.time.DurationField durationField63 = chronology62.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        dateTimeParserBucket5.saveField(dateTimeField64, 74371);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime57", (dateTime36.compareTo(dateTime57) == 0) == dateTime36.equals(dateTime57));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0659");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        long long39 = dateTimeZone33.adjustOffset(1014721200000L, false);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime10.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar45 = dateTime44.toGregorianCalendar();
        org.joda.time.DateTime.Property property46 = dateTime44.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime44.getZone();
        long long49 = dateTimeZone47.nextTransition((long) 541);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.lang.String str56 = locale53.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology52, locale53, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfSecond();
        org.joda.time.DurationField durationField66 = chronology62.seconds();
        org.joda.time.DurationField durationField67 = chronology62.minutes();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.era();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.weekOfWeekyear();
        org.joda.time.DurationField durationField70 = chronology62.minutes();
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology72, locale73, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField77 = null;
        dateTimeParserBucket76.saveField(dateTimeField77, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale82 = java.util.Locale.ROOT;
        dateTimeParserBucket76.saveField(dateTimeFieldType80, "it", locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket(673L, chronology62, locale82, (java.lang.Integer) 10, 453);
        java.lang.String str87 = locale53.getDisplayVariant(locale82);
        java.lang.String str88 = dateTimeZone47.getShortName(53L, locale53);
        long long90 = dateTimeZone47.previousTransition(1970L);
        long long92 = dateTimeZone47.nextTransition((long) 338);
        org.joda.time.DateTime dateTime93 = dateTime10.withZoneRetainFields(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime42", (dateTime3.compareTo(dateTime42) == 0) == dateTime3.equals(dateTime42));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0660");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField(0);
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DurationField durationField29 = chronology25.seconds();
        org.joda.time.DurationField durationField30 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.dayOfYear();
        org.joda.time.DurationField durationField33 = chronology25.months();
        org.joda.time.DurationField durationField34 = chronology25.years();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology25.add(readablePeriod35, 31449600052L, (-41));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime.Property property43 = dateTime40.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property58 = dateTime55.centuryOfEra();
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = property58.getAsText(locale59);
        java.lang.String str62 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localDateTime52, (-1), locale59);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = dateTimeField48.getAsShortText((int) (byte) 10, locale64);
        java.lang.String str67 = property43.getAsShortText(locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 327, chronology25, locale64, (java.lang.Integer) 570);
        java.lang.String str70 = dateTimeField19.getAsText(2243L, locale64);
        java.lang.String str71 = dateTimeField5.getAsShortText(781, locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField4 and durationField30", (durationField4.compareTo(durationField30) == 0) == durationField4.equals(durationField30));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0661");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.secondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("Ora media di Greenwich");
        java.lang.String str12 = locale11.getDisplayScript();
        int int13 = dateTimeField9.getMaximumShortTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withFieldAdded(durationFieldType20, 70);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMinutes(49);
        int int25 = localDateTime18.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology29.seconds();
        org.joda.time.DurationField durationField34 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours((int) (byte) 0);
        boolean boolean41 = dateTime39.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime(dateTimeZone42);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = dateTimeZone42.getName((long) (byte) 1, locale46);
        org.joda.time.Chronology chronology48 = chronology29.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property53 = dateTime50.centuryOfEra();
        org.joda.time.DurationField durationField54 = property53.getRangeDurationField();
        long long55 = property53.remainder();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str59 = locale56.toLanguageTag();
        java.lang.String str60 = property53.getAsText(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology48, locale56, (java.lang.Integer) 180);
        java.util.Locale locale66 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str67 = locale56.getDisplayVariant(locale66);
        java.util.Locale locale71 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale71);
        java.util.Set<java.lang.Character> charSet73 = locale71.getExtensionKeys();
        java.lang.String str74 = locale56.getDisplayLanguage(locale71);
        java.lang.String str75 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime37", (dateTime3.compareTo(dateTime37) == 0) == dateTime3.equals(dateTime37));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0662");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj21 = dateTimeParserBucket5.saveState();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 20, chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfDay();
        dateTimeParserBucket5.saveField(dateTimeField29, 303);
        java.util.Locale locale32 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        int int39 = dateTime36.getWeekyear();
        org.joda.time.Chronology chronology40 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        int int44 = dateTimeField41.getDifference(0L, (long) 442);
        dateTimeParserBucket5.saveField(dateTimeField41, 19045);
        java.util.Locale locale47 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime34", (dateTime26.compareTo(dateTime34) == 0) == dateTime26.equals(dateTime34));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0663");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.withChronology(chronology5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        boolean boolean30 = dateTimeZone26.isFixed();
        long long32 = dateTimeZone26.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime6.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0664");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DurationField durationField10 = chronology3.weeks();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Set<java.lang.Character> charSet15 = locale13.getExtensionKeys();
        java.util.Locale.setDefault(category11, locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology3, locale13, (java.lang.Integer) 407, 195);
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale13.getDisplayLanguage(locale20);
        java.util.Set<java.lang.String> strSet23 = locale13.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar28 = dateTime27.toGregorianCalendar();
        int int29 = dateTime27.getMillisOfSecond();
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfHour();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property36 = dateTime33.centuryOfEra();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = property36.getAsText(locale37);
        java.lang.String str40 = locale31.getDisplayName(locale37);
        int int41 = property30.getMaximumTextLength(locale37);
        java.util.Set<java.lang.String> strSet42 = locale37.getUnicodeLocaleAttributes();
        int int43 = strSet42.size();
        int int44 = strSet42.size();
        java.util.Set<java.lang.String> strSet45 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray46 = strSet45.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator47 = strSet45.spliterator();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar52 = dateTime51.toGregorianCalendar();
        int int53 = dateTime51.getMillisOfSecond();
        org.joda.time.DateTime.Property property54 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime51.withYear(832);
        boolean boolean57 = strSet45.equals((java.lang.Object) 832);
        boolean boolean58 = strSet42.containsAll((java.util.Collection<java.lang.String>) strSet45);
        java.util.stream.Stream<java.lang.String> strStream59 = strSet45.stream();
        boolean boolean60 = strSet23.removeAll((java.util.Collection<java.lang.String>) strSet45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime25", (dateTime4.compareTo(dateTime25) == 0) == dateTime4.equals(dateTime25));
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0665");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime9.withMillisOfDay(378);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(799);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        int int23 = dateTimeParserBucket21.getOffset();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.DateTime dateTime27 = dateTime15.toDateTime(chronology24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DurationField durationField29 = chronology24.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField29, and durationField25", !(durationField25.compareTo(durationField29) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField29.compareTo(durationField25))));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0666");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DurationField durationField5 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = dateTimeField11.getAsShortText((long) (byte) -1, locale13);
        java.util.Locale locale15 = locale13.stripExtensions();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean27 = dateTime26.isEqualNow();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.util.Locale locale39 = dateTimeParserBucket35.getLocale();
        java.util.Locale.setDefault(category29, locale39);
        java.lang.String str41 = property28.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale39.getDisplayScript(locale42);
        java.lang.String str44 = locale39.getCountry();
        java.lang.String str45 = locale13.getDisplayScript(locale39);
        int int46 = property4.getMaximumShortTextLength(locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        boolean boolean3 = dateTime1.isBefore((long) 241);
        org.joda.time.DateTime dateTime5 = dateTime1.minusHours(400);
        org.joda.time.DateTime dateTime7 = dateTime1.plus((long) 1052);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology18);
        org.joda.time.DateTime dateTime25 = dateTime1.plusMinutes(0);
        org.joda.time.DateTime.Property property26 = dateTime1.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime1", (dateTime23.compareTo(dateTime1) == 0) == dateTime23.equals(dateTime1));
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0668");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology32);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        org.joda.time.DurationField durationField63 = property62.getRangeDurationField();
        long long64 = property62.remainder();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = property62.getAsText(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology57, locale65, (java.lang.Integer) 180);
        org.joda.time.DateTimeField dateTimeField72 = chronology57.minuteOfHour();
        org.joda.time.DurationField durationField73 = durationFieldType23.getField(chronology57);
        boolean boolean74 = durationField73.isPrecise();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime46", (dateTime27.compareTo(dateTime46) == 0) == dateTime27.equals(dateTime46));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0669");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        boolean boolean35 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date36 = dateTime5.toDate();
        org.joda.time.DateTime dateTime38 = dateTime5.withYear(687);
        org.joda.time.Instant instant39 = dateTime5.toInstant();
        org.joda.time.DateTime.Property property40 = dateTime5.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant39", (dateTime5.compareTo(instant39) == 0) == dateTime5.equals(instant39));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0670");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        java.lang.String str12 = dateTimeField10.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        int int18 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        int int22 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        java.lang.String str48 = dateTimeZone44.getNameKey((long) 25);
        long long50 = dateTimeZone44.previousTransition((long) 292278993);
        long long54 = dateTimeZone44.convertLocalToUTC(120100L, false, (long) 26751);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone44);
        long long56 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = property24.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime55", (dateTime9.compareTo(dateTime55) == 0) == dateTime9.equals(dateTime55));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0671");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime40", (dateTime3.compareTo(dateTime40) == 0) == dateTime3.equals(dateTime40));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0672");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        int int13 = property12.getMaximumValueOverall();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        org.joda.time.DateTime dateTime19 = dateTime14.withMillis(52L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(992);
        org.joda.time.DateTime dateTime22 = dateTime19.withZoneRetainFields(dateTimeZone21);
        dateTimeParserBucket5.setZone(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        java.lang.String str30 = dateTimeField28.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        int int36 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDateTime35.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMillis(484);
        int int43 = localDateTime40.getEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyearOfCentury();
        java.lang.String str50 = dateTimeField48.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = property54.roundHalfEvenCopy();
        int int56 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean59 = localDateTime55.equals((java.lang.Object) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int64 = localDateTime61.get(dateTimeFieldType63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime58.property(dateTimeFieldType63);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType63.getRangeDurationType();
        boolean boolean67 = localDateTime40.isSupported(dateTimeFieldType63);
        java.lang.String str68 = dateTimeFieldType63.toString();
        dateTimeParserBucket5.saveField(dateTimeFieldType63, 26921944);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0673");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DurationField durationField11 = chronology8.hours();
        int int12 = durationField5.compareTo(durationField11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        java.lang.String str17 = chronology15.toString();
        org.joda.time.DurationField durationField18 = chronology15.hours();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DurationField durationField24 = chronology21.hours();
        int int25 = durationField18.compareTo(durationField24);
        int int26 = durationField5.compareTo(durationField24);
        long long29 = durationField24.add((long) '4', (long) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology33.seconds();
        org.joda.time.DurationField durationField38 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property54 = dateTime51.centuryOfEra();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = property54.getAsText(locale55);
        java.lang.String str58 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime48, (-1), locale55);
        java.util.Locale.setDefault(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology33, locale55, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DurationField durationField63 = chronology33.centuries();
        int int64 = durationField24.compareTo(durationField63);
        long long67 = durationField24.getValueAsLong((long) 726, (long) 913);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime51", (dateTime3.compareTo(dateTime51) == 0) == dateTime3.equals(dateTime51));
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0674");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology3.getZone();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.minusYears(20);
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        java.util.Date date36 = dateTime33.toDate();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime33.dayOfMonth();
        int int39 = property31.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime41 = property31.addToCopy(52L);
        org.joda.time.DateTimeField dateTimeField42 = property31.getField();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readableDuration54);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = property61.getAsText(locale62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        boolean boolean70 = dateTime68.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime68.toMutableDateTime(dateTimeZone71);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = dateTimeZone71.getName((long) (byte) 1, locale75);
        java.lang.String str77 = locale75.getScript();
        java.lang.String str78 = property61.getAsShortText(locale75);
        int int79 = property61.getMinimumValue();
        java.util.Locale locale80 = java.util.Locale.UK;
        java.lang.String str81 = property61.getAsText(locale80);
        java.lang.String str82 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 181, chronology3, locale80, (java.lang.Integer) 214);
        org.joda.time.DateTimeField dateTimeField85 = chronology3.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime21", (dateTime4.compareTo(dateTime21) == 0) == dateTime4.equals(dateTime21));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0675");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider2);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology7, locale23, (java.lang.Integer) 9, 538);
        java.lang.String str30 = nameProvider2.getShortName(locale23, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale31 = locale23.stripExtensions();
        java.util.Locale.setDefault(category0, locale23);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((-1));
        org.joda.time.DateTime dateTime38 = dateTime34.withMillisOfDay(0);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekyear((-1));
        org.joda.time.DateTime dateTime57 = dateTime53.plusHours((int) (byte) 100);
        boolean boolean59 = dateTime57.isBefore((long) ' ');
        int int60 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime57);
        int int62 = dateTimeZone50.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime63 = dateTime38.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime.Property property64 = dateTime38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.withWeekyear((-1));
        org.joda.time.DateTime dateTime70 = dateTime68.plusMonths(10);
        org.joda.time.DateTime.Property property71 = dateTime70.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusHours((int) (byte) 0);
        java.util.Date date76 = dateTime73.toDate();
        org.joda.time.DateTime.Property property77 = dateTime73.dayOfMonth();
        org.joda.time.DateTime.Property property78 = dateTime73.dayOfMonth();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.lang.String str80 = locale79.getLanguage();
        java.lang.String str81 = property78.getAsText(locale79);
        java.lang.String str82 = property71.getAsShortText(locale79);
        org.joda.time.DateTime dateTime84 = property71.addToCopy(0L);
        java.util.Locale locale85 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean86 = locale85.hasExtensions();
        java.lang.String str87 = property71.getAsShortText(locale85);
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.lang.String str89 = locale88.getLanguage();
        java.lang.String str90 = locale88.toLanguageTag();
        java.util.Locale.setDefault(locale88);
        java.lang.String str92 = locale85.getDisplayScript(locale88);
        java.lang.String str93 = property64.getAsShortText(locale85);
        java.util.Locale.setDefault(category0, locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime34", (dateTime8.compareTo(dateTime34) == 0) == dateTime8.equals(dateTime34));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0676");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        int int8 = dateTimeField6.getMaximumValue(0L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        org.joda.time.DurationField durationField19 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        boolean boolean26 = dateTime24.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime24.toMutableDateTime(dateTimeZone27);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = dateTimeZone27.getName((long) (byte) 1, locale31);
        org.joda.time.Chronology chronology33 = chronology14.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology14.getZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 26751806, chronology14);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths(537);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.util.Locale locale43 = new java.util.Locale("", "22");
        java.lang.String str44 = locale38.getDisplayCountry(locale43);
        java.util.Locale.setDefault(locale43);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale43.getDisplayCountry(locale46);
        java.util.Calendar calendar48 = dateTime35.toCalendar(locale46);
        java.lang.String str49 = locale46.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 175, chronology10, locale46, (java.lang.Integer) 74920);
        int int52 = dateTimeField6.getMaximumShortTextLength(locale46);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeField6.getAsText(576, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime22", (dateTime3.compareTo(dateTime22) == 0) == dateTime3.equals(dateTime22));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0677");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket5.getZone();
        int int19 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        java.util.Date date24 = dateTime21.toDate();
        org.joda.time.DateTime.Property property25 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime21.withWeekyear(3);
        org.joda.time.Instant instant28 = dateTime21.toInstant();
        boolean boolean29 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant28", (dateTime21.compareTo(instant28) == 0) == dateTime21.equals(instant28));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0678");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = dateTime2.isBefore(readableInstant3);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        dateTimeParserBucket11.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket11.getZone();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        long long33 = dateTimeZone28.adjustOffset(2846437113600010L, false);
        org.joda.time.DateTime dateTime34 = dateTime2.withZoneRetainFields(dateTimeZone28);
        int int35 = dateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        java.lang.String str42 = dateTimeField40.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        int int48 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime47);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.Chronology chronology52 = chronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology51.getZone();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology51.getZone();
        org.joda.time.DateTime dateTime56 = dateTime34.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(1591200219L, dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime39", (dateTime2.compareTo(dateTime39) == 0) == dateTime2.equals(dateTime39));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0679");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType12.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withCenturyOfEra(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        dateTimeParserBucket36.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        java.lang.String str48 = dateTimeField46.getAsShortText((long) 28);
        dateTimeParserBucket36.saveField(dateTimeField46, 100);
        boolean boolean52 = dateTimeField46.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = property55.addToCopy((-592L));
        int int58 = property55.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime60 = property55.addToCopy(593);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime60, 608, locale62);
        org.joda.time.Chronology chronology64 = localDateTime60.getChronology();
        boolean boolean65 = dateTimeFieldType30.isSupported(chronology64);
        int int66 = localDateTime29.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.millisOfSecond();
        org.joda.time.DurationField durationField73 = chronology69.seconds();
        org.joda.time.DurationField durationField74 = chronology69.minutes();
        org.joda.time.DateTimeField dateTimeField75 = chronology69.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusHours((int) (byte) 0);
        boolean boolean81 = dateTime79.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone83 = dateTimeZone82.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime79.toMutableDateTime(dateTimeZone82);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.lang.String str87 = dateTimeZone82.getName((long) (byte) 1, locale86);
        org.joda.time.Chronology chronology88 = chronology69.withZone(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField89 = chronology69.minuteOfDay();
        org.joda.time.DurationField durationField90 = chronology69.seconds();
        org.joda.time.DateTimeField dateTimeField91 = chronology69.secondOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType30.getField(chronology69);
        org.joda.time.DateTimeField dateTimeField94 = chronology69.centuryOfEra();
        org.joda.time.DurationField durationField95 = chronology69.centuries();
        boolean boolean96 = dateTimeFieldType12.isSupported(chronology69);
        org.joda.time.Chronology chronology97 = chronology69.withUTC();
        org.joda.time.DurationField durationField98 = chronology69.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField98, durationField73, and durationField74", !(durationField98.compareTo(durationField73) == 0) || (Math.signum(durationField98.compareTo(durationField74)) == Math.signum(durationField73.compareTo(durationField74))));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0680");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.lang.String str13 = dateTimeField9.getAsText((long) 'a', locale12);
        java.lang.String str14 = locale12.getDisplayName();
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale.setDefault(locale12);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.Chronology chronology25 = chronology19.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        dateTimeParserBucket40.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        java.lang.String str52 = dateTimeField50.getAsShortText((long) 28);
        dateTimeParserBucket40.saveField(dateTimeField50, 100);
        int int55 = dateTimeParserBucket40.getOffset();
        java.lang.Object obj56 = dateTimeParserBucket40.saveState();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 20, chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.clockhourOfDay();
        dateTimeParserBucket40.saveField(dateTimeField64, 303);
        java.util.Locale locale67 = dateTimeParserBucket40.getLocale();
        java.lang.String str68 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale67);
        java.lang.String str69 = locale67.getCountry();
        java.lang.String str70 = locale12.getDisplayLanguage(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime20", (dateTime1.compareTo(dateTime20) == 0) == dateTime1.equals(dateTime20));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0681");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekyear((-1));
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours((int) (byte) 100);
        boolean boolean35 = dateTime33.isBefore((long) ' ');
        int int36 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime33);
        long long38 = dateTimeZone26.nextTransition((long) (short) -1);
        boolean boolean39 = dateTime11.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int[] intArray41 = localDateTime40.getValues();
        chronology4.validate((org.joda.time.ReadablePartial) localDateTime6, intArray41);
        org.joda.time.DateTimeField dateTimeField43 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology4.yearOfEra();
        org.joda.time.DurationField durationField45 = chronology4.minutes();
        java.util.Locale locale48 = new java.util.Locale("2035-02-12T07:26:03.689Z", "10");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(920L, chronology4, locale48, (java.lang.Integer) 51, 162);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology54);
        java.lang.String str56 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField59.getType();
        boolean boolean61 = dateTimeField59.isSupported();
        long long64 = dateTimeField59.set(0L, 217);
        dateTimeParserBucket51.saveField(dateTimeField59, 3715320);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime55", (dateTime2.compareTo(dateTime55) == 0) == dateTime2.equals(dateTime55));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0682");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) '#', 837);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime1.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology13.months();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        java.lang.String str28 = dateTimeField26.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        int int34 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean37 = localDateTime33.equals((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.millisOfSecond();
        int[] intArray42 = chronology13.get((org.joda.time.ReadablePartial) localDateTime36, 0L);
        org.joda.time.DateTimeField dateTimeField43 = chronology13.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime10.toMutableDateTime(chronology13);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.year();
        org.joda.time.DurationField durationField53 = durationFieldType45.getField(chronology48);
        java.lang.String str54 = durationFieldType45.getName();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        boolean boolean63 = localDateTime61.isSupported(dateTimeFieldType62);
        int int64 = localDateTime56.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withYear(635);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology69.millis();
        org.joda.time.DurationFieldType durationFieldType74 = durationField73.getType();
        boolean boolean75 = localDateTime56.isSupported(durationFieldType74);
        java.lang.String str76 = durationFieldType74.toString();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology78, locale79, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology83 = dateTimeParserBucket82.getChronology();
        int int84 = dateTimeParserBucket82.getOffset();
        boolean boolean86 = dateTimeParserBucket82.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket82.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology89 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.weekyear();
        boolean boolean91 = durationFieldType74.isSupported(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfWeek();
        org.joda.time.DurationField durationField93 = durationFieldType45.getField(chronology89);
        org.joda.time.DateTime dateTime95 = dateTime10.withFieldAdded(durationFieldType45, 26942462);
        int int96 = dateTime95.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime44", (dateTime1.compareTo(mutableDateTime44) == 0) == dateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0683");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        int int14 = localDateTime12.size();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((-1));
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (byte) 100);
        boolean boolean22 = dateTime20.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        java.util.Date date27 = dateTime24.toDate();
        boolean boolean28 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property29 = dateTime24.centuryOfEra();
        int int30 = dateTime24.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime24.plus(readablePeriod31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withDurationAdded(readableDuration33, 49);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology37, locale38, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime45.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        java.util.Date date56 = dateTime53.toDate();
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property57.getFieldType();
        boolean boolean59 = dateTime45.isSupported(dateTimeFieldType58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.withWeekyear((-1));
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfSecond();
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Calendar calendar68 = dateTime64.toCalendar(locale66);
        java.lang.String str69 = locale66.getScript();
        dateTimeParserBucket43.saveField(dateTimeFieldType58, "Property[minuteOfDay]", locale66);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType58.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType58.getRangeDurationType();
        boolean boolean73 = dateTime32.isSupported(dateTimeFieldType58);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType58.getRangeDurationType();
        boolean boolean75 = localDateTime12.isSupported(dateTimeFieldType58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime16", (dateTime3.compareTo(dateTime16) == 0) == dateTime3.equals(dateTime16));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0684");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        boolean boolean21 = dateTime19.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime19.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        int int44 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime41);
        long long46 = dateTimeZone34.nextTransition((long) (short) -1);
        boolean boolean47 = dateTime19.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int[] intArray49 = localDateTime48.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localDateTime14, intArray49);
        org.joda.time.DateTimeField dateTimeField51 = chronology12.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField51.getType();
        boolean boolean53 = dateTime8.isSupported(dateTimeFieldType52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0685");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(712);
        org.joda.time.DateTime dateTime15 = dateTime10.withDurationAdded(2020L, 581);
        org.joda.time.DateTime.Property property16 = dateTime10.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime10.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        dateTimeParserBucket23.setZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket23.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime42.year();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        org.joda.time.DateTime dateTime52 = dateTime47.minusYears(558);
        boolean boolean53 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime47);
        int int54 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime47);
        int int55 = dateTime47.getHourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime47.withEarlierOffsetAtOverlap();
        int int57 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime42", (dateTime3.compareTo(dateTime42) == 0) == dateTime3.equals(dateTime42));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0686");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        int int13 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(59);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime25, (-1), locale32);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = dateTimeField21.getAsShortText((int) (byte) 10, locale37);
        long long41 = dateTimeField21.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar47 = dateTime46.toGregorianCalendar();
        int int48 = dateTime46.getMillisOfSecond();
        org.joda.time.DateTime.Property property49 = dateTime46.minuteOfHour();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property55 = dateTime52.centuryOfEra();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = locale50.getDisplayName(locale56);
        int int60 = property49.getMaximumTextLength(locale56);
        java.util.Set<java.lang.String> strSet61 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str62 = dateTimeField21.getAsText((int) (short) 100, locale56);
        java.lang.String str63 = dateTimeZone15.getName((long) 647, locale56);
        dateTimeParserBucket5.setZone(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime72.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean76 = dateTime75.isEqualNow();
        org.joda.time.DateTime dateTime78 = dateTime75.withWeekyear((int) 'x');
        java.lang.String str79 = dateTime75.toString();
        int int80 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime68", (dateTime28.compareTo(dateTime68) == 0) == dateTime28.equals(dateTime68));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0687");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(99);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime19 = dateTime10.minusMinutes(713);
        boolean boolean21 = dateTime19.equals((java.lang.Object) "DateTimeField[yearOfCentury]");
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime23.year();
        org.joda.time.DateTime dateTime28 = dateTime23.minusSeconds(241);
        org.joda.time.DateTime dateTime30 = dateTime23.plusMillis(608);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(58);
        org.joda.time.DateTime dateTime34 = dateTime30.minusWeeks(3);
        int int35 = dateTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        java.lang.String str53 = dateTimeField51.getAsShortText((long) 28);
        dateTimeParserBucket41.saveField(dateTimeField51, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket41.saveField(dateTimeFieldType56, 26761064);
        int int59 = dateTime34.get(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = property63.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYear(2022);
        org.joda.time.Chronology chronology69 = localDateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType56.getField(chronology69);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime19.toMutableDateTime(chronology69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime74 = dateTime19.withPeriodAdded(readablePeriod72, 802);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime23", (dateTime3.compareTo(dateTime23) == 0) == dateTime3.equals(dateTime23));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0688");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear((-1));
        org.joda.time.DateTime dateTime8 = dateTime4.plusHours((int) (byte) 100);
        boolean boolean10 = dateTime8.isBefore((long) ' ');
        org.joda.time.DateTime.Property property11 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(51);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        java.lang.String str22 = dateTimeZone20.getShortName(1645514832618L);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        java.lang.Integer int41 = dateTimeParserBucket37.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket37.setZone(dateTimeZone42);
        dateTimeParserBucket28.setZone(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        boolean boolean46 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone42);
        long long49 = dateTimeZone20.getMillisKeepLocal(dateTimeZone42, 76870080000000L);
        org.joda.time.DateTime dateTime50 = dateTime8.withZone(dateTimeZone20);
        boolean boolean51 = dateTimeZone1.equals((java.lang.Object) dateTime8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime4", (dateTime2.compareTo(dateTime4) == 0) == dateTime2.equals(dateTime4));
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0689");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear((-1));
        org.joda.time.DateTime.Property property7 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(174);
        boolean boolean14 = strSet2.equals((java.lang.Object) dateTime9);
        int int15 = strSet2.size();
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray17 = strSet16.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet16.spliterator();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet16.stream();
        java.util.Iterator<java.lang.String> strItor20 = strSet16.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator21 = strSet16.spliterator();
        boolean boolean22 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.parse("italiano", strMap24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths(10);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        java.util.Date date37 = dateTime34.toDate();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfMonth();
        org.joda.time.DateTime.Property property39 = dateTime34.dayOfMonth();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = property39.getAsText(locale40);
        java.lang.String str43 = property32.getAsShortText(locale40);
        org.joda.time.DateTime dateTime45 = property32.addToCopy(0L);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = property32.getAsShortText(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList25, (java.util.Collection<java.lang.String>) strSet49);
        boolean boolean51 = strSet16.removeAll((java.util.Collection<java.lang.String>) strList50);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        java.lang.String str57 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.dayOfWeek();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        dateTimeParserBucket65.saveField(dateTimeFieldType69, "it", locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology55, locale71, (java.lang.Integer) 9, 538);
        java.lang.String str76 = locale71.getLanguage();
        java.lang.String str77 = locale71.getScript();
        java.util.Set<java.lang.String> strSet78 = locale71.getUnicodeLocaleAttributes();
        boolean boolean79 = strSet16.addAll((java.util.Collection<java.lang.String>) strSet78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime56", (dateTime27.compareTo(dateTime56) == 0) == dateTime27.equals(dateTime56));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0690");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = property9.addWrapFieldToCopy(765);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        java.lang.String str17 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology15.halfdays();
        org.joda.time.DurationField durationField20 = chronology15.halfdays();
        org.joda.time.DurationField durationField21 = chronology15.weekyears();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        int int27 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfHour();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property34 = dateTime31.centuryOfEra();
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = property34.getAsText(locale35);
        java.lang.String str38 = locale29.getDisplayName(locale35);
        int int39 = property28.getMaximumTextLength(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 642, chronology15, locale35);
        java.lang.String str41 = property9.getAsShortText(locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0691");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis(465);
        org.joda.time.DateTime dateTime11 = dateTime7.minusSeconds(732);
        org.joda.time.DateTime.Property property12 = dateTime11.weekyear();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.util.Locale locale23 = dateTimeParserBucket19.getLocale();
        java.util.Locale.setDefault(category13, locale23);
        java.util.Locale locale26 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category13, locale26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("87");
        java.lang.String str37 = dateTimeField33.getAsText((long) 383, locale36);
        java.lang.String str38 = locale36.toLanguageTag();
        java.lang.String str39 = locale36.getDisplayLanguage();
        java.util.Locale.setDefault(category13, locale36);
        java.util.Locale locale41 = java.util.Locale.getDefault(category13);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.era();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale57);
        java.lang.String str59 = locale57.getISO3Country();
        java.lang.String str60 = locale57.getVariant();
        java.util.Locale.setDefault(category13, locale57);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category13, locale62);
        java.lang.String str66 = property12.getAsText(locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime31", (dateTime1.compareTo(dateTime31) == 0) == dateTime1.equals(dateTime31));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0692");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getName();
        org.joda.time.DateTime dateTime8 = property6.getDateTime();
        org.joda.time.DateTime dateTime9 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(631);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.monthOfYear();
        int int31 = localDateTime29.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMonthOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime36 = localDateTime33.toDateTime(dateTimeZone35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone35.getOffset(readableInstant37);
        org.joda.time.DateTime dateTime39 = dateTime20.toDateTime(dateTimeZone35);
        long long41 = dateTimeZone13.getMillisKeepLocal(dateTimeZone35, (long) 298);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime17", (dateTime1.compareTo(dateTime17) == 0) == dateTime1.equals(dateTime17));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0693");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        dateTimeParserBucket30.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        java.lang.String str42 = dateTimeField40.getAsShortText((long) 28);
        dateTimeParserBucket30.saveField(dateTimeField40, 100);
        boolean boolean46 = dateTimeField40.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy((-592L));
        int int52 = property49.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = property49.addToCopy(593);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime54, 608, locale56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.withCenturyOfEra(663);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology70, locale71, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField75 = null;
        dateTimeParserBucket74.saveField(dateTimeField75, (int) (short) 0);
        java.lang.Integer int78 = dateTimeParserBucket74.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket74.setZone(dateTimeZone79);
        dateTimeParserBucket65.setZone(dateTimeZone79);
        java.util.TimeZone timeZone82 = dateTimeZone79.toTimeZone();
        long long84 = dateTimeZone79.convertUTCToLocal((long) 441);
        org.joda.time.DateTime dateTime85 = localDateTime54.toDateTime(dateTimeZone79);
        long long87 = chronology21.set((org.joda.time.ReadablePartial) localDateTime54, (long) 687);
        org.joda.time.DurationField durationField88 = chronology21.seconds();
        org.joda.time.DurationField durationField89 = chronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField88", (durationField6.compareTo(durationField88) == 0) == durationField6.equals(durationField88));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0694");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        boolean boolean5 = property4.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = property4.addToCopy((long) 26775034);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology25);
        int int32 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean33 = localDateTime16.equals((java.lang.Object) dateTimeField22);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = dateTimeField22.getAsText(90000000L, locale36);
        java.lang.String str39 = locale36.getDisplayLanguage();
        java.lang.String str40 = locale36.getScript();
        int int41 = property4.getMaximumShortTextLength(locale36);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.util.Locale locale52 = dateTimeParserBucket48.getLocale();
        java.util.Locale.setDefault(category42, locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property59 = dateTime56.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = property59.getAsText(locale60);
        java.lang.String str63 = locale54.getDisplayName(locale60);
        java.lang.String str64 = locale60.getISO3Language();
        java.util.Locale.setDefault(category42, locale60);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology81, locale82, (java.lang.Integer) (-1), (int) (byte) -1);
        int int86 = dateTimeParserBucket85.getOffset();
        java.lang.Integer int87 = dateTimeParserBucket85.getPivotYear();
        java.util.Locale locale88 = dateTimeParserBucket85.getLocale();
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale91 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean92 = locale91.hasExtensions();
        java.lang.String str93 = locale90.getDisplayLanguage(locale91);
        java.lang.String str94 = locale88.getDisplayName(locale91);
        java.lang.String str95 = localDateTime76.toString("17", locale91);
        java.util.Locale.setDefault(category42, locale91);
        java.util.Locale locale97 = java.util.Locale.getDefault(category42);
        java.lang.String str98 = locale36.getDisplayScript(locale97);
        java.lang.String str99 = locale36.getLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime56", (dateTime20.compareTo(dateTime56) == 0) == dateTime20.equals(dateTime56));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0695");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime1.plusMonths(19);
        org.joda.time.DateTime dateTime10 = dateTime1.plusHours(100);
        org.joda.time.DateTime dateTime12 = dateTime10.plus(1645514782527L);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime10.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfWeek();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        java.lang.String str32 = dateTimeField30.getAsShortText((long) 28);
        dateTimeParserBucket20.saveField(dateTimeField30, 100);
        int int35 = dateTimeParserBucket20.getOffset();
        java.lang.Object obj36 = dateTimeParserBucket20.saveState();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 20, chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.clockhourOfDay();
        dateTimeParserBucket20.saveField(dateTimeField44, 303);
        java.util.Locale locale47 = dateTimeParserBucket20.getLocale();
        java.lang.String str48 = property14.getAsShortText(locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0696");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str14 = dateTimeZone12.toString();
        boolean boolean16 = dateTimeZone12.isStandardOffset((long) 170);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = property22.getAsText(locale23);
        java.util.Set<java.lang.Character> charSet26 = locale23.getExtensionKeys();
        boolean boolean27 = dateTimeZone12.equals((java.lang.Object) locale23);
        long long30 = dateTimeZone12.adjustOffset((long) 406, true);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        int int36 = dateTime34.getMillisOfSecond();
        org.joda.time.DateTime dateTime38 = dateTime34.minusYears((int) 'x');
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTime.Property property40 = dateTime34.dayOfMonth();
        int int41 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        int int48 = dateTimeParserBucket47.getOffset();
        long long49 = dateTimeParserBucket47.computeMillis();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime57 = dateTime55.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime59.getZone();
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        dateTimeParserBucket47.setZone(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str65 = dateTimeZone60.getName((long) 602);
        long long67 = dateTimeZone12.getMillisKeepLocal(dateTimeZone60, 41441035L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime53", (dateTime1.compareTo(dateTime53) == 0) == dateTime1.equals(dateTime53));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0697");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks((-593));
        long long24 = chronology9.set((org.joda.time.ReadablePartial) localDateTime22, (long) 685);
        int int25 = localDateTime22.getEra();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime();
        org.joda.time.Chronology chronology27 = localDateTime22.getChronology();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.Chronology chronology29 = chronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        org.joda.time.Chronology chronology33 = dateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        java.lang.String str47 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyear();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology51);
        int int58 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57);
        boolean boolean59 = localDateTime42.equals((java.lang.Object) dateTimeField48);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = dateTimeField48.getAsText(90000000L, locale62);
        java.lang.String str65 = locale62.getDisplayLanguage();
        java.lang.String str66 = locale62.getScript();
        java.util.Calendar calendar67 = dateTime31.toCalendar(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(621472080087L, chronology27, locale62, (java.lang.Integer) 75121275);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime31", (dateTime4.compareTo(dateTime31) == 0) == dateTime4.equals(dateTime31));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0698");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.withYear(65);
        org.joda.time.DateTime dateTime37 = dateTime35.minus((long) 496);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.minus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.year();
        org.joda.time.DurationField durationField46 = chronology42.weekyears();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField49 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology42.weekyear();
        org.joda.time.DateTime dateTime51 = dateTime39.toDateTime(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField31 and durationField46", Math.signum(durationField31.compareTo(durationField46)) == -Math.signum(durationField46.compareTo(durationField31)));
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0699");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 593);
        org.joda.time.DateTime dateTime15 = dateTime10.plusDays(837);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        long long23 = dateTimeParserBucket21.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime31.getZone();
        boolean boolean36 = dateTimeZone35.isFixed();
        int int38 = dateTimeZone35.getOffset((long) 'x');
        boolean boolean39 = dateTimeParserBucket21.restoreState((java.lang.Object) dateTimeZone35);
        dateTimeParserBucket21.setPivotYear((java.lang.Integer) 92);
        java.util.Locale locale42 = dateTimeParserBucket21.getLocale();
        java.util.Calendar calendar43 = dateTime15.toCalendar(locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime27", (dateTime1.compareTo(dateTime27) == 0) == dateTime1.equals(dateTime27));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0700");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.plus(readableDuration34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale50.getDisplayName();
        dateTimeParserBucket41.saveField(dateTimeFieldType48, "97", locale50);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket41.getZone();
        org.joda.time.DateTime dateTime55 = localDateTime35.toDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withWeekyear((-1));
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DurationField durationField68 = chronology64.seconds();
        org.joda.time.DurationField durationField69 = chronology64.minutes();
        org.joda.time.DateTimeField dateTimeField70 = chronology64.era();
        org.joda.time.DateTimeField dateTimeField71 = chronology64.monthOfYear();
        int int72 = dateTime61.get(dateTimeField71);
        org.joda.time.DateTime dateTime74 = dateTime61.plusYears(2022);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime77 = dateTime61.withDurationAdded(readableDuration75, 555);
        org.joda.time.DateTime.Property property78 = dateTime61.minuteOfHour();
        boolean boolean79 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime57", (dateTime29.compareTo(dateTime57) == 0) == dateTime29.equals(dateTime57));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0701");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime3.withYear(832);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        int int16 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime20 = dateTime17.withFieldAdded(durationFieldType18, 734);
        boolean boolean21 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime23 = dateTime17.withMillisOfDay(272);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime25.withChronology(chronology29);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        boolean boolean54 = dateTimeZone50.isFixed();
        long long56 = dateTimeZone50.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime57 = dateTime30.withZone(dateTimeZone50);
        int int58 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = dateTime61.isBefore(readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime61.toMutableDateTime(dateTimeZone64);
        java.lang.String str68 = dateTimeZone64.getShortName((-1640071641952L));
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime59.toMutableDateTime(dateTimeZone64);
        boolean boolean70 = dateTime57.isEqual((org.joda.time.ReadableInstant) mutableDateTime69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime30", (dateTime1.compareTo(dateTime30) == 0) == dateTime1.equals(dateTime30));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0702");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        boolean boolean35 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date36 = dateTime5.toDate();
        org.joda.time.DateTime dateTime38 = dateTime5.withYear(687);
        org.joda.time.Instant instant39 = dateTime5.toInstant();
        org.joda.time.DateTime.Property property40 = dateTime5.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant39", (dateTime5.compareTo(instant39) == 0) == dateTime5.equals(instant39));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0703");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis(603);
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = dateTime32.isBefore(readableInstant33);
        org.joda.time.DateTime dateTime35 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime32);
        int int37 = dateTime17.getHourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime17.toString(dateTimeFormatter38);
        org.joda.time.DateTime dateTime41 = dateTime17.plusSeconds(709);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyearOfCentury();
        java.lang.String str48 = dateTimeField46.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfEvenCopy();
        int int54 = dateTimeField46.getMinimumValue((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime53.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.Chronology chronology58 = chronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.era();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfEra();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.secondOfMinute();
        org.joda.time.DateTime dateTime62 = dateTime17.withChronology(chronology58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime45", (dateTime13.compareTo(dateTime45) == 0) == dateTime13.equals(dateTime45));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0704");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        boolean boolean35 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date36 = dateTime5.toDate();
        org.joda.time.DateTime dateTime38 = dateTime5.withYear(687);
        org.joda.time.DateTime dateTime40 = dateTime5.minusMinutes(408);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        int int43 = dateTime42.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.Chronology chronology52 = chronology46.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField53 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology46.yearOfEra();
        org.joda.time.DurationField durationField55 = chronology46.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology46.dayOfYear();
        org.joda.time.DurationField durationField57 = chronology46.days();
        org.joda.time.DateTime dateTime58 = dateTime42.toDateTime(chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime47", (dateTime1.compareTo(dateTime47) == 0) == dateTime1.equals(dateTime47));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0705");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.months();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        java.lang.String str18 = dateTimeField16.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        int int24 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean27 = localDateTime23.equals((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.millisOfSecond();
        int[] intArray32 = chronology3.get((org.joda.time.ReadablePartial) localDateTime26, 0L);
        org.joda.time.DurationField durationField33 = chronology3.centuries();
        org.joda.time.DurationField durationField34 = chronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) 0);
        boolean boolean40 = dateTime38.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) 'a');
        boolean boolean45 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = property61.getAsText(locale62);
        java.lang.String str65 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDateTime55, (-1), locale62);
        java.util.Calendar calendar66 = dateTime46.toCalendar(locale62);
        java.lang.String str67 = locale62.getScript();
        java.util.Set<java.lang.String> strSet68 = locale62.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 287, chronology3, locale62, (java.lang.Integer) 15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime36", (dateTime15.compareTo(dateTime36) == 0) == dateTime15.equals(dateTime36));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0706");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(30);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology6, locale7, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = null;
        dateTimeParserBucket10.saveField(dateTimeField11, (int) (short) 0);
        java.lang.Integer int14 = dateTimeParserBucket10.getOffsetInteger();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket10.getChronology();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        dateTimeParserBucket31.saveField(dateTimeFieldType35, "it", locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology21, locale37, (java.lang.Integer) 9, 538);
        java.lang.String str44 = nameProvider16.getShortName(locale37, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale45 = locale37.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology15, locale37, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusHours(118);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.plusMinutes(165);
        long long64 = chronology15.set((org.joda.time.ReadablePartial) localDateTime62, (long) 272);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = localDateTime68.toDateTime(dateTimeZone72);
        org.joda.time.DateTime dateTime76 = dateTime74.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime74.getZone();
        long long80 = dateTimeZone77.convertLocalToUTC((-1510245229601L), false);
        org.joda.time.Chronology chronology81 = chronology15.withZone(dateTimeZone77);
        java.lang.String str83 = dateTimeZone77.getShortName(2055744000000L);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime3, dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0707");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        java.lang.String str28 = property4.getAsShortText(locale25);
        org.joda.time.DurationField durationField29 = property4.getRangeDurationField();
        boolean boolean30 = durationField29.isSupported();
        long long33 = durationField29.getDifferenceAsLong(26760848L, (-31535999000L));
        org.joda.time.DurationFieldType durationFieldType34 = durationField29.getType();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket41.getChronology();
        org.joda.time.tz.NameProvider nameProvider47 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider47);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfWeek();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        dateTimeParserBucket62.saveField(dateTimeFieldType66, "it", locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology52, locale68, (java.lang.Integer) 9, 538);
        java.lang.String str75 = nameProvider47.getShortName(locale68, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale76 = locale68.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology46, locale68, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology81 = localDateTime80.getChronology();
        org.joda.time.LocalDateTime.Property property82 = localDateTime80.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime83 = property82.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minusHours(118);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.plusMinutes(165);
        long long95 = chronology46.set((org.joda.time.ReadablePartial) localDateTime93, (long) 272);
        boolean boolean96 = durationFieldType34.isSupported(chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime53", (dateTime1.compareTo(dateTime53) == 0) == dateTime1.equals(dateTime53));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0708");
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        boolean boolean12 = strSet3.contains((java.lang.Object) chronology6);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology6, locale13, (java.lang.Integer) 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYear((int) (short) 100);
        int int32 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = dateTime35.isBefore(readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime35.minusMillis(57);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        dateTimeParserBucket48.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        java.lang.String str60 = dateTimeField58.getAsShortText((long) 28);
        dateTimeParserBucket48.saveField(dateTimeField58, 100);
        dateTimeParserBucket48.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket48.saveField(dateTimeFieldType65, 950);
        org.joda.time.DateTime.Property property68 = dateTime35.property(dateTimeFieldType65);
        boolean boolean69 = localDateTime24.equals((java.lang.Object) dateTime35);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime24.plus(readableDuration70);
        long long73 = chronology6.set((org.joda.time.ReadablePartial) localDateTime24, 1885922L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime35", (dateTime7.compareTo(dateTime35) == 0) == dateTime7.equals(dateTime35));
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0709");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale locale10 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        boolean boolean18 = dateTime16.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        boolean boolean23 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime(dateTimeZone33);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = dateTimeZone33.getName((long) (byte) 1, locale37);
        java.lang.String str40 = locale37.getUnicodeLocaleType("52");
        java.lang.String str41 = locale26.getDisplayLanguage(locale37);
        java.util.Calendar calendar42 = dateTime24.toCalendar(locale26);
        java.lang.String str43 = locale7.getDisplayCountry(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime14", (dateTime4.compareTo(dateTime14) == 0) == dateTime4.equals(dateTime14));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0710");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.lang.String str6 = property5.getAsString();
        int int7 = property5.getMaximumValue();
        int int8 = property5.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property5.addToCopy(139);
        org.joda.time.DateTime dateTime12 = property5.addToCopy(70L);
        org.joda.time.DateTime dateTime13 = property5.roundHalfFloorCopy();
        org.joda.time.Interval interval14 = property5.toInterval();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider15);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider15);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale18.getDisplayLanguage();
        java.util.Locale locale23 = new java.util.Locale("", "22");
        java.lang.String str24 = locale18.getDisplayCountry(locale23);
        java.util.Locale.setDefault(locale23);
        java.lang.String str28 = nameProvider15.getName(locale23, "13", "19");
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology32);
        java.lang.String str34 = chronology32.toString();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        dateTimeParserBucket42.saveField(dateTimeFieldType46, "it", locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology32, locale48, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.halfdayOfDay();
        org.joda.time.DurationField durationField59 = chronology55.millis();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology55.getZone();
        long long62 = dateTimeZone60.convertUTCToLocal((long) 558);
        dateTimeParserBucket52.setZone(dateTimeZone60);
        java.util.Locale locale64 = dateTimeParserBucket52.getLocale();
        java.lang.String str67 = nameProvider15.getShortName(locale64, "2022-02-22T07:26:16.428Z", "1970-01-02T20:00:00.395Z");
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("20");
        java.lang.String str72 = nameProvider15.getName(locale69, "1970-01-01T00:00:00.249", "-0001-12-22T20:40:46.190+00:00:00.052");
        int int73 = property5.getMaximumTextLength(locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime33", (dateTime1.compareTo(dateTime33) == 0) == dateTime1.equals(dateTime33));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0711");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.millisOfSecond();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(52914310L, chronology9, locale21);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.secondOfDay();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.era();
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.dayOfYear();
        boolean boolean49 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray51 = chronology28.get((org.joda.time.ReadablePartial) localDateTime43, (-1510245249275L));
        org.joda.time.DateTimeField dateTimeField52 = chronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField53 = chronology28.year();
        dateTimeParserBucket25.saveField(dateTimeField53, 479);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusMillis(603);
        int int63 = localDateTime62.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        boolean boolean67 = dateTime65.isBefore(readableInstant66);
        org.joda.time.DateTime dateTime68 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean72 = locale71.hasExtensions();
        java.lang.String str73 = locale70.getDisplayLanguage(locale71);
        java.lang.String str74 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale70);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime83 = dateTime81.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime86 = dateTime83.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean87 = dateTime86.isEqualNow();
        org.joda.time.LocalDateTime localDateTime88 = dateTime86.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.minus(readableDuration89);
        java.util.Locale locale92 = java.util.Locale.KOREAN;
        java.util.Locale locale93 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str94 = locale92.getDisplayName(locale93);
        java.lang.String str95 = locale92.toLanguageTag();
        java.lang.String str96 = localDateTime90.toString("55", locale92);
        java.lang.String str97 = dateTimeField53.getAsShortText(0, locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime65", (dateTime4.compareTo(dateTime65) == 0) == dateTime4.equals(dateTime65));
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0712");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology3, locale19, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readableDuration28);
        int int30 = localDateTime29.getMinuteOfHour();
        boolean boolean31 = dateTimeParserBucket23.restoreState((java.lang.Object) localDateTime29);
        dateTimeParserBucket23.setOffset(150);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        dateTimeParserBucket39.setZone(dateTimeZone53);
        boolean boolean56 = dateTimeZone53.isFixed();
        boolean boolean57 = dateTimeZone53.isFixed();
        long long59 = dateTimeZone53.convertUTCToLocal((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 855);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime70);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.year();
        org.joda.time.LocalDateTime localDateTime76 = property74.setCopy(292);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = localDateTime76.getFields();
        boolean boolean78 = dateTime65.equals((java.lang.Object) dateTimeFieldArray77);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.plusHours((int) (byte) 0);
        boolean boolean84 = dateTime82.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.minusWeeks((int) 'a');
        boolean boolean89 = dateTime82.isAfter((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = dateTime88.toDateTime();
        org.joda.time.Chronology chronology91 = dateTime90.getChronology();
        java.lang.String str92 = chronology91.toString();
        org.joda.time.DateTime dateTime93 = org.joda.time.DateTime.now(chronology91);
        int int94 = dateTime93.getDayOfWeek();
        boolean boolean95 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime93);
        int int96 = dateTime93.getMillisOfDay();
        boolean boolean97 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime93);
        boolean boolean98 = dateTime93.isEqualNow();
        boolean boolean99 = dateTimeParserBucket23.restoreState((java.lang.Object) dateTime93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime61", (dateTime4.compareTo(dateTime61) == 0) == dateTime4.equals(dateTime61));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0713");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        dateTimeParserBucket6.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        dateTimeParserBucket6.saveField(dateTimeField16, 100);
        boolean boolean22 = dateTimeField16.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-592L));
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property25.addToCopy(593);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime30, 608, locale32);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        boolean boolean35 = dateTimeFieldType0.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfMonth();
        long long38 = dateTimeField36.roundHalfCeiling(513084L);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyearOfCentury();
        java.lang.String str45 = dateTimeField43.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfEvenCopy();
        int int51 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean54 = localDateTime50.equals((java.lang.Object) localDateTime53);
        int int55 = localDateTime53.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withPeriodAdded(readablePeriod56, 950);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.withWeekyear(99);
        org.joda.time.LocalDateTime.Property property61 = localDateTime53.year();
        java.util.Locale locale66 = new java.util.Locale("1969-11-21T04:00:00.000", "property[millisofsecond]", "2035-02-12T07:26:14.614Z");
        java.lang.String str67 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, 19045, locale66);
        java.util.Locale locale71 = new java.util.Locale("1969-12-31T23:59:28.000", "2022-02-22T07:25:57.295+00:00:00.052");
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.util.Locale locale75 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str76 = locale72.getDisplayCountry(locale75);
        java.util.Locale locale77 = locale75.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusHours((int) (byte) 0);
        java.util.Date date82 = dateTime79.toDate();
        org.joda.time.DateTime.Property property83 = dateTime79.dayOfMonth();
        org.joda.time.DateTime.Property property84 = dateTime79.dayOfMonth();
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale85.getLanguage();
        java.lang.String str87 = property84.getAsText(locale85);
        java.lang.String str88 = locale75.getDisplayVariant(locale85);
        java.lang.String str89 = locale85.getISO3Country();
        java.lang.String str90 = locale71.getDisplayVariant(locale85);
        java.lang.String str91 = dateTimeField36.getAsShortText(26919989L, locale71);
        boolean boolean92 = locale71.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime79", (dateTime42.compareTo(dateTime79) == 0) == dateTime42.equals(dateTime79));
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0714");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime1.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        int int17 = dateTimeParserBucket16.getOffset();
        java.lang.Integer int18 = dateTimeParserBucket16.getPivotYear();
        java.util.Locale locale19 = dateTimeParserBucket16.getLocale();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        boolean boolean30 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime29.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        java.lang.String str39 = property37.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property37.getFieldType();
        int int41 = dateTime33.get(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        boolean boolean55 = dateTime53.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime53.toMutableDateTime(dateTimeZone56);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = dateTimeZone56.getName((long) (byte) 1, locale60);
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = property46.getAsShortText(locale60);
        int int64 = property46.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property46.getFieldType();
        boolean boolean66 = dateTime33.isSupported(dateTimeFieldType65);
        dateTimeParserBucket16.saveField(dateTimeFieldType65, 86399);
        java.lang.String str69 = dateTimeFieldType65.getName();
        org.joda.time.DateTime dateTime71 = dateTime8.withField(dateTimeFieldType65, 594);
        int int72 = dateTime71.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.weekyearOfCentury();
        java.lang.String str79 = dateTimeField77.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology82 = localDateTime81.getChronology();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime84 = property83.roundHalfEvenCopy();
        int int85 = dateTimeField77.getMinimumValue((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = localDateTime84.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime84);
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime90 = property88.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minusDays((int) '#');
        org.joda.time.LocalDateTime.Property property93 = localDateTime92.weekyear();
        int int94 = localDateTime92.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property95 = localDateTime92.dayOfYear();
        org.joda.time.LocalDateTime localDateTime96 = property95.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime98 = localDateTime96.withYearOfEra(26945778);
        boolean boolean99 = dateTime71.equals((java.lang.Object) localDateTime98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime76", (dateTime1.compareTo(dateTime76) == 0) == dateTime1.equals(dateTime76));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0715");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        dateTimeParserBucket23.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        java.lang.String str35 = dateTimeField33.getAsShortText((long) 28);
        dateTimeParserBucket23.saveField(dateTimeField33, 100);
        int int38 = dateTimeParserBucket23.getOffset();
        java.lang.Object obj39 = dateTimeParserBucket23.saveState();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 20, chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.clockhourOfDay();
        dateTimeParserBucket23.saveField(dateTimeField47, 303);
        java.util.Locale locale50 = dateTimeParserBucket23.getLocale();
        java.lang.String str51 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale50);
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property58 = dateTime55.centuryOfEra();
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = property58.getAsText(locale59);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusHours((int) (byte) 0);
        boolean boolean67 = dateTime65.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime65.toMutableDateTime(dateTimeZone68);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = dateTimeZone68.getName((long) (byte) 1, locale72);
        java.lang.String str74 = locale72.getScript();
        java.lang.String str75 = property58.getAsShortText(locale72);
        java.lang.String str76 = locale72.getDisplayScript();
        java.lang.String str79 = nameProvider53.getName(locale72, "\u671d\u9c9c\u6587", "+00:00:00.052");
        java.lang.String str80 = locale72.getISO3Country();
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.lang.String str82 = locale81.getDisplayName();
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = locale81.getISO3Language();
        java.util.Locale locale85 = locale81.stripExtensions();
        java.lang.String str86 = locale72.getDisplayLanguage(locale85);
        java.lang.String str87 = locale85.getDisplayScript();
        java.lang.String str88 = locale85.getISO3Country();
        java.lang.String str89 = dateTimeField12.getAsText(344, locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime55", (dateTime3.compareTo(dateTime55) == 0) == dateTime3.equals(dateTime55));
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0716");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.withYearOfEra(51);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        long long14 = property13.remainder();
        org.joda.time.DurationField durationField15 = property13.getLeapDurationField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        java.lang.Integer int26 = dateTimeParserBucket22.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket22.setZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.plusHours((int) (byte) 100);
        boolean boolean36 = dateTime34.isBefore((long) ' ');
        int int37 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime39 = dateTime34.minusYears(20);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusMillis(603);
        int int47 = localDateTime46.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = dateTime49.isBefore(readableInstant50);
        org.joda.time.DateTime dateTime52 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int54 = dateTime34.getHourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = dateTime34.toString(dateTimeFormatter55);
        int int57 = property13.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime59.toMutableDateTime();
        int int63 = dateTime59.getMillisOfSecond();
        org.joda.time.DateTime dateTime65 = dateTime59.plusYears((int) (byte) 10);
        org.joda.time.Instant instant66 = dateTime59.toInstant();
        int int67 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and instant66", (dateTime49.compareTo(instant66) == 0) == dateTime49.equals(instant66));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0717");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(712);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        org.joda.time.Chronology chronology25 = dateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime32.toString(dateTimeFormatter35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-1));
        org.joda.time.DateTime dateTime54 = dateTime50.plusHours((int) (byte) 100);
        boolean boolean56 = dateTime54.isBefore((long) ' ');
        int int57 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime54);
        long long59 = dateTimeZone47.nextTransition((long) (short) -1);
        boolean boolean60 = dateTime32.equals((java.lang.Object) dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        int[] intArray62 = localDateTime61.getValues();
        chronology25.validate((org.joda.time.ReadablePartial) localDateTime27, intArray62);
        org.joda.time.DateTimeZone dateTimeZone64 = chronology25.getZone();
        org.joda.time.DateTime dateTime65 = dateTime18.withChronology(chronology25);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusMillis(603);
        int int74 = localDateTime73.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.minusMonths((int) '#');
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = localDateTime73.toString("1970", locale78);
        int int80 = property66.getMaximumTextLength(locale78);
        java.util.Locale locale81 = locale78.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(1645515089893L, chronology14, locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime16", (dateTime4.compareTo(dateTime16) == 0) == dateTime4.equals(dateTime16));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0718");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) '#', 837);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime1.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology13.months();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        java.lang.String str28 = dateTimeField26.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        int int34 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean37 = localDateTime33.equals((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.millisOfSecond();
        int[] intArray42 = chronology13.get((org.joda.time.ReadablePartial) localDateTime36, 0L);
        org.joda.time.DateTimeField dateTimeField43 = chronology13.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime10.toMutableDateTime(chronology13);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.year();
        org.joda.time.DurationField durationField53 = durationFieldType45.getField(chronology48);
        java.lang.String str54 = durationFieldType45.getName();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        boolean boolean63 = localDateTime61.isSupported(dateTimeFieldType62);
        int int64 = localDateTime56.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withYear(635);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology69.millis();
        org.joda.time.DurationFieldType durationFieldType74 = durationField73.getType();
        boolean boolean75 = localDateTime56.isSupported(durationFieldType74);
        java.lang.String str76 = durationFieldType74.toString();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology78, locale79, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology83 = dateTimeParserBucket82.getChronology();
        int int84 = dateTimeParserBucket82.getOffset();
        boolean boolean86 = dateTimeParserBucket82.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket82.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology89 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.weekyear();
        boolean boolean91 = durationFieldType74.isSupported(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfWeek();
        org.joda.time.DurationField durationField93 = durationFieldType45.getField(chronology89);
        org.joda.time.DateTime dateTime95 = dateTime10.withFieldAdded(durationFieldType45, 26942462);
        org.joda.time.Chronology chronology96 = null;
        org.joda.time.DurationField durationField97 = durationFieldType45.getField(chronology96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0719");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(292L);
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        java.lang.String str19 = dateTimeField17.getAsShortText((long) 28);
        dateTimeParserBucket7.saveField(dateTimeField17, 100);
        dateTimeParserBucket7.setOffset(19);
        java.lang.Object obj24 = dateTimeParserBucket7.saveState();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear((int) (short) 100);
        int int40 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int int41 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        int int47 = dateTime45.getMillisOfSecond();
        org.joda.time.DateTime dateTime48 = localDateTime32.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int50 = localDateTime32.get(dateTimeFieldType49);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale52.getLanguage();
        dateTimeParserBucket7.saveField(dateTimeFieldType49, "DurationField[years]", locale52);
        org.joda.time.LocalDateTime.Property property55 = localDateTime1.property(dateTimeFieldType49);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        java.lang.String str61 = chronology59.toString();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 20, chronology59);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusMonths(26998701);
        int int67 = property55.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime60", (dateTime43.compareTo(dateTime60) == 0) == dateTime43.equals(dateTime60));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0720");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.plusMinutes(214);
        org.joda.time.DateTime dateTime10 = dateTime6.withWeekyear(695);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis(624);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfSecond();
        org.joda.time.DurationField durationField20 = chronology16.seconds();
        org.joda.time.DurationField durationField21 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = chronology16.minutes();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        dateTimeParserBucket30.saveField(dateTimeFieldType34, "it", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(673L, chronology16, locale36, (java.lang.Integer) 10, 453);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField42 = chronology16.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField42.getType();
        boolean boolean44 = dateTime10.isSupported(dateTimeFieldType43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0721");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        boolean boolean17 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.minutes();
        org.joda.time.DateTime dateTime23 = dateTime1.withChronology(chronology19);
        org.joda.time.Chronology chronology24 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        long long28 = dateTimeField25.addWrapField((long) 21, 609);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        dateTimeParserBucket35.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        java.lang.String str47 = dateTimeField45.getAsShortText((long) 28);
        dateTimeParserBucket35.saveField(dateTimeField45, 100);
        int int50 = dateTimeParserBucket35.getOffset();
        java.lang.Object obj51 = dateTimeParserBucket35.saveState();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        java.lang.String str57 = chronology55.toString();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 20, chronology55);
        org.joda.time.DateTimeField dateTimeField59 = chronology55.clockhourOfDay();
        dateTimeParserBucket35.saveField(dateTimeField59, 303);
        java.util.Locale locale62 = dateTimeParserBucket35.getLocale();
        java.lang.String str63 = dateTimeField25.getAsText(368, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime56", (dateTime1.compareTo(dateTime56) == 0) == dateTime1.equals(dateTime56));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0722");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime5.toMutableDateTime(chronology8);
        boolean boolean14 = dateTime5.isBeforeNow();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.minusYears(20);
        org.joda.time.DateTime.Property property38 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        boolean boolean44 = dateTime42.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        boolean boolean49 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        java.lang.String str52 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime32.toDateTime(chronology51);
        int int55 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0723");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        int int4 = dateTime1.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes((-593));
        org.joda.time.DateTime dateTime11 = dateTime9.minus(0L);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.secondOfDay();
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 484, chronology17, locale21, (java.lang.Integer) 348, 2020);
        org.joda.time.DateTimeField dateTimeField25 = chronology17.monthOfYear();
        org.joda.time.DateTime dateTime26 = dateTime13.toDateTime(chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime18", (dateTime1.compareTo(dateTime18) == 0) == dateTime1.equals(dateTime18));
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0724");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.plusHours(771);
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-1));
        org.joda.time.DateTime dateTime42 = dateTime38.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.plus(readableDuration43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime48 = dateTime44.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        java.lang.String str51 = dateTimeZone49.toString();
        boolean boolean53 = dateTimeZone49.isStandardOffset((long) 170);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property59 = dateTime56.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = property59.getAsText(locale60);
        java.util.Set<java.lang.Character> charSet63 = locale60.getExtensionKeys();
        boolean boolean64 = dateTimeZone49.equals((java.lang.Object) locale60);
        java.lang.String str65 = property36.getAsShortText(locale60);
        org.joda.time.DateTime dateTime66 = property36.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime38", (dateTime29.compareTo(dateTime38) == 0) == dateTime29.equals(dateTime38));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0725");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (short) -1);
        int int30 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        boolean boolean37 = dateTime35.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime35.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekyear((-1));
        org.joda.time.DateTime dateTime57 = dateTime53.plusHours((int) (byte) 100);
        boolean boolean59 = dateTime57.isBefore((long) ' ');
        int int60 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime57);
        long long62 = dateTimeZone50.nextTransition((long) (short) -1);
        boolean boolean63 = dateTime35.equals((java.lang.Object) dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        long long67 = dateTimeZone50.adjustOffset((long) 26752, true);
        long long69 = dateTimeZone23.getMillisKeepLocal(dateTimeZone50, (long) 354);
        long long72 = dateTimeZone23.convertLocalToUTC(0L, true);
        java.lang.String str74 = dateTimeZone23.getShortName(2237297760126000000L);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.DateTimeField dateTimeField79 = chronology77.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.halfdayOfDay();
        org.joda.time.DurationField durationField81 = chronology77.millis();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology77.getZone();
        java.util.TimeZone timeZone83 = dateTimeZone82.toTimeZone();
        int int85 = dateTimeZone82.getStandardOffset((long) 480);
        long long87 = dateTimeZone23.getMillisKeepLocal(dateTimeZone82, (long) 97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime78", (dateTime33.compareTo(dateTime78) == 0) == dateTime33.equals(dateTime78));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0726");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        boolean boolean26 = timeZone22.hasSameRules(timeZone25);
        java.lang.String str27 = timeZone22.getID();
        boolean boolean28 = timeZone22.observesDaylightTime();
        int int30 = timeZone22.getOffset(4418768307L);
        java.lang.String str31 = timeZone22.getID();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("8");
        timeZone33.setRawOffset((int) 'a');
        boolean boolean36 = timeZone22.hasSameRules(timeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone38.getOffset(readableInstant40);
        int int43 = dateTimeZone38.getOffsetFromLocal(2020L);
        long long45 = dateTimeZone38.convertUTCToLocal((long) 422);
        int int47 = dateTimeZone38.getOffset((-62168008280862L));
        java.util.TimeZone timeZone48 = dateTimeZone38.toTimeZone();
        boolean boolean49 = timeZone33.hasSameRules(timeZone48);
        java.lang.String str50 = timeZone33.getID();
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.getDefault(category51);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.parse("70");
        org.joda.time.DateTime.Property property55 = dateTime54.year();
        java.lang.String str56 = property55.getAsText();
        int int57 = property55.getMinimumValueOverall();
        org.joda.time.DateTime dateTime58 = property55.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusHours((int) (byte) 0);
        java.util.Date date65 = dateTime62.toDate();
        org.joda.time.DateTime.Property property66 = dateTime62.dayOfMonth();
        java.lang.String str67 = property66.getAsString();
        int int68 = property66.getMaximumValue();
        int int69 = property66.getMinimumValueOverall();
        org.joda.time.DateTime dateTime70 = property66.roundHalfCeilingCopy();
        int int71 = dateTime70.getMinuteOfDay();
        org.joda.time.DateTime dateTime73 = dateTime70.minusMinutes(563);
        org.joda.time.DateTime dateTime75 = dateTime73.withYear(92);
        org.joda.time.LocalDateTime localDateTime76 = dateTime73.toLocalDateTime();
        org.joda.time.Chronology chronology77 = dateTime73.getChronology();
        java.util.Locale locale78 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale79 = locale78.stripExtensions();
        java.lang.String str80 = locale78.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet81 = locale78.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 683, chronology77, locale78, (java.lang.Integer) 744);
        org.joda.time.DateTime dateTime85 = property55.setCopy("445", locale78);
        java.util.Locale.setDefault(category51, locale78);
        java.util.Locale locale87 = java.util.Locale.getDefault(category51);
        java.lang.String str88 = locale87.getISO3Country();
        java.lang.String str89 = timeZone33.getDisplayName(locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and dateTime62", (dateTime39.compareTo(dateTime62) == 0) == dateTime39.equals(dateTime62));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0727");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(175);
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        boolean boolean19 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        java.lang.String str28 = property26.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property26.getFieldType();
        int int30 = dateTime22.get(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property35 = dateTime32.centuryOfEra();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = property35.getAsText(locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        boolean boolean44 = dateTime42.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime42.toMutableDateTime(dateTimeZone45);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = dateTimeZone45.getName((long) (byte) 1, locale49);
        java.lang.String str51 = locale49.getScript();
        java.lang.String str52 = property35.getAsShortText(locale49);
        int int53 = property35.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property35.getFieldType();
        boolean boolean55 = dateTime22.isSupported(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime dateTime62 = dateTime58.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.plus(readableDuration63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime68 = dateTime64.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime68.toMutableDateTime();
        org.joda.time.Chronology chronology70 = mutableDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = durationFieldType56.getField(chronology70);
        java.lang.String str72 = durationFieldType56.toString();
        boolean boolean73 = localDateTime7.isSupported(durationFieldType56);
        org.joda.time.LocalDateTime.Property property74 = localDateTime7.year();
        org.joda.time.DurationField durationField75 = property74.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField71, durationField75, and durationField71", !(durationField71.compareTo(durationField75) == 0) || (Math.signum(durationField71.compareTo(durationField71)) == Math.signum(durationField75.compareTo(durationField71))));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0728");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime5.withDayOfYear(241);
        boolean boolean12 = dateTime10.isEqual((long) 50);
        org.joda.time.DateTime dateTime14 = dateTime10.minus(77294323L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((-1));
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths(10);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.joda.time.DateTime dateTime24 = property21.addToCopy((long) 25);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = property21.getAsShortText(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths(10);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfDay();
        org.joda.time.DurationField durationField34 = property33.getDurationField();
        org.joda.time.DateTime dateTime36 = property33.addToCopy((long) 25);
        int int37 = property21.getDifference((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = dateTime36.isBefore((long) 304);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime36.toMutableDateTimeISO();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.era();
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime36.toMutableDateTime(chronology47);
        boolean boolean53 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime52", (dateTime24.compareTo(mutableDateTime52) == 0) == dateTime24.equals(mutableDateTime52));
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0729");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        long long39 = dateTimeZone33.adjustOffset(1014721200000L, false);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime10.toMutableDateTime(dateTimeZone33);
        int int41 = mutableDateTime40.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime13", (dateTime10.compareTo(dateTime13) == 0) == dateTime10.equals(dateTime13));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0730");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.centuryOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj0, chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.year();
        org.joda.time.DurationField durationField17 = chronology11.hours();
        org.joda.time.DurationField durationField18 = chronology11.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField12, and durationField17", !(durationField18.compareTo(durationField12) == 0) || (Math.signum(durationField18.compareTo(durationField17)) == Math.signum(durationField12.compareTo(durationField17))));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0731");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        int int10 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int12 = dateTime5.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.toString();
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone43, (long) 23);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime5.toMutableDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusYears(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        boolean boolean56 = localDateTime51.isSupported(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.weekyearOfCentury();
        java.lang.String str63 = dateTimeField61.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundHalfEvenCopy();
        int int69 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = localDateTime68.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime68);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.Chronology chronology73 = chronology72.withUTC();
        org.joda.time.DateTimeZone dateTimeZone74 = chronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType54.getField(chronology73);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DateTime.Property property78 = dateTime5.property(dateTimeFieldType54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime60", (dateTime1.compareTo(dateTime60) == 0) == dateTime1.equals(dateTime60));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0732");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology3.getZone();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.minusYears(20);
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        java.util.Date date36 = dateTime33.toDate();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime33.dayOfMonth();
        int int39 = property31.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime41 = property31.addToCopy(52L);
        org.joda.time.DateTimeField dateTimeField42 = property31.getField();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readableDuration54);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = property61.getAsText(locale62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        boolean boolean70 = dateTime68.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime68.toMutableDateTime(dateTimeZone71);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = dateTimeZone71.getName((long) (byte) 1, locale75);
        java.lang.String str77 = locale75.getScript();
        java.lang.String str78 = property61.getAsShortText(locale75);
        int int79 = property61.getMinimumValue();
        java.util.Locale locale80 = java.util.Locale.UK;
        java.lang.String str81 = property61.getAsText(locale80);
        java.lang.String str82 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 181, chronology3, locale80, (java.lang.Integer) 214);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime21", (dateTime4.compareTo(dateTime21) == 0) == dateTime4.equals(dateTime21));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0733");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField13 = durationFieldType1.getField(chronology5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeField19.getAsShortText((long) (byte) -1, locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.toLanguageTag();
        java.lang.String str25 = locale21.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology5, locale21, (java.lang.Integer) 992, 405);
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket28.getZone();
        java.lang.Integer int31 = dateTimeParserBucket28.getPivotYear();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.era();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfEvenCopy();
        boolean boolean44 = property38.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime localDateTime45 = property38.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property38.getFieldType();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = property63.getAsText(locale64);
        java.lang.String str67 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime57, (-1), locale64);
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = dateTimeField53.getAsShortText((int) (byte) 10, locale69);
        long long73 = dateTimeField53.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar79 = dateTime78.toGregorianCalendar();
        int int80 = dateTime78.getMillisOfSecond();
        org.joda.time.DateTime.Property property81 = dateTime78.minuteOfHour();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.DateTime dateTime86 = dateTime84.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property87 = dateTime84.centuryOfEra();
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.lang.String str89 = locale88.getLanguage();
        java.lang.String str90 = property87.getAsText(locale88);
        java.lang.String str91 = locale82.getDisplayName(locale88);
        int int92 = property81.getMaximumTextLength(locale88);
        java.util.Set<java.lang.String> strSet93 = locale88.getUnicodeLocaleAttributes();
        java.lang.String str94 = dateTimeField53.getAsText((int) (short) 100, locale88);
        java.lang.String str95 = locale88.toLanguageTag();
        dateTimeParserBucket28.saveField(dateTimeFieldType46, "7", locale88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime60", (dateTime17.compareTo(dateTime60) == 0) == dateTime17.equals(dateTime60));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0734");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1510245241413L), dateTimeZone9);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfCentury();
        int int18 = property17.getMaximumValueOverall();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = property17.getAsText(locale20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int28 = localDateTime24.get(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withCenturyOfEra((int) (byte) 0);
        int int31 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusMillis(603);
        int int57 = localDateTime56.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusSeconds(170);
        boolean boolean60 = localDateTime49.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        boolean boolean61 = localDateTime36.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime36.plusMinutes(92);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime36.minus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField73 = null;
        dateTimeParserBucket72.saveField(dateTimeField73, (int) (short) 0);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology77, locale78, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField82 = null;
        dateTimeParserBucket81.saveField(dateTimeField82, (int) (short) 0);
        java.lang.Integer int85 = dateTimeParserBucket81.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket81.setZone(dateTimeZone86);
        dateTimeParserBucket72.setZone(dateTimeZone86);
        boolean boolean89 = dateTimeZone86.isFixed();
        long long92 = dateTimeZone86.adjustOffset(1014721200000L, false);
        org.joda.time.DateTime dateTime93 = localDateTime66.toDateTime(dateTimeZone86);
        int int95 = dateTimeZone86.getOffset((long) 134);
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime11.toMutableDateTime(dateTimeZone86);
        org.joda.time.DateTime dateTime98 = dateTime11.plusYears(36001000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime96", (instant12.compareTo(mutableDateTime96) == 0) == instant12.equals(mutableDateTime96));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0735");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        int int7 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property8 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(16793929L);
        org.joda.time.DateTime dateTime12 = dateTime9.withFields((org.joda.time.ReadablePartial) localDateTime11);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.halfdayOfDay();
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.weekyearOfCentury();
        boolean boolean25 = strSet16.contains((java.lang.Object) chronology19);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology19, locale26, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DurationField durationField30 = chronology19.millis();
        org.joda.time.DateTime dateTime31 = dateTime12.toDateTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime20", (dateTime1.compareTo(dateTime20) == 0) == dateTime1.equals(dateTime20));
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0736");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long9 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        java.lang.Integer int28 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone29);
        dateTimeParserBucket15.setZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket15.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str36 = dateTimeFieldType35.getName();
        int int37 = dateTime34.get(dateTimeFieldType35);
        dateTimeParserBucket5.saveField(dateTimeFieldType35, 26776413);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket5.getZone();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        dateTimeParserBucket47.setOffset((java.lang.Integer) 2);
        java.lang.Integer int53 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(59);
        dateTimeParserBucket47.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.years();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj41, chronology57);
        org.joda.time.tz.Provider provider60 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider60);
        java.util.Set<java.lang.String> strSet62 = provider60.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone64 = provider60.getZone("97");
        org.joda.time.DateTimeZone dateTimeZone66 = provider60.getZone("UTC");
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime74 = dateTime72.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime77 = dateTime74.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime74.getZone();
        java.lang.String str80 = dateTimeZone78.getName(1L);
        int int82 = dateTimeZone78.getOffset((long) 'a');
        long long84 = dateTimeZone78.previousTransition(12092L);
        boolean boolean85 = dateTimeZone66.equals((java.lang.Object) dateTimeZone78);
        int int87 = dateTimeZone78.getOffsetFromLocal((long) 267535);
        long long89 = dateTimeZone78.previousTransition((long) 82);
        boolean boolean90 = dateTimeZone78.isFixed();
        org.joda.time.Chronology chronology91 = chronology57.withZone(dateTimeZone78);
        dateTimeParserBucket5.setZone(dateTimeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime59", (dateTime34.compareTo(dateTime59) == 0) == dateTime34.equals(dateTime59));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0737");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfYear();
        org.joda.time.DurationField durationField7 = chronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.dayOfWeek();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        java.lang.Integer int28 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone29);
        dateTimeParserBucket15.setZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket15.getZone();
        long long34 = dateTimeZone32.previousTransition((long) 593);
        long long36 = dateTimeZone32.previousTransition((long) 778);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.util.TimeZone timeZone38 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime39 = dateTime9.withZone(dateTimeZone32);
        long long41 = dateTimeZone32.previousTransition(41357492L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime39", (dateTime3.compareTo(dateTime39) == 0) == dateTime3.equals(dateTime39));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0738");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        org.joda.time.DurationField durationField17 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((int) (byte) 100);
        int[] intArray23 = localDateTime22.getValues();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusDays(4);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfWeek();
        java.lang.String str27 = property26.getAsText();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField33 = chronology30.millis();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfHalfday();
        int int37 = dateTimeField35.getLeapAmount(1586849174210L);
        java.lang.String str38 = dateTimeField35.toString();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = dateTimeField35.getAsShortText((long) 26776413, locale41);
        int int44 = property26.getMaximumShortTextLength(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((-9129599525L), chronology13, locale41, (java.lang.Integer) 26838);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime34", (dateTime2.compareTo(dateTime34) == 0) == dateTime2.equals(dateTime34));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0739");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusDays(111);
        int int21 = localDateTime14.getMillisOfDay();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        java.lang.Integer int31 = dateTimeParserBucket27.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket27.setZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime35.plusHours((int) (byte) 100);
        boolean boolean41 = dateTime39.isBefore((long) ' ');
        int int42 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime44 = dateTime39.minusYears(20);
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = property45.addToCopy(26751557);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(9);
        org.joda.time.DateTime dateTime50 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime51 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        int int52 = dateTime51.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0740");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withDurationAdded(readableDuration5, 538);
        org.joda.time.DateTime dateTime9 = dateTime3.minusHours(116);
        org.joda.time.DateTime dateTime11 = dateTime3.plusSeconds(939);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTime();
        int int17 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property18 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        java.util.Locale locale27 = dateTimeParserBucket25.getLocale();
        boolean boolean28 = property18.equals((java.lang.Object) locale27);
        org.joda.time.DateTime dateTime29 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int35 = localDateTime31.get(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int42 = localDateTime39.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime31.property(dateTimeFieldType41);
        org.joda.time.DateTime.Property property44 = dateTime29.property(dateTimeFieldType41);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.lang.Integer int54 = dateTimeParserBucket50.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket50.setZone(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime dateTime62 = dateTime58.plusHours((int) (byte) 100);
        boolean boolean64 = dateTime62.isBefore((long) ' ');
        int int65 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.minusYears(20);
        org.joda.time.DateTime.Property property68 = dateTime62.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusHours((int) (byte) 0);
        boolean boolean74 = dateTime72.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusWeeks((int) 'a');
        boolean boolean79 = dateTime72.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime80 = dateTime78.toDateTime();
        org.joda.time.Chronology chronology81 = dateTime80.getChronology();
        java.lang.String str82 = chronology81.toString();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.hourOfDay();
        org.joda.time.DateTime dateTime84 = dateTime62.toDateTime(chronology81);
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime29.toMutableDateTime(chronology81);
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime11.toMutableDateTime(chronology81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0741");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        java.lang.String str24 = dateTimeField22.getAsShortText(10L);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = dateTimeField22.getAsText(0L, locale26);
        java.lang.String str28 = dateTimeField16.getAsText(0, locale26);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        int int30 = dateTimeField16.getMaximumShortTextLength(locale29);
        java.lang.String str32 = locale29.getExtension('u');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((-62118328893994L), chronology3, locale29, (java.lang.Integer) 589);
        java.lang.String str35 = locale29.getLanguage();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = property41.getAsText(locale42);
        java.lang.String str45 = locale36.getDisplayName(locale42);
        java.lang.String str46 = locale42.getISO3Language();
        boolean boolean47 = locale42.hasExtensions();
        java.lang.String str48 = locale42.getDisplayName();
        java.lang.String str49 = locale29.getDisplayLanguage(locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0742");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        long long15 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(10);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear((int) (short) 100);
        int int46 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int47 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        long long50 = dateTimeField36.set(1L, 837);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = dateTimeField36.getAsText((long) 7, locale52);
        org.joda.time.DateTime dateTime54 = property29.setCopy("999", locale52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours((int) (byte) 0);
        boolean boolean60 = dateTime58.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime58.toMutableDateTime(dateTimeZone61);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = dateTimeZone61.getName((long) (byte) 1, locale65);
        java.lang.String str68 = locale65.getUnicodeLocaleType("52");
        java.lang.String str69 = locale52.getDisplayVariant(locale65);
        dateTimeParserBucket5.saveField(dateTimeFieldType18, "117", locale65);
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology72, locale73, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        int int78 = dateTimeParserBucket76.getOffset();
        org.joda.time.Chronology chronology79 = dateTimeParserBucket76.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.eras();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.centuryOfEra();
        boolean boolean82 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology79);
        org.joda.time.DurationField durationField83 = chronology79.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField80, durationField83, and durationField80", !(durationField80.compareTo(durationField83) == 0) || (Math.signum(durationField80.compareTo(durationField80)) == Math.signum(durationField83.compareTo(durationField80))));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0743");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        int int17 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMonthOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone21.getOffset(readableInstant23);
        org.joda.time.DateTime dateTime25 = dateTime6.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime6.plusDays(430);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime25", (dateTime5.compareTo(dateTime25) == 0) == dateTime5.equals(dateTime25));
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0744");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((long) 354, 575);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime11.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime40.withMillisOfDay(0);
        int int45 = dateTime44.getDayOfYear();
        org.joda.time.DateTime dateTime47 = dateTime44.withYear(139);
        org.joda.time.DateTime dateTime49 = dateTime44.minusSeconds(26752);
        int int50 = dateTime44.getDayOfMonth();
        boolean boolean51 = mutableDateTime38.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime53 = dateTime44.plus(324777600000L);
        org.joda.time.DateTime dateTime54 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime62.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean66 = dateTime65.isEqualNow();
        org.joda.time.LocalDateTime localDateTime67 = dateTime65.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.minus(readablePeriod68);
        org.joda.time.DateTime dateTime71 = dateTime65.plusMonths(99);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime65.minus(readablePeriod72);
        org.joda.time.DateTime dateTime74 = dateTime65.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime76 = dateTime65.plusYears(214);
        boolean boolean77 = dateTime54.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime58", (dateTime1.compareTo(dateTime58) == 0) == dateTime1.equals(dateTime58));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0745");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        java.util.Date date9 = dateTime6.toDate();
        int int10 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Date date11 = dateTime1.toDate();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        java.lang.Integer int21 = dateTimeParserBucket17.getOffsetInteger();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        int int27 = dateTime25.getDayOfYear();
        boolean boolean28 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DurationField durationField35 = chronology31.seconds();
        org.joda.time.DurationField durationField36 = chronology31.minutes();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours((int) (byte) 0);
        boolean boolean43 = dateTime41.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime41.toMutableDateTime(dateTimeZone44);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = dateTimeZone44.getName((long) (byte) 1, locale48);
        org.joda.time.Chronology chronology50 = chronology31.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField51.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField51.getType();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology56.getZone();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYearOfEra(590);
        int int67 = localDateTime64.getDayOfWeek();
        int[] intArray69 = chronology56.get((org.joda.time.ReadablePartial) localDateTime64, (long) 25);
        org.joda.time.DurationField durationField70 = chronology56.weeks();
        org.joda.time.DateTimeField dateTimeField71 = chronology56.yearOfCentury();
        boolean boolean72 = dateTimeFieldType53.isSupported(chronology56);
        org.joda.time.DateTime.Property property73 = dateTime25.property(dateTimeFieldType53);
        org.joda.time.DateTime dateTime74 = property73.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0746");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 122);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTime dateTime25 = dateTime13.minusDays(676);
        int int26 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime27 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        long long28 = dateTime13.getMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = dateTime30.isBefore(readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime30.minusMillis(57);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        dateTimeParserBucket43.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        java.lang.String str55 = dateTimeField53.getAsShortText((long) 28);
        dateTimeParserBucket43.saveField(dateTimeField53, 100);
        dateTimeParserBucket43.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket43.saveField(dateTimeFieldType60, 950);
        org.joda.time.DateTime.Property property63 = dateTime30.property(dateTimeFieldType60);
        int int64 = dateTime13.get(dateTimeFieldType60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime30", (dateTime21.compareTo(dateTime30) == 0) == dateTime21.equals(dateTime30));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0747");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.hours();
        org.joda.time.DurationField durationField8 = chronology3.weeks();
        org.joda.time.DurationField durationField9 = chronology3.seconds();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        java.util.Locale locale20 = dateTimeParserBucket16.getLocale();
        java.util.Locale.setDefault(category10, locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = property27.getAsText(locale28);
        java.lang.String str31 = locale22.getDisplayName(locale28);
        java.lang.String str32 = locale28.getISO3Language();
        java.util.Locale.setDefault(category10, locale28);
        java.util.Set<java.lang.Character> charSet34 = locale28.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property40 = dateTime37.centuryOfEra();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = property40.getAsText(locale41);
        java.lang.String str44 = locale35.getDisplayName(locale41);
        java.lang.String str45 = locale35.getDisplayVariant();
        java.lang.String str46 = locale28.getDisplayName(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 26795614, chronology3, locale35, (java.lang.Integer) 0, 26792557);
        org.joda.time.DateTimeField dateTimeField50 = chronology3.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime24", (dateTime4.compareTo(dateTime24) == 0) == dateTime4.equals(dateTime24));
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0748");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(538);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DurationField durationField14 = chronology11.hours();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField21 = chronology17.seconds();
        org.joda.time.DurationField durationField22 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.era();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, locale30);
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology11, locale30);
        org.joda.time.DurationField durationField34 = durationFieldType7.getField(chronology11);
        org.joda.time.DateTime dateTime36 = dateTime1.withFieldAdded(durationFieldType7, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology39.add(readablePeriod45, 303285L, 58);
        org.joda.time.DurationField durationField49 = chronology39.centuries();
        org.joda.time.DateTimeField dateTimeField50 = chronology39.yearOfEra();
        org.joda.time.DurationField durationField51 = durationFieldType7.getField(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime12", (dateTime1.compareTo(dateTime12) == 0) == dateTime1.equals(dateTime12));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0749");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusDays(526);
        org.joda.time.DateTime dateTime9 = dateTime3.minusYears(26769930);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readableDuration14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property16.getFieldType();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-1));
        org.joda.time.DateTime dateTime42 = dateTime38.plusHours((int) (byte) 100);
        boolean boolean44 = dateTime42.isBefore((long) ' ');
        int int45 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime42);
        dateTimeParserBucket24.setZone(dateTimeZone35);
        long long49 = dateTimeZone35.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((-1));
        org.joda.time.DateTime dateTime56 = dateTime52.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.plus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime62 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime62.toMutableDateTime();
        org.joda.time.Chronology chronology64 = mutableDateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime50, chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DurationField durationField67 = chronology64.weeks();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType18.getField(chronology64);
        int int70 = dateTime3.get(dateTimeFieldType18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime38", (dateTime3.compareTo(dateTime38) == 0) == dateTime3.equals(dateTime38));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0750");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DurationField durationField34 = chronology30.seconds();
        org.joda.time.DurationField durationField35 = chronology30.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        boolean boolean42 = dateTime40.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime40.toMutableDateTime(dateTimeZone43);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = dateTimeZone43.getName((long) (byte) 1, locale47);
        org.joda.time.Chronology chronology49 = chronology30.withZone(dateTimeZone43);
        dateTimeParserBucket25.setZone(dateTimeZone43);
        long long53 = dateTimeZone43.adjustOffset(151L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0751");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear(702);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime35 = dateTime30.withZoneRetainFields(dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime30.minus(readableDuration36);
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTimeISO();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField55 = null;
        dateTimeParserBucket54.saveField(dateTimeField55, (int) (short) 0);
        java.lang.Integer int58 = dateTimeParserBucket54.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket54.setZone(dateTimeZone59);
        dateTimeParserBucket45.setZone(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket45.getZone();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.DurationField durationField70 = chronology67.eras();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTime dateTime72 = localDateTime63.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = dateTime71.withYear(65);
        org.joda.time.DateTime dateTime76 = dateTime74.minus((long) 496);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = dateTime76.toString(dateTimeFormatter77);
        boolean boolean79 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime68", (dateTime1.compareTo(dateTime68) == 0) == dateTime1.equals(dateTime68));
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0752");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology3.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 26751806, chronology3);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(537);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readablePeriod27);
        int int29 = dateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.plus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusDays(526);
        boolean boolean38 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime33", (dateTime11.compareTo(dateTime33) == 0) == dateTime11.equals(dateTime33));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0753");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime28 = property25.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear((int) (short) 10);
        int int31 = localDateTime28.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.yearOfCentury();
        int int40 = localDateTime37.getDayOfWeek();
        int int41 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.parse("858");
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfEra(26913410);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.era();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Set<java.lang.Character> charSet49 = locale47.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.millisOfSecond();
        org.joda.time.DurationField durationField62 = chronology58.seconds();
        org.joda.time.DurationField durationField63 = chronology58.minutes();
        org.joda.time.DateTimeField dateTimeField64 = chronology58.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology58.monthOfYear();
        int int66 = dateTime55.get(dateTimeField65);
        long long69 = dateTimeField65.addWrapField((long) 80, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusHours((int) (byte) 0);
        boolean boolean83 = dateTime81.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone85 = dateTimeZone84.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime81.toMutableDateTime(dateTimeZone84);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = dateTimeZone84.getName((long) (byte) 1, locale88);
        java.lang.String str90 = locale88.getScript();
        java.lang.String str91 = property74.getAsShortText(locale88);
        java.lang.String str92 = locale88.getDisplayScript();
        int int93 = dateTimeField65.getMaximumTextLength(locale88);
        java.lang.String str94 = locale88.getCountry();
        java.lang.String str95 = locale47.getDisplayName(locale88);
        java.lang.String str96 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime51", (dateTime3.compareTo(dateTime51) == 0) == dateTime3.equals(dateTime51));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0754");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        java.lang.String str7 = dateTimeField6.getName();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = dateTime26.minusYears(20);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime33 = property32.roundHalfEvenCopy();
        java.lang.String str34 = property32.toString();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale50.getDisplayName();
        dateTimeParserBucket41.saveField(dateTimeFieldType48, "97", locale50);
        java.lang.String str53 = locale35.getDisplayCountry(locale50);
        int int54 = property32.getMaximumShortTextLength(locale35);
        java.lang.String str55 = locale35.toLanguageTag();
        java.lang.String str56 = dateTimeField6.getAsText(26834949, locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime22", (dateTime3.compareTo(dateTime22) == 0) == dateTime3.equals(dateTime22));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0755");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 603, chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DurationField durationField18 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfDay();
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfWeek();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        dateTimeParserBucket36.saveField(dateTimeFieldType40, "it", locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology26, locale42, (java.lang.Integer) 9, 538);
        java.lang.String str49 = nameProvider21.getShortName(locale42, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale50.getVariant();
        java.lang.String str54 = nameProvider21.getName(locale50, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Set<java.lang.String> strSet55 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale56 = locale50.stripExtensions();
        java.lang.String str57 = dateTimeField19.getAsText(61, locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime27", (dateTime2.compareTo(dateTime27) == 0) == dateTime2.equals(dateTime27));
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0756");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField13 = durationFieldType1.getField(chronology5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeField19.getAsShortText((long) (byte) -1, locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.toLanguageTag();
        java.lang.String str25 = locale21.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology5, locale21, (java.lang.Integer) 992, 405);
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.clear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours((int) (byte) 0);
        java.util.Date date47 = dateTime44.toDate();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfMonth();
        org.joda.time.DateTime.Property property49 = dateTime44.dayOfMonth();
        java.lang.String str50 = property49.getAsString();
        boolean boolean51 = localDateTime42.equals((java.lang.Object) property49);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfSecond();
        org.joda.time.DurationField durationField60 = chronology56.seconds();
        org.joda.time.DurationField durationField61 = chronology56.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology56.era();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.weekOfWeekyear();
        org.joda.time.DurationField durationField64 = chronology56.minutes();
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology66, locale67, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField71 = null;
        dateTimeParserBucket70.saveField(dateTimeField71, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        dateTimeParserBucket70.saveField(dateTimeFieldType74, "it", locale76);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(673L, chronology56, locale76, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology81 = dateTimeParserBucket80.getChronology();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology81, locale82, (java.lang.Integer) 597);
        java.lang.String str85 = property49.getAsText(locale82);
        java.util.Locale.Builder builder86 = builder33.setLocale(locale82);
        java.lang.String str87 = locale82.getVariant();
        java.lang.String str88 = locale29.getDisplayCountry(locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime44", (dateTime17.compareTo(dateTime44) == 0) == dateTime17.equals(dateTime44));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0757");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusSeconds(41153);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMonths(0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime19.withMillisOfSecond((int) '4');
        org.joda.time.DateTime dateTime24 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        int int25 = localDateTime9.getEra();
        java.lang.String str26 = localDateTime9.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        java.util.Date date32 = dateTime29.toDate();
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfMonth();
        java.lang.String str34 = property33.getAsString();
        int int35 = property33.getMaximumValue();
        int int36 = property33.getMinimumValueOverall();
        org.joda.time.DateTime dateTime38 = property33.addToCopy(139);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        dateTimeParserBucket45.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.secondOfMinute();
        java.lang.String str57 = dateTimeField55.getAsShortText((long) 28);
        dateTimeParserBucket45.saveField(dateTimeField55, 100);
        dateTimeParserBucket45.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket45.getZone();
        boolean boolean63 = dateTimeZone39.equals((java.lang.Object) dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 563, dateTimeZone39);
        org.joda.time.DateTime dateTime65 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime29", (dateTime13.compareTo(dateTime29) == 0) == dateTime13.equals(dateTime29));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0758");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(980);
        java.lang.String str20 = localDateTime18.toString("-1");
        int int21 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusWeeks((-593));
        int int32 = localDateTime30.getValue(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear(43);
        boolean boolean37 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime34.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusYears(4);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(840);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours((int) (byte) 0);
        boolean boolean53 = dateTime51.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        boolean boolean58 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime();
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.minuteOfHour();
        org.joda.time.DurationField durationField65 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.dayOfMonth();
        boolean boolean68 = localDateTime47.equals((java.lang.Object) chronology60);
        boolean boolean69 = localDateTime41.equals((java.lang.Object) chronology60);
        int int70 = localDateTime41.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime49", (dateTime3.compareTo(dateTime49) == 0) == dateTime3.equals(dateTime49));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0759");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime15.getZone();
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getOffset((long) 'x');
        boolean boolean23 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket5.getZone();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology27.millis();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.weekyearOfCentury();
        dateTimeParserBucket5.saveField(dateTimeField34, 327);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        boolean boolean42 = dateTime40.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        boolean boolean47 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = property63.getAsText(locale64);
        java.lang.String str67 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime57, (-1), locale64);
        java.util.Calendar calendar68 = dateTime48.toCalendar(locale64);
        int int69 = dateTime48.getSecondOfDay();
        org.joda.time.DateTime.Property property70 = dateTime48.yearOfEra();
        boolean boolean71 = dateTime48.isAfterNow();
        org.joda.time.DateTime.Property property72 = dateTime48.secondOfDay();
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology74, locale75, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField79 = null;
        dateTimeParserBucket78.saveField(dateTimeField79, (int) (short) 0);
        java.lang.Integer int82 = dateTimeParserBucket78.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket78.setZone(dateTimeZone83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale87 = java.util.Locale.GERMANY;
        java.lang.String str88 = locale87.getDisplayName();
        dateTimeParserBucket78.saveField(dateTimeFieldType85, "97", locale87);
        int int90 = dateTimeParserBucket78.getOffset();
        org.joda.time.DateTimeZone dateTimeZone91 = dateTimeParserBucket78.getZone();
        org.joda.time.DateTime dateTime92 = dateTime48.toDateTime(dateTimeZone91);
        dateTimeParserBucket5.setZone(dateTimeZone91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime38", (dateTime11.compareTo(dateTime38) == 0) == dateTime11.equals(dateTime38));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0760");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.withChronology(chronology5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        boolean boolean30 = dateTimeZone26.isFixed();
        long long32 = dateTimeZone26.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime6.plus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = dateTime6.plusSeconds(2195);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime6", (dateTime1.compareTo(dateTime6) == 0) == dateTime1.equals(dateTime6));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0761");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        int int15 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear((-1));
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(10);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int29 = localDateTime27.get(dateTimeFieldType28);
        int int30 = dateTime22.get(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = dateTime22.withZoneRetainFields(dateTimeZone31);
        boolean boolean33 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime13.plusDays(305);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime46.getZone();
        long long48 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime46.minuteOfHour();
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category50, locale51);
        java.util.Locale locale53 = java.util.Locale.getDefault(category50);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str59 = locale56.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology55, locale56, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.millisOfSecond();
        org.joda.time.DurationField durationField69 = chronology65.seconds();
        org.joda.time.DurationField durationField70 = chronology65.minutes();
        org.joda.time.DateTimeField dateTimeField71 = chronology65.era();
        org.joda.time.DateTimeField dateTimeField72 = chronology65.weekOfWeekyear();
        org.joda.time.DurationField durationField73 = chronology65.minutes();
        org.joda.time.Chronology chronology75 = null;
        java.util.Locale locale76 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology75, locale76, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField80 = null;
        dateTimeParserBucket79.saveField(dateTimeField80, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale85 = java.util.Locale.ROOT;
        dateTimeParserBucket79.saveField(dateTimeFieldType83, "it", locale85);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(673L, chronology65, locale85, (java.lang.Integer) 10, 453);
        java.lang.String str90 = locale56.getDisplayVariant(locale85);
        java.lang.String str91 = locale85.toLanguageTag();
        java.util.Locale.setDefault(category50, locale85);
        int int93 = property49.getMaximumShortTextLength(locale85);
        java.lang.String str94 = dateTime35.toString("52", locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime40", (dateTime1.compareTo(dateTime40) == 0) == dateTime1.equals(dateTime40));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0762");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology5, locale21, (java.lang.Integer) 9, 538);
        java.lang.String str28 = nameProvider0.getShortName(locale21, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("26768");
        java.lang.String str34 = nameProvider0.getName(locale31, "2022-02-26T11:29:06.007+00:00:00.052", "0010-02-22T07:28:07.175");
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getLanguage();
        java.util.Set<java.lang.Character> charSet37 = locale35.getExtensionKeys();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        java.lang.String str44 = dateTimeField42.getAsShortText((long) 28);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property59 = dateTime56.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = property59.getAsText(locale60);
        java.lang.String str63 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) localDateTime53, (-1), locale60);
        int int64 = dateTimeField42.getMaximumTextLength(locale60);
        java.lang.String str65 = locale60.getDisplayCountry();
        java.lang.String str66 = locale35.getDisplayLanguage(locale60);
        java.lang.String str68 = locale35.getExtension('x');
        java.lang.String str69 = locale35.getISO3Country();
        java.lang.String str72 = nameProvider0.getShortName(locale35, "1969-12-30T09:00:00.000", "-0001-02-21T03:27:09.527+00:00:00.052");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime56", (dateTime6.compareTo(dateTime56) == 0) == dateTime6.equals(dateTime56));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0763");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.dayOfMonth();
        org.joda.time.DateTime.Property property13 = dateTime8.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = property13.getAsText(locale14);
        java.lang.String str17 = property6.getAsShortText(locale14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property23 = dateTime20.centuryOfEra();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = property23.getAsText(locale24);
        java.lang.String str27 = locale18.getDisplayName(locale24);
        java.lang.String str28 = locale14.getDisplayScript(locale18);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = property35.getAsText(locale36);
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale18.getDisplayVariant(locale36);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        int int47 = dateTimeParserBucket46.getOffset();
        long long48 = dateTimeParserBucket46.computeMillis();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime58.getZone();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        dateTimeParserBucket46.setZone(dateTimeZone59);
        java.util.Locale locale62 = dateTimeParserBucket46.getLocale();
        java.lang.String str63 = locale18.getDisplayVariant(locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime52", (dateTime20.compareTo(dateTime52) == 0) == dateTime20.equals(dateTime52));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0764");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        int int6 = dateTimeField4.getLeapAmount(1L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 139, chronology10);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        java.lang.String str32 = dateTimeField30.getAsShortText((long) 28);
        dateTimeParserBucket20.saveField(dateTimeField30, 100);
        dateTimeParserBucket20.setOffset(19);
        java.lang.Object obj37 = dateTimeParserBucket20.saveState();
        java.util.Locale locale41 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale41);
        java.util.Set<java.lang.Character> charSet43 = locale41.getExtensionKeys();
        boolean boolean44 = dateTimeParserBucket20.restoreState((java.lang.Object) locale41);
        java.lang.String str45 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 855, locale41);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime13.withPeriodAdded(readablePeriod46, 932);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime13.minusWeeks(25);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.minusWeeks((-593));
        int int63 = localDateTime61.getValue(1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusMinutes(52);
        org.joda.time.LocalDateTime.Property property66 = localDateTime61.millisOfDay();
        int int67 = property66.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear((-1));
        org.joda.time.DateTime.Property property72 = dateTime69.yearOfCentury();
        org.joda.time.DateTime dateTime74 = dateTime69.minusMinutes(26751806);
        org.joda.time.DateTime dateTime76 = dateTime69.withSecondOfMinute(57);
        org.joda.time.DateTime dateTime78 = dateTime69.minusWeeks(985);
        org.joda.time.DateTime dateTime79 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime81 = dateTime79.plusYears(731);
        int int82 = property66.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime69", (dateTime3.compareTo(dateTime69) == 0) == dateTime3.equals(dateTime69));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0765");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        int int15 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        int int17 = dateTime13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(538);
        org.joda.time.DateTime dateTime27 = dateTime23.withWeekyear(274);
        int int28 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.weekyears();
        org.joda.time.DateTime dateTime34 = dateTime23.withChronology(chronology31);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime32", (dateTime1.compareTo(dateTime32) == 0) == dateTime1.equals(dateTime32));
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0766");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime24.year();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusYears(558);
        boolean boolean35 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra();
        int int42 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime40);
        int int44 = dateTimeZone22.getOffsetFromLocal(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime40", (dateTime24.compareTo(dateTime40) == 0) == dateTime24.equals(dateTime40));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0767");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("70");
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        java.lang.String str13 = property12.getAsText();
        int int14 = property12.getMinimumValueOverall();
        org.joda.time.DateTime dateTime15 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        java.util.Date date22 = dateTime19.toDate();
        org.joda.time.DateTime.Property property23 = dateTime19.dayOfMonth();
        java.lang.String str24 = property23.getAsString();
        int int25 = property23.getMaximumValue();
        int int26 = property23.getMinimumValueOverall();
        org.joda.time.DateTime dateTime27 = property23.roundHalfCeilingCopy();
        int int28 = dateTime27.getMinuteOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.minusMinutes(563);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear(92);
        org.joda.time.LocalDateTime localDateTime33 = dateTime30.toLocalDateTime();
        org.joda.time.Chronology chronology34 = dateTime30.getChronology();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 683, chronology34, locale35, (java.lang.Integer) 744);
        org.joda.time.DateTime dateTime42 = property12.setCopy("445", locale35);
        java.util.Locale.setDefault(category8, locale35);
        java.lang.String str44 = locale35.getDisplayLanguage();
        int int45 = dateTimeField7.getMaximumShortTextLength(locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime19", (dateTime3.compareTo(dateTime19) == 0) == dateTime3.equals(dateTime19));
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0768");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        int int7 = dateTime4.getWeekyear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekOfWeekyear();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.util.Locale locale23 = dateTimeParserBucket19.getLocale();
        java.util.Locale.setDefault(category13, locale23);
        java.util.Locale locale26 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category13, locale26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("87");
        java.lang.String str37 = dateTimeField33.getAsText((long) 383, locale36);
        java.lang.String str38 = locale36.toLanguageTag();
        java.lang.String str39 = locale36.getDisplayLanguage();
        java.util.Locale.setDefault(category13, locale36);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = dateTimeField46.getAsShortText((long) (byte) -1, locale48);
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str51 = locale50.getScript();
        java.util.Locale.setDefault(category13, locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(28884L, chronology8, locale50, (java.lang.Integer) 253);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.halfdayOfDay();
        org.joda.time.DurationField durationField61 = chronology57.millis();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology57.getZone();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.dayOfWeek();
        org.joda.time.DurationField durationField65 = chronology57.months();
        org.joda.time.DateTimeField dateTimeField66 = chronology57.year();
        org.joda.time.DateTimeField dateTimeField67 = chronology57.hourOfDay();
        java.lang.String str69 = dateTimeField67.getAsShortText(26820682L);
        dateTimeParserBucket54.saveField(dateTimeField67, 26783);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime31", (dateTime2.compareTo(dateTime31) == 0) == dateTime2.equals(dateTime31));
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0769");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("97");
        org.joda.time.DateTime dateTime3 = dateTime1.minusYears(0);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        java.lang.String str11 = dateTimeField9.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        int int17 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.Chronology chronology21 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DurationField durationField23 = dateTimeField22.getRangeDurationField();
        int int24 = dateTime3.get(dateTimeField22);
        org.joda.time.DateTime dateTime27 = dateTime3.withDurationAdded(28857600000L, 280);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        java.util.Date date32 = dateTime29.toDate();
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfMonth();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = property33.getAsShortText(locale34);
        org.joda.time.DateTime dateTime36 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.plusWeeks(1975);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology48.getZone();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfEra(590);
        int int59 = localDateTime56.getDayOfWeek();
        int[] intArray61 = chronology48.get((org.joda.time.ReadablePartial) localDateTime56, (long) 25);
        org.joda.time.DateTimeField dateTimeField62 = chronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType44.getField(chronology48);
        int int64 = dateTime36.get(dateTimeFieldType44);
        java.lang.String str65 = dateTimeFieldType44.getName();
        int int66 = dateTime3.get(dateTimeFieldType44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0770");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.withPeriodAdded(readablePeriod3, 282);
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DurationField durationField16 = chronology9.weeks();
        org.joda.time.DateTime dateTime17 = dateTime2.toDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        int int38 = dateTimeParserBucket37.getOffset();
        java.lang.Integer int39 = dateTimeParserBucket37.getPivotYear();
        java.util.Locale locale40 = dateTimeParserBucket37.getLocale();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale42.getDisplayLanguage(locale43);
        java.lang.String str46 = locale40.getDisplayName(locale43);
        java.lang.String str47 = localDateTime28.toString("17", locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 27048931, chronology9, locale43, (java.lang.Integer) 513, 26836);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime10", (dateTime2.compareTo(dateTime10) == 0) == dateTime2.equals(dateTime10));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0771");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        java.lang.Integer int20 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket16.setZone(dateTimeZone21);
        dateTimeParserBucket7.setZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket7.getZone();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone24);
        boolean boolean26 = dateTimeZone24.isFixed();
        long long29 = dateTimeZone24.adjustOffset(2846437113600010L, false);
        java.lang.String str31 = dateTimeZone24.getShortName(783L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((-1514764799755L), dateTimeZone24);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        java.lang.Integer int51 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket47.setZone(dateTimeZone52);
        dateTimeParserBucket38.setZone(dateTimeZone52);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        long long57 = dateTimeZone52.convertUTCToLocal((long) 441);
        long long59 = dateTimeZone24.getMillisKeepLocal(dateTimeZone52, 635L);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        java.lang.String str63 = dateTimeZone61.getID();
        long long67 = dateTimeZone61.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean69 = dateTimeZone61.isStandardOffset((long) 86399);
        long long71 = dateTimeZone52.getMillisKeepLocal(dateTimeZone61, (-1510245229552L));
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.weekyearOfCentury();
        int int79 = dateTimeField77.getLeapAmount(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = dateTimeField77.getType();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime85 = property83.addWrapFieldToCopy(241);
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.util.Locale locale88 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str89 = locale87.getDisplayName(locale88);
        java.util.Locale locale90 = locale87.stripExtensions();
        java.lang.String str91 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime85, (int) (short) 100, locale90);
        java.lang.String str92 = locale90.toLanguageTag();
        java.lang.String str93 = dateTimeZone61.getName(292L, locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime62 and dateTime76", (dateTime62.compareTo(dateTime76) == 0) == dateTime62.equals(dateTime76));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0772");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        int int9 = localDateTime1.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withYear(635);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology14.millis();
        org.joda.time.DurationFieldType durationFieldType19 = durationField18.getType();
        boolean boolean20 = localDateTime1.isSupported(durationFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime1.withYear(26751);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (byte) 100);
        boolean boolean32 = dateTime30.isBefore((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.plus(readablePeriod33);
        org.joda.time.DateTime dateTime36 = dateTime30.plusYears(26751557);
        int int37 = dateTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMillis(26771354);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField58 = null;
        dateTimeParserBucket57.saveField(dateTimeField58, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        dateTimeParserBucket57.saveField(dateTimeFieldType61, "it", locale63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime51.property(dateTimeFieldType61);
        int int66 = dateTime42.get(dateTimeFieldType61);
        java.lang.String str67 = dateTimeFieldType61.toString();
        int int68 = localDateTime22.get(dateTimeFieldType61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime26", (dateTime15.compareTo(dateTime26) == 0) == dateTime15.equals(dateTime26));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0773");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 22);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (byte) 100);
        boolean boolean42 = dateTime40.isBefore((long) ' ');
        int int43 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime40);
        dateTimeParserBucket22.setZone(dateTimeZone33);
        long long47 = dateTimeZone33.convertLocalToUTC((long) 59, false);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-6216719500799352L), dateTimeZone33);
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds(575);
        int int51 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime36", (dateTime3.compareTo(dateTime36) == 0) == dateTime3.equals(dateTime36));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0774");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readablePeriod7);
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime6.withMillis(52L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(992);
        org.joda.time.DateTime dateTime14 = dateTime11.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond(0);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime16.toMutableDateTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime20", (dateTime1.compareTo(dateTime20) == 0) == dateTime1.equals(dateTime20));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0775");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        int int17 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMonthOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone21.getOffset(readableInstant23);
        org.joda.time.DateTime dateTime25 = dateTime6.toDateTime(dateTimeZone21);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusYears(4);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks(11);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime46 = dateTime44.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMonths(0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfDay();
        java.lang.String str54 = property53.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property53.getFieldType();
        boolean boolean56 = localDateTime36.isSupported(dateTimeFieldType55);
        java.lang.String str57 = dateTimeFieldType55.getName();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType55.getRangeDurationType();
        org.joda.time.DateTime dateTime60 = dateTime28.withFieldAdded(durationFieldType58, 889);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime28", (dateTime5.compareTo(dateTime28) == 0) == dateTime5.equals(dateTime28));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0776");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withDurationAdded(readableDuration5, 538);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        boolean boolean11 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime9);
        java.util.Date date12 = dateTime7.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime9", (dateTime7.compareTo(dateTime9) == 0) == dateTime7.equals(dateTime9));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0777");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(837);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(569);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(496);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        dateTimeParserBucket21.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket21.getZone();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone38);
        boolean boolean40 = dateTimeZone38.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        int int43 = dateTimeZone38.getOffsetFromLocal((long) (short) -1);
        int int45 = dateTimeZone38.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime14.withZoneRetainFields(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField54 = chronology50.hours();
        org.joda.time.DurationField durationField55 = chronology50.weeks();
        org.joda.time.DurationField durationField56 = chronology50.years();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 26781995, chronology50, locale57);
        java.lang.Integer int59 = dateTimeParserBucket58.getOffsetInteger();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        int int66 = dateTimeParserBucket65.getOffset();
        long long67 = dateTimeParserBucket65.computeMillis();
        dateTimeParserBucket65.setOffset(26757772);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology72);
        org.joda.time.DateTime dateTime75 = dateTime73.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int77 = dateTime75.get(dateTimeFieldType76);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int82 = localDateTime79.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology85 = localDateTime84.getChronology();
        org.joda.time.LocalDateTime.Property property86 = localDateTime84.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime87 = property86.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.era();
        boolean boolean89 = localDateTime87.isSupported(dateTimeFieldType88);
        boolean boolean90 = localDateTime79.isSupported(dateTimeFieldType88);
        int int91 = dateTime75.get(dateTimeFieldType88);
        dateTimeParserBucket65.saveField(dateTimeFieldType88, 44);
        dateTimeParserBucket58.saveField(dateTimeFieldType88, 26812);
        dateTimeParserBucket58.setPivotYear((java.lang.Integer) 27042);
        boolean boolean98 = dateTime46.equals((java.lang.Object) 27042);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime51", (dateTime1.compareTo(dateTime51) == 0) == dateTime1.equals(dateTime51));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0778");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray26 = localDateTime25.getValues();
        int[] intArray28 = dateTimeField17.addWrapField((org.joda.time.ReadablePartial) localDateTime22, 0, intArray26, (int) (short) 10);
        int int29 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11, intArray26);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        int int36 = property35.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime38 = property35.addToCopy(608);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfWeek();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekyear((-1));
        org.joda.time.DateTime dateTime57 = dateTime53.plusHours((int) (byte) 100);
        boolean boolean59 = dateTime57.isBefore((long) ' ');
        int int60 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime62 = dateTime57.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int67 = localDateTime64.get(dateTimeFieldType66);
        int int68 = dateTime62.get(dateTimeFieldType66);
        int int69 = localDateTime38.get(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime38.withYearOfEra(151);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime38.minusDays(395);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.secondOfMinute();
        boolean boolean75 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0779");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeZone17.getName((long) (byte) 1, locale21);
        org.joda.time.Chronology chronology23 = chronology4.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology4.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 26751806, chronology4);
        org.joda.time.DateTimeField dateTimeField26 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime30.toString(dateTimeFormatter33);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("20");
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        java.lang.String str41 = dateTime30.toString("1969", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology4, locale36, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField44 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology4.dayOfMonth();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        java.lang.String str53 = dateTimeField51.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfEvenCopy();
        int int59 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = localDateTime58.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.Chronology chronology63 = chronology62.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.halfdayOfDay();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale65.toLanguageTag();
        int int68 = dateTimeField64.getMaximumTextLength(locale65);
        long long71 = dateTimeField64.add(920L, 187);
        boolean boolean72 = dateTime46.equals((java.lang.Object) dateTimeField64);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField64.getType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime46", (dateTime12.compareTo(dateTime46) == 0) == dateTime12.equals(dateTime46));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0780");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        long long29 = dateTimeParserBucket25.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket25.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getLeapDurationField();
        boolean boolean37 = dateTimeParserBucket25.restoreState((java.lang.Object) durationField36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0781");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.year();
        org.joda.time.DurationField durationField6 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.hourOfDay();
        org.joda.time.DurationField durationField8 = dateTimeField7.getLeapDurationField();
        java.util.Locale locale11 = new java.util.Locale("property[minuteofday]", "45");
        int int12 = dateTimeField7.getMaximumTextLength(locale11);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        dateTimeParserBucket19.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        java.lang.String str31 = dateTimeField29.getAsShortText((long) 28);
        dateTimeParserBucket19.saveField(dateTimeField29, 100);
        dateTimeParserBucket19.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean43 = dateTime39.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property49 = dateTime46.centuryOfEra();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = property49.getAsText(locale50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        boolean boolean58 = dateTime56.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime56.toMutableDateTime(dateTimeZone59);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = dateTimeZone59.getName((long) (byte) 1, locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = property49.getAsShortText(locale63);
        dateTimeParserBucket19.saveField(dateTimeFieldType42, "2022-02-22T07:26:55.083+00:00:00.052", locale63);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("87");
        java.lang.String str70 = locale69.getDisplayLanguage();
        java.lang.String str71 = locale63.getDisplayScript(locale69);
        java.lang.String str72 = dateTimeField7.getAsText(1586849515733L, locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime37", (dateTime3.compareTo(dateTime37) == 0) == dateTime3.equals(dateTime37));
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0782");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis(465);
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone34);
        boolean boolean36 = dateTimeZone34.isFixed();
        long long39 = dateTimeZone34.adjustOffset(2846437113600010L, false);
        java.lang.String str41 = dateTimeZone34.getShortName(783L);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale43.getDisplayName();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = dateTimeZone34.getName((long) 51, locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime9, dateTimeZone34);
        int int51 = dateTimeZone34.getStandardOffset((long) 27022982);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant10", (dateTime9.compareTo(instant10) == 0) == dateTime9.equals(instant10));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0783");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        int int8 = dateTimeField6.getMaximumValue(0L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        org.joda.time.DurationField durationField19 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        boolean boolean26 = dateTime24.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime24.toMutableDateTime(dateTimeZone27);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = dateTimeZone27.getName((long) (byte) 1, locale31);
        org.joda.time.Chronology chronology33 = chronology14.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology14.getZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 26751806, chronology14);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths(537);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.util.Locale locale43 = new java.util.Locale("", "22");
        java.lang.String str44 = locale38.getDisplayCountry(locale43);
        java.util.Locale.setDefault(locale43);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale43.getDisplayCountry(locale46);
        java.util.Calendar calendar48 = dateTime35.toCalendar(locale46);
        java.lang.String str49 = locale46.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 175, chronology10, locale46, (java.lang.Integer) 74920);
        int int52 = dateTimeField6.getMaximumShortTextLength(locale46);
        java.lang.String str53 = locale46.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime22", (dateTime3.compareTo(dateTime22) == 0) == dateTime3.equals(dateTime22));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0784");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int18 = localDateTime14.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withCenturyOfEra((int) (byte) 0);
        int int21 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMillis(603);
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds(170);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, locale32);
        org.joda.time.Chronology chronology34 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime.Property property40 = dateTime37.yearOfCentury();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        int int49 = localDateTime48.getYearOfCentury();
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.minuteOfHour();
        java.util.Date date52 = localDateTime48.toDate();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.fromDateFields(date52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(363);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.Chronology chronology66 = chronology60.withZone(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        long long70 = chronology66.add(readablePeriod67, 0L, 603);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.millisOfSecond();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        java.util.Locale locale74 = java.util.Locale.ITALIAN;
        java.lang.String str75 = locale74.getLanguage();
        java.util.Set<java.lang.Character> charSet76 = locale74.getExtensionKeys();
        java.util.Locale.setDefault(category72, locale74);
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        java.lang.String str79 = locale78.getLanguage();
        java.util.Set<java.lang.Character> charSet80 = locale78.getExtensionKeys();
        java.util.Locale.setDefault(category72, locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(52914310L, chronology66, locale78);
        dateTimeParserBucket82.setOffset((java.lang.Integer) 106);
        java.util.Locale locale85 = dateTimeParserBucket82.getLocale();
        java.lang.String str86 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, 26809968, locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime37", (dateTime3.compareTo(dateTime37) == 0) == dateTime3.equals(dateTime37));
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0785");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(608);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfWeek();
        boolean boolean19 = dateTimeZone8.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = chronology3.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        int int27 = dateTimeParserBucket26.getOffset();
        java.lang.Integer int28 = dateTimeParserBucket26.getPivotYear();
        java.util.Locale locale29 = dateTimeParserBucket26.getLocale();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DurationField durationField36 = dateTimeField35.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYear(2022);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property67 = dateTime64.centuryOfEra();
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.lang.String str69 = locale68.getLanguage();
        java.lang.String str70 = property67.getAsText(locale68);
        java.lang.String str71 = dateTimeField57.getAsText((org.joda.time.ReadablePartial) localDateTime61, (-1), locale68);
        java.util.Locale.setDefault(locale68);
        java.lang.String str73 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime52, locale68);
        java.lang.String str74 = dateTimeField35.getAsShortText((long) 'a', locale68);
        java.lang.String str75 = locale29.getDisplayName(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((-1510244978410L), chronology20, locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime64", (dateTime4.compareTo(dateTime64) == 0) == dateTime4.equals(dateTime64));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0786");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        int int10 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int12 = dateTime5.get(dateTimeFieldType11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.year();
        org.joda.time.Chronology chronology26 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType11.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property43 = dateTime40.centuryOfEra();
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = property43.getAsText(locale44);
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime37, (-1), locale44);
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = dateTimeField33.getAsShortText((int) (byte) 10, locale49);
        long long53 = dateTimeField33.roundHalfFloor((long) 122);
        long long55 = dateTimeField33.roundHalfEven((long) 1);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        java.util.GregorianCalendar gregorianCalendar63 = dateTime62.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime62.withChronology(chronology66);
        boolean boolean68 = localDateTime60.equals((java.lang.Object) dateTime67);
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.lang.String str71 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime60, (int) '4', locale70);
        java.lang.String str72 = locale70.getDisplayName();
        int int73 = dateTimeField28.getMaximumShortTextLength(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime67", (dateTime1.compareTo(dateTime67) == 0) == dateTime1.equals(dateTime67));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0787");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy(608);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 26760199, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusYears(538);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DurationField durationField30 = chronology27.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology33.seconds();
        org.joda.time.DurationField durationField38 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.era();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readablePeriod44);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, locale46);
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology27, locale46);
        org.joda.time.DurationField durationField50 = durationFieldType23.getField(chronology27);
        org.joda.time.DateTime dateTime52 = dateTime17.withFieldAdded(durationFieldType23, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        java.util.Date date57 = dateTime54.toDate();
        org.joda.time.DateTime.Property property58 = dateTime54.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = property58.getAsShortText(locale59);
        org.joda.time.DateTime dateTime61 = property58.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property58.getFieldType();
        org.joda.time.DateTime dateTime63 = property58.roundCeilingCopy();
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DurationField durationField65 = durationFieldType23.getField(chronology64);
        boolean boolean66 = localDateTime14.isSupported(durationFieldType23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime28", (dateTime17.compareTo(dateTime28) == 0) == dateTime17.equals(dateTime28));
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0788");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology5, locale24);
        org.joda.time.DurationField durationField28 = durationFieldType1.getField(chronology5);
        long long31 = durationField28.getMillis(493L, (long) 117);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField38 = chronology35.hours();
        boolean boolean39 = durationField38.isSupported();
        int int40 = durationField28.compareTo(durationField38);
        long long42 = durationField28.getMillis((long) 384);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime33", (dateTime6.compareTo(dateTime33) == 0) == dateTime6.equals(dateTime33));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0789");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekyear((-1));
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths(10);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfDay();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes(648);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds(569);
        org.joda.time.DateTime dateTime35 = dateTime31.plusDays(575);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfDay();
        long long37 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime35.yearOfCentury();
        boolean boolean39 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime35);
        int int40 = dateTimeParserBucket5.getOffset();
        java.util.Locale locale41 = dateTimeParserBucket5.getLocale();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.Chronology chronology50 = chronology44.withZone(dateTimeZone48);
        org.joda.time.DurationField durationField51 = chronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.centuryOfEra();
        org.joda.time.DurationField durationField53 = dateTimeField52.getDurationField();
        dateTimeParserBucket5.saveField(dateTimeField52, (-3399));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime45", (dateTime23.compareTo(dateTime45) == 0) == dateTime23.equals(dateTime45));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0790");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType11, 16);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime5.getZone();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider18);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        java.lang.String str25 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.dayOfWeek();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        dateTimeParserBucket33.saveField(dateTimeFieldType37, "it", locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology23, locale39, (java.lang.Integer) 9, 538);
        java.lang.String str46 = nameProvider18.getShortName(locale39, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Set<java.lang.String> strSet47 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str48 = dateTimeZone15.getShortName(2783701900800008L, locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0791");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime3.withYear(832);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        int int16 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime20 = dateTime17.withFieldAdded(durationFieldType18, 734);
        boolean boolean21 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime23 = dateTime17.withMillisOfDay(272);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime25.withChronology(chronology29);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        boolean boolean54 = dateTimeZone50.isFixed();
        long long56 = dateTimeZone50.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime57 = dateTime30.withZone(dateTimeZone50);
        int int58 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime57.withCenturyOfEra(446);
        org.joda.time.DateTime dateTime62 = dateTime57.plus(26943254L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0792");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.minusSeconds(241);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = property42.getAsText(locale43);
        java.lang.String str46 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime36, (-1), locale43);
        java.util.Locale.setDefault(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology21, locale43, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DurationField durationField51 = chronology21.centuries();
        org.joda.time.DurationField durationField52 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField53 = chronology21.year();
        org.joda.time.DateTime dateTime54 = dateTime17.toDateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime17.toDateTime(dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime56 and dateTime54", (dateTime56.compareTo(dateTime54) == 0) == dateTime56.equals(dateTime54));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0793");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        boolean boolean12 = dateTime8.isAfter((long) 950);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket25.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.toString();
        long long47 = dateTimeZone19.getMillisKeepLocal(dateTimeZone42, (long) 23);
        org.joda.time.DateTime dateTime48 = dateTime8.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime50 = dateTime8.minusMinutes((-26751557));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime14", (dateTime3.compareTo(dateTime14) == 0) == dateTime3.equals(dateTime14));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0794");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime24.year();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusYears(558);
        boolean boolean35 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra();
        int int42 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime40);
        long long45 = dateTimeZone22.adjustOffset((-1510244950266L), false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime40", (dateTime24.compareTo(dateTime40) == 0) == dateTime24.equals(dateTime40));
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0795");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        int[] intArray5 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readableDuration8);
        int int10 = localDateTime4.getWeekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        int int17 = dateTimeParserBucket16.getOffset();
        java.lang.Object obj18 = dateTimeParserBucket16.saveState();
        int int19 = dateTimeParserBucket16.getOffset();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime21.withChronology(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(882);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfHour();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = property41.getAsText(locale42);
        java.lang.String str45 = locale36.getDisplayName(locale42);
        int int46 = property35.getMaximumTextLength(locale42);
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleAttributes();
        int int48 = strSet47.size();
        int int49 = strSet47.size();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMillis(603);
        int int75 = localDateTime74.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusSeconds(170);
        boolean boolean78 = localDateTime67.isAfter((org.joda.time.ReadablePartial) localDateTime77);
        boolean boolean79 = localDateTime54.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime54.withYear(170);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property83 = localDateTime54.property(dateTimeFieldType82);
        boolean boolean84 = strSet47.remove((java.lang.Object) dateTimeFieldType82);
        org.joda.time.DateTime dateTime86 = dateTime26.withField(dateTimeFieldType82, 603);
        dateTimeParserBucket16.saveField(dateTimeFieldType82, 329);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime4.withField(dateTimeFieldType82, 167);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minus(readableDuration91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime26", (dateTime21.compareTo(dateTime26) == 0) == dateTime21.equals(dateTime26));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0796");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(837L, dateTimeZone1);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(648);
        boolean boolean12 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket19.getZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone36);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.getDefault(category39);
        java.lang.String str42 = dateTimeZone36.getShortName((long) 593, locale41);
        org.joda.time.DateTime dateTime43 = dateTime11.toDateTime(dateTimeZone36);
        boolean boolean44 = dateTime11.isBeforeNow();
        org.joda.time.Instant instant45 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime47 = dateTime11.withYear(26928);
        org.joda.time.DateTime.Property property48 = dateTime11.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant45", (dateTime11.compareTo(instant45) == 0) == dateTime11.equals(instant45));
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0797");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(980);
        java.lang.String str20 = localDateTime18.toString("-1");
        int int21 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusWeeks((-593));
        int int32 = localDateTime30.getValue(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear(43);
        boolean boolean37 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime34.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusYears(4);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(840);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours((int) (byte) 0);
        boolean boolean53 = dateTime51.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        boolean boolean58 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime();
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.minuteOfHour();
        org.joda.time.DurationField durationField65 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.dayOfMonth();
        boolean boolean68 = localDateTime47.equals((java.lang.Object) chronology60);
        boolean boolean69 = localDateTime41.equals((java.lang.Object) chronology60);
        org.joda.time.DurationField durationField70 = chronology60.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime49", (dateTime3.compareTo(dateTime49) == 0) == dateTime3.equals(dateTime49));
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0798");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        long long26 = chronology22.add((long) 51, (long) 558, 175);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.lang.String str29 = locale27.getDisplayName();
        java.lang.String str30 = locale27.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 39, chronology22, locale27);
        java.util.Locale locale32 = dateTimeParserBucket31.getLocale();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket39.getChronology();
        org.joda.time.tz.NameProvider nameProvider45 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider45);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfWeek();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        dateTimeParserBucket60.saveField(dateTimeFieldType64, "it", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology50, locale66, (java.lang.Integer) 9, 538);
        java.lang.String str73 = nameProvider45.getShortName(locale66, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale74 = locale66.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology44, locale66, (java.lang.Integer) 26798222);
        long long78 = dateTimeParserBucket76.computeMillis(true);
        java.util.Locale locale79 = dateTimeParserBucket76.getLocale();
        java.lang.String str80 = locale32.getDisplayCountry(locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime51", (dateTime11.compareTo(dateTime51) == 0) == dateTime11.equals(dateTime51));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0799");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        boolean boolean39 = dateTime35.isAfter(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.centuryOfEra();
        org.joda.time.DurationField durationField49 = chronology43.minutes();
        long long53 = chronology43.add((long) 765, 23L, 5);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType40.getField(chronology43);
        boolean boolean55 = dateTime35.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYear(2022);
        int int65 = localDateTime64.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMinutes(49);
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = localDateTime69.getFields();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime69);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int77 = localDateTime73.get(dateTimeFieldType76);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology80);
        java.lang.String str82 = chronology80.toString();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.weekOfWeekyear();
        boolean boolean84 = dateTimeFieldType76.isSupported(chronology80);
        boolean boolean85 = localDateTime69.isSupported(dateTimeFieldType76);
        int int86 = dateTime35.get(dateTimeFieldType76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime44", (dateTime13.compareTo(dateTime44) == 0) == dateTime13.equals(dateTime44));
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0800");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        int int6 = dateTime3.getMinuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime3.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        java.lang.String str16 = chronology14.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.Chronology chronology20 = chronology14.withZone(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, 0L, 603);
        org.joda.time.DurationField durationField25 = chronology20.eras();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        java.lang.String str31 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        java.lang.String str40 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.dayOfWeek();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        dateTimeParserBucket48.saveField(dateTimeFieldType52, "it", locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology38, locale54, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology29, locale54);
        java.lang.String str60 = locale54.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale54, (java.lang.Integer) 1052);
        org.joda.time.DateTimeField dateTimeField63 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType9.getField(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0801");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        int int38 = property34.get();
        org.joda.time.DateTime dateTime39 = property34.roundCeilingCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        java.util.Date date45 = dateTime42.toDate();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime48 = dateTime42.withWeekyear(3);
        org.joda.time.Instant instant49 = dateTime42.toInstant();
        int int50 = property40.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant49", (dateTime13.compareTo(instant49) == 0) == dateTime13.equals(instant49));
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0802");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.Chronology chronology16 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfMinute();
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale27 = java.util.Locale.getDefault(category21);
        java.util.Locale locale28 = java.util.Locale.getDefault(category21);
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.String str30 = locale28.getLanguage();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfSecond();
        org.joda.time.DurationField durationField38 = chronology34.seconds();
        org.joda.time.DurationField durationField39 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.era();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.weekOfWeekyear();
        org.joda.time.DurationField durationField42 = chronology34.minutes();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        dateTimeParserBucket48.saveField(dateTimeFieldType52, "it", locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(673L, chronology34, locale54, (java.lang.Integer) 10, 453);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property64 = dateTime61.centuryOfEra();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = property64.getAsText(locale65);
        java.lang.String str68 = locale59.getDisplayName(locale65);
        java.lang.String str69 = locale54.getDisplayScript(locale59);
        java.util.Set<java.lang.String> strSet70 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale28.getDisplayVariant(locale54);
        java.lang.String str72 = dateTimeField19.getAsShortText(0L, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime61", (dateTime3.compareTo(dateTime61) == 0) == dateTime3.equals(dateTime61));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0803");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField14 = chronology10.seconds();
        org.joda.time.DurationField durationField15 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours((int) (byte) 0);
        boolean boolean22 = dateTime20.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime20.toMutableDateTime(dateTimeZone23);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = dateTimeZone23.getName((long) (byte) 1, locale27);
        org.joda.time.Chronology chronology29 = chronology10.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology10.getZone();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 26751806, chronology10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths(537);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.plus(readablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.withMillisOfDay(0);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfMonth();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekyear((-1));
        org.joda.time.DateTime dateTime60 = dateTime56.plusHours((int) (byte) 100);
        boolean boolean62 = dateTime60.isBefore((long) ' ');
        int int63 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime60);
        int int65 = dateTimeZone53.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime66 = dateTime41.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekyear((-1));
        boolean boolean71 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime70);
        java.util.Date date72 = dateTime41.toDate();
        org.joda.time.DateTime dateTime74 = dateTime41.withYear(687);
        boolean boolean75 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime74.getZone();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        long long81 = dateTimeZone76.convertLocalToUTC(802L, false, (long) 470);
        org.joda.time.DateTime dateTime82 = dateTime6.withZoneRetainFields(dateTimeZone76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime18", (dateTime3.compareTo(dateTime18) == 0) == dateTime3.equals(dateTime18));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0804");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyearOfCentury();
        int int8 = dateTimeField7.getMinimumValue();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        java.lang.Integer int27 = dateTimeParserBucket23.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket23.setZone(dateTimeZone28);
        dateTimeParserBucket14.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket14.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths(10);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        java.util.Date date45 = dateTime42.toDate();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfMonth();
        org.joda.time.DateTime.Property property47 = dateTime42.dayOfMonth();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = property47.getAsText(locale48);
        java.lang.String str51 = property40.getAsShortText(locale48);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property57 = dateTime54.centuryOfEra();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = property57.getAsText(locale58);
        java.lang.String str61 = locale52.getDisplayName(locale58);
        java.lang.String str62 = locale48.getDisplayScript(locale52);
        java.lang.String str63 = dateTimeZone31.getShortName((long) 1970, locale48);
        java.lang.String str64 = locale48.getScript();
        int int65 = dateTimeField7.getMaximumTextLength(locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0805");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        java.util.Locale locale23 = dateTimeParserBucket21.getLocale();
        java.lang.Object obj24 = dateTimeParserBucket21.saveState();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField32.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField32.getType();
        java.util.Locale locale39 = new java.util.Locale("\uc601\uc5b4", "java.io.IOException: ISOChronology[UTC]", "89");
        java.lang.String str40 = dateTimeField32.getAsShortText(537L, locale39);
        dateTimeParserBucket21.saveField(dateTimeField32, 710);
        long long45 = dateTimeParserBucket21.computeMillis(false, "101");
        java.util.Locale locale46 = dateTimeParserBucket21.getLocale();
        int int47 = dateTimeField15.getMaximumShortTextLength(locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime28", (dateTime1.compareTo(dateTime28) == 0) == dateTime1.equals(dateTime28));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0806");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DateTime dateTime31 = property24.roundHalfFloorCopy();
        boolean boolean33 = dateTime31.isAfter((long) 441);
        org.joda.time.LocalDateTime localDateTime34 = dateTime31.toLocalDateTime();
        int int35 = dateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property45.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear(2022);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property65 = dateTime62.centuryOfEra();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = property65.getAsText(locale66);
        java.lang.String str69 = dateTimeField55.getAsText((org.joda.time.ReadablePartial) localDateTime59, (-1), locale66);
        java.util.Locale.setDefault(locale66);
        java.lang.String str71 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDateTime50, locale66);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime50.plusMinutes(20);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfCeilingCopy();
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime78 = property74.setCopy("1", locale77);
        org.joda.time.LocalDateTime localDateTime80 = property74.addToCopy((long) 863);
        int int81 = localDateTime80.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property82 = localDateTime80.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.withMillisOfDay(26810);
        org.joda.time.DateTime dateTime85 = localDateTime80.toDateTime();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology88 = localDateTime87.getChronology();
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now(chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.secondOfMinute();
        org.joda.time.DurationField durationField91 = chronology88.millis();
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(chronology88);
        org.joda.time.DateTime dateTime94 = dateTime92.plusMinutes(180);
        org.joda.time.DateTime dateTime96 = dateTime92.withCenturyOfEra(0);
        boolean boolean97 = dateTime85.isEqual((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean98 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime92", (dateTime13.compareTo(dateTime92) == 0) == dateTime13.equals(dateTime92));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0807");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        int int10 = mutableDateTime8.get(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        boolean boolean17 = dateTimeFieldType9.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusYears(4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusHours(840);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minus(readableDuration26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.year();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readableDuration38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfMonth();
        long long41 = property40.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property40.withMaximumValue();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfEvenCopy();
        java.util.Date date45 = localDateTime44.toDate();
        int[] intArray47 = chronology30.get((org.joda.time.ReadablePartial) localDateTime44, 493L);
        chronology13.validate((org.joda.time.ReadablePartial) localDateTime27, intArray47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime31", (dateTime1.compareTo(dateTime31) == 0) == dateTime1.equals(dateTime31));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0808");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale24.getDisplayName();
        dateTimeParserBucket15.saveField(dateTimeFieldType22, "97", locale24);
        java.util.Locale locale27 = dateTimeParserBucket15.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale27, (java.lang.Integer) 339655, 74575);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) (byte) 0);
        boolean boolean36 = dateTime34.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        boolean boolean41 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTime dateTime44 = dateTime40.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfEvenCopy();
        java.lang.String str50 = property48.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property48.getFieldType();
        int int52 = dateTime44.get(dateTimeFieldType51);
        org.joda.time.DateTime dateTime54 = dateTime44.plusMonths(377);
        java.util.Date date55 = dateTime54.toDate();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.fromDateFields(date55);
        long long58 = chronology3.set((org.joda.time.ReadablePartial) localDateTime56, 1645515071094L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0809");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology8);
        int int15 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        java.lang.String str22 = dateTimeField20.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        int int28 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime27.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        int int34 = dateTimeField5.getMaximumValue();
        long long37 = dateTimeField5.add((long) 435, 270);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        java.lang.String str44 = dateTimeField42.getAsShortText((long) 28);
        org.joda.time.DurationField durationField45 = dateTimeField42.getDurationField();
        java.lang.String str46 = dateTimeField42.toString();
        int int48 = dateTimeField42.getMaximumValue(57L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(7L);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusMillis(2020);
        int int53 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50);
        java.util.Locale locale57 = new java.util.Locale("ko", "778");
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, 21, locale57);
        long long62 = dateTimeField5.addWrapField((long) 514, 600);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology65, locale66, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField70 = null;
        dateTimeParserBucket69.saveField(dateTimeField70, (int) (short) 0);
        java.lang.Integer int73 = dateTimeParserBucket69.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket69.setZone(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.withWeekyear((-1));
        org.joda.time.DateTime dateTime81 = dateTime77.plusHours((int) (byte) 100);
        boolean boolean83 = dateTime81.isBefore((long) ' ');
        int int84 = dateTimeZone74.getOffset((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime86 = dateTime81.minusYears(20);
        org.joda.time.DateTime.Property property87 = dateTime86.hourOfDay();
        org.joda.time.DateTime dateTime88 = property87.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime90 = dateTime88.withCenturyOfEra(258);
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.lang.String str93 = dateTime90.toString("70", locale92);
        java.lang.String str95 = locale92.getExtension('a');
        java.lang.String str96 = dateTimeField5.getAsText(259200463L, locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime77", (dateTime3.compareTo(dateTime77) == 0) == dateTime3.equals(dateTime77));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0810");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime5.withDayOfYear(241);
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        int int12 = dateTime5.getMillisOfSecond();
        java.util.Date date13 = dateTime5.toDate();
        org.joda.time.LocalTime localTime14 = dateTime5.toLocalTime();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        dateTimeParserBucket20.saveField(dateTimeFieldType24, "it", locale26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekOfWeekyear();
        boolean boolean40 = dateTimeFieldType24.isSupported(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.weekyears();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyearOfCentury();
        java.lang.String str48 = dateTimeField46.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfEvenCopy();
        int int54 = dateTimeField46.getMinimumValue((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime53.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) '#');
        int[] intArray63 = chronology38.get((org.joda.time.ReadablePartial) localDateTime61, 163296000435L);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField65 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology38.hourOfDay();
        org.joda.time.DateTime dateTime67 = dateTime5.withChronology(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime45", (dateTime1.compareTo(dateTime45) == 0) == dateTime1.equals(dateTime45));
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0811");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.DurationFieldType durationFieldType14 = durationField13.getType();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField24 = durationFieldType14.getField(chronology17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property29 = dateTime26.centuryOfEra();
        org.joda.time.DateTime dateTime31 = dateTime26.minusYears(558);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.plusYears(7);
        org.joda.time.DateTime dateTime37 = dateTime35.minusSeconds(585);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime40.toGregorianCalendar();
        org.joda.time.Chronology chronology42 = dateTime40.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours((int) (byte) 0);
        boolean boolean51 = dateTime49.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime49.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket59.setZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withWeekyear((-1));
        org.joda.time.DateTime dateTime71 = dateTime67.plusHours((int) (byte) 100);
        boolean boolean73 = dateTime71.isBefore((long) ' ');
        int int74 = dateTimeZone64.getOffset((org.joda.time.ReadableInstant) dateTime71);
        long long76 = dateTimeZone64.nextTransition((long) (short) -1);
        boolean boolean77 = dateTime49.equals((java.lang.Object) dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        int[] intArray79 = localDateTime78.getValues();
        chronology42.validate((org.joda.time.ReadablePartial) localDateTime44, intArray79);
        org.joda.time.DateTimeZone dateTimeZone81 = chronology42.getZone();
        org.joda.time.Chronology chronology82 = chronology38.withZone(dateTimeZone81);
        boolean boolean83 = durationFieldType14.isSupported(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime26", (dateTime18.compareTo(dateTime26) == 0) == dateTime18.equals(dateTime26));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0812");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        int[] intArray5 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readableDuration8);
        int int10 = localDateTime4.getWeekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        int int17 = dateTimeParserBucket16.getOffset();
        java.lang.Object obj18 = dateTimeParserBucket16.saveState();
        int int19 = dateTimeParserBucket16.getOffset();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime21.withChronology(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(882);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfHour();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = property41.getAsText(locale42);
        java.lang.String str45 = locale36.getDisplayName(locale42);
        int int46 = property35.getMaximumTextLength(locale42);
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleAttributes();
        int int48 = strSet47.size();
        int int49 = strSet47.size();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMillis(603);
        int int75 = localDateTime74.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusSeconds(170);
        boolean boolean78 = localDateTime67.isAfter((org.joda.time.ReadablePartial) localDateTime77);
        boolean boolean79 = localDateTime54.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime54.withYear(170);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property83 = localDateTime54.property(dateTimeFieldType82);
        boolean boolean84 = strSet47.remove((java.lang.Object) dateTimeFieldType82);
        org.joda.time.DateTime dateTime86 = dateTime26.withField(dateTimeFieldType82, 603);
        dateTimeParserBucket16.saveField(dateTimeFieldType82, 329);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime4.withField(dateTimeFieldType82, 167);
        org.joda.time.LocalDateTime.Property property91 = localDateTime4.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime26", (dateTime21.compareTo(dateTime26) == 0) == dateTime21.equals(dateTime26));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0813");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = dateTimeZone1.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(837L, dateTimeZone1);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 891);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        java.lang.Integer int20 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.year();
        org.joda.time.Chronology chronology24 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime8.toMutableDateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        long long32 = dateTimeZone28.convertLocalToUTC((long) 496, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        dateTimeParserBucket39.setZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket39.getZone();
        java.lang.Integer int57 = dateTimeParserBucket39.getPivotYear();
        dateTimeParserBucket39.setOffset(54);
        java.lang.Integer int60 = dateTimeParserBucket39.getPivotYear();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField67 = null;
        dateTimeParserBucket66.saveField(dateTimeField67, (int) (short) 0);
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology71, locale72, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField76 = null;
        dateTimeParserBucket75.saveField(dateTimeField76, (int) (short) 0);
        java.lang.Integer int79 = dateTimeParserBucket75.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket75.setZone(dateTimeZone80);
        dateTimeParserBucket66.setZone(dateTimeZone80);
        dateTimeParserBucket39.setZone(dateTimeZone80);
        java.lang.String str85 = dateTimeZone80.getName((-1510228800000L));
        long long88 = dateTimeZone80.convertLocalToUTC((long) 854, true);
        java.lang.String str90 = dateTimeZone80.getName((long) 22);
        long long92 = dateTimeZone28.getMillisKeepLocal(dateTimeZone80, (-1601999767L));
        org.joda.time.DateTime dateTime93 = dateTime8.toDateTime(dateTimeZone80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime26", (dateTime4.compareTo(mutableDateTime26) == 0) == dateTime4.equals(mutableDateTime26));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0814");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 270, dateTimeZone2);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.withPeriodAdded(readablePeriod6, 511);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        int int16 = dateTimeParserBucket14.getOffset();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime8.toMutableDateTime(chronology17);
        org.joda.time.DurationField durationField22 = chronology17.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime21", (dateTime4.compareTo(mutableDateTime21) == 0) == dateTime4.equals(mutableDateTime21));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0815");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology32);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        org.joda.time.DurationField durationField63 = property62.getRangeDurationField();
        long long64 = property62.remainder();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = property62.getAsText(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology57, locale65, (java.lang.Integer) 180);
        org.joda.time.DateTimeField dateTimeField72 = chronology57.minuteOfHour();
        org.joda.time.DurationField durationField73 = durationFieldType23.getField(chronology57);
        long long76 = durationField73.add(528847L, 749L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime46", (dateTime27.compareTo(dateTime46) == 0) == dateTime27.equals(dateTime46));
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0816");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime dateTime15 = dateTime9.minus(2055741963026L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        java.util.Date date29 = dateTime26.toDate();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfMonth();
        org.joda.time.DateTime.Property property31 = dateTime26.dayOfMonth();
        java.lang.String str32 = property31.getAsString();
        boolean boolean33 = localDateTime24.equals((java.lang.Object) property31);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.toLanguageTag();
        int int38 = property31.getMaximumShortTextLength(locale34);
        long long39 = property31.remainder();
        org.joda.time.DateTime dateTime40 = property31.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        long long44 = dateTimeZone41.nextTransition(24235718400000L);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        dateTimeParserBucket51.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket51.getZone();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusMonths((int) (byte) 100);
        int[] intArray77 = localDateTime76.getValues();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.minusDays(4);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime76.minus(readableDuration80);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(chronology84);
        java.lang.String str86 = chronology84.toString();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField88 = chronology84.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField89 = chronology84.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField89.getType();
        int int91 = localDateTime81.indexOf(dateTimeFieldType90);
        int int92 = localDateTime71.get(dateTimeFieldType90);
        boolean boolean93 = dateTimeZone41.isLocalDateTimeGap(localDateTime71);
        org.joda.time.DateTime dateTime94 = dateTime40.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime95 = dateTime9.toDateTime(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime85", (dateTime1.compareTo(dateTime85) == 0) == dateTime1.equals(dateTime85));
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0817");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readableDuration7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyearOfCentury();
        java.lang.String str15 = dateTimeField13.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        int int21 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean24 = localDateTime20.equals((java.lang.Object) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = localDateTime26.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime23.property(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType28.getRangeDurationType();
        int int32 = localDateTime8.get(dateTimeFieldType28);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        boolean boolean35 = localDateTime8.equals((java.lang.Object) category33);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getExtension('x');
        java.util.Locale.setDefault(category33, locale36);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder40.setLanguage("DEU");
        java.util.Locale.Builder builder43 = builder40.clear();
        java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("Germany");
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        dateTimeParserBucket51.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property73 = dateTime70.centuryOfEra();
        org.joda.time.DurationField durationField74 = property73.getRangeDurationField();
        long long75 = property73.remainder();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale76.getDisplayName(locale77);
        java.lang.String str79 = locale76.toLanguageTag();
        java.lang.String str80 = property73.getAsText(locale76);
        java.lang.String str81 = dateTimeZone65.getName(947L, locale76);
        java.util.Locale.Builder builder82 = builder45.setLocale(locale76);
        java.util.Locale.Builder builder84 = builder82.setVariant("2035");
        java.util.Locale.Builder builder86 = builder84.setVariant("January");
        java.util.Locale.Builder builder87 = builder84.clearExtensions();
        java.util.Locale.Builder builder89 = builder87.setLanguageTag("days");
        java.util.Locale locale90 = builder89.build();
        java.util.Locale.setDefault(category33, locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime70", (dateTime12.compareTo(dateTime70) == 0) == dateTime12.equals(dateTime70));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0818");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime6.minusYears(882);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        int int21 = mutableDateTime19.get(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField27 = chronology24.millis();
        boolean boolean28 = dateTimeFieldType20.isSupported(chronology24);
        org.joda.time.DurationField durationField29 = chronology24.centuries();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology24, locale30);
        boolean boolean33 = dateTime9.equals((java.lang.Object) dateTimeParserBucket32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime9.withPeriodAdded(readablePeriod34, 267);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.weekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.centuryOfEra();
        org.joda.time.DurationField durationField47 = chronology40.halfdays();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 319, chronology40);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime36.toMutableDateTime(chronology40);
        int int50 = mutableDateTime49.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0819");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTime dateTime6 = dateTime1.minusSeconds(241);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(31);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime14.toDateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minus(readableDuration21);
        int int23 = localDateTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket30.getZone();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (byte) 100);
        boolean boolean57 = dateTime55.isBefore((long) ' ');
        org.joda.time.DateTime.Property property58 = dateTime55.weekOfWeekyear();
        org.joda.time.DateTime dateTime60 = dateTime55.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.withPeriodAdded(readablePeriod61, 593);
        org.joda.time.DateTime dateTime65 = dateTime60.plusDays(837);
        org.joda.time.DateTime dateTime66 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime67 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime10.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime51", (dateTime1.compareTo(dateTime51) == 0) == dateTime1.equals(dateTime51));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0820");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusWeeks(22);
        int int15 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime10);
        int int16 = localDateTime10.getYear();
        org.joda.time.Chronology chronology17 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths(10);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfDay();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(648);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds(569);
        org.joda.time.DateTime dateTime33 = dateTime29.plusDays(575);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfDay();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket49.setZone(dateTimeZone54);
        dateTimeParserBucket40.setZone(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket40.getZone();
        long long59 = dateTimeZone57.previousTransition((long) 593);
        org.joda.time.DateTime dateTime60 = dateTime33.withZone(dateTimeZone57);
        boolean boolean61 = dateTimeZone57.isFixed();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 2922789, dateTimeZone57);
        int[] intArray64 = chronology17.get((org.joda.time.ReadablePartial) localDateTime62, (-1640071795103L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0821");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeField4.getAsText(0L, locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DurationField durationField17 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        int int41 = dateTimeParserBucket40.getOffset();
        java.lang.Integer int42 = dateTimeParserBucket40.getPivotYear();
        java.util.Locale locale43 = dateTimeParserBucket40.getLocale();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale45.getDisplayLanguage(locale46);
        java.lang.String str49 = locale43.getDisplayName(locale46);
        java.lang.String str50 = localDateTime31.toString("17", locale46);
        java.util.Locale locale51 = locale46.stripExtensions();
        java.lang.String str52 = dateTimeField18.getAsShortText(readablePartial19, 44, locale51);
        java.lang.String str53 = locale8.getDisplayName(locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0822");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.previousTransition((long) 2);
        java.lang.String str26 = dateTimeZone19.getID();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        dateTimeParserBucket33.setZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket33.getZone();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone50);
        boolean boolean52 = dateTimeZone50.isFixed();
        long long55 = dateTimeZone50.adjustOffset(2846437113600010L, false);
        long long59 = dateTimeZone50.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        long long63 = dateTimeZone19.getMillisKeepLocal(dateTimeZone50, (long) 289);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTimeISO();
        int int71 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime60 and dateTime67", (dateTime60.compareTo(dateTime67) == 0) == dateTime60.equals(dateTime67));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0823");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        int int9 = localDateTime8.size();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime8.toDateTime(readableInstant10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTime dateTime14 = dateTime11.plusHours(51);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        int int20 = dateTime16.getMillisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime16.plusYears((int) (byte) 10);
        int int23 = dateTime16.getMillisOfSecond();
        boolean boolean25 = dateTime16.isEqual((long) 7);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology29.seconds();
        org.joda.time.DurationField durationField34 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = property50.getAsText(locale51);
        java.lang.String str54 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime44, (-1), locale51);
        java.util.Locale.setDefault(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology29, locale51, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime16.toMutableDateTime(chronology29);
        boolean boolean60 = dateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime59);
        int int61 = dateTime14.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime59", (dateTime16.compareTo(mutableDateTime59) == 0) == dateTime16.equals(mutableDateTime59));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0824");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusMinutes((-41));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        boolean boolean21 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime20.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        java.lang.String str35 = property33.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property33.getFieldType();
        int int37 = dateTime29.get(dateTimeFieldType36);
        java.lang.String str38 = dateTimeFieldType36.toString();
        int int39 = localDateTime10.indexOf(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.halfdayOfDay();
        org.joda.time.DurationField durationField46 = chronology42.millis();
        org.joda.time.DurationField durationField47 = chronology42.weeks();
        org.joda.time.DurationFieldType durationFieldType48 = durationField47.getType();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField55 = null;
        dateTimeParserBucket54.saveField(dateTimeField55, (int) (short) 0);
        dateTimeParserBucket54.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        java.lang.String str66 = dateTimeField64.getAsShortText((long) 28);
        dateTimeParserBucket54.saveField(dateTimeField64, 100);
        boolean boolean70 = dateTimeField64.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime75 = property73.addToCopy((-592L));
        int int76 = property73.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime78 = property73.addToCopy(593);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeField64.getAsText((org.joda.time.ReadablePartial) localDateTime78, 608, locale80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.withCenturyOfEra(7);
        int int84 = localDateTime78.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int86 = localDateTime78.get(dateTimeFieldType85);
        org.joda.time.Chronology chronology87 = localDateTime78.getChronology();
        org.joda.time.DurationField durationField88 = chronology87.years();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.yearOfEra();
        boolean boolean90 = durationFieldType48.isSupported(chronology87);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime10.withFieldAdded(durationFieldType48, 305);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime43", (dateTime12.compareTo(dateTime43) == 0) == dateTime12.equals(dateTime43));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0825");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        java.lang.String str12 = dateTimeField10.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        int int18 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        int int22 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        java.lang.String str48 = dateTimeZone44.getNameKey((long) 25);
        long long50 = dateTimeZone44.previousTransition((long) 292278993);
        long long54 = dateTimeZone44.convertLocalToUTC(120100L, false, (long) 26751);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone44);
        long long56 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = property24.addToCopy(76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime55", (dateTime9.compareTo(dateTime55) == 0) == dateTime9.equals(dateTime55));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0826");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property16 = dateTime13.centuryOfEra();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = property16.getAsText(locale17);
        java.lang.String str20 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime10, (-1), locale17);
        java.util.Set<java.lang.Character> charSet21 = locale17.getExtensionKeys();
        java.lang.String str22 = locale1.getDisplayLanguage(locale17);
        java.lang.String str23 = locale17.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale0.getDisplayScript(locale17);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        java.lang.String str43 = dateTimeField41.getAsShortText((long) 28);
        dateTimeParserBucket31.saveField(dateTimeField41, 100);
        boolean boolean47 = dateTimeField41.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy((-592L));
        int int53 = property50.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime55 = property50.addToCopy(593);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDateTime55, 608, locale57);
        long long60 = dateTimeField41.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology63);
        java.lang.String str65 = chronology63.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.weekyear();
        org.joda.time.DateTimeField dateTimeField69 = chronology63.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        java.lang.String str77 = dateTimeField75.getAsShortText(10L);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = dateTimeField75.getAsText(0L, locale79);
        java.lang.String str81 = dateTimeField69.getAsText(0, locale79);
        java.util.Locale locale82 = java.util.Locale.KOREA;
        int int83 = dateTimeField69.getMaximumShortTextLength(locale82);
        java.lang.String str85 = locale82.getExtension('u');
        int int86 = dateTimeField41.getMaximumTextLength(locale82);
        java.util.Locale locale87 = locale82.stripExtensions();
        java.lang.String str88 = locale0.getDisplayName(locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime64", (dateTime13.compareTo(dateTime64) == 0) == dateTime13.equals(dateTime64));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0827");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType12.getField(chronology15);
        int int19 = localDateTime9.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime9.withDate(590, 7, 9);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.monthOfYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = localDateTime23.isSupported(durationFieldType27);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        dateTimeParserBucket34.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        java.lang.String str46 = dateTimeField44.getAsShortText((long) 28);
        dateTimeParserBucket34.saveField(dateTimeField44, 100);
        boolean boolean50 = dateTimeField44.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy((-592L));
        int int56 = property53.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime58 = property53.addToCopy(593);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime58, 608, locale60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.withCenturyOfEra(663);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.minusMillis(52);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        boolean boolean67 = durationFieldType27.isSupported(chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear((-1));
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfSecond();
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.util.Calendar calendar75 = dateTime71.toCalendar(locale73);
        java.lang.String str76 = locale73.getScript();
        java.lang.String str77 = locale73.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider78 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider78);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder82 = builder80.setLanguage("DEU");
        java.util.Locale.Builder builder83 = builder80.clear();
        java.util.Locale.Builder builder85 = builder83.removeUnicodeLocaleAttribute("Germany");
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str88 = locale86.getDisplayName(locale87);
        java.util.Locale locale89 = locale86.stripExtensions();
        java.util.Locale.Builder builder90 = builder83.setLocale(locale89);
        java.lang.String str93 = nameProvider78.getShortName(locale89, "\u52a0\u62ff\u5927", "1970-03-05T00:00:00.497");
        java.lang.String str94 = locale73.getDisplayVariant(locale89);
        java.util.Locale.setDefault(locale89);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket((-1510245148551L), chronology66, locale89);
        org.joda.time.DurationField durationField97 = chronology66.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime69", (dateTime16.compareTo(dateTime69) == 0) == dateTime16.equals(dateTime69));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0828");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        long long46 = dateTimeField43.set((long) 779, 774);
        int int48 = dateTimeField43.get((-1640071621790468L));
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime57 = property55.roundHalfEvenCopy();
        int int58 = localDateTime57.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusMillis(837);
        java.lang.Object obj61 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfCentury((int) '#');
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology70);
        java.lang.String str72 = chronology70.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime67.toMutableDateTime(chronology70);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(obj61, chronology70);
        org.joda.time.DateTime dateTime78 = dateTime76.plusWeeks(458);
        int int79 = dateTime76.getYearOfCentury();
        boolean boolean80 = localDateTime60.equals((java.lang.Object) int79);
        int int81 = localDateTime60.getDayOfWeek();
        int int82 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime65", (dateTime8.compareTo(dateTime65) == 0) == dateTime8.equals(dateTime65));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0829");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        boolean boolean5 = dateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) (byte) 0);
        boolean boolean11 = dateTime9.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        boolean boolean16 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField23 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.year();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.plusSeconds((int) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology45.centuries();
        org.joda.time.DurationFieldType durationFieldType49 = durationField48.getType();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime27.withFieldAdded(durationFieldType49, 857);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.millisOfSecond();
        org.joda.time.DurationField durationField61 = chronology57.seconds();
        org.joda.time.DurationField durationField62 = chronology57.minutes();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.era();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.monthOfYear();
        org.joda.time.DurationField durationField65 = durationFieldType53.getField(chronology57);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        java.lang.String str70 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.weekOfWeekyear();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = dateTimeField71.getAsShortText((long) (byte) -1, locale73);
        java.util.Locale locale75 = locale73.stripExtensions();
        java.lang.String str76 = locale73.toLanguageTag();
        java.lang.String str77 = locale73.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology57, locale73, (java.lang.Integer) 992, 405);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology83 = localDateTime82.getChronology();
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(chronology83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.withDurationAdded(readableDuration87, 28);
        int[] intArray91 = chronology57.get((org.joda.time.ReadablePartial) localDateTime89, (long) 772);
        int int92 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDateTime51, intArray91);
        java.util.Locale locale95 = java.util.Locale.forLanguageTag("java.io.IOException: java.io.IOException: ISOChronology[+00:00:00.052]");
        java.lang.String str96 = locale95.toLanguageTag();
        java.lang.String str97 = dateTimeField25.getAsShortText((long) 446, locale95);
        java.util.Calendar calendar98 = dateTime3.toCalendar(locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime69", (dateTime1.compareTo(dateTime69) == 0) == dateTime1.equals(dateTime69));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0830");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DurationField durationField6 = chronology2.weeks();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(493);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        java.lang.Integer int28 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone29);
        dateTimeParserBucket15.setZone(dateTimeZone29);
        boolean boolean32 = dateTimeZone29.isFixed();
        boolean boolean33 = dateTimeZone29.isFixed();
        long long35 = dateTimeZone29.convertUTCToLocal((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(0);
        boolean boolean40 = dateTime37.isBeforeNow();
        boolean boolean41 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime37", (dateTime7.compareTo(dateTime37) == 0) == dateTime7.equals(dateTime37));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0831");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField10 = chronology6.seconds();
        org.joda.time.DurationField durationField11 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology6.minutes();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        dateTimeParserBucket20.saveField(dateTimeFieldType24, "it", locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(673L, chronology6, locale26, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology31, locale32, (java.lang.Integer) 597);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(26789793L, chronology31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar40 = dateTime39.toGregorianCalendar();
        int int41 = dateTime39.getMillisOfSecond();
        org.joda.time.DateTime.Property property42 = dateTime39.minuteOfHour();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property48 = dateTime45.centuryOfEra();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = property48.getAsText(locale49);
        java.lang.String str52 = locale43.getDisplayName(locale49);
        int int53 = property42.getMaximumTextLength(locale49);
        java.lang.String str54 = locale49.getISO3Language();
        java.lang.String str55 = locale49.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(45511424985600000L, chronology31, locale49, (java.lang.Integer) 884, (-2022));
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone67 = dateTimeZone66.toTimeZone();
        org.joda.time.Chronology chronology68 = chronology62.withZone(dateTimeZone66);
        org.joda.time.DurationField durationField69 = chronology68.halfdays();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 2922789, dateTimeZone71);
        int int74 = localDateTime73.getHourOfDay();
        boolean boolean75 = dateTimeParserBucket58.restoreState((java.lang.Object) localDateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime63", (dateTime37.compareTo(dateTime63) == 0) == dateTime37.equals(dateTime63));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0832");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = dateTimeField5.getAsShortText((long) (byte) -1, locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.String str10 = locale7.toLanguageTag();
        java.lang.String str11 = locale7.getISO3Country();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket19.setZone(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale28.getDisplayName();
        dateTimeParserBucket19.saveField(dateTimeFieldType26, "97", locale28);
        java.lang.String str31 = locale13.getDisplayCountry(locale28);
        java.lang.String str34 = nameProvider12.getName(locale13, "2024-06-08T07:27:32.275+00:00:00.052", "2022-02-22T07:26:13.872+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        int int42 = property41.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime44 = property41.addToCopy(608);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfWeek();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        java.lang.Integer int55 = dateTimeParserBucket51.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket51.setZone(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withWeekyear((-1));
        org.joda.time.DateTime dateTime63 = dateTime59.plusHours((int) (byte) 100);
        boolean boolean65 = dateTime63.isBefore((long) ' ');
        int int66 = dateTimeZone56.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime68 = dateTime63.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int73 = localDateTime70.get(dateTimeFieldType72);
        int int74 = dateTime68.get(dateTimeFieldType72);
        int int75 = localDateTime44.get(dateTimeFieldType72);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime44.withYearOfEra(151);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime44.minusDays(395);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.secondOfMinute();
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("1969-12-07T00:00:00.052");
        java.lang.String str83 = property80.getAsShortText(locale82);
        java.lang.String str86 = nameProvider12.getName(locale82, "1970-01-19T13:00:00.288+445:00", "2022-02-22T07:28:41.065Z");
        java.lang.String str87 = locale7.getDisplayLanguage(locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime59", (dateTime3.compareTo(dateTime59) == 0) == dateTime3.equals(dateTime59));
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0833");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        java.lang.Integer int23 = dateTimeParserBucket5.getPivotYear();
        dateTimeParserBucket5.setOffset(54);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket5.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusWeeks(855);
        int int41 = localDateTime40.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withCenturyOfEra(486);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        java.lang.String str47 = dateTimeFieldType45.getName();
        int int48 = localDateTime43.indexOf(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.DurationField durationField55 = chronology51.halfdays();
        org.joda.time.DurationField durationField56 = chronology51.weeks();
        boolean boolean57 = dateTimeFieldType45.isSupported(chronology51);
        java.lang.String str58 = dateTimeFieldType45.toString();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime64 = property62.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime65 = property62.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField66 = property62.getField();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar72 = dateTime71.toGregorianCalendar();
        int int73 = dateTime71.getMillisOfSecond();
        org.joda.time.DateTime dateTime75 = dateTime71.minusYears((int) 'x');
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.centuryOfEra();
        java.util.Locale.Category category79 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale80 = java.util.Locale.getDefault(category79);
        java.lang.String str81 = dateTimeField77.getAsText((long) 'a', locale80);
        java.lang.String str82 = locale80.getDisplayName();
        java.lang.String str83 = dateTimeField66.getAsShortText((long) 855, locale80);
        java.lang.String str84 = locale80.getDisplayVariant();
        dateTimeParserBucket5.saveField(dateTimeFieldType45, "2022-02-22T07:30:34.563+00:00:00.052", locale80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and dateTime69", (dateTime52.compareTo(dateTime69) == 0) == dateTime52.equals(dateTime69));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0834");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int37 = localDateTime34.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        boolean boolean45 = localDateTime34.isSupported(dateTimeFieldType43);
        int int46 = dateTime30.get(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType43.getDurationType();
        org.joda.time.Chronology chronology48 = null;
        boolean boolean49 = dateTimeFieldType43.isSupported(chronology48);
        int int50 = dateTime24.get(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType43.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime28", (dateTime24.compareTo(dateTime28) == 0) == dateTime24.equals(dateTime28));
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0835");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology32);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        org.joda.time.DurationField durationField63 = property62.getRangeDurationField();
        long long64 = property62.remainder();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = property62.getAsText(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology57, locale65, (java.lang.Integer) 180);
        org.joda.time.DateTimeField dateTimeField72 = chronology57.minuteOfHour();
        org.joda.time.DurationField durationField73 = durationFieldType23.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField74 = chronology57.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime46", (dateTime27.compareTo(dateTime46) == 0) == dateTime27.equals(dateTime46));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0836");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        dateTimeParserBucket30.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        java.lang.String str42 = dateTimeField40.getAsShortText((long) 28);
        dateTimeParserBucket30.saveField(dateTimeField40, 100);
        boolean boolean46 = dateTimeField40.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy((-592L));
        int int52 = property49.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = property49.addToCopy(593);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime54, 608, locale56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.withCenturyOfEra(663);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology70, locale71, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField75 = null;
        dateTimeParserBucket74.saveField(dateTimeField75, (int) (short) 0);
        java.lang.Integer int78 = dateTimeParserBucket74.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket74.setZone(dateTimeZone79);
        dateTimeParserBucket65.setZone(dateTimeZone79);
        java.util.TimeZone timeZone82 = dateTimeZone79.toTimeZone();
        long long84 = dateTimeZone79.convertUTCToLocal((long) 441);
        org.joda.time.DateTime dateTime85 = localDateTime54.toDateTime(dateTimeZone79);
        long long87 = chronology21.set((org.joda.time.ReadablePartial) localDateTime54, (long) 687);
        org.joda.time.DurationField durationField88 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField89 = chronology21.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField88", (durationField6.compareTo(durationField88) == 0) == durationField6.equals(durationField88));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0837");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateTime1.isBefore(readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(57);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        dateTimeParserBucket14.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 28);
        dateTimeParserBucket14.saveField(dateTimeField24, 100);
        dateTimeParserBucket14.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket14.saveField(dateTimeFieldType31, 950);
        org.joda.time.DateTime.Property property34 = dateTime1.property(dateTimeFieldType31);
        java.lang.Object obj35 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfCentury((int) '#');
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime41.toMutableDateTime(chronology44);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(obj35, chronology44);
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType31.getField(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0838");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(175);
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyearOfCentury();
        java.lang.String str15 = dateTimeField13.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        int int21 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean24 = localDateTime20.equals((java.lang.Object) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = localDateTime26.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime23.property(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        boolean boolean36 = localDateTime23.equals((java.lang.Object) dateTimeField35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime23.withYearOfCentury(38);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfSecond();
        int int40 = localDateTime38.getDayOfMonth();
        int int41 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((-592L));
        int int47 = property44.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime49 = property44.addToCopy(593);
        org.joda.time.LocalDateTime localDateTime50 = property44.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minusMonths(123);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withYearOfEra(22);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays(511);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusWeeks((int) (byte) -1);
        int int66 = localDateTime65.getMonthOfYear();
        int int67 = localDateTime65.size();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.minus(readableDuration68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfFloorCopy();
        int int72 = localDateTime71.getYear();
        int int73 = localDateTime71.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusHours((int) (byte) 0);
        boolean boolean79 = dateTime77.isEqual((long) (short) 100);
        int int80 = dateTime77.getWeekyear();
        org.joda.time.Chronology chronology81 = dateTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.secondOfMinute();
        org.joda.time.DurationField durationField84 = chronology81.minutes();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.weekOfWeekyear();
        org.joda.time.DurationField durationField86 = chronology81.halfdays();
        org.joda.time.DurationFieldType durationFieldType87 = durationField86.getType();
        boolean boolean88 = localDateTime71.isSupported(durationFieldType87);
        boolean boolean89 = localDateTime57.isSupported(durationFieldType87);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime38.withFieldAdded(durationFieldType87, 27005);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime75", (dateTime12.compareTo(dateTime75) == 0) == dateTime12.equals(dateTime75));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0839");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 623);
        org.joda.time.DateTime dateTime2 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime4 = dateTime1.plusMillis(67);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTimeISO();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.halfdayOfDay();
        org.joda.time.DurationField durationField16 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekyearOfCentury();
        boolean boolean18 = strSet9.contains((java.lang.Object) chronology12);
        java.util.Locale locale19 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology12, locale19, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DurationField durationField23 = chronology12.days();
        org.joda.time.DateTime dateTime24 = dateTime5.toDateTime(chronology12);
        org.joda.time.DateTime.Property property25 = dateTime5.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime24", (dateTime5.compareTo(dateTime24) == 0) == dateTime5.equals(dateTime24));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0840");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property12 = dateTime9.year();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 26752);
        int int17 = localDateTime16.size();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withCenturyOfEra(26861);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        int int22 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTime dateTime23 = property13.withMinimumValue();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket30.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 86399, dateTimeZone47);
        long long52 = dateTimeZone47.previousTransition((long) 231);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone("\uc601\uc5b4");
        timeZone57.setID("-0001-12-22T20:37:58.309+00:00:00.052");
        timeZone57.setID("2022-02-22T07:26:02.913+00:00:00.052");
        timeZone57.setRawOffset(122);
        boolean boolean64 = timeZone55.hasSameRules(timeZone57);
        boolean boolean65 = timeZone57.observesDaylightTime();
        boolean boolean66 = dateTimeZone47.equals((java.lang.Object) boolean65);
        org.joda.time.DateTime dateTime67 = dateTime23.toDateTime(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime49", (dateTime3.compareTo(dateTime49) == 0) == dateTime3.equals(dateTime49));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0841");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) 630);
        org.joda.time.LocalDateTime localDateTime6 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        java.lang.String str11 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.centuryOfEra();
        org.joda.time.DurationField durationField15 = chronology9.minutes();
        boolean boolean16 = localDateTime6.equals((java.lang.Object) chronology9);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minusSeconds(0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        dateTimeParserBucket24.setZone(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours((int) (byte) 0);
        boolean boolean51 = dateTime49.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks((int) 'a');
        boolean boolean56 = dateTime49.isAfter((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime();
        org.joda.time.DateTime dateTime59 = dateTime55.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundHalfEvenCopy();
        java.lang.String str65 = property63.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property63.getFieldType();
        int int67 = dateTime59.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime59.withMillisOfDay(446);
        org.joda.time.DateTime dateTime71 = dateTime59.plusWeeks(26939332);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear(764);
        int int74 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = dateTime73.minusMinutes(1931);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime43", (dateTime10.compareTo(dateTime43) == 0) == dateTime10.equals(dateTime43));
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0842");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTime dateTime6 = dateTime1.minusSeconds(241);
        org.joda.time.DateTime dateTime8 = dateTime1.plusMillis(608);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.withEarlierOffsetAtOverlap();
        boolean boolean19 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = dateTime8.isEqual(26760000L);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        int int29 = dateTimeParserBucket27.getOffset();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket27.getChronology();
        long long32 = dateTimeParserBucket27.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        java.util.Locale locale39 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        dateTimeParserBucket27.saveField(dateTimeFieldType33, "minuteOfDay", locale39);
        java.lang.Integer int41 = dateTimeParserBucket27.getPivotYear();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket27.getZone();
        org.joda.time.DateTime dateTime44 = dateTime8.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.halfdayOfDay();
        org.joda.time.DurationField durationField51 = chronology47.millis();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.hourOfDay();
        org.joda.time.DateTime dateTime55 = dateTime8.toDateTime(chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime48", (dateTime1.compareTo(dateTime48) == 0) == dateTime1.equals(dateTime48));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0843");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.setLanguage("DEU");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("Germany");
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale.Builder builder12 = builder5.setLocale(locale11);
        java.lang.String str15 = nameProvider0.getShortName(locale11, "\u52a0\u62ff\u5927", "1970-03-05T00:00:00.497");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale locale20 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str21 = locale17.getDisplayCountry(locale20);
        java.lang.String str24 = nameProvider0.getName(locale17, "CN", "2022-02-22T07:26:17.432+00:00:00.052");
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField32.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField32.getType();
        java.util.Locale locale39 = new java.util.Locale("\uc601\uc5b4", "java.io.IOException: ISOChronology[UTC]", "89");
        java.lang.String str40 = dateTimeField32.getAsShortText(537L, locale39);
        java.lang.String str43 = nameProvider0.getShortName(locale39, "2022-02-22T07:26:13.872+00:00:00.052", "26877");
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours((int) (byte) 0);
        boolean boolean49 = dateTime47.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) 'a');
        boolean boolean54 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime47.minus(readablePeriod55);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        java.lang.Integer int66 = dateTimeParserBucket62.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket62.setZone(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.lang.String str72 = locale71.getDisplayName();
        dateTimeParserBucket62.saveField(dateTimeFieldType69, "97", locale71);
        java.util.Calendar calendar74 = dateTime47.toCalendar(locale71);
        java.lang.String str75 = locale71.getCountry();
        java.util.Locale locale79 = new java.util.Locale("1378-01-01T00:00:00.087", "", "\uc601\uc5b4");
        java.lang.String str80 = locale71.getDisplayLanguage(locale79);
        java.lang.String str83 = nameProvider0.getName(locale71, "2022-02-22T07:28:36.498+00:00:00.052", "");
        java.lang.String str84 = locale71.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime45", (dateTime28.compareTo(dateTime45) == 0) == dateTime28.equals(dateTime45));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0844");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(396);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury(2);
        int int11 = localDateTime8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime13.year();
        org.joda.time.DateTime dateTime18 = dateTime13.minusSeconds(241);
        org.joda.time.DateTime dateTime20 = dateTime13.plusMillis(608);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(58);
        org.joda.time.DateTime dateTime24 = dateTime20.minusWeeks(3);
        int int25 = dateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        java.lang.String str43 = dateTimeField41.getAsShortText((long) 28);
        dateTimeParserBucket31.saveField(dateTimeField41, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket31.saveField(dateTimeFieldType46, 26761064);
        int int49 = dateTime24.get(dateTimeFieldType46);
        int int50 = localDateTime8.get(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime61 = dateTime58.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime58.getZone();
        java.lang.String str64 = dateTimeZone62.getName(1L);
        int int66 = dateTimeZone62.getOffsetFromLocal(445L);
        long long69 = dateTimeZone62.convertLocalToUTC(26765426L, true);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType46.getField(chronology72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime54", (dateTime13.compareTo(dateTime54) == 0) == dateTime13.equals(dateTime54));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0845");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology26.hours();
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DurationField durationField32 = chronology26.years();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26781995, chronology26, locale33);
        java.lang.Integer int35 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        int int42 = dateTimeParserBucket41.getOffset();
        long long43 = dateTimeParserBucket41.computeMillis();
        dateTimeParserBucket41.setOffset(26757772);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int53 = dateTime51.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int58 = localDateTime55.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        boolean boolean65 = localDateTime63.isSupported(dateTimeFieldType64);
        boolean boolean66 = localDateTime55.isSupported(dateTimeFieldType64);
        int int67 = dateTime51.get(dateTimeFieldType64);
        dateTimeParserBucket41.saveField(dateTimeFieldType64, 44);
        dateTimeParserBucket34.saveField(dateTimeFieldType64, 26812);
        boolean boolean72 = dateTime22.isSupported(dateTimeFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime27", (dateTime13.compareTo(dateTime27) == 0) == dateTime13.equals(dateTime27));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0846");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        int int29 = dateTimeParserBucket27.getOffset();
        dateTimeParserBucket27.setOffset((java.lang.Integer) 165);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfSecond();
        org.joda.time.DurationField durationField38 = chronology34.seconds();
        org.joda.time.DurationField durationField39 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.era();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology34.monthOfYear();
        dateTimeParserBucket27.saveField(dateTimeField42, 26950760);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekyear((-1));
        org.joda.time.DateTime dateTime50 = dateTime46.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.plus(readableDuration51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime54.getZone();
        int int59 = dateTimeZone57.getStandardOffset(1645514748039L);
        long long63 = dateTimeZone57.convertLocalToUTC((-23950053200632L), true, 1749600000L);
        dateTimeParserBucket27.setZone(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DurationField durationField70 = chronology67.months();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.minuteOfHour();
        dateTimeParserBucket27.saveField(dateTimeField72, 27141);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime68", (dateTime46.compareTo(dateTime68) == 0) == dateTime46.equals(dateTime68));
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0847");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths(99);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.DateTime.Property property19 = dateTime17.year();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology23.seconds();
        org.joda.time.DurationField durationField28 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        boolean boolean35 = dateTime33.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = dateTimeZone36.getName((long) (byte) 1, locale40);
        org.joda.time.Chronology chronology42 = chronology23.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property47 = dateTime44.centuryOfEra();
        org.joda.time.DurationField durationField48 = property47.getRangeDurationField();
        long long49 = property47.remainder();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.toLanguageTag();
        java.lang.String str54 = property47.getAsText(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology42, locale50, (java.lang.Integer) 180);
        java.lang.Integer int57 = dateTimeParserBucket56.getPivotYear();
        java.lang.Integer int58 = dateTimeParserBucket56.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property63 = dateTime60.centuryOfEra();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = property63.getAsText(locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours((int) (byte) 0);
        boolean boolean72 = dateTime70.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime70.toMutableDateTime(dateTimeZone73);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = dateTimeZone73.getName((long) (byte) 1, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str80 = property63.getAsShortText(locale77);
        int int81 = property63.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property63.getFieldType();
        java.lang.String str83 = dateTimeFieldType82.toString();
        java.util.Locale locale88 = new java.util.Locale("2022-02-22T07:26:59.243+00:00:00.052", "869", "2022-02-22T07:27:19.699+00:00:00.052");
        dateTimeParserBucket56.saveField(dateTimeFieldType82, "1047", locale88);
        boolean boolean90 = dateTime17.isSupported(dateTimeFieldType82);
        org.joda.time.DateTime.Property property91 = dateTime17.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0848");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-1");
        int int2 = dateTime1.getYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        boolean boolean10 = dateTime8.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime8.toMutableDateTime(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.toString();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis(603);
        int int18 = localDateTime17.getYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks(853);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minus(readablePeriod23);
        int int25 = localDateTime20.getMillisOfDay();
        org.joda.time.Chronology chronology26 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime1.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.withMillisOfDay(0);
        org.joda.time.LocalDate localDate35 = dateTime34.toLocalDate();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        org.joda.time.DateTime.Property property37 = dateTime34.yearOfCentury();
        org.joda.time.DateTime.Property property38 = dateTime34.weekOfWeekyear();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) 575);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        boolean boolean46 = dateTime44.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime44.toMutableDateTime(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        int int51 = mutableDateTime49.get(dateTimeFieldType50);
        int int52 = dateTime40.get(dateTimeFieldType50);
        boolean boolean53 = dateTime27.isSupported(dateTimeFieldType50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime27", (dateTime1.compareTo(dateTime27) == 0) == dateTime1.equals(dateTime27));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0849");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology3.getZone();
        org.joda.time.DurationField durationField24 = chronology3.weeks();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        boolean boolean31 = localDateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withWeekyear(38);
        long long36 = chronology3.set((org.joda.time.ReadablePartial) localDateTime34, 1645514774895L);
        org.joda.time.DateTimeField dateTimeField37 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        int int42 = dateTime39.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime39.plus(readablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        boolean boolean55 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime();
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        java.lang.String str58 = chronology57.toString();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DurationField durationField60 = chronology57.minutes();
        org.joda.time.DateTime dateTime61 = dateTime39.withChronology(chronology57);
        org.joda.time.Chronology chronology62 = chronology57.withUTC();
        org.joda.time.DurationField durationField63 = chronology62.weekyears();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.monthOfYear();
        int int66 = dateTimeField64.getLeapAmount((long) (-52));
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar71 = dateTime70.toGregorianCalendar();
        int int72 = dateTime70.getMillisOfSecond();
        org.joda.time.DateTime.Property property73 = dateTime70.minuteOfHour();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property79 = dateTime76.centuryOfEra();
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = property79.getAsText(locale80);
        java.lang.String str83 = locale74.getDisplayName(locale80);
        int int84 = property73.getMaximumTextLength(locale80);
        java.lang.String str85 = locale80.getISO3Language();
        java.lang.String str86 = locale80.getLanguage();
        java.util.Locale locale87 = java.util.Locale.ENGLISH;
        java.lang.String str88 = locale87.getDisplayName();
        java.lang.String str89 = locale80.getDisplayLanguage(locale87);
        int int90 = dateTimeField64.getMaximumShortTextLength(locale80);
        java.lang.String str91 = locale80.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket(4519818037L, chronology3, locale80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField60", (durationField8.compareTo(durationField60) == 0) == durationField8.equals(durationField60));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0850");
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        boolean boolean12 = strSet3.contains((java.lang.Object) chronology6);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology6, locale13, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int30 = localDateTime26.get(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        boolean boolean37 = dateTimeFieldType29.isSupported(chronology33);
        org.joda.time.LocalDateTime.Property property38 = localDateTime20.property(dateTimeFieldType29);
        dateTimeParserBucket15.saveField(dateTimeFieldType29, 293);
        java.lang.Object obj41 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property46 = dateTime43.year();
        org.joda.time.DateTime dateTime48 = dateTime43.minusSeconds(241);
        org.joda.time.DateTime dateTime50 = dateTime43.plusMillis(608);
        org.joda.time.DateMidnight dateMidnight51 = dateTime43.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime43.getZone();
        int int54 = dateTimeZone52.getOffset((long) 295);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = dateTimeZone52.getName((-62167962723651L), locale56);
        dateTimeParserBucket15.setZone(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime43", (dateTime7.compareTo(dateTime43) == 0) == dateTime7.equals(dateTime43));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0851");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int3 = dateTimeZone1.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        long long6 = dateTimeZone1.nextTransition(2312204313600000L);
        long long8 = dateTimeZone1.previousTransition(4418889358L);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = dateTime26.minusYears(20);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusMillis(603);
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = dateTime41.isBefore(readableInstant42);
        org.joda.time.DateTime dateTime44 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean45 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property46 = dateTime41.millisOfDay();
        org.joda.time.DateTime dateTime47 = property46.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property48 = dateTime47.centuryOfEra();
        int int49 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime22", (dateTime4.compareTo(dateTime22) == 0) == dateTime4.equals(dateTime22));
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0852");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DurationField durationField14 = chronology9.eras();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        dateTimeParserBucket37.saveField(dateTimeFieldType41, "it", locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology27, locale43, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology18, locale43);
        java.lang.String str49 = locale43.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale43, (java.lang.Integer) 1052);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        boolean boolean62 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime();
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.minuteOfDay();
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("87");
        int int68 = dateTimeField65.getMaximumTextLength(locale67);
        java.lang.String str69 = locale43.getDisplayVariant(locale67);
        java.util.Locale locale70 = null;
        java.lang.String str71 = locale67.getDisplayScript(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime53", (dateTime4.compareTo(dateTime53) == 0) == dateTime4.equals(dateTime53));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0853");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        long long15 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(10);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear((int) (short) 100);
        int int46 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int47 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        long long50 = dateTimeField36.set(1L, 837);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = dateTimeField36.getAsText((long) 7, locale52);
        org.joda.time.DateTime dateTime54 = property29.setCopy("999", locale52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours((int) (byte) 0);
        boolean boolean60 = dateTime58.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime58.toMutableDateTime(dateTimeZone61);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = dateTimeZone61.getName((long) (byte) 1, locale65);
        java.lang.String str68 = locale65.getUnicodeLocaleType("52");
        java.lang.String str69 = locale52.getDisplayVariant(locale65);
        dateTimeParserBucket5.saveField(dateTimeFieldType18, "117", locale65);
        dateTimeParserBucket5.setOffset(112);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekyearOfCentury();
        org.joda.time.DurationField durationField79 = chronology76.months();
        org.joda.time.DateTimeField dateTimeField80 = chronology76.secondOfDay();
        org.joda.time.DurationField durationField81 = chronology76.weeks();
        boolean boolean82 = durationFieldType73.isSupported(chronology76);
        org.joda.time.DurationField durationField83 = chronology76.days();
        org.joda.time.DateTimeField dateTimeField84 = chronology76.dayOfYear();
        dateTimeParserBucket5.saveField(dateTimeField84, 564);
        long long88 = dateTimeField84.roundHalfFloor(181L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime77", (dateTime22.compareTo(dateTime77) == 0) == dateTime22.equals(dateTime77));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0854");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime3.withYear(832);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        int int16 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime20 = dateTime17.withFieldAdded(durationFieldType18, 734);
        boolean boolean21 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime23 = dateTime17.withMillisOfDay(272);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime25.withChronology(chronology29);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        boolean boolean54 = dateTimeZone50.isFixed();
        long long56 = dateTimeZone50.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime57 = dateTime30.withZone(dateTimeZone50);
        int int58 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime23.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime30", (dateTime1.compareTo(dateTime30) == 0) == dateTime1.equals(dateTime30));
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0855");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        java.lang.String str6 = chronology4.toString();
        org.joda.time.Chronology chronology7 = chronology4.withUTC();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setLanguage("DEU");
        java.util.Locale.Builder builder11 = builder8.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder17 = builder14.setExtension('u', "");
        java.util.Locale locale18 = builder14.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(2055742153314L, chronology4, locale18, (java.lang.Integer) 150, 679);
        long long24 = dateTimeParserBucket21.computeMillis(false, "53");
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.centuryOfEra();
        dateTimeParserBucket21.saveField(dateTimeField31, 26792370);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime28", (dateTime2.compareTo(dateTime28) == 0) == dateTime2.equals(dateTime28));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0856");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 590);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths(10);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTime.Property property26 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMinutes(648);
        int int29 = dateTime24.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int31 = dateTime24.get(dateTimeFieldType30);
        boolean boolean32 = dateTimeParserBucket5.restoreState((java.lang.Object) int31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 139, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.secondOfDay();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withYear((int) (short) 100);
        int int57 = localDateTime49.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int int58 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime49);
        long long61 = dateTimeField47.set(1L, 837);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = dateTimeField47.getAsText((long) 7, locale63);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = property76.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withYear((int) (short) 100);
        int int80 = localDateTime72.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        int int81 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) localDateTime72);
        long long84 = dateTimeField70.set(1L, 837);
        java.util.Locale locale86 = java.util.Locale.TAIWAN;
        java.lang.String str87 = dateTimeField70.getAsText((long) 7, locale86);
        java.lang.String str88 = locale63.getDisplayName(locale86);
        java.util.Locale.setDefault(locale63);
        java.lang.String str90 = dateTimeField40.getAsText(679, locale63);
        long long93 = dateTimeField40.set((long) 537, 2016);
        dateTimeParserBucket5.saveField(dateTimeField40, 571);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime37", (dateTime20.compareTo(dateTime37) == 0) == dateTime20.equals(dateTime37));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0857");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        boolean boolean17 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.minutes();
        org.joda.time.DateTime dateTime23 = dateTime1.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis(51L);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMonths(1970);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.minusSeconds(265);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime34 = property32.setCopy(36745);
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfWeek();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale56 = java.util.Locale.ROOT;
        dateTimeParserBucket50.saveField(dateTimeFieldType54, "it", locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology40, locale56, (java.lang.Integer) 9, 538);
        java.lang.String str63 = nameProvider35.getShortName(locale56, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.lang.String str65 = locale64.getVariant();
        java.lang.String str68 = nameProvider35.getName(locale64, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Set<java.lang.String> strSet69 = locale64.getUnicodeLocaleAttributes();
        java.util.Locale locale70 = locale64.stripExtensions();
        java.lang.String str71 = locale70.getVariant();
        int int72 = property32.getMaximumTextLength(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0858");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getMillisOfSecond();
        org.joda.time.DateTime.Property property20 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime17.withDayOfMonth(19);
        org.joda.time.DateTime.Property property23 = dateTime17.millisOfSecond();
        org.joda.time.Chronology chronology24 = dateTime17.getChronology();
        org.joda.time.DateTime.Property property25 = dateTime17.dayOfWeek();
        boolean boolean26 = dateTime17.isAfterNow();
        org.joda.time.DateTime.Property property27 = dateTime17.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekyear((-1));
        int int32 = dateTime29.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.plus(readablePeriod33);
        org.joda.time.DateTime dateTime36 = dateTime29.minusHours(732);
        boolean boolean37 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime36.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) (byte) 0);
        boolean boolean45 = dateTime43.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime43.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        java.lang.Integer int57 = dateTimeParserBucket53.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket53.setZone(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withWeekyear((-1));
        org.joda.time.DateTime dateTime65 = dateTime61.plusHours((int) (byte) 100);
        boolean boolean67 = dateTime65.isBefore((long) ' ');
        int int68 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime65);
        long long70 = dateTimeZone58.nextTransition((long) (short) -1);
        boolean boolean71 = dateTime43.equals((java.lang.Object) dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        long long75 = dateTimeZone58.adjustOffset((long) 26752, true);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(795L, dateTimeZone58);
        long long78 = dateTimeZone58.previousTransition(1645514988104L);
        org.joda.time.DateTime dateTime79 = dateTime36.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime80 = dateTime13.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime15", (dateTime3.compareTo(dateTime15) == 0) == dateTime3.equals(dateTime15));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0859");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfCentury((int) '#');
        org.joda.time.DateTime.Property property8 = dateTime5.era();
        int int9 = dateTime5.getMillisOfDay();
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 19045, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        boolean boolean26 = dateTime24.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime24.toString(dateTimeFormatter27);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear((-1));
        org.joda.time.DateTime dateTime46 = dateTime42.plusHours((int) (byte) 100);
        boolean boolean48 = dateTime46.isBefore((long) ' ');
        int int49 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime46);
        long long51 = dateTimeZone39.nextTransition((long) (short) -1);
        boolean boolean52 = dateTime24.equals((java.lang.Object) dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        int[] intArray54 = localDateTime53.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localDateTime19, intArray54);
        org.joda.time.DateTimeField dateTimeField56 = chronology17.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.millisOfSecond();
        org.joda.time.DurationField durationField63 = dateTimeField62.getLeapDurationField();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = dateTimeField62.getAsText(457087L, locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 575, chronology17, locale65, (java.lang.Integer) 26759);
        java.lang.String str70 = locale65.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (-5627732), chronology10, locale65, (java.lang.Integer) 26937);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime15", (dateTime5.compareTo(dateTime15) == 0) == dateTime5.equals(dateTime15));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0860");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField29 = chronology3.monthOfYear();
        long long32 = dateTimeField29.add((long) 427, 41205440L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar37 = dateTime36.toGregorianCalendar();
        int int38 = dateTime36.getMillisOfSecond();
        org.joda.time.DateTime.Property property39 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime36.withYear(355);
        org.joda.time.DateTime dateTime43 = dateTime36.minusHours(86368);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths((int) (byte) 100);
        int[] intArray49 = localDateTime48.getValues();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusDays(4);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.minus(readableDuration52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int58 = localDateTime55.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        boolean boolean65 = localDateTime63.isSupported(dateTimeFieldType64);
        boolean boolean66 = localDateTime55.isSupported(dateTimeFieldType64);
        int int67 = localDateTime53.get(dateTimeFieldType64);
        boolean boolean68 = dateTime43.equals((java.lang.Object) localDateTime53);
        int int69 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime34", (dateTime28.compareTo(dateTime34) == 0) == dateTime28.equals(dateTime34));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0861");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded((-9239961L), 983);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale43.getDisplayName();
        dateTimeParserBucket34.saveField(dateTimeFieldType41, "97", locale43);
        int int46 = localDateTime26.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime22.withField(dateTimeFieldType41, 12);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        boolean boolean62 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime();
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        java.lang.String str65 = chronology64.toString();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology64);
        org.joda.time.DurationField durationField67 = chronology64.minutes();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.minuteOfHour();
        org.joda.time.DurationField durationField69 = durationFieldType51.getField(chronology64);
        org.joda.time.DateTimeZone dateTimeZone70 = chronology64.getZone();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType41.getField(chronology64);
        boolean boolean72 = dateTime9.isSupported(dateTimeFieldType41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0862");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        boolean boolean16 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusSeconds(18);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(915);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusMonths((int) (byte) 100);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int32 = localDateTime28.get(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMillis(99);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        int int44 = dateTimeParserBucket43.getOffset();
        java.lang.Integer int45 = dateTimeParserBucket43.getPivotYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.DurationField durationField52 = chronology48.seconds();
        org.joda.time.DurationField durationField53 = chronology48.minutes();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.era();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField56 = chronology48.months();
        org.joda.time.DateTimeField dateTimeField57 = chronology48.dayOfMonth();
        dateTimeParserBucket43.saveField(dateTimeField57, 1978);
        java.util.Locale locale60 = dateTimeParserBucket43.getLocale();
        java.util.Locale locale63 = new java.util.Locale("2035-02-12T07:26:03.689Z", "10");
        java.lang.String str64 = locale60.getDisplayCountry(locale63);
        java.lang.String str65 = localDateTime34.toString("1", locale60);
        boolean boolean66 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekyear((-1));
        org.joda.time.DateTime dateTime72 = dateTime70.plusMonths(10);
        org.joda.time.DateTime.Property property73 = dateTime72.minuteOfDay();
        org.joda.time.DateTime.Property property74 = dateTime72.yearOfEra();
        org.joda.time.DateTime dateTime76 = dateTime72.minusMinutes(648);
        org.joda.time.DateTime dateTime78 = dateTime76.plusSeconds(569);
        org.joda.time.DateTime dateTime81 = dateTime78.withDurationAdded((long) 354, 575);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 26752);
        int int84 = localDateTime83.size();
        boolean boolean85 = dateTime78.equals((java.lang.Object) int84);
        org.joda.time.DateTime.Property property86 = dateTime78.era();
        org.joda.time.DateTime dateTime87 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime68", (dateTime3.compareTo(dateTime68) == 0) == dateTime3.equals(dateTime68));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0863");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int12 = localDateTime10.get(dateTimeFieldType11);
        int int13 = dateTime5.get(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = dateTime5.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        int int24 = dateTimeParserBucket23.getOffset();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology27.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((-1L));
        long long33 = dateTimeZone29.convertUTCToLocal((long) 734);
        dateTimeParserBucket23.setZone(dateTimeZone29);
        int int36 = dateTimeZone29.getStandardOffset(136L);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int39 = dateTimeZone29.getOffsetFromLocal(292278993L);
        org.joda.time.DateTime dateTime40 = dateTime5.withZoneRetainFields(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime28", (dateTime1.compareTo(dateTime28) == 0) == dateTime1.equals(dateTime28));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0864");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(26751557);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.minus(readablePeriod29);
        org.joda.time.DateTime.Property property31 = dateTime27.secondOfDay();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime27.plus(readablePeriod40);
        int int42 = dateTime41.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime39", (dateTime41.compareTo(dateTime39) == 0) == dateTime41.equals(dateTime39));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0865");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        java.lang.Object obj22 = dateTimeParserBucket5.saveState();
        java.util.Locale locale26 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        boolean boolean29 = dateTimeParserBucket5.restoreState((java.lang.Object) locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.getNameKey(52L);
        long long37 = dateTimeZone30.convertLocalToUTC((long) 227, false, 1014721200000L);
        java.lang.String str38 = dateTimeZone30.getID();
        dateTimeParserBucket5.setZone(dateTimeZone30);
        int int41 = dateTimeZone30.getOffset((long) 181);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime51.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean55 = dateTime54.isEqualNow();
        org.joda.time.LocalDateTime localDateTime56 = dateTime54.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minus(readableDuration57);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.toLanguageTag();
        java.lang.String str64 = localDateTime58.toString("55", locale60);
        java.lang.String str65 = dateTimeZone30.getShortName(1586849451225L, locale60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime47", (dateTime31.compareTo(dateTime47) == 0) == dateTime31.equals(dateTime47));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0866");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime3.toDateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        java.util.Date date43 = dateTime40.toDate();
        org.joda.time.DateTime.Property property44 = dateTime40.dayOfMonth();
        org.joda.time.DateTime.Property property45 = dateTime40.dayOfMonth();
        java.lang.String str46 = property45.getAsString();
        boolean boolean47 = localDateTime38.equals((java.lang.Object) property45);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfSecond();
        org.joda.time.DurationField durationField56 = chronology52.seconds();
        org.joda.time.DurationField durationField57 = chronology52.minutes();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.era();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField60 = chronology52.minutes();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField67 = null;
        dateTimeParserBucket66.saveField(dateTimeField67, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale72 = java.util.Locale.ROOT;
        dateTimeParserBucket66.saveField(dateTimeFieldType70, "it", locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket(673L, chronology52, locale72, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology77, locale78, (java.lang.Integer) 597);
        java.lang.String str81 = property45.getAsText(locale78);
        java.lang.String str82 = property29.getAsShortText(locale78);
        org.joda.time.DateTime dateTime83 = property29.getDateTime();
        org.joda.time.Instant instant84 = dateTime83.toInstant();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.DateTime dateTime86 = dateTime83.minus(readablePeriod85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime86 and instant84", (dateTime86.compareTo(instant84) == 0) == dateTime86.equals(instant84));
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0867");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology8.add(readablePeriod9, 0L, 603);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        int int23 = localDateTime15.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.withYear(635);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology28.millis();
        org.joda.time.DurationFieldType durationFieldType33 = durationField32.getType();
        boolean boolean34 = localDateTime15.isSupported(durationFieldType33);
        java.lang.String str35 = durationFieldType33.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DurationField durationField41 = chronology38.millis();
        java.lang.String str42 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology38.monthOfYear();
        boolean boolean47 = durationFieldType33.isSupported(chronology38);
        java.lang.String str48 = durationFieldType33.getName();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekyear((-1));
        org.joda.time.DateTime dateTime72 = dateTime68.plusHours((int) (byte) 100);
        boolean boolean74 = dateTime72.isBefore((long) ' ');
        int int75 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime72);
        dateTimeParserBucket54.setZone(dateTimeZone65);
        long long79 = dateTimeZone65.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone81);
        org.joda.time.DateTime dateTime84 = dateTime82.withWeekyear((-1));
        org.joda.time.DateTime dateTime86 = dateTime82.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.DateTime dateTime88 = dateTime86.plus(readableDuration87);
        org.joda.time.DateTime dateTime90 = dateTime88.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime92 = dateTime88.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime93 = dateTime92.toMutableDateTime();
        org.joda.time.Chronology chronology94 = mutableDateTime93.getChronology();
        org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime80, chronology94);
        org.joda.time.DateTimeField dateTimeField96 = chronology94.dayOfYear();
        org.joda.time.DurationField durationField97 = chronology94.halfdays();
        org.joda.time.DurationField durationField98 = durationFieldType33.getField(chronology94);
        org.joda.time.DateTime dateTime99 = new org.joda.time.DateTime((java.lang.Object) dateTime13, chronology94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime68", (dateTime3.compareTo(dateTime68) == 0) == dateTime3.equals(dateTime68));
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0868");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        boolean boolean9 = localDateTime7.isSupported(dateTimeFieldType8);
        int int10 = localDateTime2.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.withYear(635);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology15.millis();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        boolean boolean21 = localDateTime2.isSupported(durationFieldType20);
        java.lang.String str22 = durationFieldType20.toString();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DurationField durationField28 = chronology25.millis();
        java.lang.String str29 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.monthOfYear();
        boolean boolean34 = durationFieldType20.isSupported(chronology25);
        java.lang.String str35 = durationFieldType20.getName();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        java.lang.String str40 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField42 = chronology38.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology38.years();
        boolean boolean46 = durationFieldType20.isSupported(chronology38);
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.getDefault(category47);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.parse("70");
        org.joda.time.DateTime.Property property51 = dateTime50.year();
        java.lang.String str52 = property51.getAsText();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.DateTime dateTime54 = property51.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours((int) (byte) 0);
        java.util.Date date61 = dateTime58.toDate();
        org.joda.time.DateTime.Property property62 = dateTime58.dayOfMonth();
        java.lang.String str63 = property62.getAsString();
        int int64 = property62.getMaximumValue();
        int int65 = property62.getMinimumValueOverall();
        org.joda.time.DateTime dateTime66 = property62.roundHalfCeilingCopy();
        int int67 = dateTime66.getMinuteOfDay();
        org.joda.time.DateTime dateTime69 = dateTime66.minusMinutes(563);
        org.joda.time.DateTime dateTime71 = dateTime69.withYear(92);
        org.joda.time.LocalDateTime localDateTime72 = dateTime69.toLocalDateTime();
        org.joda.time.Chronology chronology73 = dateTime69.getChronology();
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale75 = locale74.stripExtensions();
        java.lang.String str76 = locale74.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet77 = locale74.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 683, chronology73, locale74, (java.lang.Integer) 744);
        org.joda.time.DateTime dateTime81 = property51.setCopy("445", locale74);
        java.util.Locale.setDefault(category47, locale74);
        java.lang.String str83 = locale74.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((-1510244619712L), chronology38, locale74, (java.lang.Integer) 50003);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime58", (dateTime16.compareTo(dateTime58) == 0) == dateTime16.equals(dateTime58));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0869");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        java.lang.Integer int9 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.joda.time.DateTime dateTime20 = property17.addToCopy((long) 25);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = property17.getAsShortText(locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear((-1));
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(10);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfDay();
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        org.joda.time.DateTime dateTime32 = property29.addToCopy((long) 25);
        int int33 = property17.getDifference((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = dateTime32.isBefore((long) 304);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime32.toMutableDateTimeISO();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.era();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime32.toMutableDateTime(chronology43);
        boolean boolean49 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime48", (dateTime20.compareTo(mutableDateTime48) == 0) == dateTime20.equals(mutableDateTime48));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0870");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime48 = property45.addToCopy(608);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfWeek();
        boolean boolean50 = dateTimeZone39.isLocalDateTimeGap(localDateTime48);
        long long53 = dateTimeZone39.adjustOffset((long) 334, false);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime37.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar59 = dateTime58.toGregorianCalendar();
        int int60 = dateTime58.getMillisOfSecond();
        org.joda.time.DateTime.Property property61 = dateTime58.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime58.withDayOfMonth(19);
        int int64 = dateTime58.getMinuteOfDay();
        int int65 = dateTime58.getEra();
        org.joda.time.DateTime dateTime67 = dateTime58.withCenturyOfEra(647);
        int int68 = dateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.weekyearOfCentury();
        java.lang.String str75 = dateTimeField73.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime80 = property79.roundHalfEvenCopy();
        int int81 = dateTimeField73.getMinimumValue((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = localDateTime80.getFieldTypes();
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.hourOfDay();
        org.joda.time.LocalDateTime localDateTime84 = property83.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime85 = property83.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime86 = property83.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property83.getFieldType();
        org.joda.time.DateTime.Property property88 = dateTime67.property(dateTimeFieldType87);
        int int89 = dateTime37.get(dateTimeFieldType87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime72", (dateTime13.compareTo(dateTime72) == 0) == dateTime13.equals(dateTime72));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0871");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.lang.String str25 = locale24.getDisplayName();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        java.lang.String str32 = dateTimeField30.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfEvenCopy();
        int int38 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime37.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.Chronology chronology42 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.halfdayOfDay();
        org.joda.time.DurationField durationField55 = chronology51.millis();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.secondOfDay();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DurationField durationField58 = chronology51.weeks();
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.getDefault(category59);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str62 = locale61.getLanguage();
        java.util.Set<java.lang.Character> charSet63 = locale61.getExtensionKeys();
        java.util.Locale.setDefault(category59, locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology51, locale61, (java.lang.Integer) 407, 195);
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean69 = locale68.hasExtensions();
        java.lang.String str70 = locale61.getDisplayLanguage(locale68);
        java.lang.String str71 = dateTimeField46.getAsText(402, locale61);
        java.lang.String str72 = locale24.getDisplayCountry(locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime29", (dateTime14.compareTo(dateTime29) == 0) == dateTime14.equals(dateTime29));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0872");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        int int5 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = property2.addToCopy(593);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime dateTime13 = dateTime9.plusHours((int) (byte) 100);
        boolean boolean15 = dateTime13.isBefore((long) ' ');
        org.joda.time.DateTime.Property property16 = dateTime13.weekOfWeekyear();
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.withMillisOfDay(0);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear((-1));
        org.joda.time.DateTime dateTime42 = dateTime38.plusHours((int) (byte) 100);
        boolean boolean44 = dateTime42.isBefore((long) ' ');
        int int45 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime42);
        int int47 = dateTimeZone35.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime48 = dateTime23.withZoneRetainFields(dateTimeZone35);
        int int49 = property2.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.weekyear();
        org.joda.time.DateTime dateTime52 = dateTime48.minusWeeks(367);
        org.joda.time.Instant instant53 = dateTime48.toInstant();
        org.joda.time.DateTime dateTime55 = dateTime48.plusYears(25200052);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and instant53", (dateTime48.compareTo(instant53) == 0) == dateTime48.equals(instant53));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0873");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths((int) (byte) 100);
        int[] intArray32 = localDateTime31.getValues();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusDays(4);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        int int46 = localDateTime36.indexOf(dateTimeFieldType45);
        int int47 = localDateTime26.get(dateTimeFieldType45);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket59.setZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withWeekyear((-1));
        org.joda.time.DateTime dateTime71 = dateTime67.plusHours((int) (byte) 100);
        boolean boolean73 = dateTime71.isBefore((long) ' ');
        int int74 = dateTimeZone64.getOffset((org.joda.time.ReadableInstant) dateTime71);
        dateTimeParserBucket53.setZone(dateTimeZone64);
        long long78 = dateTimeZone64.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.withWeekyear((-1));
        org.joda.time.DateTime dateTime85 = dateTime81.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.DateTime dateTime87 = dateTime85.plus(readableDuration86);
        org.joda.time.DateTime dateTime89 = dateTime87.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime91 = dateTime87.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime91.toMutableDateTime();
        org.joda.time.Chronology chronology93 = mutableDateTime92.getChronology();
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime79, chronology93);
        org.joda.time.DurationField durationField95 = chronology93.weeks();
        org.joda.time.DateTimeField dateTimeField96 = chronology93.weekyear();
        org.joda.time.DateTimeField dateTimeField97 = chronology93.secondOfMinute();
        boolean boolean98 = dateTimeFieldType45.isSupported(chronology93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime67", (dateTime40.compareTo(dateTime67) == 0) == dateTime40.equals(dateTime67));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0874");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime23.toMutableDateTime(dateTimeZone26);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = dateTimeZone26.getName((long) (byte) 1, locale30);
        org.joda.time.Chronology chronology32 = chronology13.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology13.getZone();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 26751806, chronology13);
        org.joda.time.DateTimeField dateTimeField35 = chronology13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours((int) (byte) 0);
        boolean boolean41 = dateTime39.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = dateTime39.toString(dateTimeFormatter42);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale45.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("20");
        java.lang.String str49 = locale45.getDisplayVariant(locale48);
        java.lang.String str50 = dateTime39.toString("1969", locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology13, locale45, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField53 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology13.dayOfMonth();
        boolean boolean55 = durationFieldType8.isSupported(chronology13);
        java.lang.String str56 = durationFieldType8.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0875");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        int int16 = localDateTime14.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withPeriodAdded(readablePeriod17, 950);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withWeekyear(99);
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.year();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 2922789);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.era();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        int int37 = localDateTime29.get(dateTimeFieldType35);
        java.lang.String str38 = dateTimeFieldType35.getName();
        boolean boolean39 = localDateTime24.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = locale42.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology41, locale42, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime49.toMutableDateTime();
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours((int) (byte) 0);
        java.util.Date date60 = dateTime57.toDate();
        org.joda.time.DateTime.Property property61 = dateTime57.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = dateTime49.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.withWeekyear((-1));
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfSecond();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Calendar calendar72 = dateTime68.toCalendar(locale70);
        java.lang.String str73 = locale70.getScript();
        dateTimeParserBucket47.saveField(dateTimeFieldType62, "Property[minuteOfDay]", locale70);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType62.getRangeDurationType();
        java.lang.String str76 = dateTimeFieldType62.toString();
        int int77 = localDateTime24.indexOf(dateTimeFieldType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime49", (dateTime3.compareTo(dateTime49) == 0) == dateTime3.equals(dateTime49));
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0876");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.centuryOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj0, chronology11);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((int) (byte) 100);
        int[] intArray23 = localDateTime22.getValues();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusDays(4);
        int int26 = localDateTime25.size();
        org.joda.time.Chronology chronology27 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        int int34 = dateTime30.getMillisOfSecond();
        org.joda.time.DateTime.Property property35 = dateTime30.centuryOfEra();
        org.joda.time.DateTime dateTime36 = property35.roundCeilingCopy();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        java.util.Locale locale44 = dateTimeParserBucket42.getLocale();
        boolean boolean45 = property35.equals((java.lang.Object) locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology27, locale44, (java.lang.Integer) 325);
        java.lang.String str48 = locale44.getLanguage();
        java.lang.String str49 = locale44.getDisplayScript();
        java.lang.String str50 = locale44.getLanguage();
        java.lang.String str51 = property16.getAsText(locale44);
        java.lang.String str52 = locale44.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime30", (dateTime15.compareTo(dateTime30) == 0) == dateTime15.equals(dateTime30));
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0877");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plus(readableDuration29);
        int int31 = localDateTime30.getMinuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((-1));
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths(10);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfDay();
        int int40 = dateTime38.getYearOfEra();
        org.joda.time.DateTime.Property property41 = dateTime38.secondOfDay();
        org.joda.time.DateTime dateTime43 = dateTime38.withDayOfYear(241);
        org.joda.time.DateTime.Property property44 = dateTime38.centuryOfEra();
        int int45 = dateTime38.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        boolean boolean48 = dateTime38.isSupported(dateTimeFieldType46);
        org.joda.time.DateTime.Property property49 = dateTime32.property(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = chronology52.getZone();
        org.joda.time.Chronology chronology55 = chronology52.withUTC();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType46.getField(chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime53", (dateTime24.compareTo(dateTime53) == 0) == dateTime24.equals(dateTime53));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0878");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.Chronology chronology5 = chronology2.withUTC();
        org.joda.time.Chronology chronology6 = chronology5.withUTC();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis((int) (short) 1);
        long long19 = chronology5.set((org.joda.time.ReadablePartial) localDateTime17, 0L);
        org.joda.time.DurationField durationField20 = chronology5.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        java.lang.String str28 = property26.toString();
        java.lang.String str29 = property26.getName();
        org.joda.time.LocalDateTime localDateTime30 = property26.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType31.getField(chronology34);
        java.lang.String str38 = dateTimeFieldType31.toString();
        java.lang.String str39 = dateTimeFieldType31.getName();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType31.isSupported(chronology40);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType31.getDurationType();
        org.joda.time.LocalDateTime.Property property43 = localDateTime30.property(dateTimeFieldType31);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.lang.Integer int54 = dateTimeParserBucket50.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket50.setZone(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.lang.String str60 = locale59.getDisplayName();
        dateTimeParserBucket50.saveField(dateTimeFieldType57, "97", locale59);
        int int62 = dateTimeParserBucket50.getOffset();
        java.lang.Integer int63 = dateTimeParserBucket50.getPivotYear();
        java.util.Locale locale64 = dateTimeParserBucket50.getLocale();
        org.joda.time.Chronology chronology65 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider68);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder70.setLanguage("DEU");
        java.util.Locale.Builder builder73 = builder70.clear();
        java.util.Locale.Builder builder75 = builder73.removeUnicodeLocaleAttribute("Germany");
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale76.getDisplayName(locale77);
        java.util.Locale locale79 = locale76.stripExtensions();
        java.util.Locale.Builder builder80 = builder73.setLocale(locale79);
        java.lang.String str83 = nameProvider68.getShortName(locale79, "\u52a0\u62ff\u5927", "1970-03-05T00:00:00.497");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider68);
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone86);
        org.joda.time.DateTime dateTime89 = dateTime87.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property90 = dateTime87.centuryOfEra();
        java.util.Locale locale91 = java.util.Locale.ITALIAN;
        java.lang.String str92 = locale91.getLanguage();
        java.lang.String str93 = property90.getAsText(locale91);
        java.lang.String str94 = locale85.getDisplayName(locale91);
        java.lang.String str97 = nameProvider68.getName(locale91, "1969-12-31T23:59:28.052", "1970-01-01T00:00:00.392");
        java.lang.String str98 = dateTimeField66.getAsShortText(0, locale91);
        java.lang.String str99 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime30, 122, locale91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime87", (dateTime3.compareTo(dateTime87) == 0) == dateTime3.equals(dateTime87));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0879");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.Chronology chronology5 = chronology2.withUTC();
        org.joda.time.Chronology chronology6 = chronology5.withUTC();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis((int) (short) 1);
        long long19 = chronology5.set((org.joda.time.ReadablePartial) localDateTime17, 0L);
        org.joda.time.DurationField durationField20 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology5.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        long long26 = dateTimeZone23.previousTransition((long) 26748437);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology28 = chronology5.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        boolean boolean39 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        java.lang.String str42 = chronology41.toString();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        java.util.Date date49 = dateTime46.toDate();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((-1));
        org.joda.time.DateTime dateTime56 = dateTime52.plusHours((int) (byte) 100);
        int int57 = dateTime52.getDayOfYear();
        int int58 = property50.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime59 = property50.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.plus(readablePeriod60);
        boolean boolean62 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = dateTime61.isEqualNow();
        org.joda.time.DateTime dateTime64 = dateTime61.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property65 = dateTime61.dayOfMonth();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = null;
        dateTimeParserBucket71.saveField(dateTimeField72, (int) (short) 0);
        java.lang.Integer int75 = dateTimeParserBucket71.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket71.setZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = dateTime61.toDateTime(dateTimeZone76);
        org.joda.time.Chronology chronology79 = chronology5.withZone(dateTimeZone76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime30", (dateTime3.compareTo(dateTime30) == 0) == dateTime3.equals(dateTime30));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0880");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime29 = dateTime23.withFieldAdded(durationFieldType27, 817);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.DateTime dateTime32 = dateTime29.plusMinutes(31);
        org.joda.time.Chronology chronology33 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        long long36 = dateTimeField34.roundHalfEven(631152000000L);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.DurationField durationField43 = chronology40.months();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.clockhourOfHalfday();
        long long48 = dateTimeField46.roundCeiling(2055741972825L);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.lang.Integer int59 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.Chronology chronology60 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.weekOfWeekyear();
        int int62 = dateTimeField61.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.minusMillis((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.minus(readablePeriod78);
        java.util.Locale locale80 = java.util.Locale.GERMANY;
        java.lang.String str81 = locale80.getDisplayName();
        java.util.Set<java.lang.String> strSet82 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale80.getISO3Language();
        java.util.Locale locale84 = locale80.stripExtensions();
        java.lang.String str85 = dateTimeField61.getAsShortText((org.joda.time.ReadablePartial) localDateTime73, locale84);
        java.lang.String str86 = dateTimeField46.getAsText((-62167962718010L), locale84);
        java.lang.String str87 = dateTimeField34.getAsText(578, locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime41", (dateTime18.compareTo(dateTime41) == 0) == dateTime18.equals(dateTime41));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0881");
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        boolean boolean12 = strSet3.contains((java.lang.Object) chronology6);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology6, locale13, (java.lang.Integer) 22);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekyear((-1));
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours((int) (byte) 100);
        boolean boolean35 = dateTime33.isBefore((long) ' ');
        int int36 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime38 = dateTime33.minusYears(20);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime.Property property40 = dateTime38.dayOfMonth();
        java.util.Locale locale44 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str45 = property40.getAsText(locale44);
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale13.getDisplayVariant(locale44);
        java.lang.String str49 = locale13.getExtension('a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime29", (dateTime7.compareTo(dateTime29) == 0) == dateTime7.equals(dateTime29));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0882");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType17.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        boolean boolean39 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property55 = dateTime52.centuryOfEra();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime49, (-1), locale56);
        java.util.Calendar calendar60 = dateTime40.toCalendar(locale56);
        java.lang.String str61 = locale56.getDisplayScript();
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.setLanguageTag("coreano");
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder69 = builder68.clear();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = locale56.getDisplayScript(locale70);
        int int72 = dateTimeField28.getMaximumShortTextLength(locale56);
        java.lang.String str73 = locale56.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0883");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.hourOfDay();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.087");
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        org.joda.time.LocalTime localTime51 = dateTime49.toLocalTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology56);
        java.lang.String str58 = chronology56.toString();
        org.joda.time.DurationField durationField59 = chronology56.seconds();
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale locale63 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str64 = locale60.getDisplayCountry(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology56, locale60);
        boolean boolean66 = locale60.hasExtensions();
        java.lang.String str67 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localTime51, 9226, locale60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime57", (dateTime19.compareTo(dateTime57) == 0) == dateTime19.equals(dateTime57));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0884");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        java.lang.String str5 = dateTimeField4.toString();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        dateTimeParserBucket20.saveField(dateTimeFieldType24, "it", locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime14.property(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = property32.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear((int) (short) 10);
        int int38 = localDateTime35.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readablePeriod44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 10);
        int int59 = dateTime58.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.withDurationAdded(readableDuration60, (int) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime52.minusMillis(663);
        int int66 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        int int67 = localDateTime65.getYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property72 = dateTime69.centuryOfEra();
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = property72.getAsText(locale73);
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        java.lang.String str77 = locale73.getDisplayCountry();
        java.lang.String str78 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime65, locale73);
        long long81 = dateTimeField4.addWrapField((long) 485, 335);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime54", (dateTime3.compareTo(dateTime54) == 0) == dateTime3.equals(dateTime54));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0885");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int30 = localDateTime26.get(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        boolean boolean37 = dateTimeFieldType29.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField38 = chronology33.yearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField60 = localDateTime56.getField(0);
        boolean boolean61 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.withMillisOfSecond(292);
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime56, locale64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime56.toDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.millisOfSecond();
        org.joda.time.DurationField durationField74 = chronology70.seconds();
        org.joda.time.DurationField durationField75 = chronology70.minutes();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.era();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.weekOfWeekyear();
        long long80 = dateTimeField77.addWrapField(0L, 538);
        org.joda.time.DurationField durationField81 = dateTimeField77.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField77.getType();
        int int83 = localDateTime56.get(dateTimeFieldType82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime56.withWeekyear(222);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime56.minus(readablePeriod86);
        int int88 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime34", (dateTime13.compareTo(dateTime34) == 0) == dateTime13.equals(dateTime34));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0886");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.DateTime.Property property6 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays(853);
        org.joda.time.DateTime dateTime10 = dateTime5.withCenturyOfEra(706);
        int int11 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime13 = dateTime5.plusSeconds((-17268891));
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks((-23684));
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        int int22 = dateTimeParserBucket21.getOffset();
        java.lang.Integer int23 = dateTimeParserBucket21.getPivotYear();
        java.util.Locale locale24 = dateTimeParserBucket21.getLocale();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DurationField durationField31 = dateTimeField30.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withYear(2022);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property62 = dateTime59.centuryOfEra();
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = property62.getAsText(locale63);
        java.lang.String str66 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDateTime56, (-1), locale63);
        java.util.Locale.setDefault(locale63);
        java.lang.String str68 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime47, locale63);
        java.lang.String str69 = dateTimeField30.getAsShortText((long) 'a', locale63);
        java.lang.String str70 = locale24.getDisplayName(locale63);
        boolean boolean71 = locale63.hasExtensions();
        java.util.Calendar calendar72 = dateTime15.toCalendar(locale63);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusMonths((int) (byte) 100);
        int[] intArray78 = localDateTime77.getValues();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusDays(4);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.minus(readableDuration81);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology85 = localDateTime84.getChronology();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(chronology85);
        java.lang.String str87 = chronology85.toString();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField90 = chronology85.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = dateTimeField90.getType();
        int int92 = localDateTime82.indexOf(dateTimeFieldType91);
        java.lang.String str93 = dateTimeFieldType91.getName();
        org.joda.time.DateTime dateTime95 = dateTime15.withField(dateTimeFieldType91, 3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime86", (dateTime1.compareTo(dateTime86) == 0) == dateTime1.equals(dateTime86));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0887");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        int int21 = property20.getMaximumValueOverall();
        org.joda.time.DateTime dateTime22 = property20.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime25 = dateTime22.withFieldAdded(durationFieldType23, 734);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime.Property property30 = dateTime27.yearOfCentury();
        int int31 = property30.getMaximumValueOverall();
        java.lang.String str32 = property30.getAsString();
        org.joda.time.DateTime dateTime33 = property30.roundCeilingCopy();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis(13);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        java.lang.String str53 = dateTimeField51.getAsShortText((long) 28);
        dateTimeParserBucket41.saveField(dateTimeField51, 100);
        dateTimeParserBucket41.setOffset(19);
        java.lang.Object obj58 = dateTimeParserBucket41.saveState();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime71 = property70.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYear((int) (short) 100);
        int int74 = localDateTime66.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        int int75 = dateTimeField64.getMinimumValue((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar80 = dateTime79.toGregorianCalendar();
        int int81 = dateTime79.getMillisOfSecond();
        org.joda.time.DateTime dateTime82 = localDateTime66.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int84 = localDateTime66.get(dateTimeFieldType83);
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str87 = locale86.getLanguage();
        dateTimeParserBucket41.saveField(dateTimeFieldType83, "DurationField[years]", locale86);
        int int89 = dateTime35.get(dateTimeFieldType83);
        int int90 = dateTime22.get(dateTimeFieldType83);
        int int91 = dateTime15.get(dateTimeFieldType83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime17", (dateTime3.compareTo(dateTime17) == 0) == dateTime3.equals(dateTime17));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0888");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withWeekyear((-1));
        org.joda.time.DateTime dateTime7 = dateTime3.plusHours((int) (byte) 100);
        boolean boolean9 = dateTime7.isBefore((long) ' ');
        org.joda.time.DateTime.Property property10 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 593);
        org.joda.time.DateTime dateTime17 = dateTime12.plusDays(837);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        int int26 = dateTimeParserBucket25.getOffset();
        long long27 = dateTimeParserBucket25.computeMillis();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        dateTimeParserBucket25.setZone(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str43 = dateTimeZone38.getName((long) 602);
        boolean boolean44 = mutableDateTime19.equals((java.lang.Object) dateTimeZone38);
        boolean boolean45 = locale0.equals((java.lang.Object) boolean44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0889");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DurationField durationField13 = chronology2.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology2.dayOfWeek();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology2);
        boolean boolean17 = dateTime15.isEqual((long) 26796);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        java.lang.Integer int25 = dateTimeParserBucket23.getOffsetInteger();
        java.util.Locale locale26 = dateTimeParserBucket23.getLocale();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime40.plusHours((int) (byte) 100);
        boolean boolean46 = dateTime44.isBefore((long) ' ');
        int int47 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime44);
        long long49 = dateTimeZone37.nextTransition((long) (short) -1);
        dateTimeParserBucket23.setZone(dateTimeZone37);
        java.lang.String str52 = dateTimeZone37.getName((long) 673);
        java.util.TimeZone timeZone53 = dateTimeZone37.toTimeZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plus(readableDuration56);
        boolean boolean59 = localDateTime55.equals((java.lang.Object) 52);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusHours((int) (byte) 0);
        boolean boolean65 = dateTime63.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks((int) 'a');
        boolean boolean70 = dateTime63.isAfter((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = dateTime69.toDateTime();
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        java.lang.String str73 = chronology72.toString();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.monthOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.weekyear();
        int int77 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        boolean boolean78 = dateTimeZone37.isLocalDateTimeGap(localDateTime75);
        org.joda.time.DateTime dateTime79 = dateTime15.toDateTime(dateTimeZone37);
        boolean boolean81 = dateTimeZone37.isStandardOffset(1645515073937L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime40", (dateTime15.compareTo(dateTime40) == 0) == dateTime15.equals(dateTime40));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0890");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology8.add(readablePeriod9, 0L, 603);
        org.joda.time.DurationField durationField13 = chronology8.minutes();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (long) 593, 50);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours((int) (byte) 0);
        boolean boolean24 = dateTime22.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = dateTime22.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime40.plusHours((int) (byte) 100);
        boolean boolean46 = dateTime44.isBefore((long) ' ');
        int int47 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime44);
        long long49 = dateTimeZone37.nextTransition((long) (short) -1);
        boolean boolean50 = dateTime22.equals((java.lang.Object) dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMillis(53);
        int[] intArray54 = localDateTime53.getValues();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.monthOfYear();
        long long57 = chronology8.set((org.joda.time.ReadablePartial) localDateTime53, 1645514977481L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime20", (dateTime3.compareTo(dateTime20) == 0) == dateTime3.equals(dateTime20));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        boolean boolean3 = dateTime1.isBefore((long) 241);
        org.joda.time.DateTime dateTime5 = dateTime1.minusHours(400);
        org.joda.time.DateTime dateTime7 = dateTime1.plus((long) 1052);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology18);
        org.joda.time.DateTime dateTime25 = dateTime1.plusMinutes(0);
        java.util.Date date26 = dateTime25.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime23", (dateTime25.compareTo(dateTime23) == 0) == dateTime25.equals(dateTime23));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0892");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology5, locale21, (java.lang.Integer) 9, 538);
        java.lang.String str28 = nameProvider0.getShortName(locale21, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale32 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        java.lang.String str34 = locale32.getCountry();
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str38 = nameProvider0.getName(locale32, "2022-02-22T07:27:52.224+00:00:00.052", "2022-02-22T07:00:28.528+00:00:00.052");
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        int int45 = dateTimeParserBucket44.getOffset();
        java.lang.Integer int46 = dateTimeParserBucket44.getPivotYear();
        java.util.Locale locale47 = dateTimeParserBucket44.getLocale();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.millisOfSecond();
        org.joda.time.DurationField durationField54 = dateTimeField53.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime66 = property65.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withYear(2022);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(chronology78);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone81);
        org.joda.time.DateTime dateTime84 = dateTime82.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property85 = dateTime82.centuryOfEra();
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str87 = locale86.getLanguage();
        java.lang.String str88 = property85.getAsText(locale86);
        java.lang.String str89 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime79, (-1), locale86);
        java.util.Locale.setDefault(locale86);
        java.lang.String str91 = dateTimeField61.getAsText((org.joda.time.ReadablePartial) localDateTime70, locale86);
        java.lang.String str92 = dateTimeField53.getAsShortText((long) 'a', locale86);
        java.lang.String str93 = locale47.getDisplayName(locale86);
        boolean boolean94 = locale86.hasExtensions();
        java.lang.String str97 = nameProvider0.getName(locale86, "2022-02-22T07:26:16.637Z", "etc/utc_499_2022-02-22T07:25:56.720+00:00:00.052");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime82", (dateTime6.compareTo(dateTime82) == 0) == dateTime6.equals(dateTime82));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0893");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.clockhourOfHalfday();
        int int9 = dateTimeField7.getLeapAmount(1586849174210L);
        java.lang.String str10 = dateTimeField7.toString();
        long long12 = dateTimeField7.roundHalfCeiling((-1510246800000L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.DateTime.Property property19 = dateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        long long24 = dateTimeZone20.convertLocalToUTC((long) 103, false, (long) 803);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.util.Locale locale35 = dateTimeParserBucket31.getLocale();
        java.lang.String str36 = dateTimeZone20.getShortName((long) 26757772, locale35);
        java.lang.String str37 = dateTimeField7.getAsText((long) 27154663, locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime15", (dateTime6.compareTo(dateTime15) == 0) == dateTime6.equals(dateTime15));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0894");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = dateTime23.toLocalDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.secondOfDay();
        int int28 = dateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        java.lang.String str35 = dateTimeField33.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfEvenCopy();
        int int41 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfDay(99);
        int int44 = localDateTime40.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.minus(readablePeriod45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.withMillisOfDay(371);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        int int55 = dateTimeParserBucket54.getOffset();
        java.lang.Object obj56 = dateTimeParserBucket54.saveState();
        dateTimeParserBucket54.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime.Property property64 = localDateTime62.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        boolean boolean67 = localDateTime65.isSupported(dateTimeFieldType66);
        int int68 = localDateTime60.get(dateTimeFieldType66);
        dateTimeParserBucket54.saveField(dateTimeFieldType66, 8);
        boolean boolean71 = localDateTime48.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology74);
        java.lang.String str76 = chronology74.toString();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType66.getField(chronology74);
        org.joda.time.DateTime.Property property81 = dateTime23.property(dateTimeFieldType66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime32", (dateTime18.compareTo(dateTime32) == 0) == dateTime18.equals(dateTime32));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0895");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.roundHalfCeilingCopy();
        int int5 = localDateTime4.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 350);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addToCopy(837);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(569);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.plusMinutes(496);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        int int44 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime46 = dateTime41.minusYears(20);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.plus(readablePeriod47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int53 = localDateTime50.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        int int56 = dateTime46.get(dateTimeFieldType55);
        int int57 = dateTime20.get(dateTimeFieldType55);
        boolean boolean58 = localDateTime4.isSupported(dateTimeFieldType55);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology61);
        java.lang.String str63 = chronology61.toString();
        org.joda.time.DurationField durationField64 = chronology61.seconds();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType55.getField(chronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime62", (dateTime10.compareTo(dateTime62) == 0) == dateTime10.equals(dateTime62));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0896");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusWeeks((-593));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime17.getField(0);
        boolean boolean22 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, 122);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime36.toDateTime(chronology43);
        org.joda.time.DateTime dateTime48 = dateTime36.minusDays(676);
        int int49 = dateTime36.getSecondOfMinute();
        org.joda.time.DateTime dateTime50 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime51 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime52 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime54 = dateTime36.minusMonths(8);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        java.lang.String str58 = dateTimeZone56.getID();
        long long62 = dateTimeZone56.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean64 = dateTimeZone56.isStandardOffset((long) 86399);
        long long66 = dateTimeZone56.previousTransition((long) 353);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField73 = null;
        dateTimeParserBucket72.saveField(dateTimeField73, (int) (short) 0);
        java.lang.Integer int76 = dateTimeParserBucket72.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket72.setZone(dateTimeZone77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.lang.String str82 = locale81.getDisplayName();
        dateTimeParserBucket72.saveField(dateTimeFieldType79, "97", locale81);
        dateTimeParserBucket72.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket72.setOffset(453);
        java.lang.Object obj88 = dateTimeParserBucket72.saveState();
        dateTimeParserBucket72.setPivotYear((java.lang.Integer) 466);
        org.joda.time.DateTimeZone dateTimeZone91 = dateTimeParserBucket72.getZone();
        long long93 = dateTimeZone56.getMillisKeepLocal(dateTimeZone91, (long) 686);
        boolean boolean94 = dateTime36.equals((java.lang.Object) dateTimeZone91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime44 and dateTime57", (dateTime44.compareTo(dateTime57) == 0) == dateTime44.equals(dateTime57));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0897");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours((int) (byte) 100);
        boolean boolean33 = dateTime31.isBefore((long) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime31.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 593);
        org.joda.time.DateTime dateTime41 = dateTime36.plusDays(837);
        org.joda.time.DateTime dateTime42 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withWeekyear((-1));
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology51.seconds();
        org.joda.time.DurationField durationField56 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.monthOfYear();
        int int59 = dateTime48.get(dateTimeField58);
        org.joda.time.DateTime dateTime61 = dateTime48.plusYears(2022);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime64 = dateTime48.withDurationAdded(readableDuration62, 555);
        org.joda.time.DateTime.Property property65 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime48.plusMinutes(712);
        org.joda.time.DateTime dateTime68 = dateTime48.withTimeAtStartOfDay();
        boolean boolean69 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology72);
        java.lang.String str74 = chronology72.toString();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        org.joda.time.Chronology chronology78 = chronology72.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField79 = chronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField80 = chronology72.yearOfEra();
        org.joda.time.DurationField durationField81 = chronology72.days();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(chronology72);
        boolean boolean83 = dateTime68.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime73", (dateTime27.compareTo(dateTime73) == 0) == dateTime27.equals(dateTime73));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0898");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Set<java.lang.Character> charSet11 = locale9.getExtensionKeys();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = property33.getAsText(locale34);
        java.lang.String str37 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, (-1), locale34);
        int int38 = dateTimeField16.getMaximumTextLength(locale34);
        java.lang.String str39 = locale34.getDisplayCountry();
        java.lang.String str40 = locale9.getDisplayLanguage(locale34);
        java.lang.String str41 = locale9.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 776, chronology3, locale9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime30", (dateTime4.compareTo(dateTime30) == 0) == dateTime4.equals(dateTime30));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0899");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        boolean boolean10 = dateTime8.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks((int) 'a');
        boolean boolean15 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        java.lang.String str24 = property22.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property22.getFieldType();
        int int26 = dateTime18.get(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology29, locale30, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DurationField durationField44 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology39.minutes();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale50, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        dateTimeParserBucket53.saveField(dateTimeFieldType57, "it", locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(673L, chronology39, locale59, (java.lang.Integer) 10, 453);
        java.lang.String str64 = locale30.getDisplayVariant(locale59);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime72.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.millisOfSecond();
        boolean boolean81 = dateTimeZone76.isLocalDateTimeGap(localDateTime78);
        java.util.Locale locale86 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale86);
        java.lang.String str88 = dateTimeZone76.getShortName((long) 44, locale86);
        java.lang.String str89 = locale30.getDisplayScript(locale86);
        java.lang.String str90 = dateTime18.toString("2035", locale30);
        java.lang.String str91 = property4.getAsShortText(locale30);
        java.util.Locale.setDefault(locale30);
        boolean boolean93 = locale30.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime68", (dateTime6.compareTo(dateTime68) == 0) == dateTime6.equals(dateTime68));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0900");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(2022);
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField21 = chronology17.seconds();
        org.joda.time.DurationField durationField22 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField25 = durationFieldType13.getField(chronology17);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        java.lang.String str30 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = dateTimeField31.getAsShortText((long) (byte) -1, locale33);
        java.util.Locale locale35 = locale33.stripExtensions();
        java.lang.String str36 = locale33.toLanguageTag();
        java.lang.String str37 = locale33.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology17, locale33, (java.lang.Integer) 992, 405);
        java.util.Locale locale41 = dateTimeParserBucket40.getLocale();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket40.getZone();
        org.joda.time.Chronology chronology43 = chronology9.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours((int) (byte) 0);
        boolean boolean52 = dateTime50.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = dateTime50.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekyear((-1));
        org.joda.time.DateTime dateTime72 = dateTime68.plusHours((int) (byte) 100);
        boolean boolean74 = dateTime72.isBefore((long) ' ');
        int int75 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime72);
        long long77 = dateTimeZone65.nextTransition((long) (short) -1);
        boolean boolean78 = dateTime50.equals((java.lang.Object) dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime82 = dateTime80.minusHours(271);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime82.getZone();
        boolean boolean85 = dateTimeZone83.isStandardOffset((long) 685);
        boolean boolean87 = dateTimeZone83.isStandardOffset(26848286L);
        java.lang.String str88 = dateTimeZone83.toString();
        java.lang.String str90 = dateTimeZone83.getName((long) 580);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((long) 228, dateTimeZone83);
        int int92 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localDateTime91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime48", (dateTime29.compareTo(dateTime48) == 0) == dateTime29.equals(dateTime48));
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0901");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        java.lang.String str7 = dateTimeField5.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        int int13 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime12.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        int int29 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.weekyear();
        boolean boolean42 = dateTimeField40.isLeap((long) 285);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        java.lang.String str49 = dateTimeField47.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfEvenCopy();
        int int55 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean58 = localDateTime54.equals((java.lang.Object) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks((int) (byte) -1);
        int[] intArray64 = new int[] { (-175220) };
        int int65 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDateTime60, intArray64);
        boolean boolean66 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime60);
        int int67 = localDateTime25.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime25.plus(readablePeriod68);
        org.joda.time.Chronology chronology70 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        java.util.Locale locale73 = java.util.Locale.UK;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusHours((int) (byte) 0);
        boolean boolean79 = dateTime77.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone81 = dateTimeZone80.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime77.toMutableDateTime(dateTimeZone80);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = dateTimeZone80.getName((long) (byte) 1, locale84);
        java.lang.String str87 = locale84.getUnicodeLocaleType("52");
        java.lang.String str88 = locale73.getDisplayLanguage(locale84);
        java.lang.String str89 = locale84.getScript();
        java.lang.String str90 = locale84.getScript();
        java.lang.String str91 = locale84.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket(41205444L, chronology70, locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime75", (dateTime4.compareTo(dateTime75) == 0) == dateTime4.equals(dateTime75));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0902");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        strSet17.clear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        boolean boolean24 = strSet17.contains((java.lang.Object) dateTimeZone23);
        java.util.stream.Stream<java.lang.String> strStream25 = strSet17.stream();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getMillisOfSecond();
        org.joda.time.DateTime.Property property32 = dateTime29.minuteOfHour();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property38 = dateTime35.centuryOfEra();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = locale33.getDisplayName(locale39);
        int int43 = property32.getMaximumTextLength(locale39);
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleAttributes();
        int int45 = strSet44.size();
        int int46 = strSet44.size();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime55.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.plusMillis(603);
        int int72 = localDateTime71.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plusSeconds(170);
        boolean boolean75 = localDateTime64.isAfter((org.joda.time.ReadablePartial) localDateTime74);
        boolean boolean76 = localDateTime51.isEqual((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime51.withYear(170);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property80 = localDateTime51.property(dateTimeFieldType79);
        boolean boolean81 = strSet44.remove((java.lang.Object) dateTimeFieldType79);
        java.util.Set<java.lang.String> strSet82 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray83 = strSet82.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator84 = strSet82.spliterator();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar89 = dateTime88.toGregorianCalendar();
        int int90 = dateTime88.getMillisOfSecond();
        org.joda.time.DateTime.Property property91 = dateTime88.minuteOfHour();
        org.joda.time.DateTime dateTime93 = dateTime88.withYear(832);
        boolean boolean94 = strSet82.equals((java.lang.Object) 832);
        boolean boolean95 = strSet44.retainAll((java.util.Collection<java.lang.String>) strSet82);
        boolean boolean96 = strSet44.isEmpty();
        boolean boolean97 = strSet17.containsAll((java.util.Collection<java.lang.String>) strSet44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime27", (dateTime22.compareTo(dateTime27) == 0) == dateTime22.equals(dateTime27));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0903");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime15.getZone();
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getOffset((long) 'x');
        boolean boolean23 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeZone19);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 92);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        java.lang.String str43 = dateTimeField41.getAsShortText((long) 28);
        dateTimeParserBucket31.saveField(dateTimeField41, 100);
        dateTimeParserBucket31.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime51.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean55 = dateTime51.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = property61.getAsText(locale62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        boolean boolean70 = dateTime68.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime68.toMutableDateTime(dateTimeZone71);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = dateTimeZone71.getName((long) (byte) 1, locale75);
        java.lang.String str77 = locale75.getScript();
        java.lang.String str78 = property61.getAsShortText(locale75);
        dateTimeParserBucket31.saveField(dateTimeFieldType54, "2022-02-22T07:26:55.083+00:00:00.052", locale75);
        dateTimeParserBucket5.saveField(dateTimeFieldType54, (-3027));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime49", (dateTime11.compareTo(dateTime49) == 0) == dateTime11.equals(dateTime49));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0904");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        dateTimeParserBucket6.setZone(dateTimeZone17);
        java.lang.String str29 = dateTimeZone17.toString();
        java.util.Locale locale33 = new java.util.Locale("java.io.IOException: ISOChronology[UTC]", "Property[secondOfDay]");
        java.lang.String str34 = dateTimeZone17.getName((long) 662, locale33);
        java.lang.String str35 = locale0.getDisplayScript(locale33);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean47 = dateTime46.isEqualNow();
        org.joda.time.DateTime.Property property48 = dateTime46.secondOfMinute();
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.util.Locale locale59 = dateTimeParserBucket55.getLocale();
        java.util.Locale.setDefault(category49, locale59);
        java.lang.String str61 = property48.getAsShortText(locale59);
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale59.getDisplayScript(locale62);
        java.lang.String str64 = locale59.getCountry();
        java.lang.String str65 = locale59.getDisplayName();
        java.util.Locale locale66 = locale59.stripExtensions();
        java.util.Locale locale69 = new java.util.Locale("0070-01-01T00:00:00.052", "2022-02-22T07:32:41.358+00:00:00.052");
        java.lang.String str70 = locale66.getDisplayVariant(locale69);
        boolean boolean71 = locale0.equals((java.lang.Object) str70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime39", (dateTime20.compareTo(dateTime39) == 0) == dateTime20.equals(dateTime39));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0905");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = dateTimeField4.getAsShortText((int) (byte) 10, locale20);
        long long24 = dateTimeField4.roundHalfFloor((long) 122);
        long long26 = dateTimeField4.roundHalfEven((long) 1);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime33.withChronology(chronology37);
        boolean boolean39 = localDateTime31.equals((java.lang.Object) dateTime38);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.lang.String str42 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime31, (int) '4', locale41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean45 = dateTimeZone43.isStandardOffset(354L);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) str42, dateTimeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime38", (dateTime11.compareTo(dateTime38) == 0) == dateTime11.equals(dateTime38));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0906");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property17.getAsText(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setLanguage("DEU");
        java.util.Locale.Builder builder28 = builder25.clear();
        java.util.Locale.Builder builder30 = builder28.removeUnicodeLocaleAttribute("Germany");
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property58 = dateTime55.centuryOfEra();
        org.joda.time.DurationField durationField59 = property58.getRangeDurationField();
        long long60 = property58.remainder();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.toLanguageTag();
        java.lang.String str65 = property58.getAsText(locale61);
        java.lang.String str66 = dateTimeZone50.getName(947L, locale61);
        java.util.Locale.Builder builder67 = builder30.setLocale(locale61);
        java.util.Set<java.lang.String> strSet68 = locale61.getUnicodeLocaleKeys();
        boolean boolean69 = strSet24.addAll((java.util.Collection<java.lang.String>) strSet68);
        strSet24.clear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology73);
        org.joda.time.DateTimeZone dateTimeZone75 = chronology73.getZone();
        org.joda.time.Chronology chronology76 = chronology73.withUTC();
        org.joda.time.Chronology chronology77 = chronology76.withUTC();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime82 = property81.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.plusMillis((int) (short) 1);
        long long90 = chronology76.set((org.joda.time.ReadablePartial) localDateTime88, 0L);
        org.joda.time.Chronology chronology91 = chronology76.withUTC();
        org.joda.time.DateTimeField dateTimeField92 = chronology76.clockhourOfHalfday();
        boolean boolean93 = strSet24.remove((java.lang.Object) chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime74", (dateTime14.compareTo(dateTime74) == 0) == dateTime14.equals(dateTime74));
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0907");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        boolean boolean13 = dateTimeField12.isLenient();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        int int18 = localDateTime15.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusWeeks(355);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds(5067);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds(731);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        java.lang.Integer int41 = dateTimeParserBucket37.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket37.setZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear((-1));
        org.joda.time.DateTime dateTime49 = dateTime45.plusHours((int) (byte) 100);
        boolean boolean51 = dateTime49.isBefore((long) ' ');
        int int52 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime49);
        dateTimeParserBucket31.setZone(dateTimeZone42);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category55, locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category55);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology60, locale61, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.millisOfSecond();
        org.joda.time.DurationField durationField74 = chronology70.seconds();
        org.joda.time.DurationField durationField75 = chronology70.minutes();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.era();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = chronology70.minutes();
        org.joda.time.Chronology chronology80 = null;
        java.util.Locale locale81 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology80, locale81, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField85 = null;
        dateTimeParserBucket84.saveField(dateTimeField85, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale90 = java.util.Locale.ROOT;
        dateTimeParserBucket84.saveField(dateTimeFieldType88, "it", locale90);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket94 = new org.joda.time.format.DateTimeParserBucket(673L, chronology70, locale90, (java.lang.Integer) 10, 453);
        java.lang.String str95 = locale61.getDisplayVariant(locale90);
        java.lang.String str96 = locale90.toLanguageTag();
        java.util.Locale.setDefault(category55, locale90);
        java.lang.String str98 = dateTimeZone42.getShortName((-62167962587697L), locale90);
        java.lang.String str99 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, 2020, locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime45", (dateTime3.compareTo(dateTime45) == 0) == dateTime3.equals(dateTime45));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0908");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int33 = localDateTime29.get(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        java.lang.String str38 = chronology36.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekOfWeekyear();
        boolean boolean40 = dateTimeFieldType32.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.yearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = property54.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = localDateTime59.getField(0);
        boolean boolean64 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.withMillisOfSecond(292);
        java.util.Locale locale67 = java.util.Locale.US;
        java.lang.String str68 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDateTime59, locale67);
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale67.getDisplayScript();
        java.lang.String str71 = dateTimeZone23.getName((-7786688833202958080L), locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime37", (dateTime26.compareTo(dateTime37) == 0) == dateTime26.equals(dateTime37));
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0909");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getName(1L);
        int int15 = dateTimeZone11.getOffsetFromLocal(445L);
        long long18 = dateTimeZone11.convertLocalToUTC(26765426L, true);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusDays(867);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        boolean boolean30 = localDateTime28.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int39 = localDateTime37.get(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale54.getDisplayName();
        dateTimeParserBucket45.saveField(dateTimeFieldType52, "97", locale54);
        int int57 = localDateTime37.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime33.withField(dateTimeFieldType52, 12);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusHours((int) (byte) 0);
        boolean boolean68 = dateTime66.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusWeeks((int) 'a');
        boolean boolean73 = dateTime66.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = dateTime72.toDateTime();
        org.joda.time.Chronology chronology75 = dateTime74.getChronology();
        java.lang.String str76 = chronology75.toString();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DurationField durationField78 = chronology75.minutes();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.minuteOfHour();
        org.joda.time.DurationField durationField80 = durationFieldType62.getField(chronology75);
        org.joda.time.DateTimeZone dateTimeZone81 = chronology75.getZone();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType52.getField(chronology75);
        int int83 = localDateTime20.get(dateTimeFieldType52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime64", (dateTime3.compareTo(dateTime64) == 0) == dateTime3.equals(dateTime64));
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0910");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int5 = localDateTime1.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        boolean boolean12 = dateTimeFieldType4.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField14 = dateTimeField13.getRangeDurationField();
        org.joda.time.DurationField durationField15 = dateTimeField13.getRangeDurationField();
        java.lang.String str17 = dateTimeField13.getAsShortText((long) 289);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.clear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) (byte) 0);
        java.util.Date date35 = dateTime32.toDate();
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfMonth();
        org.joda.time.DateTime.Property property37 = dateTime32.dayOfMonth();
        java.lang.String str38 = property37.getAsString();
        boolean boolean39 = localDateTime30.equals((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.era();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = chronology44.minutes();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        dateTimeParserBucket58.saveField(dateTimeFieldType62, "it", locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(673L, chronology44, locale64, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology69, locale70, (java.lang.Integer) 597);
        java.lang.String str73 = property37.getAsText(locale70);
        java.util.Locale.Builder builder74 = builder21.setLocale(locale70);
        java.lang.String str75 = locale70.getVariant();
        java.lang.String str76 = locale70.getDisplayName();
        java.util.Locale locale77 = locale70.stripExtensions();
        java.lang.String str78 = dateTimeField13.getAsText(1645514834710L, locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime32", (dateTime9.compareTo(dateTime32) == 0) == dateTime9.equals(dateTime32));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0911");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) 630);
        org.joda.time.LocalDateTime localDateTime6 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        java.lang.String str11 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.centuryOfEra();
        org.joda.time.DurationField durationField15 = chronology9.minutes();
        boolean boolean16 = localDateTime6.equals((java.lang.Object) chronology9);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minusSeconds(0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        dateTimeParserBucket24.setZone(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours((int) (byte) 0);
        boolean boolean51 = dateTime49.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks((int) 'a');
        boolean boolean56 = dateTime49.isAfter((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime();
        org.joda.time.DateTime dateTime59 = dateTime55.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundHalfEvenCopy();
        java.lang.String str65 = property63.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property63.getFieldType();
        int int67 = dateTime59.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime59.withMillisOfDay(446);
        org.joda.time.DateTime dateTime71 = dateTime59.plusWeeks(26939332);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear(764);
        int int74 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime77 = dateTime73.withDurationAdded(readableDuration75, 57653);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime43", (dateTime10.compareTo(dateTime43) == 0) == dateTime10.equals(dateTime43));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0912");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone34);
        boolean boolean36 = dateTimeZone34.isFixed();
        long long39 = dateTimeZone34.adjustOffset(2846437113600010L, false);
        java.lang.String str41 = dateTimeZone34.getShortName(783L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((-1514764799755L), dateTimeZone34);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField58 = null;
        dateTimeParserBucket57.saveField(dateTimeField58, (int) (short) 0);
        java.lang.Integer int61 = dateTimeParserBucket57.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket57.setZone(dateTimeZone62);
        dateTimeParserBucket48.setZone(dateTimeZone62);
        java.util.TimeZone timeZone65 = dateTimeZone62.toTimeZone();
        long long67 = dateTimeZone62.convertUTCToLocal((long) 441);
        long long69 = dateTimeZone34.getMillisKeepLocal(dateTimeZone62, 635L);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        java.lang.String str73 = dateTimeZone71.getID();
        long long77 = dateTimeZone71.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean79 = dateTimeZone71.isStandardOffset((long) 86399);
        long long81 = dateTimeZone62.getMillisKeepLocal(dateTimeZone71, (-1510245229552L));
        java.util.Locale locale85 = new java.util.Locale("2022-02-22T07:27:07.097+00:00:00.052", "1970-01-01T00:00:00.655");
        java.lang.String str86 = dateTimeZone62.getShortName((long) 208, locale85);
        java.lang.String str87 = dateTimeZone62.getID();
        org.joda.time.Chronology chronology88 = chronology3.withZone(dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime72", (dateTime4.compareTo(dateTime72) == 0) == dateTime4.equals(dateTime72));
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0913");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        java.lang.String str13 = dateTimeField10.getAsShortText((long) 1);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        dateTimeParserBucket28.saveField(dateTimeFieldType32, "it", locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology18, locale34, (java.lang.Integer) 9, 538);
        java.lang.String str39 = dateTimeField10.getAsText(774, locale34);
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleKeys();
        strSet40.clear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime43.toMutableDateTime();
        int int47 = dateTime43.getMillisOfSecond();
        org.joda.time.DateTime dateTime49 = dateTime43.plusYears((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.minusYears(676);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMillis(569);
        int int54 = dateTime51.getMillisOfDay();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) dateTime51);
        org.joda.time.DateTime dateTime57 = dateTime51.minusMonths(926);
        boolean boolean58 = strSet40.contains((java.lang.Object) dateTime51);
        org.joda.time.DateTime.Property property59 = dateTime51.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime43", (dateTime19.compareTo(dateTime43) == 0) == dateTime19.equals(dateTime43));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0914");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis(484);
        int int19 = localDateTime16.getEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minus(readablePeriod20);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket30.getZone();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone47);
        boolean boolean49 = dateTimeZone47.isFixed();
        long long52 = dateTimeZone47.adjustOffset(2846437113600010L, false);
        java.lang.String str54 = dateTimeZone47.getShortName(783L);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((-1514764799755L), dateTimeZone47);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology66, locale67, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField71 = null;
        dateTimeParserBucket70.saveField(dateTimeField71, (int) (short) 0);
        java.lang.Integer int74 = dateTimeParserBucket70.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket70.setZone(dateTimeZone75);
        dateTimeParserBucket61.setZone(dateTimeZone75);
        java.util.TimeZone timeZone78 = dateTimeZone75.toTimeZone();
        long long80 = dateTimeZone75.convertUTCToLocal((long) 441);
        long long82 = dateTimeZone47.getMillisKeepLocal(dateTimeZone75, 635L);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        java.lang.String str86 = dateTimeZone84.getID();
        long long90 = dateTimeZone84.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean92 = dateTimeZone84.isStandardOffset((long) 86399);
        long long94 = dateTimeZone75.getMillisKeepLocal(dateTimeZone84, (-1510245229552L));
        java.util.TimeZone timeZone95 = dateTimeZone75.toTimeZone();
        long long97 = dateTimeZone75.nextTransition(0L);
        org.joda.time.DateTime dateTime98 = new org.joda.time.DateTime((long) 976, dateTimeZone75);
        org.joda.time.DateTime dateTime99 = localDateTime21.toDateTime(dateTimeZone75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime85", (dateTime3.compareTo(dateTime85) == 0) == dateTime3.equals(dateTime85));
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0915");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean5 = dateTime3.isSupported(dateTimeFieldType4);
        boolean boolean7 = dateTime3.isEqual(947L);
        org.joda.time.DateTime dateTime9 = dateTime3.minusHours(762);
        int int10 = dateTime3.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        long long19 = dateTimeParserBucket17.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        int int25 = dateTime23.getMillisOfSecond();
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = property32.getAsText(locale33);
        java.lang.String str36 = locale27.getDisplayName(locale33);
        int int37 = property26.getMaximumTextLength(locale33);
        java.util.Set<java.lang.String> strSet38 = locale33.getUnicodeLocaleAttributes();
        int int39 = strSet38.size();
        boolean boolean40 = dateTimeParserBucket17.restoreState((java.lang.Object) int39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        java.util.Date date45 = dateTime42.toDate();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfMonth();
        org.joda.time.DateTime.Property property47 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime49 = dateTime42.plusMonths(19);
        org.joda.time.DateTime dateTime51 = dateTime42.plusHours(100);
        org.joda.time.DateTime.Property property52 = dateTime42.dayOfYear();
        int int53 = property52.getMaximumValueOverall();
        boolean boolean54 = dateTimeParserBucket17.restoreState((java.lang.Object) property52);
        org.joda.time.DateTime dateTime55 = property52.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withWeekyear((-1));
        org.joda.time.DateTime dateTime61 = dateTime57.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.plus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime67 = dateTime63.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        java.lang.String str70 = dateTimeZone68.toString();
        boolean boolean72 = dateTimeZone68.isStandardOffset((long) 170);
        org.joda.time.DateTime dateTime73 = dateTime67.toDateTime(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime67.withZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = dateTime55.toDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        boolean boolean81 = dateTime79.isBefore(readableInstant80);
        int int82 = dateTimeZone75.getOffset(readableInstant80);
        org.joda.time.DateTime dateTime83 = dateTime3.withZone(dateTimeZone75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime77", (dateTime55.compareTo(dateTime77) == 0) == dateTime55.equals(dateTime77));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0916");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        int int16 = localDateTime14.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withPeriodAdded(readablePeriod17, 950);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withWeekyear(99);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMaximumValue();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays(147);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime30.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekyear((-1));
        org.joda.time.DateTime dateTime52 = dateTime48.plusHours((int) (byte) 100);
        boolean boolean54 = dateTime52.isBefore((long) ' ');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime52);
        long long57 = dateTimeZone45.nextTransition((long) (short) -1);
        boolean boolean58 = dateTime30.equals((java.lang.Object) dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone45);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        int int67 = dateTime63.getMillisOfSecond();
        org.joda.time.DateTime.Property property68 = dateTime63.centuryOfEra();
        org.joda.time.DateTime dateTime69 = property68.roundCeilingCopy();
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology71, locale72, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        java.util.Locale locale77 = dateTimeParserBucket75.getLocale();
        boolean boolean78 = property68.equals((java.lang.Object) locale77);
        org.joda.time.DateTime dateTime79 = property68.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int85 = localDateTime81.get(dateTimeFieldType84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime81.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology90 = localDateTime89.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int92 = localDateTime89.get(dateTimeFieldType91);
        org.joda.time.LocalDateTime.Property property93 = localDateTime81.property(dateTimeFieldType91);
        org.joda.time.DateTime.Property property94 = dateTime79.property(dateTimeFieldType91);
        int int95 = dateTime60.get(dateTimeFieldType91);
        boolean boolean96 = localDateTime23.isSupported(dateTimeFieldType91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0917");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(457087L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) (byte) 0);
        boolean boolean11 = dateTime9.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        boolean boolean16 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        int int22 = dateTime20.getMonthOfYear();
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.minusMinutes(771);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology29.millis();
        java.lang.String str33 = chronology29.toString();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime25.toMutableDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime.Property property39 = dateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property54 = dateTime51.centuryOfEra();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = property54.getAsText(locale55);
        java.lang.String str58 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime48, (-1), locale55);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = dateTimeField44.getAsShortText((int) (byte) 10, locale60);
        java.lang.String str63 = property39.getAsShortText(locale60);
        java.lang.String str64 = locale60.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(1644910187453L, chronology29, locale60, (java.lang.Integer) 377, 942);
        long long69 = dateTimeParserBucket67.computeMillis(false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime34", (dateTime25.compareTo(mutableDateTime34) == 0) == dateTime25.equals(mutableDateTime34));
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        int int9 = dateTime5.getDayOfYear();
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket19.getZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra(7);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfDay(4);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime50.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withWeekyear((-1));
        org.joda.time.DateTime dateTime59 = dateTime55.withMillisOfDay(0);
        int int60 = dateTime59.getDayOfYear();
        boolean boolean61 = mutableDateTime53.isBefore((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) mutableDateTime53);
        int int63 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime46.plusMinutes(26796605);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyearOfCentury();
        java.lang.String str72 = dateTimeField70.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundHalfEvenCopy();
        int int78 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = localDateTime77.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime77);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = property81.addToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfCentury();
        org.joda.time.DurationField durationField86 = chronology84.days();
        org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.now(chronology84);
        int[] intArray88 = localDateTime87.getValues();
        int int89 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime46, intArray88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime69", (dateTime1.compareTo(dateTime69) == 0) == dateTime1.equals(dateTime69));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0919");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        java.lang.String str5 = dateTimeField4.toString();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        java.lang.Integer int21 = dateTimeParserBucket17.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket17.setZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((-1));
        org.joda.time.DateTime dateTime29 = dateTime25.plusHours((int) (byte) 100);
        boolean boolean31 = dateTime29.isBefore((long) ' ');
        int int32 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        dateTimeParserBucket11.setZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket11.getZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.hourOfDay();
        boolean boolean43 = dateTimeParserBucket11.restoreState((java.lang.Object) dateTimeField42);
        long long44 = dateTimeParserBucket11.computeMillis();
        int int45 = dateTimeParserBucket11.getOffset();
        int int46 = dateTimeParserBucket11.getOffset();
        java.lang.Object obj47 = dateTimeParserBucket11.saveState();
        dateTimeParserBucket11.setOffset((java.lang.Integer) 328);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfSecond();
        org.joda.time.DurationField durationField56 = chronology52.seconds();
        org.joda.time.DurationField durationField57 = chronology52.minutes();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.era();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.minuteOfHour();
        dateTimeParserBucket11.saveField(dateTimeField59, 10278964);
        java.lang.String str62 = dateTimeField59.toString();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(chronology71);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property78 = dateTime75.centuryOfEra();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.lang.String str80 = locale79.getLanguage();
        java.lang.String str81 = property78.getAsText(locale79);
        java.lang.String str82 = dateTimeField68.getAsText((org.joda.time.ReadablePartial) localDateTime72, (-1), locale79);
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.lang.String str85 = locale84.getLanguage();
        java.lang.String str86 = dateTimeField68.getAsShortText((int) (byte) 10, locale84);
        java.lang.String str87 = locale84.getDisplayName();
        java.util.Set<java.lang.String> strSet88 = locale84.getUnicodeLocaleAttributes();
        java.util.Locale locale89 = java.util.Locale.ITALIAN;
        java.lang.String str90 = locale84.getDisplayName(locale89);
        java.lang.String str91 = locale84.toLanguageTag();
        java.lang.String str92 = dateTimeField59.getAsText((long) 26822670, locale84);
        java.lang.String str93 = locale84.getScript();
        int int94 = dateTimeField4.getMaximumShortTextLength(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0920");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(902);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(31);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(889);
        int int44 = dateTime43.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime.Property property47 = dateTime46.year();
        org.joda.time.LocalDateTime localDateTime48 = dateTime46.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMinutes(576);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDateTime50.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int58 = localDateTime54.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology61);
        java.lang.String str63 = chronology61.toString();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekOfWeekyear();
        boolean boolean65 = dateTimeFieldType57.isSupported(chronology61);
        org.joda.time.DateTimeField dateTimeField66 = chronology61.secondOfMinute();
        org.joda.time.DurationField durationField67 = chronology61.minutes();
        org.joda.time.DurationField durationField68 = chronology61.hours();
        boolean boolean69 = dateTimeFieldType52.isSupported(chronology61);
        org.joda.time.DateTime dateTime70 = dateTime43.toDateTime(chronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime62", (dateTime24.compareTo(dateTime62) == 0) == dateTime24.equals(dateTime62));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0921");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDateTime13.toDateTime(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getShortName((long) 840);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        boolean boolean24 = dateTimeZone23.isFixed();
        long long26 = dateTimeZone17.getMillisKeepLocal(dateTimeZone23, (long) 26757);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        int int33 = localDateTime30.getMillisOfDay();
        boolean boolean34 = dateTimeZone23.isLocalDateTimeGap(localDateTime30);
        int int35 = localDateTime30.getMillisOfDay();
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.util.Locale locale46 = dateTimeParserBucket42.getLocale();
        java.util.Locale.setDefault(category36, locale46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property53 = dateTime50.centuryOfEra();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = property53.getAsText(locale54);
        java.lang.String str57 = locale48.getDisplayName(locale54);
        java.lang.String str58 = locale54.getISO3Language();
        java.util.Locale.setDefault(category36, locale54);
        java.lang.String str60 = locale54.getVariant();
        java.lang.String str61 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime50", (dateTime6.compareTo(dateTime50) == 0) == dateTime6.equals(dateTime50));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0922");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        dateTimeParserBucket5.setOffset(1);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 180);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime25, (-1), locale32);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = dateTimeField21.getAsShortText((int) (byte) 10, locale37);
        long long41 = dateTimeField21.roundHalfFloor((long) 122);
        long long43 = dateTimeField21.roundHalfEven((long) 1);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        java.util.GregorianCalendar gregorianCalendar51 = dateTime50.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime50.withChronology(chronology54);
        boolean boolean56 = localDateTime48.equals((java.lang.Object) dateTime55);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.lang.String str59 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) '4', locale58);
        dateTimeParserBucket5.saveField(dateTimeField21, 195);
        long long64 = dateTimeField21.add((-1640073600000L), (-1510244900979L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime55", (dateTime50.compareTo(dateTime55) == 0) == dateTime50.equals(dateTime55));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0923");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology3.getZone();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.minusYears(20);
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        java.util.Date date36 = dateTime33.toDate();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime33.dayOfMonth();
        int int39 = property31.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime41 = property31.addToCopy(52L);
        org.joda.time.DateTimeField dateTimeField42 = property31.getField();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readableDuration54);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = property61.getAsText(locale62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        boolean boolean70 = dateTime68.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime68.toMutableDateTime(dateTimeZone71);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = dateTimeZone71.getName((long) (byte) 1, locale75);
        java.lang.String str77 = locale75.getScript();
        java.lang.String str78 = property61.getAsShortText(locale75);
        int int79 = property61.getMinimumValue();
        java.util.Locale locale80 = java.util.Locale.UK;
        java.lang.String str81 = property61.getAsText(locale80);
        java.lang.String str82 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 181, chronology3, locale80, (java.lang.Integer) 214);
        java.util.Set<java.lang.String> strSet85 = locale80.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime21", (dateTime4.compareTo(dateTime21) == 0) == dateTime4.equals(dateTime21));
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0924");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property9 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(558);
        boolean boolean12 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime14 = dateTime6.minusSeconds(490);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime16.year();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property24 = dateTime21.centuryOfEra();
        org.joda.time.DateTime dateTime26 = dateTime21.minusYears(558);
        boolean boolean27 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime29 = dateTime21.minus((long) 597);
        boolean boolean30 = dateTime6.equals((java.lang.Object) 597);
        org.joda.time.DateTime dateTime32 = dateTime6.withMillisOfDay(375);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withPeriodAdded(readablePeriod33, 284);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        dateTimeParserBucket41.saveField(dateTimeFieldType45, "it", locale47);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField55 = null;
        dateTimeParserBucket54.saveField(dateTimeField55, (int) (short) 0);
        java.lang.Integer int58 = dateTimeParserBucket54.getOffsetInteger();
        org.joda.time.Chronology chronology59 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekOfWeekyear();
        boolean boolean61 = dateTimeFieldType45.isSupported(chronology59);
        org.joda.time.DurationField durationField62 = chronology59.weekyears();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyearOfCentury();
        java.lang.String str69 = dateTimeField67.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundHalfEvenCopy();
        int int75 = dateTimeField67.getMinimumValue((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = localDateTime74.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime74);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime80 = property78.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusDays((int) '#');
        int[] intArray84 = chronology59.get((org.joda.time.ReadablePartial) localDateTime82, 163296000435L);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField86 = chronology59.monthOfYear();
        org.joda.time.DateTime dateTime87 = dateTime35.toDateTime(chronology59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime66", (dateTime1.compareTo(dateTime66) == 0) == dateTime1.equals(dateTime66));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0925");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime3.toDateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology33.seconds();
        org.joda.time.DurationField durationField38 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.era();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology33.clockhourOfDay();
        org.joda.time.DurationField durationField42 = dateTimeField41.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime49 = property46.addWrapFieldToCopy(28);
        int int50 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime56 = property53.withMaximumValue();
        int int57 = localDateTime56.getMonthOfYear();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale69 = java.util.Locale.ROOT;
        dateTimeParserBucket63.saveField(dateTimeFieldType67, "it", locale69);
        java.lang.String str71 = dateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, locale69);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = localDateTime56.getFields();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime56.minusYears(826);
        int int75 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int83 = dateTime81.get(dateTimeFieldType82);
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType82.getDurationType();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime56.withFieldAdded(durationFieldType84, 59);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime56.plusMonths(890);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime79", (dateTime1.compareTo(dateTime79) == 0) == dateTime1.equals(dateTime79));
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0926");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology3.months();
        java.util.Locale locale9 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        java.lang.String str10 = locale9.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 385, chronology3, locale9);
        long long14 = dateTimeParserBucket11.computeMillis(false, "2022-02-22T07:28:30.682+00:00:00.052");
        dateTimeParserBucket11.setOffset(26950095);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours((int) (byte) 0);
        java.util.Date date21 = dateTime18.toDate();
        org.joda.time.DateTime.Property property22 = dateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.era();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int34 = localDateTime32.get(dateTimeFieldType33);
        int int35 = localDateTime27.get(dateTimeFieldType33);
        java.lang.String str36 = dateTimeFieldType33.getName();
        org.joda.time.DateTime.Property property37 = dateTime18.property(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType33.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) (byte) 0);
        boolean boolean45 = dateTime43.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime43.toString(dateTimeFormatter46);
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("20");
        java.lang.String str53 = locale49.getDisplayVariant(locale52);
        java.lang.String str54 = dateTime43.toString("1969", locale49);
        org.joda.time.DateTime.Property property55 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime43.withTimeAtStartOfDay();
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean58 = locale57.hasExtensions();
        java.util.Calendar calendar59 = dateTime43.toCalendar(locale57);
        dateTimeParserBucket11.saveField(dateTimeFieldType33, "1970-01-01T00:00:26.809+00:00:00.052", locale57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime18", (dateTime4.compareTo(dateTime18) == 0) == dateTime4.equals(dateTime18));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0927");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(267535);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        java.util.Date date14 = dateTime11.toDate();
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfMonth();
        java.lang.String str16 = property15.getAsString();
        int int17 = property15.getMaximumValue();
        int int18 = property15.getMinimumValueOverall();
        org.joda.time.DateTime dateTime19 = property15.roundHalfCeilingCopy();
        int int20 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.minusMinutes(563);
        org.joda.time.DateTime dateTime24 = dateTime22.withYear(92);
        org.joda.time.LocalDateTime localDateTime25 = dateTime22.toLocalDateTime();
        int int26 = dateTime22.getMillisOfDay();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime40.plusHours((int) (byte) 100);
        boolean boolean46 = dateTime44.isBefore((long) ' ');
        int int47 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone37.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        boolean boolean55 = dateTime53.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        boolean boolean60 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property61 = dateTime53.secondOfDay();
        org.joda.time.DateTime dateTime62 = property61.withMaximumValue();
        boolean boolean63 = dateTimeZone37.equals((java.lang.Object) property61);
        java.lang.String str64 = property61.toString();
        org.joda.time.DateTime dateTime65 = property61.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        boolean boolean67 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime65);
        long long68 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime11", (dateTime3.compareTo(dateTime11) == 0) == dateTime3.equals(dateTime11));
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0928");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType17.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        boolean boolean39 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property55 = dateTime52.centuryOfEra();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime49, (-1), locale56);
        java.util.Calendar calendar60 = dateTime40.toCalendar(locale56);
        java.lang.String str61 = locale56.getDisplayScript();
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.setLanguageTag("coreano");
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder69 = builder68.clear();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = locale56.getDisplayScript(locale70);
        int int72 = dateTimeField28.getMaximumShortTextLength(locale56);
        java.util.Locale.setDefault(locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0929");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.lang.String str16 = property15.getAsString();
        boolean boolean17 = localDateTime8.equals((java.lang.Object) property15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.toLanguageTag();
        int int22 = property15.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        java.util.Date date27 = dateTime24.toDate();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfMonth();
        org.joda.time.DateTime.Property property29 = dateTime24.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = property29.getAsText(locale30);
        java.lang.String str33 = locale30.getDisplayCountry();
        int int34 = property15.getMaximumTextLength(locale30);
        java.util.Set<java.lang.String> strSet35 = locale30.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray36 = strSet35.toArray();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.DurationField durationField43 = chronology40.months();
        java.util.Locale locale46 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        java.lang.String str47 = locale46.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 385, chronology40, locale46);
        long long51 = dateTimeParserBucket48.computeMillis(false, "2022-02-22T07:28:30.682+00:00:00.052");
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket48.getChronology();
        boolean boolean54 = strSet35.equals((java.lang.Object) chronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime41", (dateTime10.compareTo(dateTime41) == 0) == dateTime10.equals(dateTime41));
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0930");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology3.months();
        java.util.Locale locale9 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        java.lang.String str10 = locale9.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 385, chronology3, locale9);
        long long13 = dateTimeParserBucket11.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int) 'a');
        boolean boolean25 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 603, chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy((-592L));
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property38.addWrapFieldToCopy(208);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays(635);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.monthOfYear();
        org.joda.time.Interval interval45 = property44.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property44.getFieldType();
        boolean boolean47 = localDateTime32.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfSecond();
        org.joda.time.DurationField durationField56 = chronology52.seconds();
        org.joda.time.DurationField durationField57 = chronology52.minutes();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.era();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField60 = chronology52.months();
        java.lang.String str61 = chronology52.toString();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime74 = property73.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYear((int) (short) 100);
        int int77 = localDateTime69.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        int int78 = dateTimeField67.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69);
        long long81 = dateTimeField67.set(1L, 837);
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.lang.String str84 = dateTimeField67.getAsText((long) 7, locale83);
        java.lang.String str85 = locale83.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket(1645514805327L, chronology52, locale83);
        java.util.Set<java.lang.Character> charSet87 = locale83.getExtensionKeys();
        dateTimeParserBucket11.saveField(dateTimeFieldType46, "2022-02-22T07:32:04.735Z", locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime16", (dateTime4.compareTo(dateTime16) == 0) == dateTime4.equals(dateTime16));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0931");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology3.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 26751806, chronology3);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(537);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray41 = localDateTime40.getValues();
        int[] intArray43 = dateTimeField32.addWrapField((org.joda.time.ReadablePartial) localDateTime37, 0, intArray41, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(28);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 569);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        boolean boolean59 = localDateTime57.isSupported(dateTimeFieldType58);
        int int60 = localDateTime52.get(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime52.withYear(635);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.halfdayOfDay();
        org.joda.time.DurationField durationField69 = chronology65.millis();
        org.joda.time.DurationFieldType durationFieldType70 = durationField69.getType();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime50.withFieldAdded(durationFieldType70, 239);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime37.withFieldAdded(durationFieldType70, 93);
        org.joda.time.DateTime dateTime77 = dateTime26.withFieldAdded(durationFieldType70, 616);
        int int78 = dateTime77.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime30", (dateTime11.compareTo(dateTime30) == 0) == dateTime11.equals(dateTime30));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0932");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = null;
        dateTimeParserBucket9.saveField(dateTimeField10, (int) (short) 0);
        java.lang.Integer int13 = dateTimeParserBucket9.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket9.setZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.plusHours((int) (byte) 100);
        boolean boolean23 = dateTime21.isBefore((long) ' ');
        int int24 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone14.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        boolean boolean37 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime30.secondOfDay();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        boolean boolean40 = dateTimeZone14.equals((java.lang.Object) property38);
        java.lang.String str41 = property38.toString();
        org.joda.time.DateTime dateTime43 = property38.addToCopy(902);
        org.joda.time.DateTime dateTime45 = dateTime43.minusSeconds(31);
        org.joda.time.DateTime dateTime47 = dateTime43.plusSeconds(384);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyearOfCentury();
        java.lang.String str54 = dateTimeField52.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundHalfEvenCopy();
        int int60 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = localDateTime59.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusHours(980);
        int int67 = localDateTime64.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.minusWeeks((-593));
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.withWeekyear((-1));
        org.joda.time.DateTime dateTime82 = dateTime78.withMillisOfDay(0);
        org.joda.time.DateTime dateTime83 = localDateTime76.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean85 = dateTime83.isEqual((-1136820000L));
        org.joda.time.DateTime dateTime87 = dateTime83.withYear(26776135);
        org.joda.time.DateTime dateTime88 = localDateTime64.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime89 = dateTime47.withFields((org.joda.time.ReadablePartial) localDateTime64);
        int int90 = property2.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime51", (dateTime17.compareTo(dateTime51) == 0) == dateTime17.equals(dateTime51));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        boolean boolean35 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date36 = dateTime5.toDate();
        org.joda.time.DateTime dateTime38 = dateTime5.plusYears(575);
        org.joda.time.DateTime.Property property39 = dateTime5.monthOfYear();
        org.joda.time.DateTime.Property property40 = dateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime48.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime48.getZone();
        boolean boolean53 = dateTimeZone52.isFixed();
        int int55 = dateTimeZone52.getOffset((long) 'x');
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plus(readableDuration59);
        boolean boolean61 = dateTimeZone52.isLocalDateTimeGap(localDateTime60);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology63, locale64, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField68 = null;
        dateTimeParserBucket67.saveField(dateTimeField68, (int) (short) 0);
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology72, locale73, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField77 = null;
        dateTimeParserBucket76.saveField(dateTimeField77, (int) (short) 0);
        java.lang.Integer int80 = dateTimeParserBucket76.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket76.setZone(dateTimeZone81);
        dateTimeParserBucket67.setZone(dateTimeZone81);
        boolean boolean84 = dateTimeZone81.isFixed();
        boolean boolean85 = dateTimeZone81.isFixed();
        long long87 = dateTimeZone81.convertUTCToLocal((-1L));
        long long89 = dateTimeZone52.getMillisKeepLocal(dateTimeZone81, 3600000L);
        boolean boolean90 = dateTime5.equals((java.lang.Object) long89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime44", (dateTime1.compareTo(dateTime44) == 0) == dateTime1.equals(dateTime44));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0934");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        dateTimeParserBucket6.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        dateTimeParserBucket6.saveField(dateTimeField16, 100);
        dateTimeParserBucket6.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 26757772);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.halfdayOfDay();
        org.joda.time.DurationField durationField34 = chronology30.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.secondOfDay();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DurationField durationField37 = chronology30.weeks();
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        java.util.Locale.setDefault(category38, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology30, locale40, (java.lang.Integer) 407, 195);
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = locale40.getDisplayLanguage(locale47);
        java.lang.String str50 = dateTimeZone23.getShortName((long) 26813508, locale47);
        java.lang.String str52 = dateTimeZone23.getShortName(26833067L);
        java.lang.String str54 = dateTimeZone23.getNameKey((long) 1950);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(2397228334015455L, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar60 = dateTime59.toGregorianCalendar();
        int int61 = dateTime59.getMillisOfSecond();
        org.joda.time.DateTime.Property property62 = dateTime59.minuteOfHour();
        org.joda.time.DateTime dateTime64 = dateTime59.withDayOfMonth(19);
        int int65 = dateTime59.getMinuteOfDay();
        int int66 = dateTime59.getEra();
        org.joda.time.DateTime dateTime68 = dateTime59.withCenturyOfEra(647);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime71 = dateTime59.withDurationAdded(readableDuration69, 126);
        boolean boolean72 = dateTime55.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime57", (dateTime31.compareTo(dateTime57) == 0) == dateTime31.equals(dateTime57));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0935");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 26757772);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology29.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.secondOfDay();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DurationField durationField36 = chronology29.weeks();
        java.util.Locale.Category category37 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.util.Locale.setDefault(category37, locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology29, locale39, (java.lang.Integer) 407, 195);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale39.getDisplayLanguage(locale46);
        java.lang.String str49 = dateTimeZone22.getShortName((long) 26813508, locale46);
        java.lang.String str51 = dateTimeZone22.getShortName(26833067L);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone22);
        long long55 = dateTimeZone22.adjustOffset(0L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime52", (dateTime30.compareTo(dateTime52) == 0) == dateTime30.equals(dateTime52));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0936");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear((int) (short) 100);
        int int25 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        long long29 = dateTimeField15.set(1L, 837);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = dateTimeField15.getAsText((long) 7, locale31);
        org.joda.time.DateTime dateTime33 = property8.setCopy("999", locale31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusWeeks(22);
        int int43 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTime dateTime44 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime45 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMillis(26946888);
        org.joda.time.DateTime.Property property48 = dateTime47.weekyear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.halfdayOfDay();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        int int59 = dateTimeField55.getMaximumShortTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime.Property property65 = localDateTime61.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime67 = property65.addToCopy(646);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withYearOfEra(331);
        int int70 = localDateTime67.getDayOfMonth();
        org.joda.time.DateTime dateTime71 = localDateTime67.toDateTime();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology75);
        java.lang.String str77 = chronology75.toString();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.dayOfWeek();
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology81, locale82, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField86 = null;
        dateTimeParserBucket85.saveField(dateTimeField86, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale91 = java.util.Locale.ROOT;
        dateTimeParserBucket85.saveField(dateTimeFieldType89, "it", locale91);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology75, locale91, (java.lang.Integer) 9, 538);
        java.lang.String str96 = locale91.getLanguage();
        java.lang.String str97 = locale91.getScript();
        java.lang.String str98 = dateTimeField55.getAsText((org.joda.time.ReadablePartial) localDateTime67, locale91);
        int int99 = property48.getMaximumTextLength(locale91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime52", (dateTime1.compareTo(dateTime52) == 0) == dateTime1.equals(dateTime52));
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateTime1.isBefore(readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(57);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        dateTimeParserBucket14.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 28);
        dateTimeParserBucket14.saveField(dateTimeField24, 100);
        dateTimeParserBucket14.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket14.saveField(dateTimeFieldType31, 950);
        org.joda.time.DateTime.Property property34 = dateTime1.property(dateTimeFieldType31);
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale.Category category37 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category37, locale38);
        java.lang.String str40 = locale38.getCountry();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((-592L));
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.year();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime49 = property46.addWrapFieldToCopy(208);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays(635);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy(880);
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("20");
        java.lang.String str59 = locale55.getDisplayVariant(locale58);
        java.lang.String str60 = property52.getAsText(locale55);
        java.lang.String str61 = locale38.getDisplayVariant(locale55);
        java.util.Set<java.lang.String> strSet62 = locale55.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet63 = locale55.getExtensionKeys();
        java.lang.String str64 = dateTimeField35.getAsShortText(41, locale55);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        java.lang.String str69 = chronology67.toString();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekOfWeekyear();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = dateTimeField70.getAsShortText((long) (byte) -1, locale72);
        java.util.Locale locale74 = locale72.stripExtensions();
        java.lang.String str75 = locale72.toLanguageTag();
        java.lang.String str76 = locale72.getDisplayVariant();
        java.lang.String str77 = locale72.getCountry();
        int int78 = dateTimeField35.getMaximumShortTextLength(locale72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime68", (dateTime1.compareTo(dateTime68) == 0) == dateTime1.equals(dateTime68));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0938");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear((-1));
        int int11 = dateTime8.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.plus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) 0);
        boolean boolean19 = dateTime17.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        boolean boolean24 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        java.lang.String str27 = chronology26.toString();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.minutes();
        org.joda.time.DateTime dateTime30 = dateTime8.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.yearOfCentury();
        int int32 = dateTime6.get(dateTimeField31);
        org.joda.time.DateTime dateTime34 = dateTime6.plusWeeks(1970);
        org.joda.time.DateTime.Property property35 = dateTime6.minuteOfDay();
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider36);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfWeek();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale57 = java.util.Locale.ROOT;
        dateTimeParserBucket51.saveField(dateTimeFieldType55, "it", locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology41, locale57, (java.lang.Integer) 9, 538);
        java.lang.String str64 = nameProvider36.getShortName(locale57, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale65.getVariant();
        java.lang.String str69 = nameProvider36.getName(locale65, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.util.Set<java.lang.String> strSet70 = locale65.getUnicodeLocaleAttributes();
        java.util.Locale locale71 = locale65.stripExtensions();
        java.util.Calendar calendar72 = dateTime6.toCalendar(locale71);
        org.joda.time.LocalTime localTime73 = dateTime6.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime42", (dateTime6.compareTo(dateTime42) == 0) == dateTime6.equals(dateTime42));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0939");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = localDateTime26.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        int int32 = dateTime22.get(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        java.lang.String str38 = chronology36.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.Chronology chronology42 = chronology36.withZone(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology42.add(readablePeriod43, 0L, 603);
        org.joda.time.DurationField durationField47 = chronology42.eras();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str62 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.dayOfWeek();
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology66, locale67, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField71 = null;
        dateTimeParserBucket70.saveField(dateTimeField71, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        dateTimeParserBucket70.saveField(dateTimeFieldType74, "it", locale76);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology60, locale76, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology51, locale76);
        java.lang.String str82 = locale76.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale76, (java.lang.Integer) 1052);
        org.joda.time.DateTimeField dateTimeField85 = chronology42.weekyearOfCentury();
        org.joda.time.DateTime dateTime86 = dateTime22.toDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0940");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(41216698L, dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(478);
        org.joda.time.DateTime.Property property26 = dateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property38.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYear((int) (short) 100);
        int int42 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        int int43 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.millisOfSecond();
        org.joda.time.DurationField durationField57 = chronology53.seconds();
        org.joda.time.DurationField durationField58 = chronology53.minutes();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField60 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology53.hourOfDay();
        org.joda.time.DateTime dateTime63 = dateTime50.withChronology(chronology53);
        java.util.Date date64 = dateTime50.toDate();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime50.toMutableDateTimeISO();
        long long66 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime63", (dateTime50.compareTo(dateTime63) == 0) == dateTime50.equals(dateTime63));
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0941");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime2.centuryOfEra();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = property5.getAsText(locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        java.lang.String str21 = locale19.getScript();
        java.lang.String str22 = property5.getAsShortText(locale19);
        java.lang.String str23 = locale19.getDisplayScript();
        java.lang.String str26 = nameProvider0.getName(locale19, "\u671d\u9c9c\u6587", "+00:00:00.052");
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale28 = locale27.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfHour();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = property41.getAsText(locale42);
        java.lang.String str45 = locale36.getDisplayName(locale42);
        int int46 = property35.getMaximumTextLength(locale42);
        java.lang.String str47 = locale27.getDisplayName(locale42);
        java.lang.String str50 = nameProvider0.getName(locale27, "1970-01-01T01:00:00.052", "Property[hourOfDay]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology55);
        java.lang.String str57 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.dayOfWeek();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        dateTimeParserBucket65.saveField(dateTimeFieldType69, "it", locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology55, locale71, (java.lang.Integer) 9, 538);
        java.lang.String str78 = nameProvider0.getShortName(locale71, "0676-01-01T00:00:01.000", "2022-02-22T07:28:57.811+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime56", (dateTime2.compareTo(dateTime56) == 0) == dateTime2.equals(dateTime56));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0942");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.lang.String str6 = property5.getAsString();
        int int7 = property5.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMonths((int) (byte) 100);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMonths(49);
        int int16 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        int int18 = property5.getMaximumShortTextLength(locale17);
        java.lang.String str20 = locale17.getExtension('a');
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.clear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        java.util.Date date37 = dateTime34.toDate();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfMonth();
        org.joda.time.DateTime.Property property39 = dateTime34.dayOfMonth();
        java.lang.String str40 = property39.getAsString();
        boolean boolean41 = localDateTime32.equals((java.lang.Object) property39);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfSecond();
        org.joda.time.DurationField durationField50 = chronology46.seconds();
        org.joda.time.DurationField durationField51 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.era();
        org.joda.time.DateTimeField dateTimeField53 = chronology46.weekOfWeekyear();
        org.joda.time.DurationField durationField54 = chronology46.minutes();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        dateTimeParserBucket60.saveField(dateTimeFieldType64, "it", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(673L, chronology46, locale66, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology71 = dateTimeParserBucket70.getChronology();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology71, locale72, (java.lang.Integer) 597);
        java.lang.String str75 = property39.getAsText(locale72);
        java.util.Locale.Builder builder76 = builder23.setLocale(locale72);
        java.lang.String str77 = locale72.getVariant();
        java.lang.String str78 = locale17.getDisplayVariant(locale72);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology81 = localDateTime80.getChronology();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime82.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime86 = dateTime84.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime89 = dateTime86.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean90 = dateTime89.isEqualNow();
        org.joda.time.DateTime.Property property91 = dateTime89.secondOfMinute();
        org.joda.time.DateTime dateTime93 = property91.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField94 = property91.getField();
        java.lang.String str95 = property91.getName();
        java.lang.String str96 = property91.getName();
        org.joda.time.DateTime dateTime97 = property91.roundHalfFloorCopy();
        int int98 = dateTime97.getSecondOfMinute();
        boolean boolean99 = locale17.equals((java.lang.Object) int98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime82", (dateTime34.compareTo(dateTime82) == 0) == dateTime34.equals(dateTime82));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0943");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        boolean boolean16 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        int int17 = localDateTime13.getHourOfDay();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        java.lang.Integer int27 = dateTimeParserBucket23.getOffsetInteger();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        java.lang.String str50 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale47);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = dateTimeField36.getAsShortText((int) (byte) 10, locale52);
        long long56 = dateTimeField36.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar62 = dateTime61.toGregorianCalendar();
        int int63 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime.Property property64 = dateTime61.minuteOfHour();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property70 = dateTime67.centuryOfEra();
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.lang.String str72 = locale71.getLanguage();
        java.lang.String str73 = property70.getAsText(locale71);
        java.lang.String str74 = locale65.getDisplayName(locale71);
        int int75 = property64.getMaximumTextLength(locale71);
        java.util.Set<java.lang.String> strSet76 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str77 = dateTimeField36.getAsText((int) (short) 100, locale71);
        java.lang.String str78 = locale71.toLanguageTag();
        int int79 = dateTimeField31.getMaximumShortTextLength(locale71);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = dateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType80.getDurationType();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime13.withFieldAdded(durationFieldType81, 313);
        java.lang.String str84 = durationFieldType81.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0944");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime30 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDateTime34.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime40.era();
        int int43 = property24.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Interval interval44 = property24.toInterval();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime52.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(712);
        org.joda.time.DateTime dateTime60 = dateTime55.withDurationAdded(2020L, 581);
        org.joda.time.DateTime.Property property61 = dateTime55.monthOfYear();
        int int62 = property24.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime48", (dateTime13.compareTo(dateTime48) == 0) == dateTime13.equals(dateTime48));
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0945");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DurationField durationField6 = chronology2.weeks();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(512);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        dateTimeParserBucket24.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        java.lang.String str36 = dateTimeField34.getAsShortText((long) 28);
        dateTimeParserBucket24.saveField(dateTimeField34, 100);
        boolean boolean40 = dateTimeField34.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((-592L));
        int int46 = property43.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime48 = property43.addToCopy(593);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime48, 608, locale50);
        org.joda.time.Chronology chronology52 = localDateTime48.getChronology();
        boolean boolean53 = dateTimeFieldType18.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = chronology59.months();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField64 = chronology59.monthOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType(0);
        int[] intArray69 = chronology52.get((org.joda.time.ReadablePartial) localDateTime65, (long) 29);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime17.minusHours(972);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withWeekyear((-1));
        org.joda.time.DateTime dateTime78 = dateTime76.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology81 = localDateTime80.getChronology();
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now(chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.millisOfSecond();
        org.joda.time.DurationField durationField85 = chronology81.seconds();
        org.joda.time.DurationField durationField86 = chronology81.minutes();
        org.joda.time.DateTimeField dateTimeField87 = chronology81.era();
        org.joda.time.DateTimeField dateTimeField88 = chronology81.monthOfYear();
        int int89 = dateTime78.get(dateTimeField88);
        long long92 = dateTimeField88.addWrapField(2595600988L, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = dateTimeField88.getType();
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.DateTimeField dateTimeField95 = dateTimeFieldType93.getField(chronology94);
        int int96 = localDateTime72.get(dateTimeFieldType93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime74", (dateTime7.compareTo(dateTime74) == 0) == dateTime7.equals(dateTime74));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0946");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.weekyearOfCentury();
        boolean boolean11 = strSet2.contains((java.lang.Object) chronology5);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        long long19 = dateTimeParserBucket17.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        int int25 = dateTime23.getMillisOfSecond();
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = property32.getAsText(locale33);
        java.lang.String str36 = locale27.getDisplayName(locale33);
        int int37 = property26.getMaximumTextLength(locale33);
        java.util.Set<java.lang.String> strSet38 = locale33.getUnicodeLocaleAttributes();
        int int39 = strSet38.size();
        boolean boolean40 = dateTimeParserBucket17.restoreState((java.lang.Object) int39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        java.util.Date date45 = dateTime42.toDate();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfMonth();
        org.joda.time.DateTime.Property property47 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime49 = dateTime42.plusMonths(19);
        org.joda.time.DateTime dateTime51 = dateTime42.plusHours(100);
        org.joda.time.DateTime.Property property52 = dateTime42.dayOfYear();
        int int53 = property52.getMaximumValueOverall();
        boolean boolean54 = dateTimeParserBucket17.restoreState((java.lang.Object) property52);
        org.joda.time.DateTime dateTime55 = property52.roundFloorCopy();
        org.joda.time.DateTime dateTime57 = dateTime55.plusMonths(207);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField73 = null;
        dateTimeParserBucket72.saveField(dateTimeField73, (int) (short) 0);
        java.lang.Integer int76 = dateTimeParserBucket72.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket72.setZone(dateTimeZone77);
        dateTimeParserBucket63.setZone(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeParserBucket63.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone80);
        java.lang.String str82 = dateTimeZone80.toString();
        java.lang.String str83 = dateTimeZone80.toString();
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime55.toMutableDateTime(dateTimeZone80);
        org.joda.time.Chronology chronology85 = chronology5.withZone(dateTimeZone80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime21", (dateTime6.compareTo(dateTime21) == 0) == dateTime6.equals(dateTime21));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0947");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.year();
        org.joda.time.DurationField durationField6 = chronology2.weekyears();
        org.joda.time.DurationField durationField7 = chronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(10);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime13.minusMinutes(648);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(569);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekyear((-1));
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket34.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        java.lang.String str53 = dateTimeZone51.toString();
        java.lang.String str54 = dateTimeZone51.toString();
        long long56 = dateTimeZone28.getMillisKeepLocal(dateTimeZone51, (long) 23);
        org.joda.time.DateTime dateTime57 = dateTime21.toDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime21.getZone();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime21);
        long long61 = chronology2.set((org.joda.time.ReadablePartial) localDateTime59, (-62118328540361L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime9", (dateTime3.compareTo(dateTime9) == 0) == dateTime3.equals(dateTime9));
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0948");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear((-1));
        org.joda.time.DateTime dateTime35 = dateTime31.withMillisOfDay(0);
        int int36 = dateTime35.getDayOfYear();
        boolean boolean37 = mutableDateTime29.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths(840);
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime39.toYearMonthDay();
        long long42 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        int int43 = property24.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and instant40", (dateTime39.compareTo(instant40) == 0) == dateTime39.equals(instant40));
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0949");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.monthOfYear();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 854, chronology3);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusHours(49);
        java.util.Locale locale22 = new java.util.Locale("2020-04-14T07:26:18.563+00:00:00.052", "2020-04-14T07:26:18.563+00:00:00.052", "7");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        boolean boolean34 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime27.minus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.lang.String str52 = locale51.getDisplayName();
        dateTimeParserBucket42.saveField(dateTimeFieldType49, "97", locale51);
        java.util.Calendar calendar54 = dateTime27.toCalendar(locale51);
        java.lang.String str55 = locale51.getCountry();
        java.util.Locale locale59 = new java.util.Locale("1378-01-01T00:00:00.087", "", "\uc601\uc5b4");
        java.lang.String str60 = locale51.getDisplayLanguage(locale59);
        java.lang.String str61 = locale22.getDisplayVariant(locale51);
        java.lang.String str62 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int64 = localDateTime18.get(dateTimeFieldType63);
        java.lang.String str65 = dateTimeFieldType63.toString();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusMinutes((int) (short) -1);
        int int74 = localDateTime71.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.withWeekyear(325);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.months();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType63.getField(chronology77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime79", (dateTime25.compareTo(dateTime79) == 0) == dateTime25.equals(dateTime79));
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0950");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.millisOfDay();
        long long11 = dateTimeField9.roundHalfCeiling((long) 1645514772);
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.centuryOfEra();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj13, chronology24);
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusMonths((int) (byte) 100);
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusDays(4);
        int int39 = localDateTime38.size();
        org.joda.time.Chronology chronology40 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime43.toMutableDateTime();
        int int47 = dateTime43.getMillisOfSecond();
        org.joda.time.DateTime.Property property48 = dateTime43.centuryOfEra();
        org.joda.time.DateTime dateTime49 = property48.roundCeilingCopy();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        java.util.Locale locale57 = dateTimeParserBucket55.getLocale();
        boolean boolean58 = property48.equals((java.lang.Object) locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology40, locale57, (java.lang.Integer) 325);
        java.lang.String str61 = locale57.getLanguage();
        java.lang.String str62 = locale57.getDisplayScript();
        java.lang.String str63 = locale57.getLanguage();
        java.lang.String str64 = property29.getAsText(locale57);
        java.lang.String str65 = dateTimeField9.getAsText(324, locale57);
        long long67 = dateTimeField9.roundHalfFloor(1645515008624L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0951");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        int int6 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.addToCopy(608);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekyear((-1));
        org.joda.time.DateTime dateTime27 = dateTime23.plusHours((int) (byte) 100);
        boolean boolean29 = dateTime27.isBefore((long) ' ');
        int int30 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime27.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int37 = localDateTime34.get(dateTimeFieldType36);
        int int38 = dateTime32.get(dateTimeFieldType36);
        int int39 = localDateTime8.get(dateTimeFieldType36);
        java.lang.String str40 = dateTimeFieldType36.toString();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.weekyear();
        long long54 = chronology43.add(8594L, (long) 970, 0);
        org.joda.time.DateTimeField dateTimeField55 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType36.getField(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime44", (dateTime23.compareTo(dateTime44) == 0) == dateTime23.equals(dateTime44));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0952");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.Chronology chronology16 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        int int25 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.addToCopy(608);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfWeek();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear((-1));
        org.joda.time.DateTime dateTime46 = dateTime42.plusHours((int) (byte) 100);
        boolean boolean48 = dateTime46.isBefore((long) ' ');
        int int49 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime51 = dateTime46.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int56 = localDateTime53.get(dateTimeFieldType55);
        int int57 = dateTime51.get(dateTimeFieldType55);
        int int58 = localDateTime27.get(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime27.weekyear();
        boolean boolean60 = dateTimeZone18.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime42", (dateTime3.compareTo(dateTime42) == 0) == dateTime3.equals(dateTime42));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0953");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(734);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale27.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("20");
        java.lang.String str31 = locale27.getDisplayVariant(locale30);
        java.util.Calendar calendar32 = dateTime24.toCalendar(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(26849678L, chronology11, locale27, (java.lang.Integer) 162);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        int int39 = dateTime36.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.plus(readablePeriod40);
        int int42 = dateTime36.getWeekOfWeekyear();
        int int43 = dateTime36.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime36.getZone();
        dateTimeParserBucket34.setZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime36", (dateTime17.compareTo(dateTime36) == 0) == dateTime17.equals(dateTime36));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0954");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.plusHours(771);
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime32.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMonths(0);
        org.joda.time.DateTime.Property property48 = dateTime43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int54 = localDateTime50.get(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.millisOfSecond();
        org.joda.time.DurationField durationField63 = chronology59.seconds();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime56, chronology59);
        org.joda.time.DateTime dateTime65 = dateTime43.toDateTime(chronology59);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology72 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.clockhourOfDay();
        org.joda.time.DurationField durationField74 = chronology72.centuries();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.hourOfDay();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) dateTime43, chronology72);
        org.joda.time.DurationField durationField77 = chronology72.centuries();
        org.joda.time.DurationField durationField78 = chronology72.hours();
        org.joda.time.DurationField durationField79 = chronology72.hours();
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime37.toMutableDateTime(chronology72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField31 and durationField63", Math.signum(durationField31.compareTo(durationField63)) == -Math.signum(durationField63.compareTo(durationField31)));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0955");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.Chronology chronology7 = chronology6.withUTC();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMillis((int) (short) 1);
        long long20 = chronology6.set((org.joda.time.ReadablePartial) localDateTime18, 0L);
        org.joda.time.DurationField durationField21 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        long long27 = dateTimeZone24.previousTransition((long) 26748437);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology29 = chronology6.withZone(dateTimeZone24);
        long long33 = chronology29.add((long) 28, (long) 206, 26882);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime44 = property42.roundHalfEvenCopy();
        java.lang.String str45 = property42.getAsText();
        org.joda.time.LocalDateTime localDateTime46 = property42.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property51 = dateTime48.year();
        org.joda.time.DateTime dateTime53 = dateTime48.minusSeconds(241);
        org.joda.time.DateTime dateTime55 = dateTime48.plusMillis(608);
        org.joda.time.DateTime dateTime57 = dateTime55.withCenturyOfEra(58);
        int int58 = property42.compareTo((org.joda.time.ReadableInstant) dateTime55);
        java.util.Locale locale60 = new java.util.Locale("2022-02-22T07:27:57.435+00:00:00.052");
        java.lang.String str61 = property42.getAsText(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 27153, chronology29, locale60, (java.lang.Integer) 345);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime48", (dateTime4.compareTo(dateTime48) == 0) == dateTime4.equals(dateTime48));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0956");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 0);
        boolean boolean7 = dateTime5.isEqual((long) (short) 100);
        int int8 = dateTime5.getWeekyear();
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekOfWeekyear();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.util.Locale locale24 = dateTimeParserBucket20.getLocale();
        java.util.Locale.setDefault(category14, locale24);
        java.util.Locale locale27 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category14, locale27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("87");
        java.lang.String str38 = dateTimeField34.getAsText((long) 383, locale37);
        java.lang.String str39 = locale37.toLanguageTag();
        java.lang.String str40 = locale37.getDisplayLanguage();
        java.util.Locale.setDefault(category14, locale37);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekOfWeekyear();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = dateTimeField47.getAsShortText((long) (byte) -1, locale49);
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.String str52 = locale51.getScript();
        java.util.Locale.setDefault(category14, locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(28884L, chronology9, locale51, (java.lang.Integer) 253);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        java.util.Locale locale65 = dateTimeParserBucket61.getLocale();
        java.util.Locale locale66 = dateTimeParserBucket61.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 12, chronology9, locale66, (java.lang.Integer) 27016238);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime32", (dateTime3.compareTo(dateTime32) == 0) == dateTime3.equals(dateTime32));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0957");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.Chronology chronology47 = chronology41.withZone(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology47.add(readablePeriod48, 0L, 603);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusWeeks((-593));
        long long62 = chronology47.set((org.joda.time.ReadablePartial) localDateTime60, (long) 685);
        org.joda.time.DurationField durationField63 = chronology47.centuries();
        org.joda.time.DurationField durationField64 = durationFieldType38.getField(chronology47);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField71 = chronology67.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology67.year();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.hourOfDay();
        boolean boolean75 = durationFieldType38.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField76 = chronology67.minuteOfDay();
        org.joda.time.DateTime dateTime77 = dateTime37.withChronology(chronology67);
        int int78 = dateTime37.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime42", (dateTime25.compareTo(dateTime42) == 0) == dateTime25.equals(dateTime42));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0958");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = mutableDateTime9.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology14.millis();
        boolean boolean18 = dateTimeFieldType10.isSupported(chronology14);
        org.joda.time.DurationField durationField19 = chronology14.centuries();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology14, locale20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        java.lang.String str29 = dateTimeField27.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int int35 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime34.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property38.addToCopy((long) 853);
        org.joda.time.DateTimeField dateTimeField42 = property38.getField();
        org.joda.time.LocalDateTime localDateTime44 = property38.addWrapFieldToCopy(133);
        int[] intArray46 = chronology14.get((org.joda.time.ReadablePartial) localDateTime44, (long) 267);
        org.joda.time.DateTimeField dateTimeField47 = chronology14.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0959");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        long long24 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime20.withYearOfEra(309);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(26834949);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTime dateTime34 = dateTime26.withChronology(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime32", (dateTime1.compareTo(dateTime32) == 0) == dateTime1.equals(dateTime32));
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0960");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        java.lang.String str16 = property12.getName();
        org.joda.time.DateTime dateTime17 = property12.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.halfdayOfDay();
        org.joda.time.DurationField durationField24 = chronology20.millis();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.dayOfWeek();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket34.getZone();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology57 = chronology20.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime17.toMutableDateTime(chronology57);
        long long63 = chronology57.add((long) 2002, (long) 889, 860);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime59", (dateTime17.compareTo(mutableDateTime59) == 0) == dateTime17.equals(mutableDateTime59));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0961");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        int int7 = dateTimeParserBucket6.getOffset();
        java.lang.Integer int8 = dateTimeParserBucket6.getPivotYear();
        dateTimeParserBucket6.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int14 = dateTimeZone12.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        dateTimeParserBucket6.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 26751, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology23.seconds();
        org.joda.time.DurationField durationField28 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        boolean boolean35 = dateTime33.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = dateTimeZone36.getName((long) (byte) 1, locale40);
        org.joda.time.Chronology chronology42 = chronology23.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField43 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology23.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = chronology23.dayOfYear();
        org.joda.time.DurationField durationField48 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology23.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = dateTime55.toString(dateTimeFormatter58);
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("20");
        java.lang.String str65 = locale61.getDisplayVariant(locale64);
        java.lang.String str66 = dateTime55.toString("1969", locale61);
        org.joda.time.DateTime.Property property67 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime68 = dateTime55.withTimeAtStartOfDay();
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean70 = locale69.hasExtensions();
        java.util.Calendar calendar71 = dateTime55.toCalendar(locale69);
        java.lang.String str74 = nameProvider50.getShortName(locale69, "2020", "2022-02-22T07:26:30.740+00:00:00.052");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale69, (java.lang.Integer) 1458000000, 290);
        java.lang.String str78 = dateTimeZone12.getShortName(1548L, locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime31", (dateTime15.compareTo(dateTime31) == 0) == dateTime15.equals(dateTime31));
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0962");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        java.lang.String str7 = dateTimeField5.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        int int13 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime12.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.Chronology chronology17 = chronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.year();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("coreano");
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder30 = builder27.clearExtensions();
        java.util.Locale locale31 = builder27.build();
        java.lang.String str33 = locale31.getExtension('a');
        java.util.Set<java.lang.Character> charSet34 = locale31.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 501, chronology17, locale31, (java.lang.Integer) 368);
        dateTimeParserBucket36.setOffset((java.lang.Integer) (-1510245179));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour(30);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plus(readableDuration47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfMonth();
        long long50 = property49.remainder();
        org.joda.time.LocalDateTime localDateTime52 = property49.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int54 = localDateTime52.get(dateTimeFieldType53);
        int int55 = dateTime42.get(dateTimeFieldType53);
        java.lang.String str56 = dateTimeFieldType53.getName();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfSecond();
        org.joda.time.DurationField durationField64 = chronology60.seconds();
        org.joda.time.DurationField durationField65 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.minuteOfDay();
        org.joda.time.DurationField durationField67 = chronology60.seconds();
        org.joda.time.DateTimeField dateTimeField68 = chronology60.yearOfEra();
        java.util.Locale locale73 = new java.util.Locale("Etc/UTC", "499", "2022-02-22T07:25:56.720+00:00:00.052");
        java.lang.String str74 = dateTimeField68.getAsText(352, locale73);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology76, locale77, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology81 = dateTimeParserBucket80.getChronology();
        java.util.Locale locale82 = dateTimeParserBucket80.getLocale();
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleKeys();
        java.lang.String str84 = locale82.toLanguageTag();
        java.lang.String str85 = locale73.getDisplayScript(locale82);
        dateTimeParserBucket36.saveField(dateTimeFieldType53, "2022-02-22T07:31:06.651+00:00:00.052", locale73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime40", (dateTime4.compareTo(dateTime40) == 0) == dateTime4.equals(dateTime40));
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0963");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property18.setCopy("25");
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale41.getDisplayName();
        dateTimeParserBucket32.saveField(dateTimeFieldType39, "97", locale41);
        int int44 = localDateTime24.get(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType39.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        org.joda.time.Chronology chronology49 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        org.joda.time.DurationField durationField52 = chronology49.hours();
        org.joda.time.DurationField durationField53 = durationFieldType45.getField(chronology49);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 585, chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.era();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.clockhourOfHalfday();
        boolean boolean64 = durationFieldType45.isSupported(chronology58);
        boolean boolean65 = localDateTime20.isSupported(durationFieldType45);
        org.joda.time.Chronology chronology66 = localDateTime20.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime47", (dateTime3.compareTo(dateTime47) == 0) == dateTime3.equals(dateTime47));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0964");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        long long31 = dateTimeParserBucket27.computeMillis(true, "1978");
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket27.getZone();
        dateTimeParserBucket27.setOffset(696);
        java.lang.Integer int35 = dateTimeParserBucket27.getOffsetInteger();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket27.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField7, and durationField8", !(durationField37.compareTo(durationField7) == 0) || (Math.signum(durationField37.compareTo(durationField8)) == Math.signum(durationField7.compareTo(durationField8))));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0965");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTime dateTime6 = dateTime1.minusSeconds(241);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(31);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime14.toDateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minus(readableDuration21);
        int int23 = localDateTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket30.getZone();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (byte) 100);
        boolean boolean57 = dateTime55.isBefore((long) ' ');
        org.joda.time.DateTime.Property property58 = dateTime55.weekOfWeekyear();
        org.joda.time.DateTime dateTime60 = dateTime55.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.withPeriodAdded(readablePeriod61, 593);
        org.joda.time.DateTime dateTime65 = dateTime60.plusDays(837);
        org.joda.time.DateTime dateTime66 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime67 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.plus(readableDuration69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime51", (dateTime1.compareTo(dateTime51) == 0) == dateTime1.equals(dateTime51));
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0966");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        dateTimeParserBucket7.setZone(dateTimeZone18);
        long long32 = dateTimeZone18.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime35.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime41.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime45.toMutableDateTime();
        org.joda.time.Chronology chronology47 = mutableDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime33, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfYear();
        org.joda.time.DurationField durationField50 = chronology47.eras();
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.getDefault(category51);
        java.util.Locale locale53 = java.util.Locale.getDefault(category51);
        java.util.Locale.setDefault(locale53);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        java.lang.String str59 = chronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology63);
        java.lang.String str65 = chronology63.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.weekyear();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology63);
        int int70 = dateTimeField60.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        java.lang.String str77 = dateTimeField75.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime82 = property81.roundHalfEvenCopy();
        int int83 = dateTimeField75.getMinimumValue((org.joda.time.ReadablePartial) localDateTime82);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray84 = localDateTime82.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime82);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.lang.String str87 = locale86.getLanguage();
        java.lang.String str88 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime85, locale86);
        java.lang.String str89 = locale86.getISO3Language();
        java.lang.String str90 = locale53.getDisplayCountry(locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket(1419000L, chronology47, locale53);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(1645515884392L, chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime58", (dateTime21.compareTo(dateTime58) == 0) == dateTime21.equals(dateTime58));
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0967");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DurationField durationField8 = chronology2.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.hourOfDay();
        long long12 = dateTimeField9.add(0L, 500);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        int int20 = dateTimeParserBucket19.getOffset();
        java.lang.Integer int21 = dateTimeParserBucket19.getPivotYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DurationField durationField28 = chronology24.seconds();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = chronology24.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology24.dayOfMonth();
        dateTimeParserBucket19.saveField(dateTimeField33, 1978);
        java.util.Locale locale36 = dateTimeParserBucket19.getLocale();
        java.lang.String str37 = dateTimeField9.getAsText(775, locale36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.DurationField durationField44 = dateTimeField43.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYear(2022);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology68);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property75 = dateTime72.centuryOfEra();
        java.util.Locale locale76 = java.util.Locale.ITALIAN;
        java.lang.String str77 = locale76.getLanguage();
        java.lang.String str78 = property75.getAsText(locale76);
        java.lang.String str79 = dateTimeField65.getAsText((org.joda.time.ReadablePartial) localDateTime69, (-1), locale76);
        java.util.Locale.setDefault(locale76);
        java.lang.String str81 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDateTime60, locale76);
        java.lang.String str82 = dateTimeField43.getAsShortText((long) 'a', locale76);
        java.lang.String str83 = locale36.getDisplayLanguage(locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime72", (dateTime3.compareTo(dateTime72) == 0) == dateTime3.equals(dateTime72));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0968");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = dateTime2.isBefore(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 570, dateTimeZone5);
        java.lang.String str11 = dateTimeZone5.getShortName(1645514767049L);
        long long13 = dateTimeZone5.previousTransition((long) 285);
        java.util.TimeZone timeZone14 = dateTimeZone5.toTimeZone();
        java.lang.String str15 = timeZone14.getID();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        dateTimeParserBucket21.setZone(dateTimeZone35);
        java.util.TimeZone timeZone38 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        boolean boolean42 = timeZone38.hasSameRules(timeZone41);
        java.lang.String str43 = timeZone38.getID();
        boolean boolean44 = timeZone38.observesDaylightTime();
        int int46 = timeZone38.getOffset(4418768307L);
        java.lang.String str47 = timeZone38.getID();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getTimeZone("8");
        timeZone49.setRawOffset((int) 'a');
        boolean boolean52 = timeZone38.hasSameRules(timeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone54.getOffset(readableInstant56);
        int int59 = dateTimeZone54.getOffsetFromLocal(2020L);
        long long61 = dateTimeZone54.convertUTCToLocal((long) 422);
        int int63 = dateTimeZone54.getOffset((-62168008280862L));
        java.util.TimeZone timeZone64 = dateTimeZone54.toTimeZone();
        boolean boolean65 = timeZone49.hasSameRules(timeZone64);
        java.lang.String str66 = timeZone49.getID();
        boolean boolean67 = timeZone14.hasSameRules(timeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime55", (dateTime2.compareTo(dateTime55) == 0) == dateTime2.equals(dateTime55));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0969");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        boolean boolean18 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType0.getField(chronology21);
        org.joda.time.DurationField durationField28 = chronology21.months();
        org.joda.time.Chronology chronology29 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.era();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((-592L));
        int int36 = property33.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property33.addToCopy(593);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime40.plusHours((int) (byte) 100);
        boolean boolean46 = dateTime44.isBefore((long) ' ');
        org.joda.time.DateTime.Property property47 = dateTime44.weekOfWeekyear();
        int int48 = property33.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-1));
        org.joda.time.DateTime dateTime54 = dateTime50.withMillisOfDay(0);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfMonth();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        java.lang.Integer int65 = dateTimeParserBucket61.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket61.setZone(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear((-1));
        org.joda.time.DateTime dateTime73 = dateTime69.plusHours((int) (byte) 100);
        boolean boolean75 = dateTime73.isBefore((long) ' ');
        int int76 = dateTimeZone66.getOffset((org.joda.time.ReadableInstant) dateTime73);
        int int78 = dateTimeZone66.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime79 = dateTime54.withZoneRetainFields(dateTimeZone66);
        int int80 = property33.getDifference((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.LocalDateTime localDateTime82 = property33.addWrapFieldToCopy(671);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.era();
        long long85 = chronology21.set((org.joda.time.ReadablePartial) localDateTime82, (long) 576);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime40", (dateTime22.compareTo(dateTime40) == 0) == dateTime22.equals(dateTime40));
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0970");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime11.withDayOfMonth(19);
        org.joda.time.DateTime.Property property17 = dateTime11.millisOfSecond();
        org.joda.time.Chronology chronology18 = dateTime11.getChronology();
        int int19 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime.Property property20 = dateTime11.minuteOfDay();
        boolean boolean21 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        int int28 = dateTimeZone26.getOffset(537L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime36.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime36.getZone();
        int int42 = dateTimeZone40.getOffset((long) 569);
        java.lang.String str44 = dateTimeZone40.getName(541L);
        long long46 = dateTimeZone26.getMillisKeepLocal(dateTimeZone40, 244800000L);
        long long48 = dateTimeZone40.nextTransition(26799L);
        org.joda.time.DateTime dateTime49 = dateTime1.withZoneRetainFields(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0971");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) '#', 837);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        boolean boolean17 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime19.year();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(558);
        boolean boolean30 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.minus((long) 597);
        org.joda.time.DateTime.Property property33 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DurationField durationField42 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        strSet52.clear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        boolean boolean59 = strSet52.contains((java.lang.Object) dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime34.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) instant16, dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone63 = instant16.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime57", (dateTime1.compareTo(dateTime57) == 0) == dateTime1.equals(dateTime57));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0972");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekyear();
        long long13 = chronology2.add(8594L, (long) 970, 0);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField16 = chronology2.months();
        org.joda.time.DurationField durationField17 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.plus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology33 = mutableDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 10, chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra(438);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMinutes(26846);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        boolean boolean44 = dateTime42.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime42.toString(dateTimeFormatter45);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        java.lang.Integer int56 = dateTimeParserBucket52.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket52.setZone(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekyear((-1));
        org.joda.time.DateTime dateTime64 = dateTime60.plusHours((int) (byte) 100);
        boolean boolean66 = dateTime64.isBefore((long) ' ');
        int int67 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime64);
        long long69 = dateTimeZone57.nextTransition((long) (short) -1);
        boolean boolean70 = dateTime42.equals((java.lang.Object) dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusMillis(53);
        int[] intArray74 = localDateTime73.getValues();
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime38, intArray74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0973");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.LocalDate localDate6 = dateTime5.toLocalDate();
        int int7 = dateTime5.getYear();
        org.joda.time.DateTime dateTime9 = dateTime5.withHourOfDay(0);
        int int10 = dateTime5.getYearOfCentury();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone20 = chronology15.getZone();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readableDuration37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyearOfCentury();
        java.lang.String str45 = dateTimeField43.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfEvenCopy();
        int int51 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean54 = localDateTime50.equals((java.lang.Object) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int59 = localDateTime56.get(dateTimeFieldType58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime53.property(dateTimeFieldType58);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType58.getRangeDurationType();
        int int62 = localDateTime38.get(dateTimeFieldType58);
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        boolean boolean65 = localDateTime38.equals((java.lang.Object) category63);
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category66, locale67);
        boolean boolean69 = locale67.hasExtensions();
        java.util.Locale.setDefault(category63, locale67);
        java.lang.String str71 = locale67.getScript();
        java.lang.String str72 = dateTimeField28.getAsShortText(273, locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(590000000L, chronology15, locale67, (java.lang.Integer) 27107208, 978);
        org.joda.time.DateTime dateTime76 = dateTime11.toDateTime(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0974");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withPeriodAdded(readablePeriod25, 50);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        int int35 = dateTimeParserBucket34.getOffset();
        java.lang.Integer int36 = dateTimeParserBucket34.getPivotYear();
        dateTimeParserBucket34.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int42 = dateTimeZone40.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone40);
        dateTimeParserBucket34.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 26751, dateTimeZone40);
        int int46 = dateTime45.getMonthOfYear();
        boolean boolean47 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime43", (dateTime27.compareTo(dateTime43) == 0) == dateTime27.equals(dateTime43));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0975");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime.Property property30 = dateTime27.yearOfCentury();
        int int31 = property30.getMaximumValueOverall();
        org.joda.time.DateTime dateTime32 = property30.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime35 = dateTime32.withFieldAdded(durationFieldType33, 734);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withFieldAdded(durationFieldType33, 80);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime24.withCenturyOfEra(363);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime24.minusHours(1);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyearOfCentury();
        java.lang.String str48 = dateTimeField46.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfEvenCopy();
        int int54 = dateTimeField46.getMinimumValue((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime53.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localDateTime63.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str67 = durationFieldType66.toString();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.withFieldAdded(durationFieldType66, 439);
        java.lang.String str70 = durationFieldType66.getName();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime59.withFieldAdded(durationFieldType66, 826);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = localDateTime59.getFieldTypes();
        boolean boolean74 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime45", (dateTime27.compareTo(dateTime45) == 0) == dateTime27.equals(dateTime45));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0976");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        int int7 = dateTimeParserBucket6.getOffset();
        java.lang.Integer int8 = dateTimeParserBucket6.getPivotYear();
        dateTimeParserBucket6.setOffset((java.lang.Integer) 258);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(139);
        int int14 = dateTimeZone12.getStandardOffset((long) 122);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        dateTimeParserBucket6.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 26751, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy(608);
        org.joda.time.LocalDateTime localDateTime27 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfSecond(815);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int35 = localDateTime32.get(dateTimeFieldType34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = property36.addWrapFieldToCopy(26752);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime48 = property45.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withWeekyear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (byte) 0);
        boolean boolean56 = dateTime54.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean62 = localDateTime48.isSupported(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getDurationType();
        int int64 = localDateTime40.get(dateTimeFieldType61);
        boolean boolean65 = dateTime17.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime52", (dateTime15.compareTo(dateTime52) == 0) == dateTime15.equals(dateTime52));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0977");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy((-1510244619764L));
        org.joda.time.DurationField durationField34 = property23.getLeapDurationField();
        org.joda.time.DateTime dateTime36 = property23.addWrapFieldToCopy(856);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMillis(2055742079617L);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        dateTimeParserBucket45.saveField(dateTimeFieldType49, "it", locale51);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        java.lang.Integer int62 = dateTimeParserBucket58.getOffsetInteger();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekOfWeekyear();
        boolean boolean65 = dateTimeFieldType49.isSupported(chronology63);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyearOfCentury();
        java.lang.String str72 = dateTimeField70.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundHalfEvenCopy();
        int int78 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = localDateTime77.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime77);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = property81.addToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology84 = localDateTime83.getChronology();
        long long88 = chronology84.add((long) 19, (long) 49, 175);
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType49.getField(chronology84);
        boolean boolean90 = dateTime36.isSupported(dateTimeFieldType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime69", (dateTime13.compareTo(dateTime69) == 0) == dateTime13.equals(dateTime69));
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0978");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.String str2 = dateTimeZone0.toString();
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.minusYears(20);
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime32 = property31.roundHalfEvenCopy();
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime.Property property34 = dateTime32.millisOfDay();
        org.joda.time.DateTime dateTime35 = property34.getDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(1);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("8");
        java.util.TimeZone.setDefault(timeZone39);
        java.util.TimeZone.setDefault(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTime(dateTimeZone42);
        long long46 = dateTimeZone0.getMillisKeepLocal(dateTimeZone42, (long) 22299);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime44", (dateTime37.compareTo(dateTime44) == 0) == dateTime37.equals(dateTime44));
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0979");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(41153);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond(563);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology13);
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology21 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        boolean boolean34 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime27.minus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.lang.String str52 = locale51.getDisplayName();
        dateTimeParserBucket42.saveField(dateTimeFieldType49, "97", locale51);
        java.util.Calendar calendar54 = dateTime27.toCalendar(locale51);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusHours(49);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime64 = property61.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfMonth();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = property70.getAsShortText(locale71);
        int int73 = property61.getMaximumShortTextLength(locale71);
        java.lang.String str74 = locale71.getDisplayVariant();
        java.lang.String str75 = locale51.getDisplayVariant(locale71);
        int int76 = property22.getMaximumShortTextLength(locale71);
        org.joda.time.DurationField durationField77 = property22.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime25", (dateTime14.compareTo(dateTime25) == 0) == dateTime14.equals(dateTime25));
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0980");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours((int) (byte) 100);
        boolean boolean33 = dateTime31.isBefore((long) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime31.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 593);
        org.joda.time.DateTime dateTime41 = dateTime36.plusDays(837);
        org.joda.time.DateTime dateTime42 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.Chronology chronology52 = chronology46.withZone(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.DurationField durationField54 = chronology46.weekyears();
        org.joda.time.DateTime dateTime55 = dateTime42.toDateTime(chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime47", (dateTime27.compareTo(dateTime47) == 0) == dateTime27.equals(dateTime47));
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0981");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = property23.addToCopy(52L);
        org.joda.time.DateTime dateTime35 = property23.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(585);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.Chronology chronology47 = chronology41.withZone(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology47.add(readablePeriod48, 0L, 603);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusWeeks((-593));
        long long62 = chronology47.set((org.joda.time.ReadablePartial) localDateTime60, (long) 685);
        org.joda.time.DurationField durationField63 = chronology47.centuries();
        org.joda.time.DurationField durationField64 = durationFieldType38.getField(chronology47);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField71 = chronology67.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology67.year();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.hourOfDay();
        boolean boolean75 = durationFieldType38.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField76 = chronology67.minuteOfDay();
        org.joda.time.DateTime dateTime77 = dateTime37.withChronology(chronology67);
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime77.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime42", (dateTime13.compareTo(dateTime42) == 0) == dateTime13.equals(dateTime42));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0982");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = property27.getAsText(locale28);
        java.lang.String str31 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime21, (-1), locale28);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = dateTimeField17.getAsShortText((int) (byte) 10, locale33);
        java.lang.String str36 = locale33.getDisplayName();
        java.util.Set<java.lang.String> strSet37 = locale33.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        int int45 = dateTimeParserBucket44.getOffset();
        java.lang.Integer int46 = dateTimeParserBucket44.getPivotYear();
        java.util.Locale locale47 = dateTimeParserBucket44.getLocale();
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = locale49.getDisplayLanguage(locale50);
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Set<java.lang.String> strSet54 = locale47.getUnicodeLocaleAttributes();
        boolean boolean55 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime61.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime63.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime63.getZone();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.millisOfSecond();
        boolean boolean72 = dateTimeZone67.isLocalDateTimeGap(localDateTime69);
        java.util.Locale locale77 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale77);
        java.lang.String str79 = dateTimeZone67.getShortName((long) 44, locale77);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        boolean boolean82 = dateTimeZone67.isStandardOffset((long) 174);
        long long84 = dateTimeZone67.previousTransition((long) 376);
        int int86 = dateTimeZone67.getStandardOffset((long) 830);
        long long89 = dateTimeZone67.convertLocalToUTC((long) 640, false);
        boolean boolean90 = strSet37.equals((java.lang.Object) long89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime59", (dateTime24.compareTo(dateTime59) == 0) == dateTime24.equals(dateTime59));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0983");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime38 = property34.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DurationField durationField46 = chronology43.seconds();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology43.getZone();
        java.lang.String str49 = dateTimeZone47.getName((long) 495);
        org.joda.time.DateTime dateTime50 = dateTime38.withZone(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime44", (dateTime13.compareTo(dateTime44) == 0) == dateTime13.equals(dateTime44));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0984");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        dateTimeParserBucket21.saveField(dateTimeFieldType28, "97", locale30);
        int int33 = localDateTime13.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime9.withField(dateTimeFieldType28, 12);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.era();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.monthOfYear();
        int int52 = dateTime41.get(dateTimeField51);
        org.joda.time.DateTime dateTime54 = dateTime41.plusYears(2022);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime57 = dateTime41.withDurationAdded(readableDuration55, 555);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withWeekyear((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean63 = dateTime61.isSupported(dateTimeFieldType62);
        boolean boolean64 = dateTime57.isSupported(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime67 = dateTime65.plusHours(773);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int74 = localDateTime70.get(dateTimeFieldType73);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology77);
        java.lang.String str79 = chronology77.toString();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.weekOfWeekyear();
        boolean boolean81 = dateTimeFieldType73.isSupported(chronology77);
        org.joda.time.DateTimeField dateTimeField82 = chronology77.yearOfEra();
        org.joda.time.DurationField durationField83 = chronology77.years();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) 439, chronology77);
        org.joda.time.DateTimeField dateTimeField85 = chronology77.dayOfYear();
        org.joda.time.DateTime dateTime86 = dateTime67.withChronology(chronology77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime78", (dateTime37.compareTo(dateTime78) == 0) == dateTime37.equals(dateTime78));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0985");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) '#', 837);
        org.joda.time.Instant instant16 = dateTime9.toInstant();
        boolean boolean17 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime19.year();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(558);
        boolean boolean30 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.minus((long) 597);
        org.joda.time.DateTime.Property property33 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DurationField durationField42 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        strSet52.clear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        boolean boolean59 = strSet52.contains((java.lang.Object) dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime34.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) instant16, dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYearOfEra(27176604);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant16", (dateTime1.compareTo(instant16) == 0) == dateTime1.equals(instant16));
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0986");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int51 = localDateTime47.get(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime47.year();
        org.joda.time.LocalDateTime localDateTime55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime57);
        long long60 = chronology25.set((org.joda.time.ReadablePartial) localDateTime57, (long) 956);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime30", (dateTime24.compareTo(dateTime30) == 0) == dateTime24.equals(dateTime30));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0987");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        java.lang.String str6 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfWeek();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology4, locale20, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField31 = chronology27.millis();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology27.getZone();
        long long34 = dateTimeZone32.convertUTCToLocal((long) 558);
        dateTimeParserBucket24.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket24.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        java.lang.String str43 = dateTimeField41.getAsShortText((long) 28);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property58 = dateTime55.centuryOfEra();
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = property58.getAsText(locale59);
        java.lang.String str62 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localDateTime52, (-1), locale59);
        int int63 = dateTimeField41.getMaximumTextLength(locale59);
        java.lang.String str64 = locale59.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(1356510769001L, chronology36, locale59);
        int int66 = dateTimeParserBucket65.getOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime55", (dateTime5.compareTo(dateTime55) == 0) == dateTime5.equals(dateTime55));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0988");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        java.lang.Integer int27 = dateTimeParserBucket23.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket23.setZone(dateTimeZone28);
        dateTimeParserBucket14.setZone(dateTimeZone28);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        long long33 = dateTimeZone28.convertUTCToLocal((long) 441);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfDay(26807106);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withYear(2022);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(chronology61);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property68 = dateTime65.centuryOfEra();
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = property68.getAsText(locale69);
        java.lang.String str72 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDateTime62, (-1), locale69);
        java.util.Locale.setDefault(locale69);
        java.lang.String str74 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime53, locale69);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime53.plusMinutes(20);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime53.minusYears(603);
        int int79 = localDateTime78.getYearOfEra();
        int[] intArray80 = localDateTime78.getValues();
        int int81 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36, intArray80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime65", (dateTime3.compareTo(dateTime65) == 0) == dateTime3.equals(dateTime65));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0989");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime11.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays(4);
        org.joda.time.DateTime dateTime23 = dateTime18.plus((long) 208);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, (int) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        long long34 = dateTimeParserBucket32.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar39 = dateTime38.toGregorianCalendar();
        int int40 = dateTime38.getMillisOfSecond();
        org.joda.time.DateTime.Property property41 = dateTime38.minuteOfHour();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property47 = dateTime44.centuryOfEra();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = property47.getAsText(locale48);
        java.lang.String str51 = locale42.getDisplayName(locale48);
        int int52 = property41.getMaximumTextLength(locale48);
        java.util.Set<java.lang.String> strSet53 = locale48.getUnicodeLocaleAttributes();
        int int54 = strSet53.size();
        boolean boolean55 = dateTimeParserBucket32.restoreState((java.lang.Object) int54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours((int) (byte) 0);
        java.util.Date date60 = dateTime57.toDate();
        org.joda.time.DateTime.Property property61 = dateTime57.dayOfMonth();
        org.joda.time.DateTime.Property property62 = dateTime57.dayOfMonth();
        org.joda.time.DateTime dateTime64 = dateTime57.plusMonths(19);
        org.joda.time.DateTime dateTime66 = dateTime57.plusHours(100);
        org.joda.time.DateTime.Property property67 = dateTime57.dayOfYear();
        int int68 = property67.getMaximumValueOverall();
        boolean boolean69 = dateTimeParserBucket32.restoreState((java.lang.Object) property67);
        org.joda.time.DateTime dateTime70 = property67.roundFloorCopy();
        boolean boolean71 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = dateTime26.toDateTime();
        org.joda.time.DateTime.Property property73 = dateTime26.dayOfMonth();
        org.joda.time.DateTime.Property property74 = dateTime26.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0990");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeZone17.getName((long) (byte) 1, locale21);
        org.joda.time.Chronology chronology23 = chronology4.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology4.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 26751806, chronology4);
        org.joda.time.DateTimeField dateTimeField26 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime30.toString(dateTimeFormatter33);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("20");
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        java.lang.String str41 = dateTime30.toString("1969", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology4, locale36, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField44 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology4.dayOfMonth();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField47 = chronology4.hourOfHalfday();
        org.joda.time.DurationField durationField48 = chronology4.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime46", (dateTime12.compareTo(dateTime46) == 0) == dateTime12.equals(dateTime46));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0991");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        java.lang.Integer int29 = dateTimeParserBucket27.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(457087L, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateTime dateTime39 = dateTime35.plusHours((int) (byte) 100);
        int int40 = dateTime35.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str42 = dateTimeFieldType41.getName();
        int int43 = dateTime35.get(dateTimeFieldType41);
        int int44 = localDateTime33.get(dateTimeFieldType41);
        java.util.Locale locale46 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = property61.getAsText(locale62);
        java.lang.String str65 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDateTime55, (-1), locale62);
        java.util.Set<java.lang.Character> charSet66 = locale62.getExtensionKeys();
        java.lang.String str67 = locale46.getDisplayLanguage(locale62);
        java.util.Set<java.lang.Character> charSet68 = locale62.getExtensionKeys();
        java.lang.String str69 = locale62.getVariant();
        java.lang.String str70 = locale62.getISO3Country();
        java.lang.String str71 = locale62.getDisplayScript();
        dateTimeParserBucket27.saveField(dateTimeFieldType41, "237", locale62);
        java.util.Locale locale73 = dateTimeParserBucket27.getLocale();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int79 = localDateTime75.get(dateTimeFieldType78);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology82 = localDateTime81.getChronology();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(chronology82);
        java.lang.String str84 = chronology82.toString();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.weekOfWeekyear();
        boolean boolean86 = dateTimeFieldType78.isSupported(chronology82);
        org.joda.time.DateTimeField dateTimeField87 = chronology82.secondOfMinute();
        org.joda.time.DurationField durationField88 = chronology82.minutes();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology82.getZone();
        org.joda.time.DateTimeField dateTimeField90 = chronology82.secondOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology82.secondOfDay();
        dateTimeParserBucket27.saveField(dateTimeField91, 26959861);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime83", (dateTime35.compareTo(dateTime83) == 0) == dateTime35.equals(dateTime83));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0992");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.withChronology(chronology5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        boolean boolean30 = dateTimeZone26.isFixed();
        long long32 = dateTimeZone26.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone26);
        java.lang.String str34 = dateTimeZone26.getID();
        int int36 = dateTimeZone26.getStandardOffset(770L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime6", (dateTime1.compareTo(dateTime6) == 0) == dateTime1.equals(dateTime6));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0993");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(26751557);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.minus(readablePeriod29);
        org.joda.time.DateTime.Property property31 = dateTime27.secondOfDay();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime27.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime27.withMillisOfDay(26864488);
        long long44 = dateTime27.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime39", (dateTime27.compareTo(dateTime39) == 0) == dateTime27.equals(dateTime39));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0994");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (byte) 100);
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusDays(4);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField31.getType();
        int int33 = localDateTime23.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime12.withField(dateTimeFieldType32, 590);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.year();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMinutes(99);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusYears(631);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        java.lang.String str47 = dateTimeZone45.getID();
        long long51 = dateTimeZone45.convertLocalToUTC((-1510245240163L), true, (long) 359);
        boolean boolean53 = dateTimeZone45.isStandardOffset((long) 86399);
        long long55 = dateTimeZone45.previousTransition((long) 353);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        java.lang.Integer int65 = dateTimeParserBucket61.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket61.setZone(dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.lang.String str71 = locale70.getDisplayName();
        dateTimeParserBucket61.saveField(dateTimeFieldType68, "97", locale70);
        dateTimeParserBucket61.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket61.setOffset(453);
        java.lang.Object obj77 = dateTimeParserBucket61.saveState();
        dateTimeParserBucket61.setPivotYear((java.lang.Integer) 466);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeParserBucket61.getZone();
        long long82 = dateTimeZone45.getMillisKeepLocal(dateTimeZone80, (long) 686);
        org.joda.time.DateTime dateTime83 = localDateTime40.toDateTime(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime46", (dateTime27.compareTo(dateTime46) == 0) == dateTime27.equals(dateTime46));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.plus(2578202978400000L);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        java.lang.Integer int20 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket16.setZone(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale25.getDisplayName();
        dateTimeParserBucket16.saveField(dateTimeFieldType23, "97", locale25);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.lang.Integer int48 = dateTimeParserBucket44.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone49);
        dateTimeParserBucket35.setZone(dateTimeZone49);
        boolean boolean52 = dateTimeZone49.isFixed();
        long long55 = dateTimeZone49.adjustOffset(1014721200000L, false);
        long long57 = dateTimeZone49.convertUTCToLocal(1014721200000L);
        long long59 = dateTimeZone29.getMillisKeepLocal(dateTimeZone49, (long) 2020);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int65 = localDateTime61.get(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        java.lang.String str70 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.weekOfWeekyear();
        boolean boolean72 = dateTimeFieldType64.isSupported(chronology68);
        org.joda.time.DateTimeField dateTimeField73 = chronology68.yearOfEra();
        boolean boolean75 = dateTimeField73.isLeap((long) 57);
        boolean boolean76 = dateTimeZone29.equals((java.lang.Object) 57);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime8.toMutableDateTime(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime69", (dateTime8.compareTo(dateTime69) == 0) == dateTime8.equals(dateTime69));
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0996");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfWeek();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        dateTimeParserBucket22.saveField(dateTimeFieldType26, "it", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology12, locale28, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology3, locale28);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfYear();
        boolean boolean45 = dateTimeParserBucket33.restoreState((java.lang.Object) dateTimeField44);
        long long48 = dateTimeParserBucket33.computeMillis(true, "974");
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) 0);
        boolean boolean54 = dateTime52.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        boolean boolean59 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime();
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        java.lang.String str62 = chronology61.toString();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.DurationField durationField64 = chronology61.centuries();
        org.joda.time.DurationField durationField65 = chronology61.weekyears();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.dayOfYear();
        org.joda.time.Chronology chronology67 = chronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.era();
        dateTimeParserBucket33.saveField(dateTimeField68, 75121275);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime50", (dateTime4.compareTo(dateTime50) == 0) == dateTime4.equals(dateTime50));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0997");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime57 = dateTime55.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime59.getZone();
        long long61 = dateTime59.getMillis();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime59.getZone();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(1644910003302L, dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = property68.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plus(readablePeriod72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.plusMillis(445);
        java.lang.String str77 = localDateTime76.toString();
        int int78 = localDateTime76.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.hourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = property79.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime81 = property79.getLocalDateTime();
        java.util.Locale locale85 = new java.util.Locale("", "+23:00", "26909509");
        java.lang.String str86 = property79.getAsShortText(locale85);
        java.lang.String str87 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, 410400000, locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime53", (dateTime19.compareTo(dateTime53) == 0) == dateTime19.equals(dateTime53));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0998");
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        boolean boolean12 = strSet3.contains((java.lang.Object) chronology6);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology6, locale13, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DurationField durationField17 = chronology6.days();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour((int) (short) 10);
        int int32 = dateTime31.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withDurationAdded(readableDuration33, (int) (byte) 0);
        boolean boolean36 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime24.minusMonths(173);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        java.util.Date date43 = dateTime40.toDate();
        org.joda.time.DateTime.Property property44 = dateTime40.dayOfMonth();
        org.joda.time.DateTime.Property property45 = dateTime40.dayOfMonth();
        java.lang.String str46 = property45.getAsString();
        org.joda.time.DateTime dateTime48 = property45.addToCopy(837);
        org.joda.time.DateTime dateTime50 = dateTime48.withYear(49);
        boolean boolean51 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime24.minus(readablePeriod52);
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.DateTime dateTime56 = property54.addToCopy((long) 627);
        int int57 = dateTime56.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundHalfEvenCopy();
        java.lang.String str63 = property61.getAsText();
        int int64 = property61.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime65 = property61.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = localDateTime67.getFields();
        boolean boolean72 = localDateTime67.equals((java.lang.Object) 774);
        int int73 = localDateTime67.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime67.minusWeeks(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property79 = localDateTime67.property(dateTimeFieldType77);
        boolean boolean80 = dateTime56.isSupported(dateTimeFieldType77);
        boolean boolean81 = localDateTime18.isSupported(dateTimeFieldType77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0999");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        boolean boolean5 = property4.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = property4.addToCopy((long) 26775034);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology25);
        int int32 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean33 = localDateTime16.equals((java.lang.Object) dateTimeField22);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = dateTimeField22.getAsText(90000000L, locale36);
        java.lang.String str39 = locale36.getDisplayLanguage();
        java.lang.String str40 = locale36.getScript();
        int int41 = property4.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime42 = property4.roundHalfFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekyear((-1));
        org.joda.time.DateTime dateTime60 = dateTime56.plusHours((int) (byte) 100);
        boolean boolean62 = dateTime60.isBefore((long) ' ');
        int int63 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime65 = dateTime60.minusYears(20);
        org.joda.time.DateTime.Property property66 = dateTime65.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours((int) (byte) 0);
        java.util.Date date71 = dateTime68.toDate();
        org.joda.time.DateTime.Property property72 = dateTime68.dayOfMonth();
        org.joda.time.DateTime.Property property73 = dateTime68.dayOfMonth();
        int int74 = property66.getDifference((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime76 = property66.addToCopy(52L);
        org.joda.time.DateTime dateTime78 = property66.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime80 = dateTime78.withMillisOfDay(585);
        boolean boolean82 = dateTime78.isAfter(0L);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology85 = localDateTime84.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int87 = localDateTime84.get(dateTimeFieldType86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime84.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property88.getFieldType();
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType89.getRangeDurationType();
        int int91 = dateTime78.get(dateTimeFieldType89);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType89.getDurationType();
        boolean boolean93 = localDateTime42.isSupported(dateTimeFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime56", (dateTime20.compareTo(dateTime56) == 0) == dateTime20.equals(dateTime56));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test1000");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 736);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.clockhourOfDay();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField12.getType();
        int int15 = localDateTime1.indexOf(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean27 = dateTime26.isEqualNow();
        org.joda.time.LocalDateTime localDateTime28 = dateTime26.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.minus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths(99);
        org.joda.time.DateTime.Property property33 = dateTime26.minuteOfDay();
        org.joda.time.DateTime dateTime35 = dateTime26.minusMinutes(713);
        boolean boolean37 = dateTime35.equals((java.lang.Object) "DateTimeField[yearOfCentury]");
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime39.year();
        org.joda.time.DateTime dateTime44 = dateTime39.minusSeconds(241);
        org.joda.time.DateTime dateTime46 = dateTime39.plusMillis(608);
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra(58);
        org.joda.time.DateTime dateTime50 = dateTime46.minusWeeks(3);
        int int51 = dateTime50.getMillisOfSecond();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField58 = null;
        dateTimeParserBucket57.saveField(dateTimeField58, (int) (short) 0);
        dateTimeParserBucket57.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfMinute();
        java.lang.String str69 = dateTimeField67.getAsShortText((long) 28);
        dateTimeParserBucket57.saveField(dateTimeField67, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket57.saveField(dateTimeFieldType72, 26761064);
        int int75 = dateTime50.get(dateTimeFieldType72);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime80 = property79.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withYear(2022);
        org.joda.time.Chronology chronology85 = localDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType72.getField(chronology85);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime35.toMutableDateTime(chronology85);
        boolean boolean88 = dateTimeFieldType14.isSupported(chronology85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime39", (dateTime19.compareTo(dateTime39) == 0) == dateTime19.equals(dateTime39));
    }
}


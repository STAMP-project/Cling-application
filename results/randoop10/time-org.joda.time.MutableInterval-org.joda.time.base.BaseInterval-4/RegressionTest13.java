import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property9 = dateTime4.year();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:37:59.522+10:22" + "'", str2, "2022-02-22T17:37:59.522+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = duration25.toPeriod();
        boolean boolean28 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType29);
        long long31 = duration19.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime4.minus((org.joda.time.ReadableDuration) duration19);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.DateTime.Property property34 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime.Property property35 = dateTime32.hourOfDay();
        int int36 = property35.getMaximumValue();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514159541L + "'", long2 == 1645514159541L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514159541L + "'", long12 == 1645514159541L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100000L + "'", long31 == 100000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        boolean boolean18 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime16);
        long long19 = interval11.getEndMillis();
        org.joda.time.DateTime dateTime20 = interval11.getStart();
        org.joda.time.Period period21 = interval11.toPeriod();
        org.joda.time.Period period23 = period21.minusYears(63218886);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        int int25 = mutablePeriod24.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime35 = dateTime30.withFieldAdded(durationFieldType33, (int) '#');
        mutablePeriod24.set(durationFieldType33, 9);
        org.joda.time.Period period39 = period23.withField(durationFieldType33, 63341890);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514159591L + "'", long2 == 1645514159591L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514159591L + "'", long17 == 1645514159591L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1672493880000L + "'", long19 == 1672493880000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:37:59.591+10:22" + "'", str28, "2022-02-22T17:37:59.591+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        mutablePeriod0.setPeriod((long) 258, 1645513810710L, chronology19);
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+10:22]" + "'", str20, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.DateTime dateTime17 = property15.setCopy(59);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int21 = dateTime17.getDayOfMonth();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1813L) + "'", long6 == (-1813L));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:37:59.648+10:22" + "'", str9, "2022-02-22T17:37:59.648+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(52);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis(0);
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusMinutes(3);
        org.joda.time.DateTime dateTime33 = dateTime26.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillisOfSecond(70);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis(1645513860650L);
        org.joda.time.Interval interval38 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.TimeOfDay timeOfDay39 = dateTime37.toTimeOfDay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:37:59.669+10:22" + "'", str10, "2022-02-22T17:37:59.669+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:37:59.669+10:22" + "'", str27, "2022-02-22T17:37:59.669+10:22");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(timeOfDay39);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        long long8 = dateTimeZone5.convertUTCToLocal((long) 63095888);
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Interval interval20 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        boolean boolean22 = interval20.isAfter(1645514101942L);
        boolean boolean23 = dateTimeZone5.equals((java.lang.Object) boolean22);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514159715L + "'", long2 == 1645514159715L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100415888L + "'", long8 == 100415888L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:22" + "'", str9, "+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514159715L + "'", long12 == 1645514159715L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        int int18 = period16.getMillis();
        org.joda.time.DurationFieldType durationFieldType20 = period16.getFieldType(0);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 3, 1645513762121L, periodType24, chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfMonth();
        boolean boolean36 = durationFieldType20.isSupported(chronology32);
        org.joda.time.Period period37 = new org.joda.time.Period(43200000L, periodType4, chronology32);
        java.lang.String str38 = periodType4.toString();
        org.joda.time.PeriodType periodType39 = periodType4.withMonthsRemoved();
        org.joda.time.PeriodType periodType40 = periodType4.withMonthsRemoved();
        java.lang.String str41 = periodType4.toString();
        org.joda.time.PeriodType periodType42 = periodType4.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.Period period51 = period47.plusWeeks((int) (short) -1);
        org.joda.time.Period period53 = period47.minusMillis(4);
        org.joda.time.Interval interval54 = interval46.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.era();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfMonth();
        org.joda.time.Period period58 = new org.joda.time.Period(1645513984150L, 1645513839968L, periodType42, chronology55);
        org.joda.time.Chronology chronology59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1645514130412L, periodType42, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514130412");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:37:59.774+10:22" + "'", str10, "2022-02-22T17:37:59.774+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[Millis]" + "'", str38, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[Millis]" + "'", str41, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-22T17:36:28.259+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withWeekyear(1051);
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        int int25 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property26 = dateTime23.millisOfSecond();
        int int27 = dateTime23.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:37:59.822+10:22" + "'", str9, "2022-02-22T17:37:59.822+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514159822L + "'", long19 == 1645514159822L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Interval interval13 = interval3.withEndMillis(1645513791936L);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant17 = instant15.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        boolean boolean24 = mutableInterval18.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        boolean boolean26 = mutableInterval18.contains((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = duration32.plus((long) 8);
        org.joda.time.Instant instant36 = instant28.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration49 = duration38.minus(0L);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration53.plus((long) 8);
        org.joda.time.Duration duration58 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) '#');
        org.joda.time.Instant instant59 = instant36.plus((org.joda.time.ReadableDuration) duration58);
        long long60 = instant59.getMillis();
        boolean boolean61 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) instant59);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType65 = periodType64.withYearsRemoved();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        java.lang.Object obj72 = mutableInterval67.clone();
        org.joda.time.Chronology chronology73 = mutableInterval67.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.yearOfEra();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 3, 1645513762121L, periodType65, chronology73);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.dayOfMonth();
        org.joda.time.DurationField durationField77 = chronology73.months();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str82 = dateTimeZone80.getNameKey(1645513759301L);
        java.lang.String str84 = dateTimeZone80.getName(1645513762160L);
        java.util.TimeZone timeZone85 = dateTimeZone80.toTimeZone();
        int int87 = dateTimeZone80.getStandardOffset(1645513761942L);
        int int89 = dateTimeZone80.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology90 = chronology73.withZone(dateTimeZone80);
        int int92 = dateTimeZone80.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone80);
        boolean boolean94 = dateTimeZone80.isFixed();
        org.joda.time.MutableDateTime mutableDateTime95 = instant59.toMutableDateTime(dateTimeZone80);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) mutableDateTime95);
        boolean boolean97 = interval3.contains((org.joda.time.ReadableInstant) mutableDateTime95);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:37:59.850+10:22" + "'", str41, "2022-02-22T17:37:59.850+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645517463304L + "'", long60 == 1645517463304L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
// flaky:         org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:22" + "'", str84, "+10:22");
        org.junit.Assert.assertNotNull(timeZone85);
        org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 37320000 + "'", int87 == 37320000);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 37320000 + "'", int89 == 37320000);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 37320000 + "'", int92 == 37320000);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        boolean boolean50 = dateTime48.isBefore((-1L));
        boolean boolean51 = interval43.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        org.joda.time.LocalTime localTime53 = dateTime48.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField55 = localTime53.getField(63256076);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63256076");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:37:59.936+10:22" + "'", str16, "2022-02-22T17:37:59.936+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:37:59.936+10:22" + "'", str46, "2022-02-22T17:37:59.936+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        java.util.Locale locale13 = null;
        int int14 = property11.getMaximumTextLength(locale13);
        org.joda.time.DateTime dateTime16 = property11.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime17 = property11.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        boolean boolean19 = mutableInterval18.containsNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withEra((int) (byte) 1);
        boolean boolean25 = mutableInterval18.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        boolean boolean36 = mutableInterval26.contains((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        mutableInterval18.setEnd((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime38.getMillisOfDay();
        org.joda.time.DateTime.Property property41 = dateTime38.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.DateTime dateTime43 = property41.withMinimumValue();
        boolean boolean44 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property46 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime47 = property46.getDateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.weekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:37:59.961+10:22" + "'", str2, "2022-02-22T17:37:59.961+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514159961L + "'", long10 == 1645514159961L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:37:59.961+10:22" + "'", str22, "2022-02-22T17:37:59.961+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514159961L + "'", long33 == 1645514159961L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 63479961 + "'", int37 == 63479961);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 63479961 + "'", int40 == 63479961);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        long long14 = dateTimeField11.add(1645513783767L, 63105178);
        long long17 = dateTimeField11.addWrapField(1645513843567L, 1244);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1991408718553783767L + "'", long14 == 1991408718553783767L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 40902390643567L + "'", long17 == 40902390643567L);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Seconds seconds15 = period14.toStandardSeconds();
        int int16 = period14.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = period14.getFieldType(0);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        boolean boolean34 = durationFieldType18.isSupported(chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period(43200000L, periodType2, chronology30);
        java.lang.String str36 = periodType2.toString();
        org.joda.time.PeriodType periodType37 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType2.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T17:34:06.368+10:22", periodType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:34:06.368+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:00.035+10:22" + "'", str8, "2022-02-22T17:38:00.035+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[Millis]" + "'", str36, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int9 = dateTimeZone7.getOffsetFromLocal(1645513761942L);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(0L, dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(63405735, 63129196, 63422131, 24, 63440377, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 115200000 + "'", int9 == 115200000);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        java.util.Locale locale13 = null;
        int int14 = property11.getMaximumTextLength(locale13);
        org.joda.time.DateTime dateTime16 = property11.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime17 = property11.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        boolean boolean19 = mutableInterval18.containsNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withEra((int) (byte) 1);
        boolean boolean25 = mutableInterval18.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        boolean boolean36 = mutableInterval26.contains((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        mutableInterval18.setEnd((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime38.getMillisOfDay();
        org.joda.time.DateTime.Property property41 = dateTime38.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.DateTime dateTime43 = property41.withMinimumValue();
        boolean boolean44 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property46 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime47 = property46.getDateTime();
        org.joda.time.DateTime dateTime49 = dateTime47.withYear(63186663);
        org.joda.time.Instant instant50 = dateTime47.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:00.091+10:22" + "'", str2, "2022-02-22T17:38:00.091+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514160091L + "'", long10 == 1645514160091L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:00.091+10:22" + "'", str22, "2022-02-22T17:38:00.091+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514160091L + "'", long33 == 1645514160091L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 63480091 + "'", int37 == 63480091);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 63480091 + "'", int40 == 63480091);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(instant50);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        org.joda.time.DateTime dateTime23 = dateTime15.minus(1645513766926L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTimeISO();
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime32);
        mutablePeriod34.setDays(63120817);
        mutablePeriod34.clear();
        mutablePeriod34.addYears(63399);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:00.166+10:22" + "'", str9, "2022-02-22T17:38:00.166+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:00.167+10:22" + "'", str26, "2022-02-22T17:38:00.167+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology11.getZone();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType33 = periodType32.withMinutesRemoved();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Seconds seconds45 = period44.toStandardSeconds();
        int int46 = period44.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = period44.getFieldType(0);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType52 = periodType51.withYearsRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 3, 1645513762121L, periodType52, chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfMonth();
        boolean boolean64 = durationFieldType48.isSupported(chronology60);
        org.joda.time.Period period65 = new org.joda.time.Period(43200000L, periodType32, chronology60);
        java.lang.String str66 = periodType32.toString();
        org.joda.time.PeriodType periodType67 = periodType32.withMonthsRemoved();
        boolean boolean68 = dateTimeZone30.equals((java.lang.Object) periodType32);
        boolean boolean70 = dateTimeZone30.isStandardOffset(1645513798804L);
        java.lang.String str72 = dateTimeZone30.getNameKey(1645513807189L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:38:00.207+10:22" + "'", str38, "2022-02-22T17:38:00.207+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[Millis]" + "'", str66, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration3 = duration0.withDurationAdded(1645513769452L, 2021);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.Duration duration25 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Duration duration40 = duration3.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(1645513978805L);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:00.287+10:22" + "'", str8, "2022-02-22T17:38:00.287+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:00.287+10:22" + "'", str28, "2022-02-22T17:38:00.287+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(duration40);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant19 = instant17.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Instant instant21 = instant17.minus(1645513772143L);
        long long22 = instant21.getMillis();
        org.joda.time.Instant instant24 = instant21.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean46 = dateTime43.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime48 = dateTime43.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property50 = dateTime43.dayOfWeek();
        org.joda.time.LocalDate localDate51 = dateTime43.toLocalDate();
        int[] intArray53 = chronology11.get((org.joda.time.ReadablePartial) localDate51, 1645513868815L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(1051, 63116635, 19, 63448492, 63293300, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63448492 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1813L) + "'", long22 == (-1813L));
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:00.347+10:22" + "'", str34, "2022-02-22T17:38:00.347+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514160347L + "'", long44 == 1645514160347L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2022, 2, 22]");
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        int[] intArray30 = mutablePeriod29.getValues();
        org.joda.time.Period period32 = org.joda.time.Period.hours((int) 'a');
        org.joda.time.Period period34 = period32.minusMillis((int) ' ');
        mutablePeriod29.add((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period37 = period34.withHours(5);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.DateTime dateTime44 = property41.roundHalfEvenCopy();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        boolean boolean46 = mutableInterval45.containsNow();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withEra((int) (byte) 1);
        boolean boolean52 = mutableInterval45.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        boolean boolean63 = mutableInterval53.contains((org.joda.time.ReadableInstant) dateTime62);
        int int64 = dateTime62.getMillisOfDay();
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        mutableInterval45.setEnd((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime65.getMillisOfDay();
        boolean boolean68 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration69 = period34.toDurationTo((org.joda.time.ReadableInstant) dateTime65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = dateTime65.withWeekOfWeekyear(63358);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63358 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:00.377+10:22" + "'", str5, "2022-02-22T17:38:00.377+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period37);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514160377L + "'", long40 == 1645514160377L);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:00.377+10:22" + "'", str49, "2022-02-22T17:38:00.377+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514160377L + "'", long60 == 1645514160377L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 63480377 + "'", int64 == 63480377);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 63480377 + "'", int67 == 63480377);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.joda.time.Period period4 = new org.joda.time.Period(577, 63428481, (-1645450678), 63461236);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 3, 1645513762121L, periodType16, chronology24);
        org.joda.time.DurationField durationField27 = chronology24.eras();
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.hourOfHalfday();
        boolean boolean32 = periodType4.equals((java.lang.Object) chronology24);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T17:33:14.388+10:22", chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(1645514129165L, 1645513958945L, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:38:00.425+10:22" + "'", str7, "2022-02-22T17:38:00.425+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.toString();
        boolean boolean16 = periodType3.isSupported(durationFieldType14);
        org.joda.time.PeriodType periodType17 = periodType3.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        boolean boolean24 = dateTime22.isBefore((-1L));
        org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        org.joda.time.DateTime dateTime27 = property25.roundFloorCopy();
        boolean boolean28 = periodType3.equals((java.lang.Object) dateTime27);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime27.toYearMonthDay();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "seconds" + "'", str15, "seconds");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:00.453+10:22" + "'", str20, "2022-02-22T17:38:00.453+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant14, periodType18);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Instant instant35 = instant27.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        org.joda.time.DateTime dateTime37 = instant35.toDateTimeISO();
        boolean boolean38 = mutableInterval0.contains((org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:00.480+10:22" + "'", str5, "2022-02-22T17:38:00.480+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513765808L);
        java.lang.Object obj2 = mutablePeriod1.clone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval14 = interval7.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval28 = interval14.gap((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Duration duration30 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.Duration duration45 = duration32.withMillis(1645513760253L);
        org.joda.time.Duration duration46 = duration32.toDuration();
        org.joda.time.Duration duration47 = duration30.minus((org.joda.time.ReadableDuration) duration46);
        long long48 = duration47.getStandardDays();
        long long49 = duration47.getStandardHours();
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime.Property property54 = dateTime52.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval61 = interval55.withDurationAfterStart((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval62 = interval55.toInterval();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        mutableInterval63.setInterval((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Interval interval76 = interval62.gap((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        boolean boolean78 = mutableInterval77.containsNow();
        boolean boolean79 = interval62.isBefore((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Period period80 = interval62.toPeriod();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period83 = duration82.toPeriod();
        int int84 = period83.size();
        org.joda.time.Interval interval85 = interval62.withPeriodAfterStart((org.joda.time.ReadablePeriod) period83);
        boolean boolean86 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Interval interval87 = interval62.toInterval();
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval62);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "P1YT457087H9M25.808S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "P1YT457087H9M25.808S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "P1YT457087H9M25.808S");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514160505L + "'", long5 == 1645514160505L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:38:00.506+10:22" + "'", str35, "2022-02-22T17:38:00.506+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 19045L + "'", long48 == 19045L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 457087L + "'", long49 == 457087L);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514160506L + "'", long53 == 1645514160506L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval87);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.LocalTime localTime12 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime3.minuteOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) -1, 3, (int) (byte) 1, (int) (short) 100, 429, 0, 63098347, 4);
        org.joda.time.Period period25 = period23.minusMillis(37363);
        org.joda.time.Period period26 = period25.normalizedStandard();
        org.joda.time.DateTime dateTime27 = dateTime3.minus((org.joda.time.ReadablePeriod) period26);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:00.573+10:22" + "'", str4, "2022-02-22T17:38:00.573+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth(10);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod();
        int int31 = mutablePeriod30.getSeconds();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration44 = duration33.minus(0L);
        org.joda.time.Chronology chronology45 = null;
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration33, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        boolean boolean54 = dateTime52.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime(chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        boolean boolean73 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime70);
        java.lang.String str75 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval74.isAfter(1645513790779L);
        org.joda.time.Instant instant79 = new org.joda.time.Instant(1645513822860L);
        boolean boolean80 = mutableInterval74.isAfter((org.joda.time.ReadableInstant) instant79);
        boolean boolean81 = dateTime29.isBefore((org.joda.time.ReadableInstant) instant79);
        org.joda.time.DateTimeZone dateTimeZone82 = dateTime29.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str2, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str9, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str16, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str36, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str50, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str57, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:38:00.603+10:22" + "'", str64, "2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T17:38:00.010+10:22/2022-02-22T17:38:00.603+10:22" + "'", str75, "2022-02-22T17:38:00.010+10:22/2022-02-22T17:38:00.603+10:22");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeZone82);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(63467371, 63334410);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 63334410");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period9 = mutableInterval0.toPeriod(periodType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumTextLength(locale15);
        java.lang.String str17 = property13.toString();
        org.joda.time.DurationField durationField18 = property13.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property13.getFieldType();
        org.joda.time.Interval interval20 = property13.toInterval();
        boolean boolean21 = mutableInterval0.contains((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean32 = period30.equals((java.lang.Object) dateTimeFieldType31);
        org.joda.time.Period period34 = period30.plusWeeks(17);
        boolean boolean35 = mutableInterval22.equals((java.lang.Object) 17);
        org.joda.time.Duration duration36 = mutableInterval22.toDuration();
        boolean boolean37 = interval20.isAfter((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        int int43 = dateTime39.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime45.toDateTimeISO();
        int int53 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = dateTime39.isAfterNow();
        boolean boolean55 = interval20.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean56 = dateTime39.isEqualNow();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514160700L + "'", long12 == 1645514160700L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514160700L + "'", long40 == 1645514160700L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:00.700+10:22" + "'", str46, "2022-02-22T17:38:00.700+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        org.joda.time.DateTime dateTime14 = property3.addToCopy(25849642);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime14.withMinuteOfHour(63181860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63181860 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514160742L + "'", long2 == 1645514160742L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:38:00.742+10:22" + "'", str6, "2022-02-22T17:38:00.742+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        boolean boolean16 = interval11.isAfterNow();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(1645513766081L);
        org.joda.time.Interval interval19 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime20 = interval11.getEnd();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514160767L + "'", long2 == 1645514160767L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime4.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime4.minusSeconds(63098347);
        org.joda.time.DateTime dateTime21 = dateTime4.minusMillis(63215416);
        org.joda.time.DateTime dateTime23 = dateTime4.plusYears(63386078);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:00.902+10:22" + "'", str2, "2022-02-22T17:38:00.902+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:00.902+10:22" + "'", str9, "2022-02-22T17:38:00.902+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645513766895L);
        int int14 = mutablePeriod13.getYears();
        org.joda.time.DateTime dateTime15 = dateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(365);
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.Period period20 = org.joda.time.Period.days((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = period20.withMonths(58);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514160923L + "'", long2 == 1645514160923L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 63480 + "'", int10 == 63480);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant14, periodType18);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Instant instant35 = instant27.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Instant instant37 = instant35.minus(1645513769274L);
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) instant37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = instant37.toString(dateTimeFormatter39);
        org.joda.time.Instant instant42 = instant37.minus(1645514101285L);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:00.942+10:22" + "'", str5, "2022-02-22T17:38:00.942+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:01:33.750Z" + "'", str40, "1970-01-01T00:01:33.750Z");
        org.junit.Assert.assertNotNull(instant42);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = duration25.toPeriod();
        boolean boolean28 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType29);
        long long31 = duration19.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime4.minus((org.joda.time.ReadableDuration) duration19);
        int int33 = dateTime32.getCenturyOfEra();
        org.joda.time.DateTime dateTime35 = dateTime32.minusWeeks(31);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514161024L + "'", long2 == 1645514161024L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514161024L + "'", long12 == 1645514161024L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100000L + "'", long31 == 100000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration21 = duration5.plus(1645513764242L);
        org.joda.time.Period period22 = duration5.toPeriod();
        boolean boolean24 = duration5.equals((java.lang.Object) 1645513873747L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:38:01.067+10:22" + "'", str11, "2022-02-22T17:38:01.067+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval29.containsNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval47.toInterval();
        org.joda.time.Interval interval56 = interval54.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime57 = interval54.getStart();
        boolean boolean58 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) interval54);
        boolean boolean59 = mutableInterval26.contains((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType63 = period62.getPeriodType();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.Period period65 = mutableInterval26.toPeriod(periodType63);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        int int71 = period69.getValue(5);
        org.joda.time.Period period72 = period65.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = period69.isSupported(durationFieldType73);
        int int75 = period69.getWeeks();
        org.joda.time.Period period77 = period69.multipliedBy(19676);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:01.100+10:22" + "'", str2, "2022-02-22T17:38:01.100+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:01.100+10:22" + "'", str9, "2022-02-22T17:38:01.100+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:01.100+10:22" + "'", str16, "2022-02-22T17:38:01.100+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514161100L + "'", long45 == 1645514161100L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 8, periodType33, chronology40);
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration31, chronology40);
        org.joda.time.DateTime dateTime44 = dateTime4.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime45 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime4.getZone();
        int int47 = dateTime4.getMonthOfYear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:01.151+10:22" + "'", str2, "2022-02-22T17:38:01.151+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:01.151+10:22" + "'", str9, "2022-02-22T17:38:01.151+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:01.151+10:22" + "'", str16, "2022-02-22T17:38:01.151+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        int int26 = dateTime22.getMillisOfDay();
        int int27 = dateTime22.getMinuteOfHour();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:01.188+10:22" + "'", str4, "2022-02-22T17:38:01.188+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514161188L + "'", long18 == 1645514161188L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 63491188 + "'", int26 == 63491188);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 38 + "'", int27 == 38);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(10);
        java.lang.String str8 = property3.getAsShortText();
        int int9 = property3.getLeapAmount();
        int int10 = property3.getMinimumValueOverall();
        long long11 = property3.remainder();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514161211L + "'", long2 == 1645514161211L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4556281211L + "'", long11 == 4556281211L);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant11 = instant9.minus(1645513769274L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration24 = duration13.minus(0L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.Duration duration33 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) '#');
        java.lang.String str34 = duration24.toString();
        org.joda.time.Instant instant36 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfDay();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Seconds seconds58 = period57.toStandardSeconds();
        int int59 = period57.getMillis();
        int[] intArray62 = chronology43.get((org.joda.time.ReadablePeriod) period57, (long) (byte) 10, 1645513772584L);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Duration duration64 = period57.toDurationTo(readableInstant63);
        org.joda.time.Duration duration65 = duration24.minus((org.joda.time.ReadableDuration) duration64);
        boolean boolean67 = duration24.equals((java.lang.Object) 1645514015107L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:01.250+10:22" + "'", str16, "2022-02-22T17:38:01.250+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT100S" + "'", str34, "PT100S");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:01.250+10:22" + "'", str51, "2022-02-22T17:38:01.250+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = mutablePeriod34.getSeconds();
        mutablePeriod34.addSeconds(115200000);
        org.joda.time.Period period38 = period16.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod34.add(readablePeriod39);
        mutablePeriod34.setMonths(63100366);
        mutablePeriod34.add(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod34, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property54 = dateTime49.hourOfDay();
        boolean boolean56 = dateTime49.isEqual(1645513928168L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:01.300+10:22" + "'", str27, "2022-02-22T17:38:01.300+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(period38);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:01.300+10:22" + "'", str47, "2022-02-22T17:38:01.300+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 63270105);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        mutablePeriod9.addSeconds((int) '#');
        mutablePeriod9.setWeeks(63102174);
        mutablePeriod9.addDays(63128571);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.millis();
        java.lang.String str17 = periodType16.getName();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType16);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType22 = periodType21.withMinutesRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period(1645513766081L, 1645513768392L, periodType21);
        java.lang.Object obj24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(obj24, periodType25, chronology26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        boolean boolean29 = periodType25.isSupported(durationFieldType28);
        int int30 = period23.indexOf(durationFieldType28);
        int int31 = periodType16.indexOf(durationFieldType28);
        boolean boolean32 = mutablePeriod9.isSupported(durationFieldType28);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(0);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        org.joda.time.DateTime dateTime61 = dateTime44.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (short) 0);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology69);
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.Period period72 = duration63.toPeriodFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration74 = duration63.minus(0L);
        boolean boolean75 = duration59.isShorterThan((org.joda.time.ReadableDuration) duration63);
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration59);
        mutablePeriod35.addMonths(52);
        mutablePeriod35.addWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        org.joda.time.DateTime.Property property84 = dateTime82.yearOfEra();
        org.joda.time.Interval interval85 = property84.toInterval();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval();
        long long87 = mutableInterval86.toDurationMillis();
        org.joda.time.Duration duration89 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval86.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Interval interval91 = interval85.withDurationAfterStart((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Interval interval92 = interval85.toInterval();
        mutablePeriod35.setPeriod((org.joda.time.ReadableInterval) interval85);
        org.joda.time.MutableInterval mutableInterval94 = interval85.toMutableInterval();
        org.joda.time.DateTime dateTime95 = interval85.getStart();
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval85);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Millis" + "'", str17, "Millis");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:38:01.366+10:22" + "'", str38, "2022-02-22T17:38:01.366+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:01.366+10:22" + "'", str51, "2022-02-22T17:38:01.366+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration63);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T17:38:01.366+10:22" + "'", str66, "2022-02-22T17:38:01.366+10:22");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1645514161366L + "'", long83 == 1645514161366L);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        long long25 = property23.remainder();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        boolean boolean36 = mutableInterval26.contains((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        long long39 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime38.withTime(63362094, 63115438, 63101169, 63148593);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63362094 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:01.443+10:22" + "'", str4, "2022-02-22T17:38:01.443+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514161443L + "'", long15 == 1645514161443L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63481443 + "'", int19 == 63481443);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63481443 + "'", int22 == 63481443);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 443L + "'", long25 == 443L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514161443L + "'", long33 == 1645514161443L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 63481443 + "'", int37 == 63481443);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        int int16 = mutablePeriod9.getHours();
        org.joda.time.format.PeriodFormatter periodFormatter17 = null;
        java.lang.String str18 = mutablePeriod9.toString(periodFormatter17);
        mutablePeriod9.setWeeks(25830425);
        mutablePeriod9.setPeriod(25843148, (-292275054), (-44), 63175502, 63111089, 63180, 63194234, 25815966);
        mutablePeriod9.setMonths(63212376);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P25843148Y63212376M-44W63175502DT63111089H63180M63220049.966S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P25843148Y63212376M-44W63175502DT63111089H63180M63220049.966S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P25843148Y63212376M-44W63175502DT63111089H63180M63220049.966S");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P32M" + "'", str18, "P32M");
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period9.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType15 = periodType12.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1645513821823L, periodType15);
        org.joda.time.PeriodType periodType17 = periodType15.withMonthsRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1L), 1L, periodType24, chronology25);
        java.lang.String str27 = periodType24.toString();
        java.lang.String str28 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760165L, periodType24);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType24, chronology36);
        boolean boolean38 = dateTimeFieldType18.isSupported(chronology36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period51 = period49.withYears(52);
        org.joda.time.Period period53 = period49.multipliedBy(2022);
        org.joda.time.Period period55 = period53.plusMonths((int) (byte) 10);
        int[] intArray56 = period53.getValues();
        int[] intArray59 = chronology36.get((org.joda.time.ReadablePeriod) period53, 1645513796165L, 1645513773396000L);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 63197084, (long) 63119816, periodType15, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(25947, 63234600, 63376917, 63119929, 63364495, 63102368, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63119929 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Time]" + "'", str27, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Time" + "'", str28, "Time");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:38:01.651+10:22" + "'", str43, "2022-02-22T17:38:01.651+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[52092, 1, 1, 6, 0, 6, 39, 835]");
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(20, 63254, 63175156, 63304703, 63361194, 63321034, 63441344);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63304703 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        int int16 = dateTime12.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        int int26 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDate localDate27 = dateTime25.toLocalDate();
        org.joda.time.DateTimeField dateTimeField29 = localDate27.getField((int) (short) 0);
        int int30 = localDate27.size();
        int[] intArray32 = chronology8.get((org.joda.time.ReadablePartial) localDate27, 1645513768281L);
        org.joda.time.DurationField durationField33 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField34 = chronology8.monthOfYear();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514161757L + "'", long13 == 1645514161757L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:38:01.757+10:22" + "'", str19, "2022-02-22T17:38:01.757+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        java.lang.String str37 = chronology35.toString();
        long long41 = chronology35.add((long) (-3600000), 1645476451518L, 37470);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.era();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:01.847+10:22" + "'", str2, "2022-02-22T17:38:01.847+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:01.847+10:22" + "'", str9, "2022-02-22T17:38:01.847+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:01.847+10:22" + "'", str16, "2022-02-22T17:38:01.847+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:22]" + "'", str37, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 61656002634779460L + "'", long41 == 61656002634779460L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        int int10 = property3.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162042L + "'", long2 == 1645514162042L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1L), 1L, periodType10, chronology11);
        java.lang.String str13 = periodType10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period(63345139, 63267028, 63227245, 63138973, 63360956, 63410892, 762, 37499, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Time]" + "'", str13, "PeriodType[Time]");
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime20.plusSeconds(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:02.101+10:22" + "'", str4, "2022-02-22T17:38:02.101+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514162101L + "'", long15 == 1645514162101L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63482101 + "'", int19 == 63482101);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63482101 + "'", int22 == 63482101);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513870239L);
        mutablePeriod1.add(4383435902L);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime4.hourOfDay();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfDay();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        mutablePeriod19.setMonths((int) ' ');
        java.lang.Object obj22 = mutablePeriod19.clone();
        long long25 = chronology16.add((org.joda.time.ReadablePeriod) mutablePeriod19, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.DurationField durationField42 = dateTimeField41.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        int int50 = yearMonthDay49.size();
        int[] intArray55 = new int[] { 40, 40, '#', 10 };
        int int56 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay49, intArray55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) yearMonthDay49);
        int int58 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateTime dateTime59 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime.Property property63 = dateTime61.yearOfEra();
        org.joda.time.DateTime dateTime64 = property63.roundFloorCopy();
        org.joda.time.DateTime dateTime65 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTimeISO();
        int int72 = dateTime70.getMonthOfYear();
        org.joda.time.DateTime.Property property73 = dateTime70.minuteOfDay();
        org.joda.time.DateTime dateTime74 = property73.getDateTime();
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = duration75.plus(1645513820803L);
        org.joda.time.DateTime dateTime79 = dateTime59.withDurationAdded((org.joda.time.ReadableDuration) duration75, 63401080);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:02.139+10:22" + "'", str2, "2022-02-22T17:38:02.139+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "P32M");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1851379200000L + "'", long25 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514162139L + "'", long29 == 1645514162139L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514162139L + "'", long45 == 1645514162139L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645514162139L + "'", long62 == 1645514162139L);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514162139L + "'", long68 == 1645514162139L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(37);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(3);
        org.joda.time.DateTime dateTime12 = dateTime8.withEra((int) (byte) 1);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        boolean boolean20 = dateTime18.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        boolean boolean39 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getEnd();
        java.util.GregorianCalendar gregorianCalendar42 = dateTime41.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay43 = dateTime41.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime.Property property47 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = property47.roundFloorCopy();
        java.lang.String str49 = property47.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property47.getFieldType();
        org.joda.time.DateTime dateTime52 = dateTime41.withField(dateTimeFieldType50, 63101169);
        boolean boolean53 = localTime13.isSupported(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str55 = dateTimeFieldType54.getName();
        java.lang.String str56 = dateTimeFieldType54.toString();
        boolean boolean57 = localTime13.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime dateTime58 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField60 = localTime13.getField(63416);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63416");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514162281L + "'", long6 == 1645514162281L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:02.281+10:22" + "'", str16, "2022-02-22T17:38:02.281+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:02.281+10:22" + "'", str23, "2022-02-22T17:38:02.281+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:02.281+10:22" + "'", str30, "2022-02-22T17:38:02.281+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertNotNull(timeOfDay43);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514162281L + "'", long46 == 1645514162281L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Property[yearOfEra]" + "'", str49, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "dayOfYear" + "'", str55, "dayOfYear");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "dayOfYear" + "'", str56, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645514102780L);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        long long14 = interval11.getEndMillis();
        org.joda.time.Interval interval16 = interval11.withStartMillis(1645513865849L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Period period28 = interval26.toPeriod();
        boolean boolean29 = interval16.contains((org.joda.time.ReadableInterval) interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162346L + "'", long2 == 1645514162346L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1672493880000L + "'", long14 == 1672493880000L);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:38:02.346+10:22" + "'", str19, "2022-02-22T17:38:02.346+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.Interval interval10 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumTextLength(locale16);
        org.joda.time.DateTime dateTime19 = property14.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime20 = property14.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(63088836);
        int int28 = property14.getDifference((org.joda.time.ReadableInstant) dateTime25);
        long long29 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant33 = instant31.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant35 = instant31.minus(1645513772143L);
        long long36 = instant35.getMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime.Property property45 = dateTime44.centuryOfEra();
        org.joda.time.DateTime dateTime47 = property45.setCopy(59);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(chronology48);
        boolean boolean50 = instant35.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property51 = dateTime47.dayOfYear();
        int int52 = dateTime47.getMonthOfYear();
        org.joda.time.Chronology chronology53 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((java.lang.Object) long29, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162378L + "'", long2 == 1645514162378L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514162378L + "'", long13 == 1645514162378L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514162378L + "'", long23 == 1645514162378L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1813L) + "'", long36 == (-1813L));
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:02.378+10:22" + "'", str39, "2022-02-22T17:38:02.378+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str23 = durationFieldType22.toString();
        boolean boolean24 = periodType11.isSupported(durationFieldType22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.PeriodType periodType26 = periodType11.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(63421285, 37520000, 21, 63383960, 63094282, 63102368, 63098347, 63235846, periodType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "seconds" + "'", str23, "seconds");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        mutablePeriod16.addSeconds(115200000);
        mutablePeriod16.add(1000L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:02.462+10:22" + "'", str9, "2022-02-22T17:38:02.462+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        boolean boolean18 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime16);
        long long19 = interval11.getEndMillis();
        org.joda.time.Interval interval21 = interval11.withStartMillis(1645513761197L);
        org.joda.time.Interval interval22 = interval11.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        org.joda.time.Interval interval34 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone37);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period39.minusSeconds((int) (short) 1);
        org.joda.time.Period period43 = period39.plusWeeks((int) (short) -1);
        org.joda.time.Period period45 = period39.minusMillis(4);
        org.joda.time.Interval interval46 = interval38.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Interval interval47 = interval26.gap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.withZoneRetainFields(dateTimeZone65);
        int int67 = dateTime63.getHourOfDay();
        boolean boolean68 = interval46.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration69 = interval46.toDuration();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration73);
        mutableInterval70.setInterval(100000L, 1645513759601L);
        long long78 = mutableInterval70.getStartMillis();
        java.lang.String str79 = mutableInterval70.toString();
        boolean boolean80 = interval46.isAfter((org.joda.time.ReadableInterval) mutableInterval70);
        boolean boolean81 = interval11.abuts((org.joda.time.ReadableInterval) mutableInterval70);
        mutableInterval70.setInterval(0L, 1645513782697L);
        org.joda.time.Interval interval85 = mutableInterval70.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162485L + "'", long2 == 1645514162485L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514162485L + "'", long17 == 1645514162485L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1672493880000L + "'", long19 == 1672493880000L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNull(interval47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:02.485+10:22" + "'", str57, "2022-02-22T17:38:02.485+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 17 + "'", int67 == 17);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100000L + "'", long78 == 100000L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22" + "'", str79, "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.joda.time.Period period4 = new org.joda.time.Period(63102, 0, 27425229, 115200000);
        org.joda.time.Period period6 = period4.plusMinutes(0);
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval24 = interval18.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval25 = interval18.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Interval interval39 = interval25.gap((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod();
        mutablePeriod40.setMonths((int) ' ');
        java.lang.Object obj43 = mutablePeriod40.clone();
        mutablePeriod40.setDays(40);
        org.joda.time.Interval interval46 = interval25.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Period period47 = interval46.toPeriod();
        org.joda.time.Period period49 = period47.plusSeconds((int) (byte) 1);
        boolean boolean50 = property11.equals((java.lang.Object) period49);
        org.joda.time.Period period52 = period49.minusHours(63129196);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology54 = null;
        boolean boolean55 = dateTimeFieldType53.isSupported(chronology54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType53.getRangeDurationType();
        boolean boolean57 = period52.isSupported(durationFieldType56);
        boolean boolean58 = period4.isSupported(durationFieldType56);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514162531L + "'", long10 == 1645514162531L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfEra" + "'", str12, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514162531L + "'", long16 == 1645514162531L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "P32M40D");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.toString();
        boolean boolean16 = periodType3.isSupported(durationFieldType14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.Period period18 = mutablePeriod17.toPeriod();
        int int19 = mutablePeriod17.getMinutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "seconds" + "'", str15, "seconds");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        int int16 = dateTime6.getWeekOfWeekyear();
        int int17 = dateTime6.getWeekyear();
        org.joda.time.DateTime.Property property18 = dateTime6.dayOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162591L + "'", long2 == 1645514162591L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:02.591+10:22" + "'", str9, "2022-02-22T17:38:02.591+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTime dateTime13 = property11.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:02.646+10:22" + "'", str4, "2022-02-22T17:38:02.646+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weekyear" + "'", str12, "weekyear");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(63088836);
        org.joda.time.DateTime dateTime11 = dateTime7.withHourOfDay(9);
        int int12 = dateTime7.getMillisOfDay();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusMinutes(3);
        org.joda.time.Period period19 = period17.plusWeeks(17);
        org.joda.time.Duration duration20 = period19.toStandardDuration();
        org.joda.time.DateTime dateTime21 = dateTime7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration1.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.Period period31 = duration1.toPeriod(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration32 = new org.joda.time.Duration((java.lang.Object) chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514162669L + "'", long5 == 1645514162669L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy((int) (byte) 0);
        int int14 = property11.getMinimumValueOverall();
        java.lang.String str15 = property11.getName();
        int int16 = property11.getLeapAmount();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:02.702+10:22" + "'", str4, "2022-02-22T17:38:02.702+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyear" + "'", str15, "weekyear");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(63110);
        org.joda.time.Period period3 = period1.withWeeks(6);
        org.joda.time.Period period5 = period1.minusWeeks(25842901);
        org.joda.time.Period period7 = period5.plusMonths(19);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        int int7 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(4);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.Duration duration47 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.Period period62 = mutablePeriod61.toPeriod();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) mutablePeriod61);
        int int64 = property3.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime66 = property3.addToCopy(63094282);
        int int67 = property3.getMaximumValue();
        org.joda.time.DateTime dateTime68 = property3.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime75 = dateTime73.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str80 = dateTimeZone78.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime81 = dateTime73.withZone(dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        java.lang.String str84 = dateTime83.toString();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology87);
        org.joda.time.DateTime dateTime89 = dateTime83.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime89);
        mutablePeriod90.setPeriod(1645513781803L);
        org.joda.time.MutablePeriod mutablePeriod93 = mutablePeriod90.toMutablePeriod();
        mutablePeriod93.setPeriod(1645513839775L, 0L);
        org.joda.time.DateTime dateTime97 = dateTime68.plus((org.joda.time.ReadablePeriod) mutablePeriod93);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162822L + "'", long2 == 1645514162822L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514162822L + "'", long10 == 1645514162822L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:02.822+10:22" + "'", str20, "2022-02-22T17:38:02.822+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:02.822+10:22" + "'", str30, "2022-02-22T17:38:02.822+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:38:02.822+10:22" + "'", str50, "2022-02-22T17:38:02.822+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514162823L + "'", long71 == 1645514162823L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-02-22T17:38:02.823+10:22" + "'", str84, "2022-02-22T17:38:02.823+10:22");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(mutablePeriod93);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        boolean boolean25 = dateTime5.isSupported(dateTimeFieldType24);
        boolean boolean26 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime5.minusMillis((int) (short) 1);
        org.joda.time.DateTime.Property property29 = dateTime5.year();
        int int30 = dateTime5.getDayOfYear();
        org.joda.time.DateTime.Property property31 = dateTime5.weekOfWeekyear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514162918L + "'", long2 == 1645514162918L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:02.918+10:22" + "'", str15, "2022-02-22T17:38:02.918+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Period period2 = org.joda.time.Period.hours(22);
        org.joda.time.Period period4 = period2.plusMillis(221);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(1645513763016L);
        boolean boolean8 = mutableInterval0.isBefore((org.joda.time.ReadableInstant) instant7);
        mutableInterval0.setEndMillis(1645513760283L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        boolean boolean27 = dateTime25.isBefore((-1L));
        int int28 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int30 = dateTime25.get(dateTimeFieldType29);
        java.lang.String str31 = dateTime25.toString();
        org.joda.time.LocalDateTime localDateTime32 = dateTime25.toLocalDateTime();
        boolean boolean33 = mutableInterval0.equals((java.lang.Object) dateTime25);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:03.006+10:22" + "'", str13, "2022-02-22T17:38:03.006+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:03.006+10:22" + "'", str23, "2022-02-22T17:38:03.006+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:38:03.010+10:22" + "'", str31, "2022-02-22T17:38:03.010+10:22");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T17:31:31.496+10:22");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Period period7 = new org.joda.time.Period(63125881, 429, 0, 63099629);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period19 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Seconds seconds20 = period19.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period24 = period19.withFieldAdded(durationFieldType22, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.minus(1645513768963L);
        org.joda.time.DateTime dateTime33 = dateTime29.minusYears((int) (byte) 0);
        org.joda.time.Duration duration34 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = dateTime29.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long42 = dateTimeZone39.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime43 = dateTime36.withZoneRetainFields(dateTimeZone39);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime45 = interval44.getStart();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = instant1.toDateTime();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:03.032+10:22" + "'", str13, "2022-02-22T17:38:03.032+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(period24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514163032L + "'", long27 == 1645514163032L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-359999779L) + "'", long42 == (-359999779L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.setPeriod(1645514016693L, 10540800000L);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant14, periodType18);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Instant instant35 = instant27.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Instant instant37 = instant35.minus(1645513769274L);
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) instant37);
        mutableInterval0.setEndMillis(1645514016916L);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:03.118+10:22" + "'", str5, "2022-02-22T17:38:03.118+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        java.util.GregorianCalendar gregorianCalendar28 = dateTime27.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime27.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfCentury(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime27.withHourOfDay(107);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 107 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:03.195+10:22" + "'", str2, "2022-02-22T17:38:03.195+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:03.195+10:22" + "'", str9, "2022-02-22T17:38:03.195+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:03.195+10:22" + "'", str16, "2022-02-22T17:38:03.195+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime31.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        boolean boolean43 = dateTime41.isBefore((-1L));
        int int44 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int46 = dateTime41.get(dateTimeFieldType45);
        java.lang.String str47 = dateTime41.toString();
        java.lang.Object obj48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(obj48, periodType49, chronology50);
        int int52 = periodType49.size();
        org.joda.time.Period period53 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41, periodType49);
        org.joda.time.DateTime.Property property54 = dateTime41.secondOfDay();
        org.joda.time.DateTime dateTime56 = dateTime41.plusWeeks(63289222);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:03.216+10:22" + "'", str4, "2022-02-22T17:38:03.216+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514163216L + "'", long18 == 1645514163216L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:38:03.216+10:22" + "'", str29, "2022-02-22T17:38:03.216+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:03.216+10:22" + "'", str39, "2022-02-22T17:38:03.216+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:03.010+10:22" + "'", str47, "2022-02-22T17:38:03.010+10:22");
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.joda.time.Period period1 = org.joda.time.Period.hours(18);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType12.isSupported(chronology14);
        int int16 = period10.indexOf(durationFieldType12);
        org.joda.time.Period period18 = period10.plusMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        mutablePeriod19.add(52, 20, 7, 7, 63101202, 22, 429, 20);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513760253L, chronology37);
        org.joda.time.DurationField durationField40 = chronology37.months();
        mutablePeriod19.add(1645513764242L, chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.yearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:03.272+10:22" + "'", str4, "2022-02-22T17:38:03.272+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "seconds" + "'", str13, "seconds");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("1970-01-01T10:22:00.037+10:22/2022-02-22T17:31:32.363+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period1.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withMillisRemoved();
        org.joda.time.PeriodType periodType7 = periodType4.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        boolean boolean9 = periodType4.isSupported(durationFieldType8);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(obj0, periodType4);
        int int11 = mutablePeriod10.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Interval interval14 = interval8.withDurationAfterStart((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Interval interval15 = interval8.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval16.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Interval interval29 = interval15.gap((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.Chronology chronology30 = mutableInterval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645476455718L, 1645513767304L, chronology30);
        org.joda.time.Period period32 = new org.joda.time.Period(1645513806325L, 1645513820217L, chronology30);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period33.plusMillis((int) 'a');
        org.joda.time.Period period36 = period33.negated();
        long long39 = chronology30.add((org.joda.time.ReadablePeriod) period36, 1645513902302L, 63242);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514163447L + "'", long6 == 1645514163447L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645513902302L + "'", long39 == 1645513902302L);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        java.lang.String str40 = dateTimeZone36.getName(1645513762160L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        mutablePeriod46.add(durationFieldType48, 63099629);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = chronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.era();
        org.joda.time.DurationField durationField62 = chronology57.months();
        boolean boolean63 = durationFieldType48.isSupported(chronology57);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Chronology chronology70 = mutableInterval64.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfEra();
        org.joda.time.Chronology chronology72 = chronology70.withUTC();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod();
        mutablePeriod73.setMonths((int) ' ');
        java.lang.Object obj76 = mutablePeriod73.clone();
        long long79 = chronology70.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) (byte) 0, 22);
        int int80 = mutablePeriod73.getHours();
        org.joda.time.format.PeriodFormatter periodFormatter81 = null;
        java.lang.String str82 = mutablePeriod73.toString(periodFormatter81);
        mutablePeriod73.setMillis(63095888);
        int int85 = mutablePeriod73.getYears();
        int[] intArray87 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod73, (long) 635);
        org.joda.time.DateTimeField dateTimeField88 = chronology57.hourOfDay();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:03.469+10:22" + "'", str14, "2022-02-22T17:38:03.469+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:22" + "'", str40, "+10:22");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "P32MT63095.888S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "P32MT63095.888S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "P32MT63095.888S");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1851379200000L + "'", long79 == 1851379200000L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "P32M" + "'", str82, "P32M");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 0, 0, 635]");
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withWeekyear(1051);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(4);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType36 = periodType35.withYearsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 3, 1645513762121L, periodType36, chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology44.months();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str53 = dateTimeZone51.getNameKey(1645513759301L);
        java.lang.String str55 = dateTimeZone51.getName(1645513762160L);
        java.util.TimeZone timeZone56 = dateTimeZone51.toTimeZone();
        int int58 = dateTimeZone51.getStandardOffset(1645513761942L);
        int int60 = dateTimeZone51.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology61 = chronology44.withZone(dateTimeZone51);
        int int63 = dateTimeZone51.getOffset((long) 115200000);
        int int65 = dateTimeZone51.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str67 = dateTimeZone66.toString();
        long long69 = dateTimeZone51.getMillisKeepLocal(dateTimeZone66, 1645513792520L);
        org.joda.time.DateTime dateTime70 = dateTime30.toDateTime(dateTimeZone66);
        java.lang.String str72 = dateTimeZone66.getNameKey((long) 18);
        int int74 = dateTimeZone66.getOffset(1645513849566L);
        org.joda.time.DateTime dateTime75 = dateTime18.withZone(dateTimeZone66);
        int int76 = dateTime75.getYear();
        int int77 = dateTime75.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:03.522+10:22" + "'", str9, "2022-02-22T17:38:03.522+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514163522L + "'", long19 == 1645514163522L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514163522L + "'", long26 == 1645514163522L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:22" + "'", str55, "+10:22");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 37320000 + "'", int58 == 37320000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 37320000 + "'", int60 == 37320000);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 37320000 + "'", int63 == 37320000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 37320000 + "'", int65 == 37320000);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:22" + "'", str67, "+10:22");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645513792520L + "'", long69 == 1645513792520L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 37320000 + "'", int74 == 37320000);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 522 + "'", int77 == 522);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withYear(1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant27 = instant25.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Period period36 = period28.minusDays((int) (short) 10);
        org.joda.time.Duration duration37 = period28.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime.Property property47 = dateTime39.hourOfDay();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = duration51.toPeriod();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = duration57.toPeriod();
        boolean boolean60 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = new org.joda.time.DurationFieldType[] { durationFieldType61 };
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.forFields(durationFieldTypeArray62);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.forFields(durationFieldTypeArray62);
        org.joda.time.Period period65 = new org.joda.time.Period((java.lang.Object) duration57, periodType64);
        org.joda.time.Period period66 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39, periodType64);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant27, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = dateTime23.isBefore((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime.Property property69 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime71 = dateTime23.withMinuteOfHour(0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:03.558+10:22" + "'", str9, "2022-02-22T17:38:03.558+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514163558L + "'", long19 == 1645514163558L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:03.558+10:22" + "'", str40, "2022-02-22T17:38:03.558+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(63181779, 63375904, 7, 16);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Interval interval34 = mutableInterval0.toInterval();
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        mutableInterval0.setEndMillis(1645513831324L);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.DateTime dateTime54 = dateTime37.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (short) 0);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        boolean boolean68 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration56);
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration52);
        mutablePeriod28.addMonths(52);
        mutablePeriod28.addWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime.Property property77 = dateTime75.yearOfEra();
        org.joda.time.Interval interval78 = property77.toInterval();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval79.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Interval interval84 = interval78.withDurationAfterStart((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Interval interval85 = interval78.toInterval();
        mutablePeriod28.setPeriod((org.joda.time.ReadableInterval) interval78);
        org.joda.time.MutableInterval mutableInterval87 = interval78.toMutableInterval();
        boolean boolean88 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval78);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:38:03.632+10:22" + "'", str31, "2022-02-22T17:38:03.632+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:03.632+10:22" + "'", str44, "2022-02-22T17:38:03.632+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T17:38:03.632+10:22" + "'", str59, "2022-02-22T17:38:03.632+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645514163632L + "'", long76 == 1645514163632L);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Period period16 = duration14.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        boolean boolean23 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType27 = periodType26.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withSecondsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withMillisRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period(1645513772058L, 1645513765991L, periodType28);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration14, periodType28);
        boolean boolean32 = dateTime9.isEqualNow();
        boolean boolean34 = dateTime9.isEqual(1645513933383L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514163690L + "'", long7 == 1645514163690L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        long long27 = duration17.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime42 = interval39.getStart();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        boolean boolean46 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 3, 1645513762121L, periodType50, chronology58);
        org.joda.time.Period period61 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType50);
        org.joda.time.Interval interval62 = interval11.withStart((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property63 = dateTime44.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.Period period78 = duration70.toPeriod();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514163718L + "'", long2 == 1645514163718L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:03.718+10:22" + "'", str20, "2022-02-22T17:38:03.718+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100000L + "'", long27 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514163718L + "'", long30 == 1645514163718L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514163718L + "'", long45 == 1645514163718L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration70);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645514163718L + "'", long73 == 1645514163718L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        java.lang.String str16 = durationField15.getName();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        int int45 = dateTimeField43.getMinimumValue((long) 9);
        int int47 = dateTimeField43.getLeapAmount(1645513763885L);
        int int48 = dateTime32.get(dateTimeField43);
        org.joda.time.DurationField durationField49 = dateTimeField43.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType50 = durationField49.getType();
        int int51 = durationField15.compareTo(durationField49);
        org.joda.time.DurationFieldType durationFieldType52 = durationField49.getType();
        org.joda.time.DurationFieldType durationFieldType53 = durationField49.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long55 = durationField49.getMillis(1645513893943L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513893943 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "months" + "'", str16, "months");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514163784L + "'", long19 == 1645514163784L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:03.784+10:22" + "'", str26, "2022-02-22T17:38:03.784+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1058 + "'", int48 == 1058);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.dayOfWeek();
        int int35 = property34.get();
        org.joda.time.DateTime dateTime37 = property34.addToCopy(63133);
        org.joda.time.DurationField durationField38 = property34.getLeapDurationField();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1813L) + "'", long6 == (-1813L));
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:03.811+10:22" + "'", str18, "2022-02-22T17:38:03.811+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514163811L + "'", long28 == 1645514163811L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNull(durationField38);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.halfdayOfDay();
        long long19 = dateTimeField17.roundHalfFloor((-94694400000L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period54 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration31.minus(readableDuration55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, readableDuration55);
        org.joda.time.DateTime dateTime59 = dateTime27.minusYears(63099629);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DurationField durationField68 = dateTimeField67.getDurationField();
        org.joda.time.DurationFieldType durationFieldType69 = durationField68.getType();
        org.joda.time.DateTime dateTime71 = dateTime59.withFieldAdded(durationFieldType69, 292278993);
        org.joda.time.YearMonthDay yearMonthDay72 = dateTime71.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod();
        int int75 = mutablePeriod74.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.DateTime dateTime80 = dateTime77.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = dateTime80.toDateTime(chronology81);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime85 = dateTime80.withFieldAdded(durationFieldType83, (int) '#');
        mutablePeriod74.set(durationFieldType83, 9);
        int[] intArray88 = mutablePeriod74.getValues();
        java.util.Locale locale90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField17.set((org.joda.time.ReadablePartial) yearMonthDay72, 0, intArray88, "2022-02-22T17:32:28.404+10:22", locale90);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:32:28.404+10:22\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-94688520000L) + "'", long19 == (-94688520000L));
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:03.885+10:22" + "'", str22, "2022-02-22T17:38:03.885+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:03.885+10:22" + "'", str34, "2022-02-22T17:38:03.885+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514163885L + "'", long48 == 1645514163885L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-22T17:38:03.885+10:22" + "'", str78, "2022-02-22T17:38:03.885+10:22");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 9, 0]");
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 3, 1645513762121L, periodType33, chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        org.joda.time.DateTime dateTime45 = dateTime23.toDateTime(chronology41);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 3, 1645513762121L, periodType50, chronology58);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str62 = durationFieldType61.toString();
        boolean boolean63 = periodType50.isSupported(durationFieldType61);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(periodType50);
        java.lang.String str65 = periodType50.getName();
        org.joda.time.Period period66 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46, periodType50);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:03.936+10:22" + "'", str4, "2022-02-22T17:38:03.936+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:38:03.936+10:22" + "'", str24, "2022-02-22T17:38:03.936+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "seconds" + "'", str62, "seconds");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Hours" + "'", str65, "Hours");
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withZoneRetainFields(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        boolean boolean34 = dateTime31.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime36 = dateTime31.withWeekyear(1051);
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        int int39 = dateTime10.get(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime41 = property40.roundHalfFloorCopy();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = duration51.toPeriod();
        boolean boolean54 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime55 = dateTime41.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        java.lang.String str60 = property59.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property59.getFieldType();
        int int62 = dateTime55.get(dateTimeFieldType61);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:03.983+10:22" + "'", str2, "2022-02-22T17:38:03.983+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:03.983+10:22" + "'", str22, "2022-02-22T17:38:03.983+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645514163983L + "'", long32 == 1645514163983L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514163983L + "'", long58 == 1645514163983L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "yearOfEra" + "'", str60, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.joda.time.Instant instant3 = org.joda.time.Instant.parse("2022-02-22T17:31:43.078+10:22");
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfEra();
        org.joda.time.DurationField durationField6 = chronology4.hours();
        org.joda.time.Period period7 = new org.joda.time.Period(1645513802084L, 1645514098787L, chronology4);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime8 = property3.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        boolean boolean11 = mutableInterval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra((int) (byte) 1);
        boolean boolean17 = mutableInterval10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTime dateTime35 = property33.withMinimumValue();
        boolean boolean36 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime9.getMillisOfSecond();
        org.joda.time.Instant instant38 = dateTime9.toInstant();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration41 = duration40.toDuration();
        boolean boolean43 = duration41.equals((java.lang.Object) 1645513867823L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164117L + "'", long2 == 1645514164117L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:04.117+10:22" + "'", str14, "2022-02-22T17:38:04.117+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514164117L + "'", long25 == 1645514164117L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 63484117 + "'", int29 == 63484117);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 63484117 + "'", int32 == 63484117);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 117 + "'", int37 == 117);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        java.lang.Object obj2 = mutableInterval0.clone();
        java.lang.Object obj3 = mutableInterval0.clone();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period5);
        int int7 = period5.getMinutes();
        org.joda.time.Period period9 = period5.minusSeconds(292278993);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 8, periodType12, chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        java.lang.String str35 = chronology34.toString();
        org.joda.time.DurationField durationField36 = chronology34.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.millisOfDay();
        org.joda.time.DurationField durationField39 = chronology34.minutes();
        org.joda.time.Period period40 = new org.joda.time.Period(1645513833800L, periodType12, chronology34);
        org.joda.time.Period period41 = period9.normalizedStandard(periodType12);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[+10:22]" + "'", str35, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTimeField dateTimeField18 = localDate16.getField((int) (short) 0);
        java.util.Locale locale19 = null;
        int int20 = dateTimeField18.getMaximumShortTextLength(locale19);
        long long22 = dateTimeField18.roundCeiling((long) 63402376);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164190L + "'", long2 == 1645514164190L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:04.190+10:22" + "'", str8, "2022-02-22T17:38:04.190+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31536000000L + "'", long22 == 31536000000L);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        long long13 = mutableInterval7.getStartMillis();
        org.joda.time.Duration duration14 = mutableInterval7.toDuration();
        java.lang.String str15 = duration14.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        boolean boolean43 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property44 = dateTime29.year();
        org.joda.time.LocalDateTime localDateTime45 = dateTime29.toLocalDateTime();
        boolean boolean46 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:04.221+10:22" + "'", str9, "2022-02-22T17:38:04.221+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514164221L + "'", long19 == 1645514164221L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:04.221+10:22" + "'", str27, "2022-02-22T17:38:04.221+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:04.221+10:22" + "'", str34, "2022-02-22T17:38:04.221+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        java.lang.String str40 = dateTimeZone36.getName(1645513762160L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        mutablePeriod46.add(durationFieldType48, 63099629);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        int int56 = dateTime52.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.toDateTimeISO();
        int int66 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDate localDate67 = dateTime65.toLocalDate();
        org.joda.time.DateTimeField dateTimeField69 = localDate67.getField((int) (short) 0);
        org.joda.time.Chronology chronology70 = localDate67.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekyearOfCentury();
        org.joda.time.DurationField durationField72 = durationFieldType48.getField(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.halfdays();
        long long75 = durationField73.getValueAsLong(1645513793425L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:04.249+10:22" + "'", str14, "2022-02-22T17:38:04.249+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:22" + "'", str40, "+10:22");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514164249L + "'", long53 == 1645514164249L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T17:38:04.249+10:22" + "'", str59, "2022-02-22T17:38:04.249+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 38090L + "'", long75 == 38090L);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTime dateTime25 = property23.withMinimumValue();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod();
        mutablePeriod35.setMonths((int) ' ');
        java.lang.Object obj38 = mutablePeriod35.clone();
        long long41 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField42 = chronology32.weekyear();
        org.joda.time.DateTime dateTime43 = dateTime25.withChronology(chronology32);
        org.joda.time.DateTime.Property property44 = dateTime25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        int int50 = dateTime46.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        int int60 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDate localDate61 = dateTime59.toLocalDate();
        org.joda.time.DateTime.Property property62 = dateTime59.era();
        org.joda.time.DateTime dateTime64 = dateTime59.minusMinutes(63094282);
        org.joda.time.DateTime.Property property65 = dateTime64.dayOfYear();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property67 = dateTime25.secondOfDay();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:04.281+10:22" + "'", str4, "2022-02-22T17:38:04.281+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514164281L + "'", long15 == 1645514164281L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63484281 + "'", int19 == 63484281);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63484281 + "'", int22 == 63484281);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "P32M");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1851379200000L + "'", long41 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514164281L + "'", long47 == 1645514164281L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:38:04.281+10:22" + "'", str53, "2022-02-22T17:38:04.281+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513760165L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        int int19 = period18.getHours();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.Duration duration26 = interval3.toDuration();
        org.joda.time.Duration duration29 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.Duration duration30 = duration26.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) 22);
        org.joda.time.Duration duration33 = duration30.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours(1645513839968L);
        boolean boolean36 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        java.lang.String str42 = property40.getName();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        boolean boolean44 = mutableInterval43.containsNow();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withEra((int) (byte) 1);
        boolean boolean50 = mutableInterval43.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        boolean boolean61 = mutableInterval51.contains((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime60.getMillisOfDay();
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        mutableInterval43.setEnd((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime63.getMillisOfDay();
        org.joda.time.DateTime.Property property66 = dateTime63.minuteOfDay();
        org.joda.time.DurationField durationField67 = property66.getLeapDurationField();
        org.joda.time.DateTime dateTime68 = property66.roundHalfCeilingCopy();
        int int69 = property40.getDifference((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = dateTime68.isEqual(1645513798764L);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime68, periodType72);
        org.joda.time.DateTime dateTime75 = dateTime68.plusMonths(18);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514164356L + "'", long39 == 1645514164356L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "yearOfEra" + "'", str42, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:04.356+10:22" + "'", str47, "2022-02-22T17:38:04.356+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514164356L + "'", long58 == 1645514164356L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 63484356 + "'", int62 == 63484356);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 63484356 + "'", int65 == 63484356);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNull(durationField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 8);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant4 = instant1.plus(1645514047153L);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology22.months();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str31 = dateTimeZone29.getNameKey(1645513759301L);
        java.lang.String str33 = dateTimeZone29.getName(1645513762160L);
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        int int36 = dateTimeZone29.getStandardOffset(1645513761942L);
        int int38 = dateTimeZone29.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology39 = chronology22.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.era();
        org.joda.time.DateTime dateTime41 = dateTime4.withChronology(chronology39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField47 = property45.getField();
        org.joda.time.DateTime dateTime48 = property45.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime dateTime51 = dateTime48.withYear(63102000);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime4.equals((java.lang.Object) dateTime54);
        org.joda.time.LocalTime localTime56 = dateTime54.toLocalTime();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164413L + "'", long2 == 1645514164413L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1651562164413,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=123,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=4,MILLISECOND=413,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:22" + "'", str33, "+10:22");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 37320000 + "'", int36 == 37320000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 37320000 + "'", int38 == 37320000);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514164413L + "'", long44 == 1645514164413L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod2.toMutablePeriod();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        mutablePeriod2.setPeriod(1645513825686L, chronology25);
        java.lang.String str28 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.dayOfWeek();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[+10:22]" + "'", str28, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        long long10 = dateTimeField7.addWrapField(1645513760382L, 22);
        long long13 = dateTimeField7.set(1645513805208L, 7);
        long long15 = dateTimeField7.roundFloor(1645513855467L);
        long long17 = dateTimeField7.roundHalfFloor(1645513854757L);
        int int18 = dateTimeField7.getMinimumValue();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField7.getAsShortText(0, locale20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645513760253L, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period((java.lang.Object) 0, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2339737760382L + "'", long10 == 2339737760382L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-61941775794792L) + "'", long13 == (-61941775794792L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1640957880000L + "'", long15 == 1640957880000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1640957880000L + "'", long17 == 1640957880000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.joda.time.Period period1 = org.joda.time.Period.months(63231528);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = period1.getValue(1057);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1057");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 115200000, chronology30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology30);
        int[] intArray38 = mutablePeriod37.getValues();
        org.joda.time.Period period39 = period6.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone42);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period44.minusSeconds((int) (short) 1);
        org.joda.time.Period period48 = period44.plusWeeks((int) (short) -1);
        org.joda.time.Period period50 = period44.minusMillis(4);
        org.joda.time.Interval interval51 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period53 = period44.minusMinutes(8);
        org.joda.time.Period period55 = period44.plusSeconds(3);
        org.joda.time.Period period56 = period6.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutablePeriod mutablePeriod57 = period6.toMutablePeriod();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164540L + "'", long2 == 1645514164540L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:04.540+10:22" + "'", str13, "2022-02-22T17:38:04.540+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.plusSeconds(38090);
        boolean boolean10 = dateTime8.isAfter(1645513974911L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164571L + "'", long2 == 1645514164571L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 63291245, 1645513801049L);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.DateTime.Property property22 = dateTime17.year();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy(63128134);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant29 = instant27.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Instant instant31 = instant27.minus(1645513772143L);
        long long32 = instant31.getMillis();
        org.joda.time.Instant instant34 = instant31.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.withZoneRetainFields(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        boolean boolean56 = dateTime53.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime58 = dateTime53.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime60 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164647L + "'", long2 == 1645514164647L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:04.647+10:22" + "'", str15, "2022-02-22T17:38:04.647+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1813L) + "'", long32 == (-1813L));
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:04.647+10:22" + "'", str44, "2022-02-22T17:38:04.647+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645514164647L + "'", long54 == 1645514164647L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.weekyear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645513941042L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.DateTime dateTime27 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (short) 0);
        org.joda.time.Duration duration30 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.plus((long) 8);
        org.joda.time.Instant instant41 = instant33.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Instant instant54 = instant41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 100);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((-1L), 1L, periodType57, chronology58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.minuteOfDay();
        org.joda.time.DurationField durationField69 = chronology66.halfdays();
        org.joda.time.Period period70 = duration43.toPeriod(periodType57, chronology66);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1645513790850L, periodType57);
        int int72 = periodType57.size();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration30, periodType57);
        org.joda.time.DateTime dateTime75 = dateTime10.plusMillis(0);
        org.joda.time.Period period76 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType83 = periodType82.withYearsRemoved();
        org.joda.time.PeriodType periodType84 = periodType83.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval();
        long long86 = mutableInterval85.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        boolean boolean89 = mutableInterval85.overlaps((org.joda.time.ReadableInterval) mutableInterval87);
        java.lang.Object obj90 = mutableInterval85.clone();
        org.joda.time.Chronology chronology91 = mutableInterval85.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.yearOfEra();
        org.joda.time.Period period93 = new org.joda.time.Period((long) 3, 1645513762121L, periodType83, chronology91);
        org.joda.time.DurationFieldType durationFieldType94 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str95 = durationFieldType94.toString();
        boolean boolean96 = periodType83.isSupported(durationFieldType94);
        org.joda.time.PeriodType periodType97 = periodType83.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod98 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) instant78, periodType83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27425232350");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:04.821+10:22" + "'", str4, "2022-02-22T17:38:04.821+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:38:04.821+10:22" + "'", str17, "2022-02-22T17:38:04.821+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:04.821+10:22" + "'", str46, "2022-02-22T17:38:04.821+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "seconds" + "'", str95, "seconds");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(periodType97);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 25881497);
        org.joda.time.Duration duration3 = new org.joda.time.Duration((long) 25881374);
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (-8990));
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        long long17 = duration7.getMillis();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration44 = duration33.minus(0L);
        org.joda.time.DateTime dateTime46 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (short) 0);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        boolean boolean60 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration48);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.DateTime dateTime66 = dateTime63.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.toDateTime(chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology74);
        org.joda.time.DateTime dateTime76 = dateTime70.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.DateTime dateTime77 = dateTime70.toDateTimeISO();
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(0);
        boolean boolean80 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration83 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (short) 10);
        long long84 = duration83.getMillis();
        long long85 = duration83.getMillis();
        boolean boolean86 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:04.851+10:22" + "'", str10, "2022-02-22T17:38:04.851+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100000L + "'", long17 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:04.851+10:22" + "'", str23, "2022-02-22T17:38:04.851+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:38:04.851+10:22" + "'", str36, "2022-02-22T17:38:04.851+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:04.851+10:22" + "'", str51, "2022-02-22T17:38:04.851+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:38:04.851+10:22" + "'", str64, "2022-02-22T17:38:04.851+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-22T17:38:04.851+10:22" + "'", str71, "2022-02-22T17:38:04.851+10:22");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1100000L + "'", long84 == 1100000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1100000L + "'", long85 == 1100000L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 63415074, 1645513859643L);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.year();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        long long27 = duration17.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime42 = interval39.getStart();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        boolean boolean46 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 3, 1645513762121L, periodType50, chronology58);
        org.joda.time.Period period61 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType50);
        org.joda.time.Interval interval62 = interval11.withStart((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property63 = dateTime44.dayOfMonth();
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        org.joda.time.DateTime dateTime66 = property63.roundHalfCeilingCopy();
        java.util.Locale locale68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = dateTime66.toString("2022-02-22T17:36:50.465+10:22", locale68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514164930L + "'", long2 == 1645514164930L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:04.930+10:22" + "'", str20, "2022-02-22T17:38:04.930+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100000L + "'", long27 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514164931L + "'", long30 == 1645514164931L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514164931L + "'", long45 == 1645514164931L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime12 = dateTime10.plusWeeks(63186201);
        int int13 = dateTime12.getHourOfDay();
        java.lang.String str14 = dateTime12.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime19.withMillis((long) (short) 0);
        org.joda.time.Chronology chronology25 = dateTime19.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType26.getRangeDurationType();
        boolean boolean29 = dateTime19.isSupported(dateTimeFieldType26);
        boolean boolean30 = dateTime12.isSupported(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 17 + "'", int13 == 17);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1213007-09-29T17:38:04.959+10:22" + "'", str14, "1213007-09-29T17:38:04.959+10:22");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:38:04.959+10:22" + "'", str17, "2022-02-22T17:38:04.959+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.Period period16 = period8.minusDays((int) (short) 10);
        org.joda.time.Duration duration17 = period8.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime19.hourOfDay();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = duration31.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = duration37.toPeriod();
        boolean boolean40 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = new org.joda.time.DurationFieldType[] { durationFieldType41 };
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.forFields(durationFieldTypeArray42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.forFields(durationFieldTypeArray42);
        org.joda.time.Period period45 = new org.joda.time.Period((java.lang.Object) duration37, periodType44);
        org.joda.time.Period period46 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19, periodType44);
        org.joda.time.DateTime.Property property47 = dateTime19.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int49 = dateTime19.get(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime(chronology55);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTime dateTime59 = dateTime54.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        boolean boolean66 = dateTime64.isBefore((-1L));
        int int67 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int69 = dateTime64.get(dateTimeFieldType68);
        java.lang.String str70 = dateTime64.toString();
        org.joda.time.DateTime dateTime72 = dateTime64.withYearOfEra(9);
        org.joda.time.DateTime dateTime74 = dateTime64.plusHours(20);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withMillisRemoved();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime64, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = null;
        boolean boolean81 = periodType77.isSupported(durationFieldType80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period82 = new org.joda.time.Period(258, 63287, 0, (-52070466), 37, 63375983, 63336, 15, periodType77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:04.985+10:22" + "'", str20, "2022-02-22T17:38:04.985+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(durationFieldTypeArray42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T17:38:04.985+10:22" + "'", str52, "2022-02-22T17:38:04.985+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:38:04.985+10:22" + "'", str62, "2022-02-22T17:38:04.985+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 22 + "'", int69 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-22T17:38:04.010+10:22" + "'", str70, "2022-02-22T17:38:04.010+10:22");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear(63119816);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis(63133);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime.Property property24 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime26 = dateTime21.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = dateTime21.get(dateTimeFieldType27);
        boolean boolean29 = dateTime15.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514165016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=5,MILLISECOND=16,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1058 + "'", int28 == 1058);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval31 = interval24.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Interval interval45 = interval31.gap((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean46 = interval13.contains((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        java.lang.String str63 = property62.getName();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration68);
        boolean boolean83 = interval50.isAfter((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean84 = interval13.isAfter((org.joda.time.ReadableInterval) interval50);
        boolean boolean85 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval50);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1645513766895L);
        int int88 = mutablePeriod87.getYears();
        org.joda.time.Interval interval89 = interval50.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod87);
        int int90 = mutablePeriod87.getHours();
        mutablePeriod87.addMonths(63113468);
        mutablePeriod87.addMillis(63325715);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514165042L + "'", long11 == 1645514165042L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514165042L + "'", long22 == 1645514165042L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645514165042L + "'", long61 == 1645514165042L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfEra" + "'", str63, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T17:38:05.042+10:22" + "'", str74, "2022-02-22T17:38:05.042+10:22");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 457087 + "'", int90 == 457087);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology6.era();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval0.toMutableInterval();
        boolean boolean6 = mutableInterval0.isBefore((-94694400000L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1L), 1L, periodType13, chronology14);
        mutablePeriod15.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone20);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (short) 1);
        org.joda.time.Period period26 = period22.plusWeeks((int) (short) -1);
        org.joda.time.Period period28 = period22.minusMillis(4);
        org.joda.time.Interval interval29 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Interval interval32 = interval29.withEndMillis((long) 40);
        org.joda.time.Interval interval33 = interval10.gap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Interval interval34 = interval29.toInterval();
        boolean boolean35 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval34);
        boolean boolean37 = interval34.isAfter(1645513792866L);
        org.joda.time.Period period39 = org.joda.time.Period.years(25880610);
        org.joda.time.Interval interval40 = interval34.withPeriodAfterStart((org.joda.time.ReadablePeriod) period39);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        org.joda.time.DurationField durationField25 = property23.getDurationField();
        java.util.Locale locale26 = null;
        int int27 = property23.getMaximumTextLength(locale26);
        org.joda.time.DateTime dateTime28 = property23.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:05.149+10:22" + "'", str4, "2022-02-22T17:38:05.149+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514165149L + "'", long15 == 1645514165149L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63485149 + "'", int19 == 63485149);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63485149 + "'", int22 == 63485149);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType12.isSupported(chronology14);
        int int16 = period10.indexOf(durationFieldType12);
        org.joda.time.Period period18 = period10.plusMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        mutablePeriod19.add(52, 20, 7, 7, 63101202, 22, 429, 20);
        org.joda.time.Period period33 = new org.joda.time.Period(63197, 63110067, 63113600, 5922);
        org.joda.time.Period period35 = period33.withMonths(63195941);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) period33);
        java.lang.Object obj37 = mutablePeriod19.clone();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:05.179+10:22" + "'", str4, "2022-02-22T17:38:05.179+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "seconds" + "'", str13, "seconds");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT63197H63110067M63113605.922S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT63197H63110067M63113605.922S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT63197H63110067M63113605.922S");
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded(1645513771467L, 1);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        boolean boolean25 = mutableInterval24.containsNow();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withEra((int) (byte) 1);
        boolean boolean31 = mutableInterval24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        boolean boolean42 = mutableInterval32.contains((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime41.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime44.getMillisOfDay();
        org.joda.time.DateTime.Property property47 = dateTime44.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int57 = dateTime55.get(dateTimeFieldType56);
        int int58 = dateTime44.get(dateTimeFieldType56);
        int int59 = dateTime15.get(dateTimeFieldType56);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod();
        int int61 = mutablePeriod60.getSeconds();
        mutablePeriod60.addDays((int) (byte) 1);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) 25812540);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        java.lang.Object obj71 = mutableInterval66.clone();
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfEra();
        org.joda.time.Chronology chronology74 = chronology72.withUTC();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.minuteOfDay();
        long long79 = chronology72.add(1645513761835L, (long) 0, 1);
        org.joda.time.DateTimeField dateTimeField80 = chronology72.centuryOfEra();
        mutablePeriod60.setPeriod((org.joda.time.ReadableDuration) duration65, chronology72);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType56.getField(chronology72);
        java.lang.String str83 = dateTimeFieldType56.toString();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType56.getDurationType();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:05.209+10:22" + "'", str9, "2022-02-22T17:38:05.209+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:05.209+10:22" + "'", str28, "2022-02-22T17:38:05.209+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514165209L + "'", long39 == 1645514165209L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 63485209 + "'", int43 == 63485209);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 63485209 + "'", int46 == 63485209);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:38:05.209+10:22" + "'", str50, "2022-02-22T17:38:05.209+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645513761835L + "'", long79 == 1645513761835L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "yearOfCentury" + "'", str83, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType84);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfWeek();
        int int25 = dateTime20.getDayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property38 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime40 = property38.setCopy((int) (byte) 0);
        int int41 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property38.getFieldType();
        org.joda.time.DateTime.Property property43 = dateTime26.property(dateTimeFieldType42);
        java.lang.String str44 = dateTimeFieldType42.getName();
        java.lang.String str45 = dateTimeFieldType42.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:05.268+10:22" + "'", str4, "2022-02-22T17:38:05.268+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514165268L + "'", long15 == 1645514165268L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63485268 + "'", int19 == 63485268);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63485268 + "'", int22 == 63485268);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:38:05.268+10:22" + "'", str31, "2022-02-22T17:38:05.268+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        boolean boolean32 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime31);
        long long33 = mutableInterval22.getStartMillis();
        boolean boolean34 = interval21.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Period period36 = org.joda.time.Period.months(63208773);
        mutableInterval22.setPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514165302L + "'", long29 == 1645514165302L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        java.lang.String str4 = periodType3.getName();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(4);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.Period period17 = new org.joda.time.Period(3224448000000000L, 1645513964209L, periodType3, chronology15);
        int int18 = period17.getMillis();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "YearDayTimeNoYears" + "'", str4, "YearDayTimeNoYears");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514165328L + "'", long7 == 1645514165328L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-791) + "'", int18 == (-791));
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        boolean boolean23 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.setMonths((int) ' ');
        java.lang.Object obj37 = mutablePeriod34.clone();
        long long40 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekyear();
        mutableInterval13.setChronology(chronology31);
        org.joda.time.DurationField durationField43 = durationFieldType9.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField44 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology31.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.Chronology chronology57 = chronology55.withUTC();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime63.toYearMonthDay();
        int[] intArray66 = chronology57.get((org.joda.time.ReadablePartial) yearMonthDay64, 1645513760770L);
        org.joda.time.Period period67 = org.joda.time.Period.ZERO;
        org.joda.time.Period period69 = period67.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean71 = period69.equals((java.lang.Object) dateTimeFieldType70);
        org.joda.time.Period period73 = period69.plusWeeks(17);
        int[] intArray76 = chronology57.get((org.joda.time.ReadablePeriod) period73, 1645513771022L, 1645513765710L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dateTimeField46.set(readablePartial47, 63249530, intArray76, 63461689);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63461689 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514165351L + "'", long20 == 1645514165351L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "P32M");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1851379200000L + "'", long40 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514165351L + "'", long60 == 1645514165351L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, -5, -312]");
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration27 = duration16.minus(0L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Duration duration36 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '#');
        int int37 = duration1.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period38 = duration1.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645513759301L);
        int int46 = dateTimeZone42.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        int int49 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(1645513761794L, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone53);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.Period period59 = period55.plusWeeks((int) (short) -1);
        org.joda.time.Period period61 = period55.minusMillis(4);
        org.joda.time.Interval interval62 = interval54.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone65);
        org.joda.time.Period period67 = org.joda.time.Period.ZERO;
        org.joda.time.Period period69 = period67.minusSeconds((int) (short) 1);
        org.joda.time.Period period71 = period67.plusWeeks((int) (short) -1);
        org.joda.time.Period period73 = period67.minusMillis(4);
        org.joda.time.Interval interval74 = interval66.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Interval interval75 = interval54.gap((org.joda.time.ReadableInterval) interval74);
        org.joda.time.DateTime dateTime76 = interval54.getEnd();
        org.joda.time.Duration duration77 = interval54.toDuration();
        org.joda.time.Duration duration80 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.Duration duration81 = duration77.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTime dateTime83 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration80, 796);
        org.joda.time.Duration duration84 = duration1.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Days days85 = duration1.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:05.384+10:22" + "'", str4, "2022-02-22T17:38:05.384+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:38:05.384+10:22" + "'", str19, "2022-02-22T17:38:05.384+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37320000 + "'", int46 == 37320000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 37320000 + "'", int49 == 37320000);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(days85);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration3 = duration0.withDurationAdded(1645513769452L, 2021);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        mutableInterval4.setInterval(100000L, 1645513759601L);
        long long12 = mutableInterval4.getStartMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        long long38 = duration26.getStandardHours();
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        boolean boolean41 = duration0.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(0);
        boolean boolean60 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property61 = dateTime46.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        int int63 = dateTime46.get(dateTimeFieldType62);
        org.joda.time.DateTime dateTime66 = dateTime46.withDurationAdded(1645514048057L, 796);
        org.joda.time.Period period67 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100000L + "'", long12 == 100000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:38:05.440+10:22" + "'", str29, "2022-02-22T17:38:05.440+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:05.440+10:22" + "'", str44, "2022-02-22T17:38:05.440+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:05.440+10:22" + "'", str51, "2022-02-22T17:38:05.440+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        int[] intArray27 = chronology8.get((org.joda.time.ReadablePeriod) period24, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology8.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfYear();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.monthOfYear();
        org.joda.time.DurationField durationField42 = chronology37.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTime dateTime53 = dateTime48.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        boolean boolean60 = dateTime58.isBefore((-1L));
        int int61 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int63 = dateTime58.get(dateTimeFieldType62);
        java.lang.String str64 = dateTime58.toString();
        org.joda.time.DateTime dateTime66 = dateTime58.withYearOfEra(9);
        int int67 = dateTime66.getEra();
        org.joda.time.LocalDateTime localDateTime68 = dateTime66.toLocalDateTime();
        int int69 = localDateTime68.size();
        long long71 = chronology37.set((org.joda.time.ReadablePartial) localDateTime68, 0L);
        org.joda.time.Period period72 = org.joda.time.Period.ZERO;
        org.joda.time.Period period74 = period72.minusSeconds((int) (short) 1);
        org.joda.time.Period period76 = period72.plusWeeks((int) (short) -1);
        org.joda.time.Period period78 = period72.minusMillis(4);
        org.joda.time.Period period79 = period72.negated();
        int[] intArray80 = period79.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology29.validate((org.joda.time.ReadablePartial) localDateTime68, intArray80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514165484L + "'", long11 == 1645514165484L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:05.484+10:22" + "'", str46, "2022-02-22T17:38:05.484+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:38:05.484+10:22" + "'", str56, "2022-02-22T17:38:05.484+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:38:05.010+10:22" + "'", str64, "2022-02-22T17:38:05.010+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-61878617034990L) + "'", long71 == (-61878617034990L));
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        int int16 = mutablePeriod9.getHours();
        org.joda.time.format.PeriodFormatter periodFormatter17 = null;
        java.lang.String str18 = mutablePeriod9.toString(periodFormatter17);
        int int19 = mutablePeriod9.getDays();
        int int20 = mutablePeriod9.getMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P32M" + "'", str18, "P32M");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal(1645513763679L);
        java.lang.String str10 = dateTimeZone6.getShortName(1645513769549L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 25774, dateTimeZone6);
        java.lang.String str12 = dateTimeZone6.getID();
        long long14 = dateTimeZone6.nextTransition((long) 63291221);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514165578L + "'", long3 == 1645514165578L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645551083679L + "'", long8 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:22" + "'", str10, "+10:22");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 63291221L + "'", long14 == 63291221L);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone4);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.Period period10 = period6.plusWeeks((int) (short) -1);
        org.joda.time.Period period12 = period6.minusMillis(4);
        org.joda.time.Interval interval13 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        boolean boolean21 = dateTime19.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        boolean boolean40 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean43 = mutableInterval41.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        mutableInterval44.setInterval((org.joda.time.ReadableInterval) mutableInterval51);
        boolean boolean57 = mutableInterval44.containsNow();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime.Property property61 = dateTime59.yearOfEra();
        org.joda.time.Interval interval62 = property61.toInterval();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval63.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Interval interval68 = interval62.withDurationAfterStart((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Interval interval69 = interval62.toInterval();
        org.joda.time.Interval interval71 = interval69.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime72 = interval69.getStart();
        boolean boolean73 = mutableInterval44.isBefore((org.joda.time.ReadableInterval) interval69);
        boolean boolean74 = mutableInterval41.contains((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Period period75 = org.joda.time.Period.ZERO;
        org.joda.time.Period period77 = period75.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType78 = period77.getPeriodType();
        org.joda.time.PeriodType periodType79 = periodType78.withWeeksRemoved();
        org.joda.time.Period period80 = mutableInterval41.toPeriod(periodType78);
        org.joda.time.Period period81 = interval13.toPeriod(periodType78);
        org.joda.time.PeriodType periodType82 = periodType78.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(1645513876523L, 1645537080000L, periodType82);
        mutablePeriod83.setWeeks(115200000);
        boolean boolean87 = mutablePeriod83.equals((java.lang.Object) 1645513975476L);
        mutablePeriod83.setWeeks(63362634);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:38:05.603+10:22" + "'", str17, "2022-02-22T17:38:05.603+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:38:05.603+10:22" + "'", str24, "2022-02-22T17:38:05.603+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:38:05.603+10:22" + "'", str31, "2022-02-22T17:38:05.603+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514165603L + "'", long60 == 1645514165603L);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period2.withMinutes(37509);
        java.lang.String str9 = period2.toString();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-1S" + "'", str9, "PT-1S");
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        long long11 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        boolean boolean25 = mutableInterval12.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.toDuration();
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval12.toMutableInterval();
        long long48 = mutableInterval12.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime(chronology54);
        org.joda.time.DateTime dateTime56 = dateTime53.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime53.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond((int) (short) 10);
        boolean boolean65 = dateTime63.isBefore((-1L));
        int int66 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int68 = dateTime63.get(dateTimeFieldType67);
        org.joda.time.DateTime dateTime70 = dateTime63.plusMillis(31);
        boolean boolean71 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514165665L + "'", long7 == 1645514165665L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:05.665+10:22" + "'", str39, "2022-02-22T17:38:05.665+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100000L + "'", long48 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:05.665+10:22" + "'", str51, "2022-02-22T17:38:05.665+10:22");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:38:05.665+10:22" + "'", str61, "2022-02-22T17:38:05.665+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth(63120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63120 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration14.plus((long) 8);
        org.joda.time.Instant instant18 = instant10.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.Duration duration40 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '#');
        org.joda.time.Instant instant41 = instant18.plus((org.joda.time.ReadableDuration) duration40);
        long long42 = instant41.getMillis();
        boolean boolean43 = mutableInterval7.isBefore((org.joda.time.ReadableInstant) instant41);
        mutableInterval7.setInterval(0L, (long) 63090717);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        boolean boolean53 = mutableInterval47.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType55 = periodType54.withYearsRemoved();
        org.joda.time.Period period56 = mutableInterval47.toPeriod(periodType55);
        mutableInterval47.setEndMillis(1645513766329L);
        long long59 = mutableInterval47.getStartMillis();
        long long60 = mutableInterval47.getEndMillis();
        long long61 = mutableInterval47.getStartMillis();
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Duration duration63 = mutableInterval47.toDuration();
        long long64 = duration63.getStandardMinutes();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:05.738+10:22" + "'", str23, "2022-02-22T17:38:05.738+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645517463304L + "'", long42 == 1645517463304L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-100000L) + "'", long59 == (-100000L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645513766329L + "'", long60 == 1645513766329L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-100000L) + "'", long61 == (-100000L));
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 27425231L + "'", long64 == 27425231L);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(1645513771906L, locale3);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.100" + "'", str4, "+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        long long12 = duration2.getMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval24 = interval17.toInterval();
        org.joda.time.Interval interval26 = interval24.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime27 = interval24.getStart();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        boolean boolean31 = interval24.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 3, 1645513762121L, periodType35, chronology43);
        org.joda.time.Period period46 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType35);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType50 = period49.getPeriodType();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.PeriodType periodType52 = periodType50.withMillisRemoved();
        org.joda.time.PeriodType periodType53 = periodType50.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) dateTime29, periodType50);
        org.joda.time.DateTime dateTime56 = dateTime29.withYear(9);
        org.joda.time.DateTime.Property property57 = dateTime56.weekOfWeekyear();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property57.getAsText(locale58);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:05.801+10:22" + "'", str5, "2022-02-22T17:38:05.801+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100000L + "'", long12 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514165801L + "'", long15 == 1645514165801L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514165801L + "'", long30 == 1645514165801L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "8" + "'", str59, "8");
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        java.lang.String str40 = dateTimeZone36.getName(1645513762160L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant50 = instant48.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant52 = instant48.minus(1645513772143L);
        long long53 = instant52.getMillis();
        org.joda.time.Instant instant55 = instant52.minus(1645513778347L);
        org.joda.time.DateTime dateTime56 = instant55.toDateTimeISO();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfEra();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 3, 1645513762121L, periodType60, chronology68);
        org.joda.time.PeriodType periodType71 = periodType60.withMinutesRemoved();
        org.joda.time.PeriodType periodType72 = periodType71.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant55, periodType71);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod73.addMonths(63125790);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:05.834+10:22" + "'", str14, "2022-02-22T17:38:05.834+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:22" + "'", str40, "+10:22");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1813L) + "'", long53 == (-1813L));
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        java.lang.String str37 = periodType34.toString();
        java.lang.String str38 = periodType34.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513760165L, periodType34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant30, periodType34);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = duration18.minus((org.joda.time.ReadableDuration) duration44);
        boolean boolean55 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period56.minusSeconds((int) (short) 1);
        org.joda.time.Period period60 = period58.plusHours(4);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime69.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime74 = dateTime69.withDurationAdded(readableDuration72, 6);
        boolean boolean75 = period58.equals((java.lang.Object) dateTime69);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime69.toMutableDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray78 = new org.joda.time.DurationFieldType[] { durationFieldType77 };
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.forFields(durationFieldTypeArray78);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.forFields(durationFieldTypeArray78);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime69, periodType80);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str87 = dateTimeZone85.getNameKey(1645513759301L);
        java.lang.String str89 = dateTimeZone85.getName(1645513762160L);
        java.util.TimeZone timeZone90 = dateTimeZone85.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forTimeZone(timeZone90);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone91);
        org.joda.time.DateTime dateTime94 = dateTime92.minusMillis(5);
        org.joda.time.DateTime dateTime95 = dateTime92.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval96 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period81, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTimeZone dateTimeZone97 = dateTime92.getZone();
        org.joda.time.DateTime.Property property98 = dateTime92.weekOfWeekyear();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:38:05.860+10:22" + "'", str21, "2022-02-22T17:38:05.860+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[Time]" + "'", str37, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514165860L + "'", long48 == 1645514165860L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T17:38:05.860+10:22" + "'", str63, "2022-02-22T17:38:05.860+10:22");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(durationFieldTypeArray78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+10:22" + "'", str89, "+10:22");
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTimeZone97);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        mutablePeriod8.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.Period period19 = period15.plusWeeks((int) (short) -1);
        org.joda.time.Period period21 = period15.minusMillis(4);
        org.joda.time.Interval interval22 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Interval interval25 = interval22.withEndMillis((long) 40);
        org.joda.time.Interval interval26 = interval3.gap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        boolean boolean35 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalTime localTime36 = dateTime34.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        java.util.Locale locale42 = null;
        int int43 = property40.getMaximumTextLength(locale42);
        java.lang.String str44 = property40.toString();
        int int45 = property40.get();
        org.joda.time.DateTime dateTime46 = property40.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime.Property property50 = dateTime48.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Interval interval57 = interval51.withDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Interval interval58 = interval51.toInterval();
        org.joda.time.Interval interval60 = interval58.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime61 = interval58.getStart();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        boolean boolean65 = interval58.isBefore((org.joda.time.ReadableInstant) dateTime63);
        long long66 = interval58.getEndMillis();
        org.joda.time.Interval interval68 = interval58.withStartMillis(1645513761197L);
        org.joda.time.Interval interval69 = interval58.toInterval();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime.Property property73 = dateTime71.yearOfEra();
        org.joda.time.Interval interval74 = property73.toInterval();
        java.util.Locale locale75 = null;
        int int76 = property73.getMaximumTextLength(locale75);
        java.lang.String str77 = property73.getName();
        boolean boolean78 = property73.isLeap();
        java.util.Locale locale79 = null;
        java.lang.String str80 = property73.getAsText(locale79);
        org.joda.time.DateTime dateTime81 = property73.roundCeilingCopy();
        org.joda.time.Interval interval82 = interval69.withEnd((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.TimeOfDay timeOfDay84 = dateTime46.toTimeOfDay();
        org.joda.time.Period period85 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime36, (org.joda.time.ReadablePartial) timeOfDay84);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = localTime36.getValue(63218033);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63218033");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514165922L + "'", long29 == 1645514165922L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514165922L + "'", long39 == 1645514165922L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[yearOfEra]" + "'", str44, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514165923L + "'", long49 == 1645514165923L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514165923L + "'", long64 == 1645514165923L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1672493880000L + "'", long66 == 1672493880000L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645514165923L + "'", long72 == 1645514165923L);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "yearOfEra" + "'", str77, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022" + "'", str80, "2022");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.joda.time.Period period1 = org.joda.time.Period.millis(5);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant5 = instant3.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Instant instant7 = instant3.minus(1645513772143L);
        long long8 = instant7.getMillis();
        org.joda.time.Instant instant10 = instant7.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration14.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withZoneRetainFields(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        boolean boolean32 = dateTime29.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime34 = dateTime29.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period36 = period1.withFields((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.millisOfDay();
        org.joda.time.DurationField durationField44 = property43.getRangeDurationField();
        org.joda.time.DateTime dateTime45 = property43.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime46 = property43.roundHalfFloorCopy();
        boolean boolean47 = period36.equals((java.lang.Object) property43);
        int int48 = period36.getDays();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = period36.getValue(63364495);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63364495");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1813L) + "'", long8 == (-1813L));
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:05.956+10:22" + "'", str20, "2022-02-22T17:38:05.956+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514165956L + "'", long30 == 1645514165956L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:05.956+10:22" + "'", str39, "2022-02-22T17:38:05.956+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645513760253L, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1L), 1L, periodType20, chronology21);
        java.lang.String str23 = periodType20.toString();
        java.lang.String str24 = periodType20.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513760165L, periodType20);
        int int26 = mutablePeriod25.getWeeks();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period36 = period33.minusYears(3);
        int[] intArray39 = chronology13.get((org.joda.time.ReadablePeriod) period33, 0L, 1645513765808L);
        org.joda.time.Period period40 = duration3.toPeriod(periodType5, chronology13);
        org.joda.time.Duration duration42 = duration3.plus(1645514058926L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = duration42.toPeriodTo(readableInstant43);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[Time]" + "'", str23, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Time" + "'", str24, "Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[52, 1, 3, 0, 7, 9, 25, 808]");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval38 = interval31.toInterval();
        org.joda.time.Interval interval40 = interval38.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime41 = interval38.getStart();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = period52.getFieldTypes();
        org.joda.time.Period period55 = period52.multipliedBy(100);
        org.joda.time.Period period57 = period52.plusSeconds((-292275054));
        org.joda.time.Period period59 = period52.plusMillis(63098347);
        org.joda.time.DateTime dateTime60 = dateTime43.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime25.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Chronology chronology62 = dateTime25.getChronology();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.015+10:22" + "'", str2, "2022-02-22T17:38:06.015+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514166015L + "'", long29 == 1645514166015L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514166016L + "'", long44 == 1645514166016L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        long long10 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime4.withMillis(0L);
        boolean boolean14 = dateTime4.isAfter(1645514160923L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.062+10:22" + "'", str2, "2022-02-22T17:38:06.062+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514166010L + "'", long10 == 1645514166010L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Duration duration8 = duration3.plus(1645513859744L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        int int18 = dateTime10.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime23.getMonthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfDay();
        int int27 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfDay();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Seconds seconds49 = period48.toStandardSeconds();
        int int50 = period48.getMillis();
        int[] intArray53 = chronology34.get((org.joda.time.ReadablePeriod) period48, (long) (byte) 10, 1645513772584L);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period48.toDurationTo(readableInstant54);
        long long56 = duration55.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        java.lang.Object obj70 = mutableInterval65.clone();
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 8, periodType64, chronology71);
        mutablePeriod60.setPeriod((org.joda.time.ReadableDuration) duration62, chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.weekyear();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(1645513810388L, chronology71);
        org.joda.time.DateTimeField dateTimeField77 = chronology71.millisOfSecond();
        org.joda.time.Period period78 = duration55.toPeriod(chronology71);
        org.joda.time.DateTime dateTime79 = dateTime23.plus((org.joda.time.ReadableDuration) duration55);
        int int80 = duration8.compareTo((org.joda.time.ReadableDuration) duration55);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:38:06.081+10:22" + "'", str11, "2022-02-22T17:38:06.081+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514166081L + "'", long21 == 1645514166081L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:38:06.081+10:22" + "'", str42, "2022-02-22T17:38:06.081+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        long long22 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime18.minusWeeks((-187719327));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:06.146+10:22" + "'", str9, "2022-02-22T17:38:06.146+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514166146L + "'", long19 == 1645514166146L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514166146L + "'", long22 == 1645514166146L);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period72 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period72.negated();
        org.joda.time.Period period75 = period72.withDays(1);
        int int77 = period72.getValue((int) (short) 0);
        org.joda.time.Period period79 = period72.withYears((int) 'a');
        int int80 = period79.getSeconds();
        mutableInterval18.setPeriodAfterStart((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Period period82 = mutableInterval18.toPeriod();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514166166L + "'", long30 == 1645514166166L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:06.166+10:22" + "'", str44, "2022-02-22T17:38:06.166+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:06.166+10:22" + "'", str57, "2022-02-22T17:38:06.166+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(seconds70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.millis(1645513848646L);
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime7.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusSeconds(25940007);
        int int14 = dateTime13.getMillisOfSecond();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.214+10:22" + "'", str2, "2022-02-22T17:38:06.214+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 220 + "'", int14 == 220);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) ' ');
        java.util.Locale locale13 = null;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTimeISO();
        int int16 = dateTime15.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.262+10:22" + "'", str2, "2022-02-22T17:38:06.262+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=115200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=22,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        int int8 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration21 = interval20.toDuration();
        boolean boolean22 = duration1.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.minuteOfDay();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology31);
        org.joda.time.DateTimeZone dateTimeZone36 = chronology31.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.minuteOfHour();
        org.joda.time.DurationField durationField38 = chronology31.minutes();
        boolean boolean39 = duration21.equals((java.lang.Object) durationField38);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:06.282+10:22" + "'", str5, "2022-02-22T17:38:06.282+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:06.282+10:22" + "'", str12, "2022-02-22T17:38:06.282+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513760165L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration41.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period56 = duration27.toPeriod();
        org.joda.time.Period period58 = period56.minusMillis(25832060);
        org.joda.time.Period period59 = period58.normalizedStandard();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:06.312+10:22" + "'", str4, "2022-02-22T17:38:06.312+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514166313L + "'", long31 == 1645514166313L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:06.313+10:22" + "'", str47, "2022-02-22T17:38:06.313+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        boolean boolean11 = mutableInterval0.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        boolean boolean25 = mutableInterval12.equals((java.lang.Object) 17);
        boolean boolean26 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Interval interval27 = mutableInterval0.toInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval27);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(63227245, 63299149, 63354205, 63140415);
        java.lang.String str5 = mutablePeriod4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT63227245H63299149M63417345.415S" + "'", str5, "PT63227245H63299149M63417345.415S");
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration3 = duration0.withDurationAdded(1645513769452L, 2021);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.Duration duration25 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Duration duration40 = duration3.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean51 = period49.equals((java.lang.Object) dateTimeFieldType50);
        org.joda.time.Period period53 = period49.plusWeeks(17);
        boolean boolean54 = mutableInterval41.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval55.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = duration58.toPeriod();
        org.joda.time.Duration duration61 = duration58.toDuration();
        mutableInterval41.setDurationAfterStart((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration61, 63308524);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.millis();
        java.lang.String str66 = periodType65.getName();
        org.joda.time.Period period67 = org.joda.time.Period.ZERO;
        org.joda.time.Period period69 = period67.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean71 = period69.equals((java.lang.Object) dateTimeFieldType70);
        org.joda.time.Period period73 = period69.plusWeeks(17);
        org.joda.time.Period period74 = period69.toPeriod();
        boolean boolean75 = periodType65.equals((java.lang.Object) period74);
        org.joda.time.PeriodType periodType76 = periodType65.withSecondsRemoved();
        org.joda.time.PeriodType periodType77 = periodType65.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period78 = duration3.toPeriod(periodType77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3325583328062492");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:06.439+10:22" + "'", str8, "2022-02-22T17:38:06.439+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:06.440+10:22" + "'", str28, "2022-02-22T17:38:06.440+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Millis" + "'", str66, "Millis");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(37320000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(3);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(1645513830202L);
        org.joda.time.DateTime dateTime21 = dateTime18.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime23 = dateTime18.withMillisOfDay(25841858);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Interval interval48 = interval27.gap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTime dateTime49 = interval27.getEnd();
        org.joda.time.Duration duration50 = interval27.toDuration();
        org.joda.time.Duration duration53 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.Duration duration54 = duration50.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.DateTime dateTime72 = dateTime69.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.toDateTime(chronology73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = duration67.toPeriodTo((org.joda.time.ReadableInstant) dateTime74, periodType75);
        boolean boolean77 = duration53.isLongerThan((org.joda.time.ReadableDuration) duration67);
        long long78 = duration53.getStandardDays();
        boolean boolean79 = dateTime18.equals((java.lang.Object) long78);
        int int80 = dateTime18.getYearOfEra();
        boolean boolean81 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.516+10:22" + "'", str2, "2022-02-22T17:38:06.516+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514166516L + "'", long14 == 1645514166516L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T17:38:06.516+10:22" + "'", str59, "2022-02-22T17:38:06.516+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-22T17:38:06.516+10:22" + "'", str70, "2022-02-22T17:38:06.516+10:22");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '4');
        org.joda.time.Period period3 = period1.plusMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime4.toTimeOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.669+10:22" + "'", str2, "2022-02-22T17:38:06.669+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(1645513794665L, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        long long12 = dateTimeField9.addWrapField(1645513851845L, 45);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645470651845L + "'", long12 == 1645470651845L);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfDay();
        boolean boolean10 = dateTimeField9.isSupported();
        long long12 = dateTimeField9.roundHalfFloor((long) 27425229);
        boolean boolean13 = dateTimeField9.isSupported();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 27420000L + "'", long12 == 27420000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        long long22 = duration20.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        java.lang.String str37 = property36.getName();
        org.joda.time.DateTime dateTime38 = property36.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        long long68 = duration58.getMillis();
        long long69 = duration58.getStandardMinutes();
        org.joda.time.Duration duration70 = duration58.toDuration();
        boolean boolean71 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = duration42.withMillis((long) ' ');
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.standard();
        int int75 = periodType74.size();
        org.joda.time.Period period76 = new org.joda.time.Period(readableInstant32, (org.joda.time.ReadableDuration) duration73, periodType74);
        org.joda.time.Period period77 = duration20.toPeriodTo((org.joda.time.ReadableInstant) dateTime30, periodType74);
        org.joda.time.PeriodType periodType78 = periodType74.withDaysRemoved();
        org.joda.time.PeriodType periodType79 = periodType74.withSecondsRemoved();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:38:06.744+10:22" + "'", str25, "2022-02-22T17:38:06.744+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514166744L + "'", long35 == 1645514166744L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "yearOfEra" + "'", str37, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T17:38:06.744+10:22" + "'", str48, "2022-02-22T17:38:06.744+10:22");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:38:06.744+10:22" + "'", str61, "2022-02-22T17:38:06.744+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100000L + "'", long68 == 100000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513760165L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        int int24 = dateTime20.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        int int34 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDate localDate35 = dateTime33.toLocalDate();
        int[] intArray37 = chronology17.get((org.joda.time.ReadablePartial) localDate35, 1645513760075L);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.dayOfWeek();
        long long41 = dateTimeField38.add(438L, (long) 63105565);
        boolean boolean43 = dateTimeField38.isLeap(1645513787496L);
        java.lang.String str45 = dateTimeField38.getAsText(1645513768865L);
        org.joda.time.DurationField durationField46 = dateTimeField38.getLeapDurationField();
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeField38.getAsShortText(1645513774498L, locale48);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514166800L + "'", long21 == 1645514166800L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:06.800+10:22" + "'", str27, "2022-02-22T17:38:06.800+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5452320816000438L + "'", long41 == 5452320816000438L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Tuesday" + "'", str45, "Tuesday");
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Tue" + "'", str49, "Tue");
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime71 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.Period period73 = org.joda.time.Period.seconds(5922);
        org.joda.time.DateTime dateTime74 = dateTime71.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.DateTime dateTime75 = dateTime71.withTimeAtStartOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:06.856+10:22" + "'", str2, "2022-02-22T17:38:06.856+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:06.856+10:22" + "'", str15, "2022-02-22T17:38:06.856+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514166856,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=6,MILLISECOND=856,ZONE_OFFSET=37320000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514166856L + "'", long30 == 1645514166856L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:06.856+10:22" + "'", str44, "2022-02-22T17:38:06.856+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:06.856+10:22" + "'", str57, "2022-02-22T17:38:06.856+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.plusMillis((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod3 = period0.toMutablePeriod();
        int int4 = period0.getMinutes();
        org.joda.time.Period period6 = period0.withDays(63138274);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod();
        mutablePeriod15.setMonths((int) ' ');
        java.lang.Object obj18 = mutablePeriod15.clone();
        long long21 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod15, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField22 = chronology12.weekyear();
        org.joda.time.DurationField durationField23 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology12.minutes();
        org.joda.time.Period period26 = new org.joda.time.Period(1645513856568L, periodType3, chronology12);
        org.joda.time.DateTimeField dateTimeField27 = chronology12.dayOfWeek();
        org.joda.time.DurationField durationField28 = chronology12.halfdays();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "P32M");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1851379200000L + "'", long21 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        int int12 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime25.centuryOfEra();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        boolean boolean36 = mutableInterval30.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        boolean boolean38 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval28.overlap((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTime dateTime41 = interval28.getEnd();
        boolean boolean43 = interval28.isAfter(1645513839357L);
        java.lang.String str44 = interval28.toString();
        long long45 = interval28.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime.Property property51 = dateTime47.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval52 = interval28.withEnd((org.joda.time.ReadableInstant) dateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:07.034+10:22" + "'", str9, "2022-02-22T17:38:07.034+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:07.034+10:22" + "'", str15, "2022-02-22T17:38:07.034+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "37322022-02-22T17:36:27.034+10:22/37322022-02-22T17:38:07.034+10:22" + "'", str44, "37322022-02-22T17:36:27.034+10:22/37322022-02-22T17:38:07.034+10:22");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100000L + "'", long45 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T17:38:07.034+10:22" + "'", str48, "2022-02-22T17:38:07.034+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 40, 40, '#', 10 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        long long24 = dateTimeField7.roundHalfFloor((long) (byte) 1);
        boolean boolean26 = dateTimeField7.isLeap(1645513765246L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        java.util.Locale locale32 = null;
        int int33 = property30.getMaximumTextLength(locale32);
        java.util.Locale locale34 = null;
        java.lang.String str35 = property30.getAsShortText(locale34);
        org.joda.time.Interval interval36 = property30.toInterval();
        org.joda.time.DateTime dateTime37 = property30.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        int int39 = dateTime38.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime38.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        int[] intArray58 = chronology49.get((org.joda.time.ReadablePartial) yearMonthDay56, 1645513760770L);
        int int59 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay40, intArray58);
        java.lang.String str60 = yearMonthDay40.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514167111L + "'", long11 == 1645514167111L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-37320000L) + "'", long24 == (-37320000L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514167111L + "'", long29 == 1645514167111L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514167111L + "'", long52 == 1645514167111L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-01-01" + "'", str60, "2022-01-01");
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        long long35 = instant0.getMillis();
        org.joda.time.Instant instant37 = instant0.withMillis(1645513848204L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:38:07.206+10:22" + "'", str6, "2022-02-22T17:38:07.206+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514167206L + "'", long20 == 1645514167206L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514167206L + "'", long35 == 1645514167206L);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = dateTime22.isAfter(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:07.237+10:22" + "'", str2, "2022-02-22T17:38:07.237+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:07.237+10:22" + "'", str9, "2022-02-22T17:38:07.237+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:07.237+10:22" + "'", str16, "2022-02-22T17:38:07.237+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime29.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property40 = dateTime38.property(dateTimeFieldType39);
        boolean boolean41 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval0.copy();
        mutableInterval42.setInterval(0L, 0L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514167265L + "'", long25 == 1645514167265L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:38:07.265+10:22" + "'", str32, "2022-02-22T17:38:07.265+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mutableInterval42);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str6 = dateTimeZone4.getNameKey(1645513759301L);
        java.lang.String str8 = dateTimeZone4.getName(1645513762160L);
        java.util.TimeZone timeZone9 = dateTimeZone4.toTimeZone();
        int int11 = dateTimeZone4.getStandardOffset(1645513761942L);
        java.lang.String str13 = dateTimeZone4.getNameKey(1613977792184L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 63448492, 0L, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:22" + "'", str8, "+10:22");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.joda.time.Period period1 = org.joda.time.Period.millis(63146531);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis(1645513761776L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minus(1645513768963L);
        org.joda.time.DateTime dateTime11 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property12 = dateTime8.yearOfCentury();
        org.joda.time.Period period13 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) dateTime8);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514167347L + "'", long6 == 1645514167347L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = mutablePeriod34.getSeconds();
        mutablePeriod34.addSeconds(115200000);
        org.joda.time.Period period38 = period16.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod34.add(readablePeriod39);
        mutablePeriod34.setMonths(63100366);
        mutablePeriod34.add(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod34, (org.joda.time.ReadableInstant) dateTime49);
        mutablePeriod34.addHours(0);
        mutablePeriod34.addWeeks(21);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1L), 1L, periodType60, chronology61);
        mutablePeriod62.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone67);
        org.joda.time.Period period69 = org.joda.time.Period.ZERO;
        org.joda.time.Period period71 = period69.minusSeconds((int) (short) 1);
        org.joda.time.Period period73 = period69.plusWeeks((int) (short) -1);
        org.joda.time.Period period75 = period69.minusMillis(4);
        org.joda.time.Interval interval76 = interval68.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        mutablePeriod62.add((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Interval interval79 = interval76.withEndMillis((long) 40);
        org.joda.time.Duration duration80 = interval79.toDuration();
        org.joda.time.Duration duration83 = duration80.withDurationAdded((long) 63343, 28);
        mutablePeriod34.add((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:07.369+10:22" + "'", str27, "2022-02-22T17:38:07.369+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(period38);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:07.369+10:22" + "'", str47, "2022-02-22T17:38:07.369+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration83);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration11.minus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval43.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = duration46.toPeriod();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period54 = duration52.toPeriod();
        boolean boolean55 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration46, periodType56);
        boolean boolean58 = duration36.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.PeriodType periodType62 = periodType61.withMillisRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withDaysRemoved();
        org.joda.time.Period period65 = duration36.toPeriod(periodType64);
        org.joda.time.Period period66 = mutableInterval0.toPeriod(periodType64);
        mutableInterval0.setEndMillis(1645514042254L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:07.411+10:22" + "'", str14, "2022-02-22T17:38:07.411+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514167411L + "'", long28 == 1645514167411L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514167411L + "'", long39 == 1645514167411L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = interval4.contains(readableInstant5);
        boolean boolean7 = interval4.isBeforeNow();
        org.joda.time.DateTime dateTime8 = interval4.getStart();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Seconds seconds32 = period31.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod33 = period31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period36 = period31.withFieldAdded(durationFieldType34, (int) (short) -1);
        org.joda.time.Interval interval37 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval38 = interval4.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Duration duration39 = interval38.toDuration();
        boolean boolean41 = interval38.isBefore(1645514135607L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514167491L + "'", long2 == 1645514167491L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:38:07.491+10:22" + "'", str25, "2022-02-22T17:38:07.491+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T17:33:33.532+10:22");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long5 = dateTimeZone2.convertLocalToUTC((long) 221, true);
        int int7 = dateTimeZone2.getStandardOffset((long) 25880930);
        java.lang.String str8 = dateTimeZone2.toString();
        java.lang.Object obj9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(obj9, periodType10, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone2, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-359999779L) + "'", long5 == (-359999779L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 360000000 + "'", int7 == 360000000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+100:00" + "'", str8, "+100:00");
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513760253L, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.year();
        mutablePeriod0.add(1645513767484L, chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.monthOfYear();
        int int30 = dateTimeField29.getMinimumValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514167658L + "'", long10 == 1645514167658L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withZoneRetainFields(dateTimeZone32);
        int int34 = dateTime30.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime35.toString(dateTimeFormatter36);
        boolean boolean38 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period50 = org.joda.time.Period.days((int) (byte) 10);
        mutablePeriod48.mergePeriod((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = mutablePeriod48.getFieldTypes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = mutablePeriod48.getFieldTypes();
        mutablePeriod48.addYears(63457136);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:07.683+10:22" + "'", str2, "2022-02-22T17:38:07.683+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:38:07.683+10:22" + "'", str24, "2022-02-22T17:38:07.683+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 17 + "'", int34 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:38:07.683+10:22" + "'", str37, "2022-02-22T17:38:07.683+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:38:07.683+10:22" + "'", str41, "2022-02-22T17:38:07.683+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        java.lang.String str17 = dateTimeZone15.getName(52L);
        boolean boolean19 = dateTimeZone15.isStandardOffset(1645513786292L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(63332684, 63138274, 63401, 63421285, 63271277, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63421285 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        mutablePeriod14.setMonths(292278993);
        int int17 = mutablePeriod14.getHours();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        org.joda.time.Period period30 = period24.minusMillis(4);
        org.joda.time.Interval interval31 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfDay();
        mutablePeriod14.setPeriod(1645513775005L, (long) 'a', chronology32);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645513766040L, chronology50);
        mutablePeriod51.setMonths(292278993);
        mutablePeriod51.setHours(25812540);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod51, 1645514118219L, 63295979);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 18500085003069147");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[+10:22]" + "'", str33, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean26 = period24.equals((java.lang.Object) dateTimeFieldType25);
        org.joda.time.Period period28 = period24.plusWeeks(17);
        org.joda.time.Period period30 = period28.withYears(63099629);
        org.joda.time.Period period32 = period28.withSeconds(63147663);
        org.joda.time.Hours hours33 = period32.toStandardHours();
        org.joda.time.Duration duration34 = period32.toStandardDuration();
        boolean boolean35 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:07.798+10:22" + "'", str4, "2022-02-22T17:38:07.798+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514167828,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=7,MILLISECOND=828,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:38:07.828+10:22" + "'", str6, "2022-02-22T17:38:07.828+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField17 = chronology6.minutes();
        boolean boolean18 = durationField17.isSupported();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(63140415, 63119816, 25832060, 37363);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        int int10 = dateTime9.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime9.withMonthOfYear(4);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths(3);
        org.joda.time.DateTime dateTime35 = dateTime31.plusSeconds(9);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 3, 1645513762121L, periodType39, chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField51 = chronology47.months();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str56 = dateTimeZone54.getNameKey(1645513759301L);
        java.lang.String str58 = dateTimeZone54.getName(1645513762160L);
        java.util.TimeZone timeZone59 = dateTimeZone54.toTimeZone();
        int int61 = dateTimeZone54.getStandardOffset(1645513761942L);
        int int63 = dateTimeZone54.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology64 = chronology47.withZone(dateTimeZone54);
        int int66 = dateTimeZone54.getOffset((long) 115200000);
        int int68 = dateTimeZone54.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTime dateTime69 = dateTime31.toDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime70 = dateTime31.toLocalDateTime();
        org.joda.time.DateTime.Property property71 = dateTime31.era();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property73 = dateTime31.yearOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:38:07.889+10:22" + "'", str7, "2022-02-22T17:38:07.889+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:07.889+10:22" + "'", str13, "2022-02-22T17:38:07.889+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514167889L + "'", long29 == 1645514167889L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:22" + "'", str58, "+10:22");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 37320000 + "'", int61 == 37320000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 37320000 + "'", int63 == 37320000);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 37320000 + "'", int66 == 37320000);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 37320000 + "'", int68 == 37320000);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime8 = property3.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        boolean boolean11 = mutableInterval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra((int) (byte) 1);
        boolean boolean17 = mutableInterval10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTime dateTime35 = property33.withMinimumValue();
        boolean boolean36 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = dateTime9.isEqual(readableInstant37);
        org.joda.time.DateTime.Property property39 = dateTime9.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int49 = dateTime47.get(dateTimeFieldType48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period60 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime72 = dateTime70.plusSeconds((int) (byte) 10);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Period period74 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration51.minus(readableDuration75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, readableDuration75);
        org.joda.time.DateTime dateTime79 = dateTime47.minusYears(63099629);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = property39.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371990149887934 - -1991230318016512990");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514167934L + "'", long2 == 1645514167934L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:07.934+10:22" + "'", str14, "2022-02-22T17:38:07.934+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514167935L + "'", long25 == 1645514167935L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 63487935 + "'", int29 == 63487935);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 63487935 + "'", int32 == 63487935);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:38:07.935+10:22" + "'", str42, "2022-02-22T17:38:07.935+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:38:07.935+10:22" + "'", str54, "2022-02-22T17:38:07.935+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(duration64);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514167935L + "'", long68 == 1645514167935L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.year();
        org.joda.time.DurationField durationField23 = chronology18.days();
        long long26 = durationField23.getValueAsLong(1645513855755L, 1645513769807L);
        long long28 = durationField23.getValueAsLong(0L);
        boolean boolean29 = durationField23.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 19045L + "'", long26 == 19045L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField15 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        org.joda.time.Interval interval32 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setMinutes((int) 'a');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval35.copy();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Interval interval47 = interval41.withDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = interval47.toDuration();
        mutableInterval36.setInterval((org.joda.time.ReadableInterval) interval47);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval47);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        mutableInterval51.setInterval((org.joda.time.ReadableInterval) mutableInterval58);
        boolean boolean64 = mutableInterval51.containsNow();
        mutableInterval51.setEndMillis(1645513776987L);
        org.joda.time.Interval interval67 = mutableInterval51.toInterval();
        boolean boolean68 = interval47.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime.Property property72 = dateTime70.yearOfEra();
        org.joda.time.DateTime dateTime73 = property72.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField74 = property72.getField();
        org.joda.time.DateTime dateTime75 = property72.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.withZoneRetainFields(dateTimeZone77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType79.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType79.getDurationType();
        int int82 = dateTime75.get(dateTimeFieldType79);
        org.joda.time.DateMidnight dateMidnight83 = dateTime75.toDateMidnight();
        boolean boolean84 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime75);
        int int85 = dateTime75.getMonthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514168075L + "'", long2 == 1645514168075L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT1M40S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT1M40S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT1M40S");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514168075L + "'", long39 == 1645514168075L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1969-12-31T23:00:00.000-01:00/1969-12-31T23:00:00.000-01:00");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514168075L + "'", long71 == 1645514168075L);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTime.Property property39 = dateTime11.hourOfDay();
        int int40 = property39.get();
        boolean boolean41 = property39.isLeap();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMonths(3);
        int int49 = property39.compareTo((org.joda.time.ReadableInstant) dateTime48);
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = dateTime48.toCalendar(locale50);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:08.179+10:22" + "'", str12, "2022-02-22T17:38:08.179+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 17 + "'", int40 == 17);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514168179L + "'", long44 == 1645514168179L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1643872568179,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=8,MILLISECOND=179,ZONE_OFFSET=37320000,DST_OFFSET=0]");
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        int int13 = dateTime6.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime15 = dateTime6.plusHours(63110);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27, periodType37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone41);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period43.minusSeconds((int) (short) 1);
        org.joda.time.Period period47 = period43.plusWeeks((int) (short) -1);
        org.joda.time.Period period49 = period43.minusMillis(4);
        org.joda.time.Interval interval50 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        java.lang.String str52 = chronology51.toString();
        org.joda.time.Period period53 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType37, chronology51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime.Property property57 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property57.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime58.getZone();
        long long61 = dateTimeZone59.convertUTCToLocal(1645513763679L);
        java.lang.String str63 = dateTimeZone59.getShortName(1645513769549L);
        long long65 = dateTimeZone59.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology66 = chronology51.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime67 = dateTime6.toDateTime(chronology51);
        boolean boolean69 = dateTime67.isAfter(1645513945726L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514168223L + "'", long2 == 1645514168223L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514168223L + "'", long20 == 1645514168223L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+10:22]" + "'", str52, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645514168223L + "'", long56 == 1645514168223L);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645551083679L + "'", long61 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:22" + "'", str63, "+10:22");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645513786393L + "'", long65 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withMillisOfDay(52);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:08.268+10:22" + "'", str9, "2022-02-22T17:38:08.268+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514168268L + "'", long19 == 1645514168268L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime22 = mutableInterval0.getStart();
        org.joda.time.DateTime dateTime23 = mutableInterval0.getStart();
        org.joda.time.Period period28 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Weeks weeks30 = period28.toStandardWeeks();
        org.joda.time.Period period32 = period28.plusMillis(63184900);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        boolean boolean35 = mutableInterval0.contains(1645513821639L);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.months();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        int[] intArray58 = chronology49.get((org.joda.time.ReadablePartial) yearMonthDay56, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField59 = chronology49.monthOfYear();
        org.joda.time.DurationField durationField60 = chronology49.hours();
        long long64 = chronology49.add((long) (byte) -1, 1645513779827L, 2);
        org.joda.time.DurationField durationField65 = chronology49.hours();
        org.joda.time.DateTimeField dateTimeField66 = chronology49.weekyearOfCentury();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 258, periodType39, chronology49);
        org.joda.time.Period period68 = mutableInterval0.toPeriod(periodType39);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514168297L + "'", long52 == 1645514168297L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3291027559653L + "'", long64 == 3291027559653L);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T17:33:58.898+10:22");
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1L), 1L, periodType29, chronology30);
        mutablePeriod31.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone36);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period38.minusSeconds((int) (short) 1);
        org.joda.time.Period period42 = period38.plusWeeks((int) (short) -1);
        org.joda.time.Period period44 = period38.minusMillis(4);
        org.joda.time.Interval interval45 = interval37.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes(4);
        org.joda.time.LocalDate localDate56 = dateTime53.toLocalDate();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        boolean boolean67 = mutableInterval57.contains((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod31.setPeriod((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.time();
        org.joda.time.Period period70 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateTime53, periodType69);
        org.joda.time.PeriodType periodType71 = periodType69.withMonthsRemoved();
        org.joda.time.PeriodType periodType72 = periodType69.withMillisRemoved();
        org.joda.time.PeriodType periodType73 = periodType72.withHoursRemoved();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:08.388+10:22" + "'", str4, "2022-02-22T17:38:08.388+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514168388L + "'", long18 == 1645514168388L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval45);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514168388L + "'", long49 == 1645514168388L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514168388L + "'", long64 == 1645514168388L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime25 = dateTime17.withZone(dateTimeZone22);
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration50 = duration39.minus(0L);
        org.joda.time.DateTime dateTime52 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (short) 0);
        long long53 = duration50.getStandardSeconds();
        org.joda.time.DateTime dateTime54 = dateTime25.plus((org.joda.time.ReadableDuration) duration50);
        int int55 = dateTime54.getSecondOfDay();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 3, 1645513762121L, periodType59, chronology67);
        org.joda.time.PeriodType periodType70 = periodType59.withMinutesRemoved();
        org.joda.time.PeriodType periodType71 = periodType70.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime54, periodType71);
        org.joda.time.DateMidnight dateMidnight73 = dateTime10.toDateMidnight();
        org.joda.time.DateTime dateTime74 = dateTime10.withTimeAtStartOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:08.450+10:22" + "'", str2, "2022-02-22T17:38:08.450+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514168450L + "'", long15 == 1645514168450L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:38:08.450+10:22" + "'", str29, "2022-02-22T17:38:08.450+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:38:08.450+10:22" + "'", str42, "2022-02-22T17:38:08.450+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 63588 + "'", int55 == 63588);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy((int) (byte) 0);
        int int14 = property11.getMinimumValueOverall();
        java.lang.String str15 = property11.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.minusSeconds((int) (short) 1);
        org.joda.time.Period period29 = period25.plusWeeks((int) (short) -1);
        org.joda.time.Period period31 = period25.minusMillis(4);
        int int32 = period25.getDays();
        org.joda.time.DateTime dateTime34 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 63099629);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime24.toMutableDateTimeISO();
        int int36 = property11.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period49 = period47.withYears(52);
        org.joda.time.Period period51 = period49.multipliedBy((int) (byte) -1);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:08.505+10:22" + "'", str4, "2022-02-22T17:38:08.505+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyear" + "'", str15, "weekyear");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:08.505+10:22" + "'", str18, "2022-02-22T17:38:08.505+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:38:08.505+10:22" + "'", str41, "2022-02-22T17:38:08.505+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) "2022-02-22T17:32:03.253+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:32:03.253+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration9);
        int int24 = mutablePeriod23.getYears();
        int int25 = mutablePeriod23.getYears();
        mutablePeriod23.setMonths(1645513765);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod23.copy();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514168565L + "'", long2 == 1645514168565L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:08.565+10:22" + "'", str15, "2022-02-22T17:38:08.565+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod28);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period40 = duration27.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) duration27);
        org.joda.time.format.PeriodFormatter periodFormatter42 = null;
        java.lang.String str43 = mutablePeriod41.toString(periodFormatter42);
        mutablePeriod41.addSeconds(63431);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:08.592+10:22" + "'", str2, "2022-02-22T17:38:08.592+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:08.592+10:22" + "'", str15, "2022-02-22T17:38:08.592+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:08.592+10:22" + "'", str30, "2022-02-22T17:38:08.592+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT1M40S" + "'", str43, "PT1M40S");
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        int int18 = mutablePeriod16.getSeconds();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean32 = mutableInterval26.containsNow();
        mutablePeriod16.add((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        java.lang.String str38 = property37.getName();
        org.joda.time.DateTime dateTime39 = property37.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone60);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.minusSeconds((int) (short) 1);
        org.joda.time.Period period66 = period62.plusWeeks((int) (short) -1);
        org.joda.time.Period period68 = period62.minusMillis(4);
        org.joda.time.Interval interval69 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        java.lang.String str71 = chronology70.toString();
        org.joda.time.DurationField durationField72 = chronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration43, chronology70);
        mutablePeriod16.addMonths(17);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = mutablePeriod16.getValue(63131370);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63131370");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:08.708+10:22" + "'", str9, "2022-02-22T17:38:08.708+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514168708L + "'", long36 == 1645514168708L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "yearOfEra" + "'", str38, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:08.708+10:22" + "'", str49, "2022-02-22T17:38:08.708+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[+10:22]" + "'", str71, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTime dateTime9 = dateTime2.withEarlierOffsetAtOverlap();
        int int10 = dateTime2.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 10, (int) (byte) 0);
        int int22 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Seconds seconds47 = period46.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod48 = period46.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period51 = period46.withFieldAdded(durationFieldType49, (int) (short) -1);
        org.joda.time.Interval interval52 = interval35.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = interval35.getStart();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        org.joda.time.DateTime dateTime57 = dateTime53.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime21.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 63092, dateTimeZone56);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone56.getName(1645514045449L, locale61);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T17:38:08.782+10:22" + "'", str3, "2022-02-22T17:38:08.782+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:08.782+10:22" + "'", str13, "2022-02-22T17:38:08.782+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:08.782+10:22" + "'", str40, "2022-02-22T17:38:08.782+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:22" + "'", str62, "+10:22");
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period2.withMinutes(37509);
        org.joda.time.Period period10 = period8.withHours(25813924);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 8, periodType58, chronology65);
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration56, chronology65);
        int int69 = mutablePeriod54.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.yearOfEra();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.minuteOfDay();
        org.joda.time.DurationField durationField81 = durationFieldType71.getField(chronology78);
        mutablePeriod54.add(durationFieldType71, 0);
        org.joda.time.Interval interval84 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        boolean boolean86 = interval84.containsNow();
        boolean boolean87 = interval84.isBeforeNow();
        org.joda.time.Interval interval88 = interval84.toInterval();
        org.joda.time.DateTime dateTime89 = interval88.getStart();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514168859L + "'", long24 == 1645514168859L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime26 = interval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        boolean boolean30 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime28, periodType34);
        org.joda.time.Duration duration46 = duration1.toDuration();
        boolean boolean48 = duration46.equals((java.lang.Object) "2022-02-22T17:31:30.329+10:22");
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime.Property property52 = dateTime50.yearOfEra();
        org.joda.time.Interval interval53 = property52.toInterval();
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period54.negated();
        org.joda.time.Interval interval56 = interval53.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval57.setInterval(100000L, 1645513759601L);
        long long65 = mutableInterval57.getStartMillis();
        org.joda.time.Duration duration66 = mutableInterval57.toDuration();
        org.joda.time.Period period67 = org.joda.time.Period.ZERO;
        org.joda.time.Period period69 = period67.minusSeconds((int) (short) 1);
        org.joda.time.Period period71 = period67.plusMinutes(3);
        org.joda.time.Period period73 = period71.plusWeeks(17);
        org.joda.time.Duration duration74 = period73.toStandardDuration();
        mutableInterval57.setDurationAfterStart((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Interval interval76 = interval56.withDurationAfterStart((org.joda.time.ReadableDuration) duration74);
        boolean boolean77 = duration46.isEqual((org.joda.time.ReadableDuration) duration74);
        java.lang.String str78 = duration74.toString();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:08.918+10:22" + "'", str4, "2022-02-22T17:38:08.918+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514168918L + "'", long14 == 1645514168918L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514168918L + "'", long29 == 1645514168918L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514168918L + "'", long51 == 1645514168918L);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100000L + "'", long65 == 100000L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT10281780S" + "'", str78, "PT10281780S");
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = duration8.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        long long18 = dateTimeZone16.convertUTCToLocal(1645513763679L);
        java.lang.String str20 = dateTimeZone16.getShortName(1645513769549L);
        int int22 = dateTimeZone16.getOffsetFromLocal(1645513772789L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str34 = dateTimeZone32.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime35 = dateTime27.withZone(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period58 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration60 = duration49.minus(0L);
        org.joda.time.DateTime dateTime62 = dateTime45.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (short) 0);
        long long63 = duration60.getStandardSeconds();
        org.joda.time.DateTime dateTime64 = dateTime35.plus((org.joda.time.ReadableDuration) duration60);
        int int65 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Interval interval68 = interval66.toInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514168963L + "'", long13 == 1645514168963L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645551083679L + "'", long18 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:22" + "'", str20, "+10:22");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37320000 + "'", int22 == 37320000);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514168963L + "'", long25 == 1645514168963L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:08.963+10:22" + "'", str39, "2022-02-22T17:38:08.963+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration49);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T17:38:08.963+10:22" + "'", str52, "2022-02-22T17:38:08.963+10:22");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 37320000 + "'", int65 == 37320000);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-3));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType26 = period24.getFieldType(4);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.DurationField durationField36 = chronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.monthOfYear();
        org.joda.time.DurationField durationField38 = durationFieldType26.getField(chronology33);
        long long41 = durationField38.getMillis((long) 63288760, 4518790001L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:09.106+10:22" + "'", str4, "2022-02-22T17:38:09.106+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514169106L + "'", long18 == 1645514169106L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 227839536000000L + "'", long41 == 227839536000000L);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((long) (short) 0, 1645513761744L, periodType4);
        org.joda.time.Period period7 = new org.joda.time.Period(1645514067310L, 1645514125264L, periodType4);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardHours();
        long long2 = duration0.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = duration12.toPeriod();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType22);
        long long24 = duration12.getMillis();
        int int25 = duration0.compareTo((org.joda.time.ReadableDuration) duration12);
        long long26 = duration0.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514169183L + "'", long5 == 1645514169183L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100000L + "'", long24 == 100000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Duration duration8 = org.joda.time.Duration.ZERO;
        long long9 = duration8.getStandardHours();
        long long10 = duration8.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = duration26.toPeriod();
        boolean boolean29 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration20, periodType30);
        long long32 = duration20.getMillis();
        int int33 = duration8.compareTo((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone39);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period41.minusSeconds((int) (short) 1);
        org.joda.time.Period period45 = period41.plusWeeks((int) (short) -1);
        org.joda.time.Period period47 = period41.minusMillis(4);
        org.joda.time.Interval interval48 = interval40.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1645513766040L, chronology49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(1645513775416L, 1645513779025L, chronology49);
        org.joda.time.Period period52 = duration8.toPeriod(chronology49);
        org.joda.time.Period period53 = new org.joda.time.Period(1645513805808L, chronology49);
        org.joda.time.DurationField durationField54 = chronology49.hours();
        org.joda.time.Period period55 = new org.joda.time.Period(1645513895698L, 1645513878416L, periodType6, chronology49);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645513796635L, 1645513907971L, periodType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType58 = periodType6.getFieldType(63468681);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63468681");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514169204L + "'", long13 == 1645514169204L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100000L + "'", long32 == 100000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DateTime dateTime22 = dateTime14.withYearOfEra(9);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime.Property property24 = dateTime22.monthOfYear();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        java.lang.String str30 = duration28.toString();
        org.joda.time.Duration duration32 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration34.minus(0L);
        org.joda.time.Duration duration47 = duration34.withMillis(1645513760253L);
        org.joda.time.Duration duration48 = duration34.toDuration();
        org.joda.time.Duration duration49 = duration32.minus((org.joda.time.ReadableDuration) duration48);
        boolean boolean50 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTime dateTime52 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime54 = dateTime22.plusMillis(63261296);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:09.269+10:22" + "'", str2, "2022-02-22T17:38:09.269+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:09.269+10:22" + "'", str12, "2022-02-22T17:38:09.269+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:09.010+10:22" + "'", str20, "2022-02-22T17:38:09.010+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT100S" + "'", str30, "PT100S");
        org.junit.Assert.assertNotNull(duration34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:38:09.269+10:22" + "'", str37, "2022-02-22T17:38:09.269+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        java.lang.String str9 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long14 = dateTimeField10.roundHalfCeiling(1645513807686L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField10.getAsShortText(63135, locale16);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513200000L + "'", long14 == 1645513200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "63135" + "'", str17, "63135");
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(52);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis(0);
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusMinutes(3);
        org.joda.time.DateTime dateTime33 = dateTime26.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillisOfSecond(70);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis(1645513860650L);
        org.joda.time.Interval interval38 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(1645513805916L, 1645513842682L);
        boolean boolean42 = interval38.contains((org.joda.time.ReadableInterval) mutableInterval41);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:09.325+10:22" + "'", str10, "2022-02-22T17:38:09.325+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:09.325+10:22" + "'", str27, "2022-02-22T17:38:09.325+10:22");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime10 = dateTime7.withYearOfEra(37465);
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.Period period12 = new org.joda.time.Period(1645514023458L, chronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T17:38:09.348+10:22" + "'", str3, "2022-02-22T17:38:09.348+10:22");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(258);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        boolean boolean8 = dateTime6.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        boolean boolean27 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean30 = mutableInterval28.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval31.setInterval((org.joda.time.ReadableInterval) mutableInterval38);
        boolean boolean44 = mutableInterval31.containsNow();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval49.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval56 = interval49.toInterval();
        org.joda.time.Interval interval58 = interval56.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime59 = interval56.getStart();
        boolean boolean60 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) interval56);
        boolean boolean61 = mutableInterval28.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType65 = period64.getPeriodType();
        org.joda.time.PeriodType periodType66 = periodType65.withWeeksRemoved();
        org.joda.time.Period period67 = mutableInterval28.toPeriod(periodType65);
        org.joda.time.PeriodType periodType68 = periodType65.withYearsRemoved();
        org.joda.time.Period period69 = period1.withPeriodType(periodType68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType74 = periodType73.withYearsRemoved();
        org.joda.time.PeriodType periodType75 = periodType74.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.yearOfEra();
        org.joda.time.Period period84 = new org.joda.time.Period((long) 3, 1645513762121L, periodType74, chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.dayOfMonth();
        org.joda.time.DurationField durationField86 = chronology82.months();
        boolean boolean87 = durationFieldType70.isSupported(chronology82);
        boolean boolean88 = period1.isSupported(durationFieldType70);
        org.junit.Assert.assertNotNull(period1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:09.367+10:22" + "'", str4, "2022-02-22T17:38:09.367+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:38:09.367+10:22" + "'", str11, "2022-02-22T17:38:09.367+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:09.367+10:22" + "'", str18, "2022-02-22T17:38:09.367+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514169367L + "'", long47 == 1645514169367L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property12.getAsShortText(locale14);
        org.joda.time.DateTime dateTime17 = property12.addWrapFieldToCopy(63102368);
        int int18 = dateTime17.getMillisOfDay();
        boolean boolean20 = dateTime17.isEqual(1645513792010L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        java.util.Locale locale26 = null;
        int int27 = property24.getMaximumTextLength(locale26);
        java.util.Locale locale28 = null;
        java.lang.String str29 = property24.getAsShortText(locale28);
        org.joda.time.Interval interval30 = property24.toInterval();
        int int31 = property24.get();
        org.joda.time.DateTime dateTime32 = property24.roundCeilingCopy();
        org.joda.time.Duration duration34 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.Duration duration49 = duration36.withMillis(1645513760253L);
        org.joda.time.Duration duration50 = duration36.toDuration();
        org.joda.time.Duration duration51 = duration34.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration51, periodType52);
        org.joda.time.Duration duration55 = duration51.minus(1645513802226L);
        org.joda.time.Duration duration57 = duration51.withMillis(1645513798198L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes(1645513769549L);
        boolean boolean60 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration57);
        java.lang.String str62 = duration57.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:09.417+10:22" + "'", str2, "2022-02-22T17:38:09.417+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 63489010 + "'", int18 == 63489010);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514169417L + "'", long23 == 1645514169417L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:09.417+10:22" + "'", str39, "2022-02-22T17:38:09.417+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT1645513798.198S" + "'", str62, "PT1645513798.198S");
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        java.lang.String str28 = property27.getName();
        org.joda.time.DateTime dateTime30 = property27.setCopy(37320000);
        boolean boolean31 = property23.equals((java.lang.Object) property27);
        java.lang.String str32 = property23.getAsShortText();
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period33.minusSeconds((int) (short) 1);
        org.joda.time.Period period37 = period35.plusHours(4);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.withDurationAdded(readableDuration49, 6);
        boolean boolean52 = period35.equals((java.lang.Object) dateTime46);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime46.toMutableDateTimeISO();
        int int54 = dateTime46.getEra();
        org.joda.time.LocalDateTime localDateTime55 = dateTime46.toLocalDateTime();
        int int56 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:09.463+10:22" + "'", str4, "2022-02-22T17:38:09.463+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514169463L + "'", long15 == 1645514169463L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63489463 + "'", int19 == 63489463);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63489463 + "'", int22 == 63489463);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514169463L + "'", long26 == 1645514169463L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfEra" + "'", str28, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1058" + "'", str32, "1058");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:09.463+10:22" + "'", str40, "2022-02-22T17:38:09.463+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardHours();
        long long2 = duration0.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = duration12.toPeriod();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType22);
        long long24 = duration12.getMillis();
        int int25 = duration0.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Minutes minutes26 = duration0.toStandardMinutes();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime42);
        int int44 = mutablePeriod43.getSeconds();
        int int45 = mutablePeriod43.getSeconds();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        mutableInterval46.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean59 = mutableInterval53.containsNow();
        mutablePeriod43.add((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Duration duration61 = mutableInterval53.toDuration();
        org.joda.time.Duration duration63 = duration61.minus(1645513762241L);
        boolean boolean64 = duration0.isEqual((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period65 = duration0.toPeriod();
        org.joda.time.Period period67 = org.joda.time.Period.years((int) '#');
        int int68 = period67.getHours();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str70 = durationFieldType69.getName();
        int int71 = period67.get(durationFieldType69);
        org.joda.time.Period period73 = period65.withFieldAdded(durationFieldType69, 457087);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514169496L + "'", long5 == 1645514169496L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100000L + "'", long24 == 100000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:38:09.496+10:22" + "'", str36, "2022-02-22T17:38:09.496+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 40 + "'", int45 == 40);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "minutes" + "'", str70, "minutes");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths(3);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        boolean boolean20 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfSecond();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:09.540+10:22" + "'", str2, "2022-02-22T17:38:09.540+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514169540L + "'", long13 == 1645514169540L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(0L, 2);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes(1645513762564L);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration17.plus((long) 8);
        org.joda.time.Instant instant21 = instant13.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.Duration duration43 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) '#');
        org.joda.time.Instant instant44 = instant21.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration58 = duration55.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.withZoneRetainFields(dateTimeZone69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime73 = dateTime67.withField(dateTimeFieldType71, 25774);
        int int74 = dateTime49.get(dateTimeFieldType71);
        org.joda.time.Interval interval75 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean76 = duration11.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime77 = dateTime4.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval();
        long long86 = mutableInterval85.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        boolean boolean89 = mutableInterval85.overlaps((org.joda.time.ReadableInterval) mutableInterval87);
        java.lang.Object obj90 = mutableInterval85.clone();
        org.joda.time.Chronology chronology91 = mutableInterval85.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((long) 8, periodType84, chronology91);
        mutablePeriod80.setPeriod((org.joda.time.ReadableDuration) duration82, chronology91);
        org.joda.time.DateTimeField dateTimeField95 = chronology91.millisOfDay();
        org.joda.time.Period period96 = duration11.toPeriod(chronology91);
        int int97 = period96.getYears();
        int int98 = period96.getMinutes();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514169561L + "'", long2 == 1645514169561L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:09.561+10:22" + "'", str26, "2022-02-22T17:38:09.561+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant44);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514169561L + "'", long47 == 1645514169561L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:38:09.561+10:22" + "'", str61, "2022-02-22T17:38:09.561+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        mutableInterval6.setInterval(100000L, 1645513759601L);
        long long14 = mutableInterval6.getStartMillis();
        org.joda.time.Duration duration15 = mutableInterval6.toDuration();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusMinutes(3);
        org.joda.time.Period period22 = period20.plusWeeks(17);
        org.joda.time.Duration duration23 = period22.toStandardDuration();
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime38 = dateTime34.withYearOfEra(25835632);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        java.lang.String str43 = property42.getName();
        org.joda.time.DateTime dateTime44 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval49.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval56 = interval49.toInterval();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        mutableInterval57.setInterval((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.Interval interval70 = interval56.gap((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod();
        mutablePeriod71.setMonths((int) ' ');
        java.lang.Object obj74 = mutablePeriod71.clone();
        mutablePeriod71.setDays(40);
        org.joda.time.Interval interval77 = interval56.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Period period78 = interval77.toPeriod();
        org.joda.time.Period period80 = period78.plusSeconds((int) (byte) 1);
        boolean boolean81 = property42.equals((java.lang.Object) period80);
        org.joda.time.Period period83 = period80.minusHours(63129196);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology85 = null;
        boolean boolean86 = dateTimeFieldType84.isSupported(chronology85);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType84.getRangeDurationType();
        boolean boolean88 = period83.isSupported(durationFieldType87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.DurationField durationField90 = durationFieldType87.getField(chronology89);
        org.joda.time.DateTime dateTime92 = dateTime34.withFieldAdded(durationFieldType87, 63175645);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100000L + "'", long14 == 100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514169613L + "'", long41 == 1645514169613L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfEra" + "'", str43, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514169613L + "'", long47 == 1645514169613L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "P32M40D");
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.yearOfCentury();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        int int30 = dateTimeZone18.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.lang.String str33 = dateTimeZone18.getNameKey(1645514032838L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37320000 + "'", int30 == 37320000);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:25.389+10:22");
        org.joda.time.DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str12 = dateTimeZone10.getName(52L);
        boolean boolean14 = dateTimeZone10.isStandardOffset(1645513786292L);
        int int16 = dateTimeZone10.getStandardOffset(1645514020890L);
        int int18 = dateTimeZone10.getOffsetFromLocal(1645514046938L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(63386728);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(63194163, 25838284, 63113600, 13, 63188060, 63146531, 25841858, (int) ' ');
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.year();
        mutablePeriod8.setPeriod(1645513834099L, chronology16);
        org.joda.time.DateTimeField dateTimeField24 = chronology16.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.joda.time.Period period1 = org.joda.time.Period.days(63341104);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean56 = interval54.isAfter(1645513764031L);
        boolean boolean57 = interval54.containsNow();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514169857L + "'", long23 == 1645514169857L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:09.857+10:22" + "'", str30, "2022-02-22T17:38:09.857+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1058 + "'", int52 == 1058);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean20 = timeOfDay15.isSupported(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = timeOfDay15.getField(25846182);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25846182");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514169891L + "'", long2 == 1645514169891L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(4);
        org.joda.time.LocalDate localDate9 = dateTime6.toLocalDate();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType18, chronology30);
        org.joda.time.Period period32 = new org.joda.time.Period(1645513798804L, 1645513792316L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645514011392L, periodType18);
        org.joda.time.DateTime dateTime34 = dateTime6.minus((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod33.setValue(0, 63175341);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514169915L + "'", long2 == 1645514169915L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        java.lang.String str16 = period13.toString();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period17.plusMinutes(3);
        org.joda.time.Period period23 = period21.plusWeeks(17);
        org.joda.time.Duration duration24 = period23.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getRangeDurationType();
        int int29 = period23.get(durationFieldType28);
        boolean boolean30 = period13.isSupported(durationFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime40 = dateTime35.withFieldAdded(durationFieldType38, (int) '#');
        int int41 = period13.indexOf(durationFieldType38);
        org.joda.time.Period period43 = period13.plusSeconds(63121637);
        org.joda.time.Period period45 = period13.minusYears(25846);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType47 = period13.getFieldType(25938);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514169941L + "'", long2 == 1645514169941L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:09.941+10:22" + "'", str9, "2022-02-22T17:38:09.941+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.006S" + "'", str16, "PT0.006S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 17 + "'", int29 == 17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:09.941+10:22" + "'", str33, "2022-02-22T17:38:09.941+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(63088836);
        org.joda.time.DateTime dateTime13 = dateTime9.withHourOfDay(9);
        int int14 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.dayOfYear();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        mutableInterval16.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime36 = dateTime9.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant37 = instant1.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant39 = instant1.withMillis(1645513786127L);
        org.joda.time.Instant instant40 = instant1.toInstant();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514170037L + "'", long7 == 1645514170037L);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:10.037+10:22" + "'", str27, "2022-02-22T17:38:10.037+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant40);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 8, periodType58, chronology65);
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration56, chronology65);
        int int69 = mutablePeriod54.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.yearOfEra();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.minuteOfDay();
        org.joda.time.DurationField durationField81 = durationFieldType71.getField(chronology78);
        mutablePeriod54.add(durationFieldType71, 0);
        org.joda.time.Interval interval84 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        java.lang.String str86 = chronology85.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514170073L + "'", long24 == 1645514170073L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[+10:22]" + "'", str86, "ISOChronology[+10:22]");
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        java.lang.String str5 = periodType3.getName();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645513760253L, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 8, periodType18, chronology25);
        long long30 = chronology13.add((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 10, 6);
        org.joda.time.Period period31 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType3, chronology13);
        org.joda.time.DateTimeField dateTimeField32 = chronology13.millisOfDay();
        java.lang.String str33 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology13.hourOfDay();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T17:36:27.865+10:22", chronology13);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Months" + "'", str5, "Months");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[+10:22]" + "'", str33, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        int int22 = dateTimeZone18.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone18);
        long long29 = chronology23.getDateTimeMillis(1645513788213L, 7, 1, 6, 6);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime30.minusWeeks(63253071);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37320000 + "'", int22 == 37320000);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645475946006L + "'", long29 == 1645475946006L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.joda.time.Period period4 = new org.joda.time.Period((-1), 63110, (int) (short) -1, 0);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) ' ');
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod5, (org.joda.time.ReadableInstant) dateTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime9.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:10.187+10:22" + "'", str10, "2022-02-22T17:38:10.187+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.plus((long) 8);
        org.joda.time.Duration duration29 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Period period44 = mutablePeriod43.toPeriod();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) mutablePeriod43);
        mutableInterval45.setDurationBeforeEnd(1645513785124L);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        mutableInterval48.setInterval(100000L, 1645513759601L);
        long long56 = mutableInterval48.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval62.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = interval61.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval48.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval45.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        mutableInterval48.setStartMillis(0L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:10.207+10:22" + "'", str2, "2022-02-22T17:38:10.207+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:10.207+10:22" + "'", str12, "2022-02-22T17:38:10.207+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:38:10.207+10:22" + "'", str32, "2022-02-22T17:38:10.207+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100000L + "'", long56 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645514170207L + "'", long59 == 1645514170207L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period3.minusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period3.plusMinutes(3);
        org.joda.time.DateTime dateTime8 = dateTime1.minus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.DateTime.Property property9 = dateTime1.era();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:10.239+10:22" + "'", str2, "2022-02-22T17:38:10.239+10:22");
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.DateTime dateTime29 = mutableInterval26.getEnd();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 3, 1645513762121L, periodType43, chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        org.joda.time.DateTime dateTime55 = dateTime33.toDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.clockhourOfDay();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 115200000, chronology51);
        org.joda.time.DateTimeField dateTimeField58 = chronology51.hourOfHalfday();
        org.joda.time.Period period59 = new org.joda.time.Period(1645513828888L, chronology51);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) period59);
        org.joda.time.Interval interval61 = interval60.toInterval();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:10.279+10:22" + "'", str2, "2022-02-22T17:38:10.279+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:10.279+10:22" + "'", str9, "2022-02-22T17:38:10.279+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:10.279+10:22" + "'", str16, "2022-02-22T17:38:10.279+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:10.279+10:22" + "'", str34, "2022-02-22T17:38:10.279+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(interval61);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = duration12.toPeriod();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        java.lang.String str37 = chronology36.toString();
        org.joda.time.Period period38 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType22, chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime43.getZone();
        long long46 = dateTimeZone44.convertUTCToLocal(1645513763679L);
        java.lang.String str48 = dateTimeZone44.getShortName(1645513769549L);
        long long50 = dateTimeZone44.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology51 = chronology36.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) 1645513768836L, chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime52, readableInstant53);
        org.joda.time.DateTime dateTime56 = dateTime52.plus(1645514003016L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514170308L + "'", long5 == 1645514170308L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:22]" + "'", str37, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514170308L + "'", long41 == 1645514170308L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645551083679L + "'", long46 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:22" + "'", str48, "+10:22");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645513786393L + "'", long50 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        java.lang.String str18 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField20 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+10:22]" + "'", str18, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        boolean boolean7 = mutableInterval6.containsNow();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withEra((int) (byte) 1);
        boolean boolean13 = mutableInterval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        boolean boolean24 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getMillisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        mutableInterval6.setEnd((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getMillisOfDay();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 3, 1645513762121L, periodType32, chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfMonth();
        org.joda.time.DurationField durationField44 = chronology40.months();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str49 = dateTimeZone47.getNameKey(1645513759301L);
        java.lang.String str51 = dateTimeZone47.getName(1645513762160L);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        int int54 = dateTimeZone47.getStandardOffset(1645513761942L);
        int int56 = dateTimeZone47.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology57 = chronology40.withZone(dateTimeZone47);
        int int59 = dateTimeZone47.getOffset((long) 115200000);
        int int61 = dateTimeZone47.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone62.toString();
        long long65 = dateTimeZone47.getMillisKeepLocal(dateTimeZone62, 1645513792520L);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = dateTime26.toDateTime(dateTimeZone62);
        java.util.Locale locale69 = null;
        java.lang.String str70 = dateTimeZone62.getName(1645513807435L, locale69);
        int int72 = dateTimeZone62.getStandardOffset(1645513908844L);
        long long74 = dateTimeZone62.previousTransition(1645513984462L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(0, (-3), 63261296, 25884611, 26077183, 63198173, dateTimeZone62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25884611 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:10.382+10:22" + "'", str10, "2022-02-22T17:38:10.382+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514170382L + "'", long21 == 1645514170382L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 63490382 + "'", int25 == 63490382);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 63490382 + "'", int28 == 63490382);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:22" + "'", str51, "+10:22");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 37320000 + "'", int54 == 37320000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 37320000 + "'", int56 == 37320000);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 37320000 + "'", int59 == 37320000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 37320000 + "'", int61 == 37320000);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:22" + "'", str63, "+10:22");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645513792520L + "'", long65 == 1645513792520L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:22" + "'", str70, "+10:22");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 37320000 + "'", int72 == 37320000);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645513984462L + "'", long74 == 1645513984462L);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField14.getAsText(2720, locale16);
        long long20 = dateTimeField14.add(1645514075983L, 1645513974188L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2720" + "'", str17, "2720");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1647159488263983L + "'", long20 == 1647159488263983L);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.LocalTime localTime12 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime3.minuteOfDay();
        int int15 = dateTime3.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime dateTime23 = dateTime3.withFieldAdded(durationFieldType21, 63323965);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int28 = dateTimeZone26.getOffsetFromLocal(1645513761942L);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(0L, dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime23.withZone(dateTimeZone26);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:10.434+10:22" + "'", str4, "2022-02-22T17:38:10.434+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 115200000 + "'", int28 == 115200000);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime56 = dateTime36.minusMonths(37);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.negated();
        org.joda.time.Interval interval64 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period63, (-6));
        org.joda.time.DateTime dateTime68 = dateTime36.minusMillis(0);
        org.joda.time.DateTime dateTime71 = dateTime68.withDurationAdded(1645513809195L, 28);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514170458L + "'", long23 == 1645514170458L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:10.458+10:22" + "'", str30, "2022-02-22T17:38:10.458+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1058 + "'", int52 == 1058);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645514170459L + "'", long59 == 1645514170459L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        long long9 = durationField8.getUnitMillis();
        long long10 = durationField8.getUnitMillis();
        int int13 = durationField8.getValue((long) 100, 1645513759601L);
        java.lang.String str14 = durationField8.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514170512L + "'", long2 == 1645514170512L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31556952000L + "'", long9 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31556952000L + "'", long10 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DurationField[years]" + "'", str14, "DurationField[years]");
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T17:35:55.116+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:35:55.116+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime4.millisOfDay();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.roundHalfFloorCopy();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-1L), 1L, periodType14, chronology15);
        mutablePeriod16.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval30);
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod();
        mutablePeriod33.setMonths((int) ' ');
        java.lang.Object obj36 = mutablePeriod33.clone();
        mutablePeriod33.setDays(40);
        mutableInterval10.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology40 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        long long45 = dateTimeField43.roundHalfCeiling(63114399L);
        boolean boolean46 = property6.equals((java.lang.Object) long45);
        org.joda.time.DateTime dateTime48 = property6.setCopy(25881374);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:10.548+10:22" + "'", str2, "2022-02-22T17:38:10.548+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "P32M40D");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 63114399L + "'", long45 == 63114399L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period2.minusSeconds((int) (short) 0);
        org.joda.time.Period period9 = period2.negated();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period22 = period20.withYears(52);
        org.joda.time.Period period24 = period20.multipliedBy(2022);
        org.joda.time.Period period26 = period24.plusMonths((int) (byte) 10);
        int[] intArray27 = period24.getValues();
        int int28 = period24.getMonths();
        org.joda.time.Period period29 = period9.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period31 = period24.minusMinutes(63099629);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:10.580+10:22" + "'", str14, "2022-02-22T17:38:10.580+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        org.joda.time.Interval interval44 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period46 = period37.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period60 = period37.plusWeeks(100);
        org.joda.time.Period period61 = period37.negated();
        org.joda.time.MutablePeriod mutablePeriod62 = period37.toMutablePeriod();
        int[] intArray65 = chronology12.get((org.joda.time.ReadablePeriod) period37, 1645513777564L, 1645513811443L);
        org.joda.time.Period period67 = period37.withMillis(63120363);
        org.joda.time.Minutes minutes68 = period67.toStandardMinutes();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.millis();
        java.lang.String str70 = periodType69.getName();
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period71.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean75 = period73.equals((java.lang.Object) dateTimeFieldType74);
        org.joda.time.Period period77 = period73.plusWeeks(17);
        org.joda.time.Period period78 = period73.toPeriod();
        boolean boolean79 = periodType69.equals((java.lang.Object) period78);
        org.joda.time.PeriodType periodType80 = periodType69.withSecondsRemoved();
        org.joda.time.PeriodType periodType81 = periodType69.withWeeksRemoved();
        org.joda.time.PeriodType periodType82 = periodType69.withMinutesRemoved();
        org.joda.time.Period period83 = period67.normalizedStandard(periodType69);
        org.joda.time.PeriodType periodType84 = periodType69.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 33, 879]");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Millis" + "'", str70, "Millis");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        boolean boolean23 = duration21.equals((java.lang.Object) 1645513771022L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant27 = instant25.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Instant instant29 = instant25.minus(1645513772143L);
        long long30 = instant29.getMillis();
        org.joda.time.Instant instant32 = instant29.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = duration36.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.withZoneRetainFields(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        boolean boolean54 = dateTime51.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime56 = dateTime51.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime58 = instant32.toDateTimeISO();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime58, periodType59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.DateTime dateTime66 = dateTime63.withMillisOfSecond((int) (short) 10);
        int int67 = dateTime66.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight68 = dateTime66.toDateMidnight();
        boolean boolean69 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime71 = dateTime58.plusDays(19676);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:10.671+10:22" + "'", str4, "2022-02-22T17:38:10.671+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1813L) + "'", long30 == (-1813L));
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:38:10.671+10:22" + "'", str42, "2022-02-22T17:38:10.671+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514170671L + "'", long52 == 1645514170671L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType59);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:38:10.671+10:22" + "'", str64, "2022-02-22T17:38:10.671+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        java.lang.String str22 = dateTimeFieldType19.getName();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        int[] intArray42 = chronology33.get((org.joda.time.ReadablePartial) yearMonthDay40, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField43 = chronology33.monthOfYear();
        org.joda.time.DurationField durationField44 = chronology33.hours();
        org.joda.time.DateTimeField dateTimeField45 = chronology33.clockhourOfHalfday();
        org.joda.time.DurationField durationField46 = chronology33.seconds();
        org.joda.time.DurationField durationField47 = chronology33.weekyears();
        org.joda.time.Period period48 = new org.joda.time.Period(1645513895250L, 1645513881274L, chronology33);
        boolean boolean49 = dateTimeFieldType19.isSupported(chronology33);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:10.757+10:22" + "'", str9, "2022-02-22T17:38:10.757+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "centuryOfEra" + "'", str22, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514170757L + "'", long36 == 1645514170757L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645513896304L, 1645513824696L);
        org.joda.time.Duration duration5 = new org.joda.time.Duration(136746792000L, 1645513762687L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 3, 1645513762121L, periodType17, chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTime dateTime29 = dateTime7.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.clockhourOfHalfday();
        org.joda.time.Period period32 = new org.joda.time.Period((java.lang.Object) duration5, chronology25);
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:10.826+10:22" + "'", str8, "2022-02-22T17:38:10.826+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        org.joda.time.PeriodType periodType8 = periodType5.withDaysRemoved();
        java.lang.String str9 = periodType8.toString();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = periodType10.isSupported(durationFieldType11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.DateTime dateTime20 = property17.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType24.getDurationType();
        int int27 = dateTime20.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime29 = dateTime20.plusHours(63110);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTime.Property property71 = dateTime69.yearOfEra();
        org.joda.time.DateTime dateTime72 = property71.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        long long75 = dateTimeZone73.convertUTCToLocal(1645513763679L);
        java.lang.String str77 = dateTimeZone73.getShortName(1645513769549L);
        long long79 = dateTimeZone73.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology80 = chronology65.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime81 = dateTime20.toDateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField82 = chronology65.era();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(1645551193169L, 1645513810033L, periodType10, chronology65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) "2022-02-22T17:33:34.972+10:22", chronology65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:33:34.972+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "halfdays" + "'", str12, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514170851L + "'", long16 == 1645514170851L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514170851L + "'", long34 == 1645514170851L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514170851L + "'", long70 == 1645514170851L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645551083679L + "'", long75 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:22" + "'", str77, "+10:22");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645513786393L + "'", long79 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.withZoneRetainFields(dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime55.withField(dateTimeFieldType59, 25774);
        int int62 = dateTime37.get(dateTimeFieldType59);
        org.joda.time.Interval interval63 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime37.getZone();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        java.lang.Object obj72 = mutableInterval67.clone();
        org.joda.time.Chronology chronology73 = mutableInterval67.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 8, periodType66, chronology73);
        mutablePeriod75.clear();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        boolean boolean82 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        java.lang.Object obj83 = mutableInterval78.clone();
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfEra();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.millisOfSecond();
        mutablePeriod75.setPeriod(1645513832405L, chronology84);
        org.joda.time.DateTime dateTime88 = dateTime37.toDateTime(chronology84);
        org.joda.time.DateTime.Property property89 = dateTime37.millisOfSecond();
        org.joda.time.DateTime.Property property90 = dateTime37.millisOfDay();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:10.882+10:22" + "'", str14, "2022-02-22T17:38:10.882+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514170882L + "'", long35 == 1645514170882L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:10.882+10:22" + "'", str49, "2022-02-22T17:38:10.882+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20 + "'", int62 == 20);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(136746792000L, 1645513762687L);
        java.lang.Object obj3 = null;
        boolean boolean4 = duration2.equals(obj3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(1645513769274L);
        org.joda.time.Duration duration8 = duration6.minus(1645513856399L);
        org.joda.time.Duration duration10 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.Duration duration25 = duration12.withMillis(1645513760253L);
        org.joda.time.Duration duration26 = duration12.toDuration();
        org.joda.time.Duration duration27 = duration10.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration26, 63310993);
        long long30 = duration6.getMillis();
        boolean boolean31 = duration2.isEqual((org.joda.time.ReadableDuration) duration6);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:10.951+10:22" + "'", str15, "2022-02-22T17:38:10.951+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513769274000L + "'", long30 == 1645513769274000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        org.joda.time.DateTime.Property property9 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime11 = property9.addWrapFieldToCopy(63186732);
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = dateTimeFieldType13.isSupported(chronology14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType13.getRangeDurationType();
        boolean boolean19 = dateTime11.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime.Property property20 = dateTime11.yearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514170995L + "'", long2 == 1645514170995L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(40, 52, (int) (byte) 100, 63090717, (-1), 63102, 63098347, 63102368);
        mutablePeriod8.setDays(63090717);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = duration23.toPeriodTo((org.joda.time.ReadableInstant) dateTime30, periodType31);
        org.joda.time.Duration duration35 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days36 = duration35.toStandardDays();
        org.joda.time.Days days37 = duration35.toStandardDays();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.halfdayOfDay();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology45);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration35, chronology45);
        mutablePeriod8.setMinutes(37465);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:11.017+10:22" + "'", str15, "2022-02-22T17:38:11.017+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:11.017+10:22" + "'", str26, "2022-02-22T17:38:11.017+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology6.days();
        java.lang.String str19 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology6.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField22 = chronology6.minuteOfDay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+10:22]" + "'", str19, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        int int16 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.lang.String str20 = dateTimeField19.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.DateTime dateTime26 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime28 = property24.addWrapFieldToCopy(10);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        int int37 = yearMonthDay36.size();
        org.joda.time.DateTime dateTime38 = dateTime28.withFields((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(4);
        org.joda.time.LocalDate localDate48 = dateTime45.toLocalDate();
        org.joda.time.Chronology chronology49 = dateTime45.getChronology();
        org.joda.time.Chronology chronology50 = chronology49.withUTC();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.Duration duration72 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.DateTime dateTime77 = dateTime74.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime(chronology78);
        org.joda.time.DateTime dateTime80 = dateTime77.toDateTime();
        org.joda.time.DateTime dateTime83 = dateTime77.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime84, periodType85);
        org.joda.time.Period period87 = mutablePeriod86.toPeriod();
        org.joda.time.Period period88 = mutablePeriod86.toPeriod();
        org.joda.time.Period period90 = period88.plusDays(27425229);
        int[] intArray92 = chronology49.get((org.joda.time.ReadablePeriod) period90, (long) 25952284);
        int int93 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay36, intArray92);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514171062L + "'", long2 == 1645514171062L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:11.062+10:22" + "'", str9, "2022-02-22T17:38:11.062+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str20, "DateTimeField[weekOfWeekyear]");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514171062L + "'", long23 == 1645514171062L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645514171062L + "'", long32 == 1645514171062L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514171062L + "'", long41 == 1645514171062L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T17:38:11.062+10:22" + "'", str55, "2022-02-22T17:38:11.062+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T17:38:11.062+10:22" + "'", str75, "2022-02-22T17:38:11.062+10:22");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 53 + "'", int93 == 53);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getMonthOfYear();
        org.joda.time.Instant instant13 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 25812540);
        org.joda.time.Instant instant17 = instant13.plus((org.joda.time.ReadableDuration) duration16);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514171130L + "'", long2 == 1645514171130L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(63385904);
        int int9 = dateTime8.getHourOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514171154L + "'", long2 == 1645514171154L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration46 = interval23.toDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        mutableInterval47.setInterval(100000L, 1645513759601L);
        long long55 = mutableInterval47.getStartMillis();
        java.lang.String str56 = mutableInterval47.toString();
        boolean boolean57 = interval23.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        long long58 = interval23.getStartMillis();
        org.joda.time.Interval interval60 = interval23.withEndMillis(1645513848204L);
        org.joda.time.Duration duration61 = interval23.toDuration();
        java.lang.String str62 = duration61.toString();
        org.joda.time.Duration duration63 = duration61.toDuration();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:11.176+10:22" + "'", str34, "2022-02-22T17:38:11.176+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100000L + "'", long55 == 100000L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22" + "'", str56, "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT0S" + "'", str62, "PT0S");
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMillis(27425229);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 3, 1645513762121L, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str50 = dateTimeZone48.getNameKey(1645513759301L);
        java.lang.String str52 = dateTimeZone48.getName(1645513762160L);
        java.util.TimeZone timeZone53 = dateTimeZone48.toTimeZone();
        int int55 = dateTimeZone48.getStandardOffset(1645513761942L);
        int int57 = dateTimeZone48.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology58 = chronology41.withZone(dateTimeZone48);
        int int60 = dateTimeZone48.getOffset((long) 115200000);
        java.lang.String str62 = dateTimeZone48.getShortName(1645513770717L);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime25.toMutableDateTime(dateTimeZone48);
        long long65 = dateTimeZone48.previousTransition(1645513813526L);
        long long68 = dateTimeZone48.adjustOffset(1645514154144L, false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:11.204+10:22" + "'", str4, "2022-02-22T17:38:11.204+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514171204L + "'", long15 == 1645514171204L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63491204 + "'", int19 == 63491204);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63491204 + "'", int22 == 63491204);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-05-03T17:38:11.204+10:22" + "'", str27, "2022-05-03T17:38:11.204+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:22" + "'", str52, "+10:22");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 37320000 + "'", int55 == 37320000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 37320000 + "'", int57 == 37320000);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 37320000 + "'", int60 == 37320000);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:22" + "'", str62, "+10:22");
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645513813526L + "'", long65 == 1645513813526L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514154144L + "'", long68 == 1645514154144L);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        int int27 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        int int37 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = dateTime36.toLocalDate();
        org.joda.time.DateTimeField dateTimeField40 = localDate38.getField((int) (short) 0);
        int int41 = localDate38.size();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDate38, 25774, locale43);
        org.joda.time.DurationField durationField45 = dateTimeField21.getRangeDurationField();
        long long48 = dateTimeField21.getDifferenceAsLong(1645513790067L, 1645513770570L);
        org.joda.time.DurationField durationField49 = dateTimeField21.getLeapDurationField();
        boolean boolean51 = dateTimeField21.isLeap(1645514112724L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514171242L + "'", long24 == 1645514171242L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:11.242+10:22" + "'", str30, "2022-02-22T17:38:11.242+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "25774" + "'", str44, "25774");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 19497L + "'", long48 == 19497L);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        java.lang.String str10 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.era();
        org.joda.time.Chronology chronology12 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:22]" + "'", str10, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.joda.time.Period period1 = org.joda.time.Period.months(63273801);
        org.joda.time.Period period3 = period1.withWeeks(25937342);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days3 = duration2.toStandardDays();
        org.joda.time.Days days4 = duration2.toStandardDays();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Interval interval15 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Interval interval16 = interval9.toInterval();
        org.joda.time.Interval interval18 = interval16.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime19 = interval16.getStart();
        org.joda.time.Duration duration20 = interval16.toDuration();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        long long32 = duration22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval43 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval44 = interval37.toInterval();
        org.joda.time.Interval interval46 = interval44.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime47 = interval44.getStart();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        boolean boolean51 = interval44.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType55 = periodType54.withYearsRemoved();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfEra();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 3, 1645513762121L, periodType55, chronology63);
        org.joda.time.Period period66 = duration22.toPeriodTo((org.joda.time.ReadableInstant) dateTime49, periodType55);
        org.joda.time.Interval interval67 = interval16.withStart((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime49);
        int int69 = mutablePeriod68.size();
        mutablePeriod68.setDays(2021);
        mutablePeriod68.setPeriod(1645513799801L);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514171377L + "'", long7 == 1645514171377L);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:38:11.377+10:22" + "'", str25, "2022-02-22T17:38:11.377+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100000L + "'", long32 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514171377L + "'", long35 == 1645514171377L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514171377L + "'", long50 == 1645514171377L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645513987369L, (long) 63379173);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        mutablePeriod29.addYears(63293499);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:11.484+10:22" + "'", str5, "2022-02-22T17:38:11.484+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime5.toMutableDateTime(chronology12);
        int int19 = dateTime5.getMillisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514171602L + "'", long2 == 1645514171602L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 602 + "'", int19 == 602);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.Duration duration14 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days15 = duration14.toStandardDays();
        org.joda.time.Days days16 = duration14.toStandardDays();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval27 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval28 = interval21.toInterval();
        org.joda.time.Interval interval30 = interval28.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime31 = interval28.getStart();
        org.joda.time.Duration duration32 = interval28.toDuration();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        long long44 = duration34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval49.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval56 = interval49.toInterval();
        org.joda.time.Interval interval58 = interval56.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime59 = interval56.getStart();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        boolean boolean63 = interval56.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType67 = periodType66.withYearsRemoved();
        org.joda.time.PeriodType periodType68 = periodType67.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 3, 1645513762121L, periodType67, chronology75);
        org.joda.time.Period period78 = duration34.toPeriodTo((org.joda.time.ReadableInstant) dateTime61, periodType67);
        org.joda.time.Interval interval79 = interval28.withStart((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType82 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType83 = periodType81.withSecondsRemoved();
        org.joda.time.PeriodType periodType84 = periodType83.withWeeksRemoved();
        org.joda.time.Period period85 = duration14.toPeriod(periodType84);
        int[] intArray87 = chronology9.get((org.joda.time.ReadablePeriod) period85, 171363L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514171627L + "'", long19 == 1645514171627L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:38:11.628+10:22" + "'", str37, "2022-02-22T17:38:11.628+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100000L + "'", long44 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514171628L + "'", long47 == 1645514171628L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645514171628L + "'", long62 == 1645514171628L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0]");
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Period period23 = period21.withSeconds((int) (short) -1);
        org.joda.time.Period period25 = period23.plusMonths(63149103);
        org.joda.time.Period period27 = period25.withMinutes(25812696);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), 1L, periodType30, chronology31);
        mutablePeriod32.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone37);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period39.minusSeconds((int) (short) 1);
        org.joda.time.Period period43 = period39.plusWeeks((int) (short) -1);
        org.joda.time.Period period45 = period39.minusMillis(4);
        org.joda.time.Interval interval46 = interval38.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        mutablePeriod32.add((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime52 = dateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime52.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(4);
        org.joda.time.LocalDate localDate57 = dateTime54.toLocalDate();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        boolean boolean68 = mutableInterval58.contains((org.joda.time.ReadableInstant) dateTime67);
        mutablePeriod32.setPeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime54.toMutableDateTime();
        int int71 = mutableDateTime70.getMinuteOfDay();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period25, (org.joda.time.ReadableInstant) mutableDateTime70);
        int int73 = period25.getDays();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:11.758+10:22" + "'", str4, "2022-02-22T17:38:11.758+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:11.758+10:22" + "'", str15, "2022-02-22T17:38:11.758+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval46);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514171758L + "'", long50 == 1645514171758L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645514171758L + "'", long65 == 1645514171758L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1058 + "'", int71 == 1058);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(4);
        org.joda.time.LocalDate localDate10 = dateTime7.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.months();
        org.joda.time.DurationField durationField14 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField15.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514171790L + "'", long3 == 1645514171790L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period72 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period72.negated();
        org.joda.time.Period period75 = period72.withDays(1);
        int int77 = period72.getValue((int) (short) 0);
        org.joda.time.Period period79 = period72.withYears((int) 'a');
        int int80 = period79.getSeconds();
        mutableInterval18.setPeriodAfterStart((org.joda.time.ReadablePeriod) period79);
        int int82 = period79.getHours();
        int int83 = period79.getWeeks();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514171836L + "'", long30 == 1645514171836L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:11.836+10:22" + "'", str44, "2022-02-22T17:38:11.836+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:11.836+10:22" + "'", str57, "2022-02-22T17:38:11.836+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(seconds70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513760165L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration41.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration56 = duration41.toDuration();
        org.joda.time.Days days57 = duration41.toStandardDays();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMonths(3);
        int int65 = dateTime64.getSecondOfMinute();
        int int66 = dateTime64.getCenturyOfEra();
        org.joda.time.DateTime dateTime68 = dateTime64.minusYears(502);
        org.joda.time.LocalDate localDate69 = dateTime68.toLocalDate();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Interval interval72 = interval70.withEndMillis(1645513809222L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:11.930+10:22" + "'", str4, "2022-02-22T17:38:11.930+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514171931L + "'", long31 == 1645514171931L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:11.931+10:22" + "'", str47, "2022-02-22T17:38:11.931+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(days57);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514171931L + "'", long60 == 1645514171931L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20 + "'", int66 == 20);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime56 = dateTime36.minusMonths(37);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.negated();
        org.joda.time.Interval interval64 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period63, (-6));
        org.joda.time.DateTime dateTime68 = dateTime36.minusMillis(0);
        org.joda.time.DateTime dateTime70 = dateTime36.withSecondOfMinute(12);
        org.joda.time.DateTime.Property property71 = dateTime36.hourOfDay();
        org.joda.time.DurationField durationField72 = property71.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514171972L + "'", long23 == 1645514171972L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:11.972+10:22" + "'", str30, "2022-02-22T17:38:11.972+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1058 + "'", int52 == 1058);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645514171972L + "'", long59 == 1645514171972L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        long long7 = dateTimeZone5.convertUTCToLocal(1645513763679L);
        java.lang.String str9 = dateTimeZone5.getShortName(1645513769549L);
        int int11 = dateTimeZone5.getOffsetFromLocal(1645513760934L);
        java.lang.String str12 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645513759301L);
        int int21 = dateTimeZone17.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        int int24 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone17);
        long long29 = dateTimeZone17.convertLocalToUTC(1645513775718L, true, 1645513770226L);
        long long31 = dateTimeZone5.getMillisKeepLocal(dateTimeZone17, 1645513861860L);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone17);
        long long34 = dateTimeZone17.previousTransition(1645513986220L);
        long long36 = dateTimeZone17.nextTransition(1645513773422L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172022L + "'", long2 == 1645514172022L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645551083679L + "'", long7 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:22" + "'", str9, "+10:22");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37320000 + "'", int21 == 37320000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37320000 + "'", int24 == 37320000);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645476455718L + "'", long29 == 1645476455718L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513861860L + "'", long31 == 1645513861860L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513986220L + "'", long34 == 1645513986220L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645513773422L + "'", long36 == 1645513773422L);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        mutablePeriod1.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        boolean boolean12 = dateTime10.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        boolean boolean31 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean34 = mutableInterval32.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        mutableInterval32.setChronology(chronology41);
        mutablePeriod1.setPeriod(100000L, 1645513762364L, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType0.getField(chronology41);
        org.joda.time.DurationField durationField45 = chronology41.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:12.072+10:22" + "'", str8, "2022-02-22T17:38:12.072+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:12.072+10:22" + "'", str15, "2022-02-22T17:38:12.072+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:12.072+10:22" + "'", str22, "2022-02-22T17:38:12.072+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        mutableInterval1.setEndMillis(1645513775498L);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        boolean boolean8 = mutableInterval4.overlaps((org.joda.time.ReadableInterval) mutableInterval6);
        java.lang.Object obj9 = mutableInterval4.clone();
        org.joda.time.Chronology chronology10 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfEra();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        int[] intArray21 = chronology12.get((org.joda.time.ReadablePartial) yearMonthDay19, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField22 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField23 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfHalfday();
        mutableInterval1.setChronology(chronology12);
        org.joda.time.Duration duration26 = mutableInterval1.toDuration();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(22403198L);
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        mutableInterval1.setEndMillis(49080000L);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514172104L + "'", long15 == 1645514172104L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval16 = interval10.withDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval17 = interval10.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = interval17.gap((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod();
        mutablePeriod32.setMonths((int) ' ');
        java.lang.Object obj35 = mutablePeriod32.clone();
        mutablePeriod32.setDays(40);
        org.joda.time.Interval interval38 = interval17.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Period period41 = period39.plusSeconds((int) (byte) 1);
        boolean boolean42 = property3.equals((java.lang.Object) period41);
        org.joda.time.Period period44 = period41.minusHours(63129196);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType45.getRangeDurationType();
        boolean boolean49 = period44.isSupported(durationFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DurationField durationField51 = durationFieldType48.getField(chronology50);
        long long54 = durationField51.subtract(1645513817676L, (long) 25833900);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172131L + "'", long2 == 1645514172131L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514172131L + "'", long8 == 1645514172131L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "P32M40D");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-2230403446182324L) + "'", long54 == (-2230403446182324L));
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime13 = dateTime1.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:12.168+10:22" + "'", str2, "2022-02-22T17:38:12.168+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = duration25.toPeriod();
        boolean boolean28 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType29);
        long long31 = duration19.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime4.minus((org.joda.time.ReadableDuration) duration19);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.DateTime.Property property34 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime.Property property35 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime32.minusDays(63341847);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172188L + "'", long2 == 1645514172188L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514172188L + "'", long12 == 1645514172188L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100000L + "'", long31 == 100000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfDay();
        org.joda.time.DateTime.Property property23 = dateTime19.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = new org.joda.time.DurationFieldType[] { durationFieldType24 };
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.forFields(durationFieldTypeArray25);
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime19, periodType27);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime10.toYearMonthDay();
        java.lang.String str30 = yearMonthDay29.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:12.224+10:22" + "'", str2, "2022-02-22T17:38:12.224+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514172224L + "'", long17 == 1645514172224L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22" + "'", str30, "2022-02-22");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType34 = period32.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 3, 1645513762121L, periodType48, chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTime dateTime60 = dateTime38.toDateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField61 = chronology56.clockhourOfDay();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 115200000, chronology56);
        org.joda.time.DateTimeField dateTimeField63 = chronology56.hourOfHalfday();
        org.joda.time.Period period64 = new org.joda.time.Period(1645513828888L, chronology56);
        boolean boolean65 = periodType34.equals((java.lang.Object) period64);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((-1L), 1L, periodType69, chronology70);
        java.lang.String str72 = periodType69.toString();
        java.lang.String str73 = periodType69.getName();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1645513760165L, periodType69);
        int int75 = mutablePeriod74.getWeeks();
        org.joda.time.Period period76 = org.joda.time.Period.ZERO;
        org.joda.time.Period period78 = period76.minusSeconds((int) (short) 1);
        org.joda.time.Period period80 = period76.plusWeeks((int) (short) -1);
        org.joda.time.Period period82 = period76.minusMillis(4);
        mutablePeriod74.add((org.joda.time.ReadablePeriod) period82);
        org.joda.time.Period period85 = period82.minusYears(3);
        org.joda.time.Period period87 = period82.withDays((int) 'a');
        int int88 = period87.getMinutes();
        int int89 = period87.size();
        org.joda.time.PeriodType periodType90 = period87.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType92 = periodType90.getFieldType(4);
        int int93 = period64.indexOf(durationFieldType92);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType34);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:12.250+10:22" + "'", str39, "2022-02-22T17:38:12.250+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PeriodType[Time]" + "'", str72, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Time" + "'", str73, "Time");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfDay();
        boolean boolean10 = dateTimeField9.isSupported();
        long long12 = dateTimeField9.roundHalfCeiling(1645513766040L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField9.getAsShortText(4, locale14);
        long long17 = dateTimeField9.roundCeiling(1645513828321L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField9.getAsText(63113600, locale19);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513740000L + "'", long12 == 1645513740000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "4" + "'", str15, "4");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513860000L + "'", long17 == 1645513860000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "63113600" + "'", str20, "63113600");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(4);
        org.joda.time.LocalDate localDate60 = dateTime57.toLocalDate();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        boolean boolean71 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime70);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str78 = dateTimeZone76.getNameKey(1645513759301L);
        int int80 = dateTimeZone76.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        int int83 = dateTimeZone76.getOffset((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime87 = dateTime70.minusMillis(63291394);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172328L + "'", long2 == 1645514172328L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514172328L + "'", long18 == 1645514172328L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514172328L + "'", long53 == 1645514172328L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514172328L + "'", long68 == 1645514172328L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 37320000 + "'", int80 == 37320000);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 37320000 + "'", int83 == 37320000);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime25 = dateTime17.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime33.minusMinutes(99);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:12.392+10:22" + "'", str4, "2022-02-22T17:38:12.392+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514172392L + "'", long15 == 1645514172392L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:12.392+10:22" + "'", str28, "2022-02-22T17:38:12.392+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172460L + "'", long2 == 1645514172460L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        boolean boolean8 = dateTimeField7.isSupported();
        boolean boolean10 = dateTimeField7.isLeap(1645513765710L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period35 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime36 = dateTime33.toLocalTime();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime36, 63124, locale38);
        org.joda.time.DurationField durationField40 = dateTimeField7.getRangeDurationField();
        boolean boolean41 = dateTimeField7.isLenient();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.Instant instant51 = instant43.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period62 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration64 = duration53.minus(0L);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.Duration duration73 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) '#');
        org.joda.time.Instant instant74 = instant51.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str80 = dateTimeZone78.getNameKey(1645513759301L);
        java.lang.String str82 = dateTimeZone78.getName(1645513762160L);
        java.util.TimeZone timeZone83 = dateTimeZone78.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration73, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.LocalTime localTime89 = dateTime85.toLocalTime();
        java.lang.String str90 = localTime89.toString();
        int int91 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime89);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:12.481+10:22" + "'", str15, "2022-02-22T17:38:12.481+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514172481L + "'", long29 == 1645514172481L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "63124" + "'", str39, "63124");
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:38:12.481+10:22" + "'", str56, "2022-02-22T17:38:12.481+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:22" + "'", str82, "+10:22");
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "17:31:23.364" + "'", str90, "17:31:23.364");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 292278993 + "'", int91 == 292278993);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.joda.time.Instant instant2 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration6.plus((long) 8);
        org.joda.time.Instant instant10 = instant2.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str13 = dateTimeZone11.getName(52L);
        int int15 = dateTimeZone11.getOffsetFromLocal(1645513779629L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645513796328L, dateTimeZone11);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone11.getName((-1645513686244L), locale18);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        java.lang.Object obj11 = null;
        boolean boolean12 = dateTime10.equals(obj11);
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(565);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 565 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Interval interval15 = interval13.gap(readableInterval14);
        org.joda.time.Interval interval17 = interval13.withEndMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Interval interval25 = interval13.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1L), 1L, periodType32, chronology33);
        java.lang.String str35 = periodType32.toString();
        java.lang.String str36 = periodType32.getName();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760165L, periodType32);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType32, chronology44);
        boolean boolean46 = dateTimeFieldType26.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.Interval interval48 = interval25.withChronology(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.weekOfWeekyear();
        int int51 = dateTimeField49.getMaximumValue(1645514144010L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172621L + "'", long2 == 1645514172621L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[Time]" + "'", str35, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Time" + "'", str36, "Time");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long15 = dateTimeField10.addWrapField(1645513771496L, 25774);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField10.getAsText(63220558, locale17);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645505011496L + "'", long15 == 1645505011496L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "63220558" + "'", str18, "63220558");
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.joda.time.Instant instant7 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration11.plus((long) 8);
        org.joda.time.Instant instant15 = instant7.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Instant instant28 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 100);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfDay();
        org.joda.time.DurationField durationField43 = chronology40.halfdays();
        org.joda.time.Period period44 = duration17.toPeriod(periodType31, chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(63192510, 63460503, 63291221, 63471, 63146, 63449444, chronology40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63471 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:12.731+10:22" + "'", str20, "2022-02-22T17:38:12.731+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) -1, (-187719327), 63432, 58, 63460652, 63364169, 25844133, 365);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-22T17:35:10.001+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:35:10.001+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval55.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration61 = duration58.plus((long) 8);
        org.joda.time.Seconds seconds62 = duration58.toStandardSeconds();
        org.joda.time.Duration duration63 = duration58.toDuration();
        org.joda.time.Duration duration65 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval66.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration69.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = dateTime81.withZoneRetainFields(dateTimeZone83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime87 = dateTime81.withField(dateTimeFieldType85, 25774);
        org.joda.time.DateTime dateTime89 = dateTime87.minusMinutes(63112091);
        boolean boolean90 = duration65.equals((java.lang.Object) 63112091);
        int int91 = duration58.compareTo((org.joda.time.ReadableDuration) duration65);
        long long92 = duration58.getMillis();
        boolean boolean93 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration58);
        java.lang.String str94 = duration18.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514172782L + "'", long23 == 1645514172782L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:38:12.782+10:22" + "'", str30, "2022-02-22T17:38:12.782+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1058 + "'", int52 == 1058);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T17:38:12.782+10:22" + "'", str75, "2022-02-22T17:38:12.782+10:22");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 100000L + "'", long92 == 100000L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "PT10281780S" + "'", str94, "PT10281780S");
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645513802314L, 1645513978220L);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(33166356552000L, 1645513774191L);
        mutablePeriod5.setPeriod(457087L);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str9 = dateTimeFieldType8.toString();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getDurationType();
        int int11 = mutablePeriod5.get(durationFieldType10);
        mutablePeriod2.add((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfWeek" + "'", str9, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration17.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime29);
        int int31 = mutablePeriod30.getMinutes();
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:12.854+10:22" + "'", str23, "2022-02-22T17:38:12.854+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        boolean boolean27 = mutableInterval26.containsNow();
        boolean boolean28 = interval11.isBefore((org.joda.time.ReadableInterval) mutableInterval26);
        mutableInterval26.setStartMillis((long) (-52));
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = period44.normalizedStandard();
        mutableInterval26.setPeriodAfterStart((org.joda.time.ReadablePeriod) period45);
        long long47 = mutableInterval26.getEndMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514172880L + "'", long2 == 1645514172880L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645513199948L + "'", long47 == 1645513199948L);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int33 = dateTime31.get(dateTimeFieldType32);
        int int34 = dateTime20.get(dateTimeFieldType32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1645513766040L, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.monthOfYear();
        boolean boolean51 = dateTimeFieldType32.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.clockhourOfHalfday();
        int int54 = dateTimeField52.getMaximumValue((long) 25);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval55.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration61 = duration58.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.withZoneRetainFields(dateTimeZone72);
        long long74 = dateTime73.getMillis();
        boolean boolean76 = dateTime73.equals((java.lang.Object) '#');
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime73.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((java.lang.Object) int54, dateTimeZone77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:12.909+10:22" + "'", str4, "2022-02-22T17:38:12.909+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514172909L + "'", long15 == 1645514172909L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63492909 + "'", int19 == 63492909);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63492909 + "'", int22 == 63492909);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:12.909+10:22" + "'", str26, "2022-02-22T17:38:12.909+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:38:12.910+10:22" + "'", str64, "2022-02-22T17:38:12.910+10:22");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645514172910L + "'", long74 == 1645514172910L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval29.containsNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval47.toInterval();
        org.joda.time.Interval interval56 = interval54.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime57 = interval54.getStart();
        boolean boolean58 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) interval54);
        boolean boolean59 = mutableInterval26.contains((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType63 = period62.getPeriodType();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.Period period65 = mutableInterval26.toPeriod(periodType63);
        org.joda.time.ReadableInterval readableInterval66 = null;
        boolean boolean67 = mutableInterval26.contains(readableInterval66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(1645513795536L);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 63090717);
        org.joda.time.YearMonthDay yearMonthDay72 = dateTime71.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval73);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:12.935+10:22" + "'", str2, "2022-02-22T17:38:12.935+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:12.935+10:22" + "'", str9, "2022-02-22T17:38:12.935+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:12.935+10:22" + "'", str16, "2022-02-22T17:38:12.935+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514172935L + "'", long45 == 1645514172935L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMonths(63094);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime34);
        int int36 = mutablePeriod35.getSeconds();
        int int37 = mutablePeriod35.getSeconds();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval38.setInterval((org.joda.time.ReadableInterval) mutableInterval45);
        boolean boolean51 = mutableInterval45.containsNow();
        mutablePeriod35.add((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Duration duration53 = mutableInterval45.toDuration();
        mutablePeriod16.setPeriod((org.joda.time.ReadableInterval) mutableInterval45);
        mutablePeriod16.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:12.980+10:22" + "'", str9, "2022-02-22T17:38:12.980+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:12.980+10:22" + "'", str28, "2022-02-22T17:38:12.980+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 40 + "'", int36 == 40);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration36 = duration25.minus(0L);
        org.joda.time.DateTime dateTime38 = dateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (short) 0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration51 = duration40.minus(0L);
        boolean boolean52 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration40);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration36);
        mutablePeriod12.addMonths(52);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        mutablePeriod12.setPeriod(1645513764889L, chronology69);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        long long75 = mutableInterval74.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        boolean boolean78 = mutableInterval74.overlaps((org.joda.time.ReadableInterval) mutableInterval76);
        java.lang.Object obj79 = mutableInterval74.clone();
        org.joda.time.Chronology chronology80 = mutableInterval74.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.yearOfEra();
        org.joda.time.Chronology chronology82 = chronology80.withUTC();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod();
        mutablePeriod83.setMonths((int) ' ');
        java.lang.Object obj86 = mutablePeriod83.clone();
        long long89 = chronology80.add((org.joda.time.ReadablePeriod) mutablePeriod83, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField90 = chronology80.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology80);
        mutablePeriod12.add(1645513766979L, chronology80);
        org.joda.time.DateTimeField dateTimeField93 = chronology80.minuteOfHour();
        org.joda.time.Interval interval94 = interval7.withChronology(chronology80);
        org.joda.time.DurationField durationField95 = chronology80.years();
        org.joda.time.DurationField durationField96 = chronology80.weekyears();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514173034L + "'", long2 == 1645514173034L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:13.034+10:22" + "'", str15, "2022-02-22T17:38:13.034+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:13.034+10:22" + "'", str28, "2022-02-22T17:38:13.034+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:38:13.034+10:22" + "'", str43, "2022-02-22T17:38:13.034+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "P32M");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1851379200000L + "'", long89 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(durationField96);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(115);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 8, periodType19, chronology26);
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration17, chronology26);
        mutablePeriod15.add(8, (int) ' ', 292278993, 63088836, 10, 292278993, (int) '4', (int) (byte) 100);
        org.joda.time.DateTime dateTime39 = dateTime12.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period43 = new org.joda.time.Period(1645513777889L, 1645513790850L, periodType42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.millisOfSecond();
        long long56 = dateTimeField53.add(1645513768262L, 22);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField53.getType();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getDurationType();
        boolean boolean59 = periodType44.isSupported(durationFieldType58);
        org.joda.time.Period period61 = period43.withFieldAdded(durationFieldType58, 6);
        boolean boolean62 = mutablePeriod15.isSupported(durationFieldType58);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:13.152+10:22" + "'", str2, "2022-02-22T17:38:13.152+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645513768284L + "'", long56 == 1645513768284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        mutableInterval0.setEndMillis(1645513766127L);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period14 = period13.toPeriod();
        org.joda.time.Weeks weeks15 = period13.toStandardWeeks();
        org.joda.time.PeriodType periodType16 = period13.getPeriodType();
        org.joda.time.Period period17 = mutableInterval0.toPeriod(periodType16);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(1645513771829L, 1645513782174L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime40.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime40.toMutableDateTime();
        int int47 = mutableDateTime46.getMinuteOfDay();
        org.joda.time.Chronology chronology48 = mutableDateTime46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.centuryOfEra();
        mutableInterval0.setChronology(chronology48);
        long long52 = mutableInterval0.toDurationMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:13.185+10:22" + "'", str34, "2022-02-22T17:38:13.185+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1058 + "'", int47 == 1058);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 7100L + "'", long52 == 7100L);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        mutableInterval0.setDurationBeforeEnd(1645513764242L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType18, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        int int37 = dateTime33.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTimeISO();
        int int47 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDate localDate48 = dateTime46.toLocalDate();
        int[] intArray50 = chronology30.get((org.joda.time.ReadablePartial) localDate48, 1645513760075L);
        org.joda.time.DateTimeField dateTimeField51 = chronology30.dayOfWeek();
        mutableInterval0.setChronology(chronology30);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514173213L + "'", long7 == 1645514173213L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514173213L + "'", long34 == 1645514173213L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:13.213+10:22" + "'", str40, "2022-02-22T17:38:13.213+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        boolean boolean25 = dateTime20.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime27 = dateTime20.minusHours(63102000);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths(3);
        org.joda.time.DateTime dateTime36 = dateTime32.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime32.withTimeAtStartOfDay();
        boolean boolean38 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int39 = dateTime20.getMinuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime20.withWeekyear(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:13.242+10:22" + "'", str4, "2022-02-22T17:38:13.242+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514173242L + "'", long15 == 1645514173242L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63493242 + "'", int19 == 63493242);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63493242 + "'", int22 == 63493242);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514173242L + "'", long30 == 1645514173242L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 38 + "'", int39 == 38);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        boolean boolean14 = property12.isLeap();
        org.joda.time.DateTime dateTime16 = property12.setCopy((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        int int22 = dateTime18.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = dateTime24.toDateTimeISO();
        int int32 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = dateTime31.toLocalDate();
        org.joda.time.DateTimeField dateTimeField35 = localDate33.getField((int) (short) 0);
        int int36 = dateTimeField35.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField35.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField35.getType();
        boolean boolean39 = dateTime16.isSupported(dateTimeFieldType38);
        boolean boolean40 = yearMonthDay8.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod();
        mutablePeriod42.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        boolean boolean53 = dateTime51.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        boolean boolean72 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean75 = mutableInterval73.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        mutableInterval73.setChronology(chronology82);
        mutablePeriod42.setPeriod(100000L, 1645513762364L, chronology82);
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType41.getField(chronology82);
        org.joda.time.Period period86 = org.joda.time.Period.ZERO;
        org.joda.time.Period period88 = period86.minusSeconds((int) (short) 1);
        org.joda.time.Period period90 = period86.plusMinutes(3);
        org.joda.time.Period period92 = period90.plusWeeks(17);
        org.joda.time.Duration duration93 = period92.toStandardDuration();
        int[] intArray96 = chronology82.get((org.joda.time.ReadablePeriod) period92, 1645513780672L, 1645513774080L);
        org.joda.time.DateTimeField dateTimeField97 = dateTimeFieldType38.getField(chronology82);
        org.joda.time.DurationFieldType durationFieldType98 = dateTimeFieldType38.getRangeDurationType();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514173300L + "'", long2 == 1645514173300L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514173300L + "'", long11 == 1645514173300L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514173300L + "'", long19 == 1645514173300L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:38:13.300+10:22" + "'", str25, "2022-02-22T17:38:13.300+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-292275054) + "'", int36 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:13.301+10:22" + "'", str49, "2022-02-22T17:38:13.301+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:38:13.301+10:22" + "'", str56, "2022-02-22T17:38:13.301+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T17:38:13.301+10:22" + "'", str63, "2022-02-22T17:38:13.301+10:22");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 0, 0, -6, -592]");
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNull(durationFieldType98);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.negated();
        org.joda.time.Period period2 = period0.negated();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = duration8.plus((long) 8);
        org.joda.time.Instant instant12 = instant4.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((long) 8);
        org.joda.time.Duration duration34 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) '#');
        org.joda.time.Instant instant35 = instant12.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str41 = dateTimeZone39.getNameKey(1645513759301L);
        java.lang.String str43 = dateTimeZone39.getName(1645513762160L);
        java.util.TimeZone timeZone44 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getRangeDurationType();
        mutablePeriod49.add(durationFieldType51, 63099629);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks((int) (byte) 10);
        int int59 = dateTime55.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime dateTime68 = dateTime61.toDateTimeISO();
        int int69 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalDate localDate70 = dateTime68.toLocalDate();
        org.joda.time.DateTimeField dateTimeField72 = localDate70.getField((int) (short) 0);
        org.joda.time.Chronology chronology73 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekyearOfCentury();
        org.joda.time.DurationField durationField75 = durationFieldType51.getField(chronology73);
        int int76 = period0.get(durationFieldType51);
        org.joda.time.Period period78 = period0.plusYears(0);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((-1L), 1L, periodType81, chronology82);
        mutablePeriod83.setSeconds((int) (short) 0);
        org.joda.time.Period period86 = mutablePeriod83.toPeriod();
        org.joda.time.Period period87 = period0.withFields((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Days days88 = period0.toStandardDays();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:38:13.399+10:22" + "'", str17, "2022-02-22T17:38:13.399+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:22" + "'", str43, "+10:22");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645514173399L + "'", long56 == 1645514173399L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:38:13.399+10:22" + "'", str62, "2022-02-22T17:38:13.399+10:22");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(days88);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = dateTime1.toCalendar(locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumTextLength(locale16);
        java.lang.String str18 = property14.toString();
        int int19 = property14.get();
        int int20 = property14.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime22.withEarlierOffsetAtOverlap();
        long long27 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1L), 1L, periodType46, chronology47);
        java.lang.String str49 = periodType46.toString();
        java.lang.String str50 = periodType46.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645513760165L, periodType46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant42, periodType46);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval53.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime64 = dateTime62.plusSeconds((int) (byte) 10);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration66 = duration30.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration67 = duration30.toDuration();
        org.joda.time.DateTime dateTime68 = dateTime22.plus((org.joda.time.ReadableDuration) duration67);
        boolean boolean70 = dateTime68.isBefore(1645513963588L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:13.452+10:22" + "'", str2, "2022-02-22T17:38:13.452+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514173452,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=13,MILLISECOND=452,ZONE_OFFSET=37320000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514173452L + "'", long13 == 1645514173452L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[yearOfEra]" + "'", str18, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514173452L + "'", long23 == 1645514173452L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:13.452+10:22" + "'", str33, "2022-02-22T17:38:13.452+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PeriodType[Time]" + "'", str49, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Time" + "'", str50, "Time");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514173452L + "'", long60 == 1645514173452L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.util.Locale locale6 = null;
        int int7 = property3.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property3.getAsText();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514173551L + "'", long2 == 1645514173551L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.Duration duration26 = interval3.toDuration();
        org.joda.time.Duration duration29 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.Duration duration30 = duration26.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) 22);
        org.joda.time.Duration duration33 = duration30.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval44 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period45 = duration42.toPeriod();
        long long46 = duration42.getStandardHours();
        org.joda.time.Duration duration48 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration42, (-1645450678));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration51 = duration48.withDurationAdded(1645514163447L, 63360257);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514163447 * 63360257");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514173575L + "'", long36 == 1645514173575L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        long long12 = duration2.getMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval24 = interval17.toInterval();
        org.joda.time.Interval interval26 = interval24.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime27 = interval24.getStart();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        boolean boolean31 = interval24.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 3, 1645513762121L, periodType35, chronology43);
        org.joda.time.Period period46 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType35);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType50 = period49.getPeriodType();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.PeriodType periodType52 = periodType50.withMillisRemoved();
        org.joda.time.PeriodType periodType53 = periodType50.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) dateTime29, periodType50);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        int int59 = dateTime29.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime29.toMutableDateTimeISO();
        int int61 = mutableDateTime60.getDayOfYear();
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:13.603+10:22" + "'", str5, "2022-02-22T17:38:13.603+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100000L + "'", long12 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514173603L + "'", long15 == 1645514173603L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514173603L + "'", long30 == 1645514173603L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 53 + "'", int61 == 53);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(4);
        org.joda.time.LocalDate localDate20 = dateTime17.toLocalDate();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate20, 9, locale22);
        java.lang.Object obj24 = null;
        boolean boolean25 = localDate20.equals(obj24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(52);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        int int47 = dateTime45.getMonthOfYear();
        org.joda.time.DateTime.Property property48 = dateTime45.minuteOfDay();
        org.joda.time.DateTime.Property property49 = dateTime45.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray51 = new org.joda.time.DurationFieldType[] { durationFieldType50 };
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.forFields(durationFieldTypeArray51);
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime45, periodType53);
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime36.toYearMonthDay();
        int int56 = localDate20.compareTo((org.joda.time.ReadablePartial) yearMonthDay55);
        org.joda.time.ReadablePartial readablePartial57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, readablePartial57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514173681L + "'", long13 == 1645514173681L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "September" + "'", str23, "September");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:13.681+10:22" + "'", str28, "2022-02-22T17:38:13.681+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514173681L + "'", long43 == 1645514173681L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldTypeArray51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        int int30 = dateTimeZone18.getOffset((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.DateTime dateTime56 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (short) 0);
        java.util.Locale locale57 = null;
        java.util.Calendar calendar58 = dateTime39.toCalendar(locale57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) locale57);
        int int60 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime59);
        int int62 = dateTimeZone18.getOffset(1645513764861L);
        java.lang.String str63 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime68.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime74 = dateTime73.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime76 = dateTime74.plusHours((int) ' ');
        java.util.Locale locale77 = null;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        int int79 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime76);
        java.lang.Object obj80 = null;
        boolean boolean81 = dateTimeZone18.equals(obj80);
        java.util.Locale locale83 = null;
        java.lang.String str84 = dateTimeZone18.getName(1645513768606L, locale83);
        java.util.Locale locale86 = null;
        java.lang.String str87 = dateTimeZone18.getName(1645513919130L, locale86);
        java.lang.String str89 = dateTimeZone18.getNameKey(1645513918084L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37320000 + "'", int30 == 37320000);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:13.713+10:22" + "'", str33, "2022-02-22T17:38:13.713+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:13.713+10:22" + "'", str46, "2022-02-22T17:38:13.713+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514173713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=13,MILLISECOND=713,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 37320000 + "'", int60 == 37320000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 37320000 + "'", int62 == 37320000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:22" + "'", str63, "+10:22");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T17:38:13.713+10:22" + "'", str66, "2022-02-22T17:38:13.713+10:22");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=115200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=22,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 37320000 + "'", int79 == 37320000);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:22" + "'", str84, "+10:22");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+10:22" + "'", str87, "+10:22");
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) locale26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str40 = dateTimeZone38.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime41 = dateTime33.withZone(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes(0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period64 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration66 = duration55.minus(0L);
        org.joda.time.DateTime dateTime68 = dateTime51.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (short) 0);
        long long69 = duration66.getStandardSeconds();
        org.joda.time.DateTime dateTime70 = dateTime41.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology80);
        org.joda.time.DateTime dateTime82 = dateTime76.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Period period83 = duration74.toPeriodFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration85 = duration74.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        java.lang.String str88 = dateTime87.toString();
        org.joda.time.DateTime dateTime90 = dateTime87.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.DateTime dateTime92 = dateTime90.toDateTime(chronology91);
        org.joda.time.PeriodType periodType93 = null;
        org.joda.time.Period period94 = duration85.toPeriodTo((org.joda.time.ReadableInstant) dateTime92, periodType93);
        org.joda.time.PeriodType periodType95 = period94.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((long) 22, 1645513764242L, periodType95);
        org.joda.time.Period period97 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime70, periodType95);
        int int98 = dateTime28.getMinuteOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:13.760+10:22" + "'", str2, "2022-02-22T17:38:13.760+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:13.760+10:22" + "'", str15, "2022-02-22T17:38:13.760+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514173760,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=13,MILLISECOND=760,ZONE_OFFSET=37320000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514173760L + "'", long31 == 1645514173760L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:38:13.760+10:22" + "'", str45, "2022-02-22T17:38:13.760+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:38:13.760+10:22" + "'", str58, "2022-02-22T17:38:13.760+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(duration74);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-22T17:38:13.760+10:22" + "'", str77, "2022-02-22T17:38:13.760+10:22");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration85);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-22T17:38:13.760+10:22" + "'", str88, "2022-02-22T17:38:13.760+10:22");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(periodType95);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1058 + "'", int98 == 1058);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period7 = duration5.toPeriod();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period13 = duration11.toPeriod();
        boolean boolean14 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = new org.joda.time.DurationFieldType[] { durationFieldType15 };
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.forFields(durationFieldTypeArray16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.forFields(durationFieldTypeArray16);
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) duration11, periodType18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfDay();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Seconds seconds41 = period40.toStandardSeconds();
        int int42 = period40.getMillis();
        int[] intArray45 = chronology26.get((org.joda.time.ReadablePeriod) period40, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period46 = new org.joda.time.Period(1645513770909L, 1645513760283L, periodType18, chronology26);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Period period52 = duration50.toPeriod();
        org.joda.time.Duration duration53 = duration50.toDuration();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        int int59 = dateTime58.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime dateTime68 = dateTime61.toDateTimeISO();
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes(0);
        org.joda.time.DateTime dateTime72 = dateTime70.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime.Property property74 = dateTime72.centuryOfEra();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime72.toTimeOfDay();
        int[] intArray78 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay76, 1645513760253L);
        org.joda.time.DurationField durationField79 = chronology26.seconds();
        int int82 = durationField79.getValue(1645514017889L, 1645514024633L);
        org.joda.time.DurationField durationField83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = durationField79.compareTo(durationField83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:13.817+10:22" + "'", str34, "2022-02-22T17:38:13.817+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:38:13.817+10:22" + "'", str56, "2022-02-22T17:38:13.817+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:38:13.817+10:22" + "'", str62, "2022-02-22T17:38:13.817+10:22");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[17, 31, 20, 253]");
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1645514017 + "'", int82 == 1645514017);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:25.389+10:22");
        org.joda.time.DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(1645513789159L);
        java.lang.String str6 = duration5.toString();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(1645513766979L);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra(63110);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        java.util.Locale locale27 = null;
        int int28 = property25.getMaximumTextLength(locale27);
        java.lang.String str29 = property25.toString();
        int int30 = property25.get();
        int int31 = property25.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime33.withEarlierOffsetAtOverlap();
        long long38 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime();
        java.lang.String str40 = dateTime33.toString();
        org.joda.time.DateTime dateTime42 = dateTime33.plusSeconds(999);
        boolean boolean43 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime19.secondOfDay();
        boolean boolean45 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period52.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean56 = period54.equals((java.lang.Object) dateTimeFieldType55);
        org.joda.time.Period period58 = period54.plusWeeks(17);
        boolean boolean59 = mutableInterval46.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period65 = duration63.toPeriod();
        org.joda.time.Duration duration66 = duration63.toDuration();
        mutableInterval46.setDurationAfterStart((org.joda.time.ReadableDuration) duration66);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period69 = duration66.toPeriod();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT5923849640972400S" + "'", str6, "PT5923849640972400S");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:13.855+10:22" + "'", str10, "2022-02-22T17:38:13.855+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514173855L + "'", long24 == 1645514173855L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[yearOfEra]" + "'", str29, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514173855L + "'", long34 == 1645514173855L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:13.855+10:22" + "'", str40, "2022-02-22T17:38:13.855+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        int int22 = dateTimeZone18.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37320000 + "'", int22 == 37320000);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        java.lang.String str7 = property6.getName();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514173930L + "'", long2 == 1645514173930L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "dayOfYear" + "'", str7, "dayOfYear");
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) 1645513819454L);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.Period period21 = new org.joda.time.Period(25839660, 0, 430, 8, 63138932, 429, 63106441, 63149103);
        boolean boolean22 = interval12.equals((java.lang.Object) 429);
        org.joda.time.Interval interval23 = interval12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        java.util.Locale locale29 = null;
        int int30 = property27.getMaximumTextLength(locale29);
        java.lang.String str31 = property27.getName();
        java.util.Locale locale32 = null;
        int int33 = property27.getMaximumTextLength(locale32);
        org.joda.time.DateTime dateTime34 = property27.getDateTime();
        org.joda.time.DateTime dateTime35 = property27.roundCeilingCopy();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 3, 1645513762121L, periodType39, chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField51 = chronology47.months();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str56 = dateTimeZone54.getNameKey(1645513759301L);
        java.lang.String str58 = dateTimeZone54.getName(1645513762160L);
        java.util.TimeZone timeZone59 = dateTimeZone54.toTimeZone();
        int int61 = dateTimeZone54.getStandardOffset(1645513761942L);
        int int63 = dateTimeZone54.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology64 = chronology47.withZone(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.DateTime dateTime69 = dateTime66.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.toDateTime(chronology70);
        org.joda.time.DateTime dateTime72 = dateTime69.toDateTime();
        org.joda.time.DateTime dateTime74 = dateTime69.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.DateTime dateTime79 = dateTime76.withMillisOfSecond((int) (short) 10);
        boolean boolean81 = dateTime79.isBefore((-1L));
        int int82 = dateTime69.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int84 = dateTime79.get(dateTimeFieldType83);
        java.lang.String str85 = dateTime79.toString();
        org.joda.time.LocalDateTime localDateTime86 = dateTime79.toLocalDateTime();
        boolean boolean87 = dateTimeZone54.isLocalDateTimeGap(localDateTime86);
        long long89 = dateTimeZone54.previousTransition(19045L);
        java.lang.String str91 = dateTimeZone54.getName((long) 25812540);
        org.joda.time.DateTime dateTime92 = dateTime35.toDateTime(dateTimeZone54);
        org.joda.time.Interval interval93 = interval23.withEnd((org.joda.time.ReadableInstant) dateTime35);
        int int94 = dateTime35.getEra();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:14.007+10:22" + "'", str2, "2022-02-22T17:38:14.007+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514174007L + "'", long26 == 1645514174007L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "yearOfEra" + "'", str31, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:22" + "'", str58, "+10:22");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 37320000 + "'", int61 == 37320000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 37320000 + "'", int63 == 37320000);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T17:38:14.007+10:22" + "'", str67, "2022-02-22T17:38:14.007+10:22");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-22T17:38:14.007+10:22" + "'", str77, "2022-02-22T17:38:14.007+10:22");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 22 + "'", int84 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-22T17:38:14.010+10:22" + "'", str85, "2022-02-22T17:38:14.010+10:22");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 19045L + "'", long89 == 19045L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+10:22" + "'", str91, "+10:22");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property64 = dateTime48.secondOfMinute();
        org.joda.time.DateTime dateTime66 = dateTime48.plusDays((int) (byte) 100);
        org.joda.time.Duration duration69 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days70 = duration69.toStandardDays();
        org.joda.time.Days days71 = duration69.toStandardDays();
        org.joda.time.Duration duration73 = duration69.withMillis(1645513809433L);
        org.joda.time.DateTime dateTime74 = dateTime66.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        long long77 = dateTime76.getMillis();
        org.joda.time.DateTime.Property property78 = dateTime76.yearOfEra();
        org.joda.time.DateTime dateTime79 = property78.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField80 = property78.getField();
        org.joda.time.DateTime dateTime81 = property78.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime82 = dateTime81.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = dateTime81.withZoneRetainFields(dateTimeZone83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType85.getDurationType();
        int int88 = dateTime81.get(dateTimeFieldType85);
        int int89 = dateTime74.get(dateTimeFieldType85);
        org.joda.time.LocalTime localTime90 = dateTime74.toLocalTime();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:14.123+10:22" + "'", str5, "2022-02-22T17:38:14.123+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:14.123+10:22" + "'", str18, "2022-02-22T17:38:14.123+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:14.123+10:22" + "'", str33, "2022-02-22T17:38:14.123+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:14.123+10:22" + "'", str46, "2022-02-22T17:38:14.123+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:38:14.123+10:22" + "'", str53, "2022-02-22T17:38:14.123+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645514174123L + "'", long77 == 1645514174123L);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertNotNull(localTime90);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.joda.time.Duration duration10 = new org.joda.time.Duration(136746792000L, 1645513762687L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.clockhourOfHalfday();
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration10, chronology30);
        org.joda.time.Duration duration38 = duration10.toDuration();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime(chronology60);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = duration54.toPeriodTo((org.joda.time.ReadableInstant) dateTime61, periodType62);
        org.joda.time.PeriodType periodType64 = period63.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 22, 1645513764242L, periodType64);
        org.joda.time.PeriodType periodType66 = periodType64.withYearsRemoved();
        org.joda.time.Period period67 = duration38.toPeriodTo(readableInstant39, periodType66);
        org.joda.time.PeriodType periodType68 = periodType66.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(63371418, 63121637, 63446039, 63264947, 63256434, 63406, 63428654, 63445811, periodType66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:14.188+10:22" + "'", str13, "2022-02-22T17:38:14.188+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:14.188+10:22" + "'", str46, "2022-02-22T17:38:14.188+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:14.188+10:22" + "'", str57, "2022-02-22T17:38:14.188+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(periodType68);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.joda.time.Period period2 = new org.joda.time.Period(1645513778014L, (long) 25774);
        org.joda.time.Period period4 = period2.minusDays(63249982);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = period2.getValue(63293300);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63293300");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(readableDuration11, 6);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod();
        mutablePeriod25.setMonths((int) ' ');
        java.lang.Object obj28 = mutablePeriod25.clone();
        long long31 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod25, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology22);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        int int40 = dateTime36.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime41 = dateTime36.toLocalTime();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localTime41, locale42);
        org.joda.time.DateTime dateTime44 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTime dateTime46 = dateTime44.plusWeeks(360000000);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis(25825);
        org.joda.time.DateTime.Property property49 = dateTime48.secondOfDay();
        org.joda.time.DateTime dateTime51 = property49.addWrapFieldToCopy(63462521);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:14.271+10:22" + "'", str2, "2022-02-22T17:38:14.271+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "P32M");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1851379200000L + "'", long31 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514174271L + "'", long37 == 1645514174271L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "5" + "'", str43, "5");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime18 = dateTime12.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.Period period34 = duration16.toPeriod(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        int int38 = durationField36.getValue(0L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:14.375+10:22" + "'", str4, "2022-02-22T17:38:14.375+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+10:22]" + "'", str32, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology22.months();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str31 = dateTimeZone29.getNameKey(1645513759301L);
        java.lang.String str33 = dateTimeZone29.getName(1645513762160L);
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        int int36 = dateTimeZone29.getStandardOffset(1645513761942L);
        int int38 = dateTimeZone29.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology39 = chronology22.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.era();
        org.joda.time.DateTime dateTime41 = dateTime4.withChronology(chronology39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        boolean boolean48 = dateTime46.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = dateTime57.toDateTimeISO();
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes(0);
        boolean boolean67 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime69 = mutableInterval68.getEnd();
        org.joda.time.DateTime dateTime71 = dateTime69.withDayOfMonth(10);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod();
        int int73 = mutablePeriod72.getSeconds();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology81);
        org.joda.time.DateTime dateTime83 = dateTime77.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.Period period84 = duration75.toPeriodFrom((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration86 = duration75.minus(0L);
        org.joda.time.Chronology chronology87 = null;
        mutablePeriod72.setPeriod((org.joda.time.ReadableDuration) duration75, chronology87);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime92 = dateTime4.withYear(63413491);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514174479L + "'", long2 == 1645514174479L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1651562174479,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=123,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=38,SECOND=14,MILLISECOND=479,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:22" + "'", str33, "+10:22");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 37320000 + "'", int36 == 37320000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 37320000 + "'", int38 == 37320000);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:14.479+10:22" + "'", str44, "2022-02-22T17:38:14.479+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:14.479+10:22" + "'", str51, "2022-02-22T17:38:14.479+10:22");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:38:14.479+10:22" + "'", str58, "2022-02-22T17:38:14.479+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(duration75);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-22T17:38:14.479+10:22" + "'", str78, "2022-02-22T17:38:14.479+10:22");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = interval4.contains(readableInstant5);
        boolean boolean7 = interval4.isBeforeNow();
        org.joda.time.DateTime dateTime8 = interval4.getStart();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Seconds seconds32 = period31.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod33 = period31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period36 = period31.withFieldAdded(durationFieldType34, (int) (short) -1);
        org.joda.time.Interval interval37 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval38 = interval4.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((long) 63141921);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1L), 1L, periodType44, chronology45);
        java.lang.String str47 = periodType44.toString();
        java.lang.String str48 = periodType44.getName();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1645513760165L, periodType44);
        int int50 = mutablePeriod49.getWeeks();
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        mutablePeriod49.add((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period60 = period57.minusYears(3);
        org.joda.time.Period period62 = period57.withDays((int) 'a');
        int int63 = period62.getMinutes();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Duration duration65 = period62.toDurationFrom(readableInstant64);
        boolean boolean66 = duration40.isEqual((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = interval38.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration70 = duration40.withDurationAdded(1645513761504L, 37514);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514174544L + "'", long2 == 1645514174544L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:38:14.544+10:22" + "'", str25, "2022-02-22T17:38:14.544+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PeriodType[Time]" + "'", str47, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Time" + "'", str48, "Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(readableDuration11, 6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.Period period22 = period18.plusWeeks((int) (short) -1);
        org.joda.time.Period period24 = period18.minusMillis(4);
        org.joda.time.Interval interval25 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        java.lang.String str30 = property29.getName();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration35);
        boolean boolean50 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone53);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.Period period59 = period55.plusWeeks((int) (short) -1);
        org.joda.time.Period period61 = period55.minusMillis(4);
        org.joda.time.Interval interval62 = interval54.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        boolean boolean64 = interval17.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        long long67 = interval66.toDurationMillis();
        boolean boolean68 = interval17.overlaps((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTime dateTime69 = interval17.getEnd();
        boolean boolean71 = dateTime69.isAfter(1645513828321L);
        boolean boolean72 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime74 = dateTime69.minusWeeks(37668);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:14.658+10:22" + "'", str2, "2022-02-22T17:38:14.658+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514174658L + "'", long28 == 1645514174658L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "yearOfEra" + "'", str30, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:38:14.658+10:22" + "'", str41, "2022-02-22T17:38:14.658+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        mutablePeriod16.add((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval17.copy();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:14.721+10:22" + "'", str9, "2022-02-22T17:38:14.721+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableInterval19);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        long long19 = dateTimeField16.getDifferenceAsLong((long) 37465, 1645514073795L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1645514036L) + "'", long19 == (-1645514036L));
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.Duration duration26 = interval3.toDuration();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.negated();
        org.joda.time.Period period30 = period27.withDays(1);
        int int32 = period27.getValue((int) (short) 0);
        org.joda.time.Interval interval33 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period38 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.withZoneRetainFields(dateTimeZone57);
        int int59 = dateTime55.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime55.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime55.toMutableDateTime();
        int int62 = mutableDateTime61.getMinuteOfDay();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period38, (org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = interval64.contains(readableInstant65);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:14.767+10:22" + "'", str49, "2022-02-22T17:38:14.767+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 17 + "'", int59 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1058 + "'", int62 == 1058);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        mutableInterval1.setEndMillis(1645513775498L);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        boolean boolean8 = mutableInterval4.overlaps((org.joda.time.ReadableInterval) mutableInterval6);
        java.lang.Object obj9 = mutableInterval4.clone();
        org.joda.time.Chronology chronology10 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfEra();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        int[] intArray21 = chronology12.get((org.joda.time.ReadablePartial) yearMonthDay19, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField22 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField23 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfHalfday();
        mutableInterval1.setChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.weekyear();
        java.lang.Class<?> wildcardClass27 = chronology12.getClass();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514174813L + "'", long15 == 1645514174813L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        int int17 = mutablePeriod2.getMinutes();
        java.lang.Object obj18 = mutablePeriod2.clone();
        mutablePeriod2.addWeeks(63295979);
        mutablePeriod2.setWeeks(63194788);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "P63194788WT1M40S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "P63194788WT1M40S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "P63194788WT1M40S");
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Instant instant20 = instant12.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = instant12.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant24 = instant12.plus(1645513821127L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTime dateTime26 = instant24.toDateTimeISO();
        boolean boolean27 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        int int39 = dateTime26.get(dateTimeField38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime26.withField(dateTimeFieldType40, 63375983);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63375983 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514174861L + "'", long2 == 1645514174861L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime4.toString(dateTimeFormatter8);
        org.joda.time.DateTime.Property property10 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514174887L + "'", long2 == 1645514174887L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-05-03T17:38:14.887+10:22" + "'", str9, "2022-05-03T17:38:14.887+10:22");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = mutablePeriod26.getSeconds();
        int int28 = mutablePeriod26.getSeconds();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval36.containsNow();
        mutablePeriod26.add((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Duration duration44 = mutableInterval36.toDuration();
        org.joda.time.Duration duration46 = duration44.minus(1645513762241L);
        org.joda.time.Instant instant47 = instant9.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Instant instant49 = instant47.plus(1645513892897L);
        org.joda.time.DateTime dateTime50 = instant47.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = instant47.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:38:14.970+10:22" + "'", str19, "2022-02-22T17:38:14.970+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration73);
        mutableInterval70.setInterval(100000L, 1645513759601L);
        long long78 = mutableInterval70.getStartMillis();
        org.joda.time.Duration duration79 = mutableInterval70.toDuration();
        org.joda.time.Period period80 = org.joda.time.Period.ZERO;
        org.joda.time.Period period82 = period80.minusSeconds((int) (short) 1);
        org.joda.time.Period period84 = period80.plusMinutes(3);
        org.joda.time.Period period86 = period84.plusWeeks(17);
        org.joda.time.Duration duration87 = period86.toStandardDuration();
        mutableInterval70.setDurationAfterStart((org.joda.time.ReadableDuration) duration87);
        boolean boolean89 = mutableInterval70.isBeforeNow();
        boolean boolean91 = mutableInterval70.equals((java.lang.Object) "2022-02-22T17:31:36.010+10:22");
        boolean boolean92 = interval11.abuts((org.joda.time.ReadableInterval) mutableInterval70);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:15.010+10:22" + "'", str16, "2022-02-22T17:38:15.010+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514175010L + "'", long34 == 1645514175010L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100000L + "'", long78 == 100000L);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 8, periodType33, chronology40);
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration31, chronology40);
        org.joda.time.DateTime dateTime44 = dateTime4.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime45 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime4.getZone();
        boolean boolean48 = dateTimeZone46.equals((java.lang.Object) 1645513864375L);
        long long50 = dateTimeZone46.previousTransition((long) 25815966);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:15.055+10:22" + "'", str2, "2022-02-22T17:38:15.055+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:15.055+10:22" + "'", str9, "2022-02-22T17:38:15.055+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:38:15.055+10:22" + "'", str16, "2022-02-22T17:38:15.055+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25815966L + "'", long50 == 25815966L);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        boolean boolean6 = periodType3.isSupported(durationFieldType5);
        org.joda.time.PeriodType periodType7 = periodType3.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513783906L, 1645513839357L, periodType3);
        mutablePeriod8.setPeriod((long) 434, 0L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.DateTime dateTime14 = property3.getDateTime();
        org.joda.time.DateTime dateTime16 = property3.addToCopy((long) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        org.joda.time.Interval interval28 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        java.lang.String str30 = chronology29.toString();
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfDay();
        org.joda.time.DurationField durationField34 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime16.withChronology(chronology29);
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1L), 1L, periodType43, chronology44);
        java.lang.String str46 = periodType43.toString();
        java.lang.String str47 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645513760165L, periodType43);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType43, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.yearOfEra();
        org.joda.time.DurationField durationField58 = chronology55.weeks();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval59.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = duration62.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.DateTime dateTime74 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime74);
        int int76 = mutablePeriod75.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone77);
        boolean boolean79 = mutablePeriod75.equals((java.lang.Object) dateTime78);
        int[] intArray81 = chronology55.get((org.joda.time.ReadablePeriod) mutablePeriod75, 1645513767592L);
        // The following exception was thrown during execution in test generation
        try {
            chronology29.validate(readablePartial37, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175148L + "'", long2 == 1645514175148L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:38:15.148+10:22" + "'", str6, "2022-02-22T17:38:15.148+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+10:22]" + "'", str30, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PeriodType[Time]" + "'", str46, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Time" + "'", str47, "Time");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T17:38:15.149+10:22" + "'", str68, "2022-02-22T17:38:15.149+10:22");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 40 + "'", int76 == 40);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 2720, 5, 7, 9, 27, 592]");
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        org.joda.time.Interval interval32 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setMinutes((int) 'a');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval35.copy();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Interval interval47 = interval41.withDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = interval47.toDuration();
        mutableInterval36.setInterval((org.joda.time.ReadableInterval) interval47);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval47);
        org.joda.time.PeriodType periodType51 = mutablePeriod26.getPeriodType();
        mutablePeriod26.add(63116730, 2022, 457087, 37, 0, 63142010, 63142, 0);
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod26.copy();
        mutablePeriod26.add(1645513773103L);
        java.lang.Object obj64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period(obj64, periodType65, chronology66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        boolean boolean69 = periodType65.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        mutablePeriod26.add(durationFieldType68, 63407104);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175180L + "'", long2 == 1645514175180L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P63116730Y2022M459807W42DT63407111H63142020M63215.103S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P63116730Y2022M459807W42DT63407111H63142020M63215.103S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P63116730Y2022M459807W42DT63407111H63142020M63215.103S");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514175180L + "'", long39 == 1645514175180L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hours" + "'", str70, "hours");
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        int[] intArray19 = chronology10.get((org.joda.time.ReadablePartial) yearMonthDay17, 1645513760770L);
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period20.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean24 = period22.equals((java.lang.Object) dateTimeFieldType23);
        org.joda.time.Period period26 = period22.plusWeeks(17);
        int[] intArray29 = chronology10.get((org.joda.time.ReadablePeriod) period26, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        int[] intArray43 = chronology10.get((org.joda.time.ReadablePeriod) period34, (long) 63099629);
        org.joda.time.Weeks weeks44 = period34.toStandardWeeks();
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period34);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        mutableInterval46.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean59 = mutableInterval46.containsNow();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime.Property property63 = dateTime61.yearOfEra();
        org.joda.time.Interval interval64 = property63.toInterval();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Interval interval70 = interval64.withDurationAfterStart((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Interval interval71 = interval64.toInterval();
        org.joda.time.Interval interval73 = interval71.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime74 = interval71.getStart();
        boolean boolean75 = mutableInterval46.isBefore((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Instant instant77 = new org.joda.time.Instant(1645513763016L);
        boolean boolean79 = instant77.isEqual(1645513759301L);
        org.joda.time.Interval interval80 = interval71.withStart((org.joda.time.ReadableInstant) instant77);
        boolean boolean81 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval80);
        org.joda.time.Interval interval82 = interval80.toInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514175218L + "'", long13 == 1645514175218L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 17, 31, 39, 629]");
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645514175218L + "'", long62 == 1645514175218L);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval82);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        mutableInterval3.setChronology(chronology21);
        boolean boolean33 = mutableInterval3.isBeforeNow();
        boolean boolean34 = mutableInterval3.isBeforeNow();
        mutableInterval3.setInterval(0L, 1645513838500L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514175291L + "'", long10 == 1645514175291L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval2 = mutableInterval1.toInterval();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        mutablePeriod7.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone12);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.Period period18 = period14.plusWeeks((int) (short) -1);
        org.joda.time.Period period20 = period14.minusMillis(4);
        org.joda.time.Interval interval21 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval21);
        mutableInterval1.setInterval((org.joda.time.ReadableInterval) interval21);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        mutablePeriod24.setDays(40);
        mutableInterval1.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology31 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfHour();
        org.joda.time.Chronology chronology34 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645513773906L, chronology34);
        mutablePeriod36.addMinutes(63248676);
        int int39 = mutablePeriod36.getYears();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M40D");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime11.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        boolean boolean36 = dateTime34.isBefore((-1L));
        int int37 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int39 = dateTime34.get(dateTimeFieldType38);
        java.lang.String str40 = dateTime34.toString();
        org.joda.time.DateTime dateTime42 = dateTime34.withYearOfEra(9);
        org.joda.time.DateTime dateTime44 = dateTime34.plusHours(20);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = dateTime17.withMonthOfYear(63464819);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63464819 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175377L + "'", long2 == 1645514175377L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:15.377+10:22" + "'", str9, "2022-02-22T17:38:15.377+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:15.377+10:22" + "'", str22, "2022-02-22T17:38:15.377+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:38:15.377+10:22" + "'", str32, "2022-02-22T17:38:15.377+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:15.010+10:22" + "'", str40, "2022-02-22T17:38:15.010+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        int int24 = dateTime20.getHourOfDay();
        org.joda.time.DateTime.Property property25 = dateTime20.weekyear();
        org.joda.time.Chronology chronology26 = dateTime20.getChronology();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:15.400+10:22" + "'", str4, "2022-02-22T17:38:15.400+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514175400L + "'", long15 == 1645514175400L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63495400 + "'", int19 == 63495400);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63495400 + "'", int22 == 63495400);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 17 + "'", int24 == 17);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((int) ' ', (int) ' ', 2022, (int) 'a');
        mutablePeriod19.setPeriod(1645513834403L, 1645513832681L);
        mutablePeriod19.addHours(63143672);
        org.joda.time.Period period25 = period14.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:15.420+10:22" + "'", str4, "2022-02-22T17:38:15.420+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        mutablePeriod0.clear();
        mutablePeriod0.addSeconds(63111649);
        mutablePeriod0.addHours(63217654);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 8, periodType2, chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        int int17 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTimeISO();
        int int27 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate28 = dateTime26.toLocalDate();
        org.joda.time.DateTimeField dateTimeField30 = localDate28.getField((int) (short) 0);
        int int31 = localDate28.size();
        int[] intArray33 = chronology9.get((org.joda.time.ReadablePartial) localDate28, 1645513768281L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(1645513763245L, chronology9);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((-1L), 1L, periodType39, chronology40);
        mutablePeriod41.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone46);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period48.minusSeconds((int) (short) 1);
        org.joda.time.Period period52 = period48.plusWeeks((int) (short) -1);
        org.joda.time.Period period54 = period48.minusMillis(4);
        org.joda.time.Interval interval55 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        mutablePeriod41.add((org.joda.time.ReadableInterval) interval55);
        mutableInterval35.setInterval((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Period period58 = mutableInterval35.toPeriod();
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period61 = period59.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean63 = period61.equals((java.lang.Object) dateTimeFieldType62);
        org.joda.time.Period period65 = period61.plusWeeks(17);
        org.joda.time.Period period67 = period65.plusMinutes((int) '#');
        mutableInterval35.setPeriodAfterStart((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Period period70 = period67.minusSeconds(63149103);
        int[] intArray72 = chronology9.get((org.joda.time.ReadablePeriod) period67, 1645514055661L);
        org.joda.time.Period period74 = period67.withMinutes(63445);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514175479L + "'", long14 == 1645514175479L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:15.479+10:22" + "'", str20, "2022-02-22T17:38:15.479+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 2720, 5, 7, 14, 15, 661]");
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.DurationField durationField21 = dateTimeField19.getLeapDurationField();
        long long23 = dateTimeField19.roundHalfFloor(1645513890165L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField19.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = dateTimeField19.set(1645514017102L, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:15.560+10:22" + "'", str2, "2022-02-22T17:38:15.560+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645537080000L + "'", long23 == 1645537080000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(63102000);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = duration25.toPeriodTo((org.joda.time.ReadableInstant) dateTime32, periodType33);
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime37 = property35.withMaximumValue();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property35.getAsText(locale38);
        org.joda.time.DateTime dateTime40 = property35.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay41 = dateTime40.toTimeOfDay();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime40, periodType42);
        org.joda.time.DateTime dateTime45 = dateTime12.minusDays(63129534);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175580L + "'", long2 == 1645514175580L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:38:15.580+10:22" + "'", str17, "2022-02-22T17:38:15.580+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:15.580+10:22" + "'", str28, "2022-02-22T17:38:15.580+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "53" + "'", str39, "53");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1645513767187L, periodType5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(obj0, periodType5, chronology19);
        org.joda.time.DurationField durationField23 = chronology19.months();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+10:22]" + "'", str20, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(4);
        org.joda.time.LocalDate localDate9 = dateTime6.toLocalDate();
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.DurationField durationField33 = dateTimeField32.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        int int41 = yearMonthDay40.size();
        int[] intArray46 = new int[] { 40, 40, '#', 10 };
        int int47 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay40, intArray46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay24, (org.joda.time.ReadablePartial) yearMonthDay40);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay17, (org.joda.time.ReadablePartial) yearMonthDay24, periodType49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) yearMonthDay24);
        org.joda.time.Period period53 = period51.withYears(63135);
        org.joda.time.DurationFieldType[] durationFieldTypeArray54 = period53.getFieldTypes();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175649L + "'", long2 == 1645514175649L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514175649L + "'", long13 == 1645514175649L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514175649L + "'", long20 == 1645514175649L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514175649L + "'", long36 == 1645514175649L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray54);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime11.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        boolean boolean36 = dateTime34.isBefore((-1L));
        int int37 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int39 = dateTime34.get(dateTimeFieldType38);
        java.lang.String str40 = dateTime34.toString();
        org.joda.time.DateTime dateTime42 = dateTime34.withYearOfEra(9);
        org.joda.time.DateTime dateTime44 = dateTime34.plusHours(20);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime44);
        int int46 = mutablePeriod45.getHours();
        mutablePeriod45.clear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175682L + "'", long2 == 1645514175682L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:15.682+10:22" + "'", str9, "2022-02-22T17:38:15.682+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:15.682+10:22" + "'", str22, "2022-02-22T17:38:15.682+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:38:15.682+10:22" + "'", str32, "2022-02-22T17:38:15.682+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:15.010+10:22" + "'", str40, "2022-02-22T17:38:15.010+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(63428654);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Period period24 = period16.minusDays((int) (short) 10);
        org.joda.time.Duration duration25 = period16.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime27.hourOfDay();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period41 = duration39.toPeriod();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        boolean boolean48 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = new org.joda.time.DurationFieldType[] { durationFieldType49 };
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.forFields(durationFieldTypeArray50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.forFields(durationFieldTypeArray50);
        org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) duration45, periodType52);
        org.joda.time.Period period54 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27, periodType52);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod57 = mutablePeriod56.copy();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:15.905+10:22" + "'", str2, "2022-02-22T17:38:15.905+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:15.905+10:22" + "'", str9, "2022-02-22T17:38:15.905+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:15.906+10:22" + "'", str28, "2022-02-22T17:38:15.906+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutablePeriod57);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        long long9 = durationField8.getUnitMillis();
        long long10 = durationField8.getUnitMillis();
        int int13 = durationField8.getValue((long) 100, 1645513759601L);
        long long16 = durationField8.getValueAsLong(1645513768298L, 1645513766081L);
        long long19 = durationField8.subtract(0L, 3);
        boolean boolean20 = durationField8.isSupported();
        long long23 = durationField8.getValueAsLong(1645513888316L, 1645513959636L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514175990L + "'", long2 == 1645514175990L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31556952000L + "'", long9 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31556952000L + "'", long10 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-94694400000L) + "'", long19 == (-94694400000L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str15 = dateTimeZone13.getNameKey(1645513759301L);
        int int17 = dateTimeZone13.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime10.toMutableDateTime(dateTimeZone13);
        java.lang.String str19 = dateTimeZone13.getID();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone13.getShortName(1645513759601L, locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(63285024, 25880930, 63269245, 63243060, 63252437, 63142, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63243060 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:16.015+10:22" + "'", str8, "2022-02-22T17:38:16.015+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37320000 + "'", int17 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:22" + "'", str19, "+10:22");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone4);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.Period period10 = period6.plusWeeks((int) (short) -1);
        org.joda.time.Period period12 = period6.minusMillis(4);
        org.joda.time.Interval interval13 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        java.lang.String str15 = chronology14.toString();
        org.joda.time.DurationField durationField16 = durationFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField19 = chronology14.days();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+10:22]" + "'", str15, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        boolean boolean18 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration9, periodType19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period23.plusHours(4);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.withDurationAdded(readableDuration37, 6);
        boolean boolean40 = period23.equals((java.lang.Object) dateTime34);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime67 = dateTime65.plusSeconds((int) (byte) 10);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime67.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay70 = dateTime67.toTimeOfDay();
        org.joda.time.DateTime dateTime72 = dateTime67.minusMonths(63109642);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime67, periodType73);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime34, periodType73);
        int int76 = dateTime34.getDayOfMonth();
        org.joda.time.DateTime dateTime78 = dateTime34.withMillisOfDay(63264846);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = dateTime34.withWeekOfWeekyear(63491204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63491204 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514176102L + "'", long2 == 1645514176102L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:16.102+10:22" + "'", str28, "2022-02-22T17:38:16.102+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:38:16.102+10:22" + "'", str45, "2022-02-22T17:38:16.102+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514176102L + "'", long63 == 1645514176102L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 63506 + "'", int69 == 63506);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.centuryOfEra();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean8 = dateTime4.isSupported(dateTimeFieldType7);
        java.lang.String str9 = dateTimeFieldType7.getName();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalTime localTime35 = dateTime32.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 8, periodType43, chronology50);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration41, chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.millisOfSecond();
        org.joda.time.Period period56 = new org.joda.time.Period(1645513783355L, chronology50);
        boolean boolean57 = localTime35.equals((java.lang.Object) chronology50);
        org.joda.time.DurationField durationField58 = chronology50.millis();
        boolean boolean59 = dateTimeFieldType7.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField60 = chronology50.yearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514176155L + "'", long2 == 1645514176155L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:16.155+10:22" + "'", str14, "2022-02-22T17:38:16.155+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514176155L + "'", long28 == 1645514176155L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths(3);
        org.joda.time.DateTime dateTime14 = dateTime10.plusSeconds(9);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateMidnight15);
        java.lang.String str17 = interval16.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514176195L + "'", long2 == 1645514176195L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514176195L + "'", long8 == 1645514176195L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-01T00:00:00.000+10:22/2022-05-03T00:00:00.000+10:22" + "'", str17, "2022-01-01T00:00:00.000+10:22/2022-05-03T00:00:00.000+10:22");
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DurationField durationField17 = chronology6.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology6.minutes();
        long long22 = durationField19.subtract(1645513771467L, 25812540);
        java.lang.String str23 = durationField19.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 96761371467L + "'", long22 == 96761371467L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DurationField[minutes]" + "'", str23, "DurationField[minutes]");
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property12.getAsShortText(locale14);
        org.joda.time.DateTime dateTime17 = property12.addWrapFieldToCopy(63102368);
        int int18 = dateTime17.getMillisOfDay();
        boolean boolean20 = dateTime17.isEqual(1645513792010L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        java.util.Locale locale26 = null;
        int int27 = property24.getMaximumTextLength(locale26);
        java.util.Locale locale28 = null;
        java.lang.String str29 = property24.getAsShortText(locale28);
        org.joda.time.Interval interval30 = property24.toInterval();
        int int31 = property24.get();
        org.joda.time.DateTime dateTime32 = property24.roundCeilingCopy();
        org.joda.time.Duration duration34 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.Duration duration49 = duration36.withMillis(1645513760253L);
        org.joda.time.Duration duration50 = duration36.toDuration();
        org.joda.time.Duration duration51 = duration34.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration51, periodType52);
        org.joda.time.Duration duration55 = duration51.minus(1645513802226L);
        org.joda.time.Duration duration57 = duration51.withMillis(1645513798198L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes(1645513769549L);
        boolean boolean60 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration57);
        mutablePeriod61.addMinutes(63433633);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:16.241+10:22" + "'", str2, "2022-02-22T17:38:16.241+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 63496010 + "'", int18 == 63496010);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514176241L + "'", long23 == 1645514176241L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:38:16.241+10:22" + "'", str39, "2022-02-22T17:38:16.241+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(63387483);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        boolean boolean22 = interval18.isAfterNow();
        boolean boolean24 = interval18.isBefore(1645513856568L);
        org.joda.time.Chronology chronology25 = interval18.getChronology();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.dayOfMonth();
        java.lang.String str19 = dateTimeField17.getAsShortText(1645513921623L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        java.lang.String str7 = periodType4.toString();
        java.lang.String str8 = periodType4.getName();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760165L, periodType4);
        int int10 = mutablePeriod9.getWeeks();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        mutablePeriod9.add((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period20 = period17.minusYears(3);
        org.joda.time.Period period22 = period17.withDays((int) 'a');
        int int23 = period22.getMinutes();
        int int24 = period22.size();
        org.joda.time.PeriodType periodType25 = period22.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType27 = periodType25.getFieldType(4);
        org.joda.time.PeriodType periodType28 = periodType25.withHoursRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period(1645513873810L, periodType25);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PeriodType[Time]" + "'", str7, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Time" + "'", str8, "Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        org.joda.time.DateTime dateTime23 = dateTime15.minus(1645513766926L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTimeISO();
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime32);
        mutablePeriod34.addMillis(25849298);
        int int37 = mutablePeriod34.getYears();
        int int38 = mutablePeriod34.getSeconds();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:16.463+10:22" + "'", str9, "2022-02-22T17:38:16.463+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:16.463+10:22" + "'", str26, "2022-02-22T17:38:16.463+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        java.lang.String str9 = property3.getAsText();
        org.joda.time.DateTime dateTime10 = property3.roundHalfFloorCopy();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514176563L + "'", long2 == 1645514176563L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        mutableInterval3.setChronology(chronology21);
        org.joda.time.Period period34 = org.joda.time.Period.years((int) '#');
        org.joda.time.Period period36 = period34.minusMinutes(63100366);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        java.util.Locale locale42 = null;
        int int43 = property40.getMaximumTextLength(locale42);
        java.lang.String str44 = property40.getName();
        java.util.Locale locale45 = null;
        int int46 = property40.getMaximumTextLength(locale45);
        org.joda.time.DateTime dateTime47 = property40.getDateTime();
        org.joda.time.DateTime dateTime48 = property40.roundCeilingCopy();
        org.joda.time.Duration duration49 = period34.toDurationFrom((org.joda.time.ReadableInstant) dateTime48);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology51 = mutableInterval3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime.Property property55 = dateTime53.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = interval56.contains(readableInstant57);
        boolean boolean59 = interval56.isBeforeNow();
        org.joda.time.DateTime dateTime60 = interval56.getStart();
        org.joda.time.Interval interval61 = interval56.toInterval();
        boolean boolean62 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) interval61);
        long long63 = interval61.getEndMillis();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod();
        mutablePeriod65.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        boolean boolean72 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        boolean boolean78 = mutableInterval68.contains((org.joda.time.ReadableInstant) dateTime77);
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval();
        long long83 = mutableInterval82.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        boolean boolean86 = mutableInterval82.overlaps((org.joda.time.ReadableInterval) mutableInterval84);
        java.lang.Object obj87 = mutableInterval82.clone();
        org.joda.time.Chronology chronology88 = mutableInterval82.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(1645513760253L, chronology88);
        org.joda.time.DateTimeField dateTimeField91 = chronology88.year();
        mutablePeriod65.add(1645513767484L, chronology88);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime((java.lang.Object) 1645513773283L, chronology88);
        int int94 = dateTime93.getWeekyear();
        org.joda.time.Interval interval95 = interval61.withStart((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514176582L + "'", long10 == 1645514176582L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514176582L + "'", long39 == 1645514176582L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "yearOfEra" + "'", str44, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645514176582L + "'", long54 == 1645514176582L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1672493880000L + "'", long63 == 1672493880000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645514176582L + "'", long75 == 1645514176582L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2022 + "'", int94 == 2022);
        org.junit.Assert.assertNotNull(interval95);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes(3);
        org.joda.time.Period period6 = period4.plusWeeks(17);
        org.joda.time.Period period8 = period6.minusMillis(59);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withMillisOfDay(52);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod();
        int int34 = mutablePeriod33.getSeconds();
        mutablePeriod33.addDays((int) (byte) 1);
        int int37 = mutablePeriod33.size();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType41 = periodType40.withYearsRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 3, 1645513762121L, periodType41, chronology49);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str53 = durationFieldType52.toString();
        boolean boolean54 = periodType41.isSupported(durationFieldType52);
        mutablePeriod33.add(durationFieldType52, 63111649);
        org.joda.time.DateTime dateTime58 = dateTime32.withFieldAdded(durationFieldType52, 1439);
        boolean boolean59 = period8.isSupported(durationFieldType52);
        int int60 = period8.getYears();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:16.657+10:22" + "'", str18, "2022-02-22T17:38:16.657+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514176657L + "'", long28 == 1645514176657L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "seconds" + "'", str53, "seconds");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        org.joda.time.Interval interval8 = property3.toInterval();
        java.lang.String str9 = property3.getAsShortText();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514176779L + "'", long2 == 1645514176779L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        int int26 = dateTime25.getYearOfEra();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration40 = duration29.minus(0L);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration47 = duration44.plus((long) 8);
        org.joda.time.Duration duration49 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        boolean boolean62 = property53.equals((java.lang.Object) dateTime55);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime55);
        int int64 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime66 = dateTime25.minusMinutes(115200000);
        int int67 = dateTime66.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:16.804+10:22" + "'", str4, "2022-02-22T17:38:16.804+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514176804L + "'", long15 == 1645514176804L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63496804 + "'", int19 == 63496804);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63496804 + "'", int22 == 63496804);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:38:16.804+10:22" + "'", str32, "2022-02-22T17:38:16.804+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514176804L + "'", long52 == 1645514176804L);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:38:16.804+10:22" + "'", str56, "2022-02-22T17:38:16.804+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1058 + "'", int67 == 1058);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        boolean boolean12 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withZoneRetainFields(dateTimeZone30);
        int int32 = dateTime28.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime();
        org.joda.time.Period period34 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period36 = period34.minusSeconds(63090717);
        int[] intArray37 = period34.getValues();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime42.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight50 = dateTime48.toDateMidnight();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(1645513791964L);
        mutableInterval51.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:38:16.864+10:22" + "'", str22, "2022-02-22T17:38:16.864+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 17 + "'", int32 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 1, 40, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:16.864+10:22" + "'", str40, "2022-02-22T17:38:16.864+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(duration53);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withSecondOfMinute(63430739);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63430739 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        int int21 = dateTime17.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime17.toMutableDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Interval interval25 = mutableInterval0.toInterval();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime37.year();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.DateTime dateTime41 = property38.setCopy(40);
        boolean boolean42 = interval25.contains((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:38:16.946+10:22" + "'", str11, "2022-02-22T17:38:16.946+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(interval25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:16.947+10:22" + "'", str28, "2022-02-22T17:38:16.947+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        java.lang.String str17 = property16.getName();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration22);
        boolean boolean37 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes(0);
        boolean boolean56 = dateTime42.isEqual((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean57 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableDuration0, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Period period69 = duration60.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period71 = period69.withYears(52);
        org.joda.time.Period period73 = period69.multipliedBy(2022);
        org.joda.time.Period period75 = period73.plusYears(17);
        mutableInterval58.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period75);
        java.lang.Object obj77 = mutableInterval58.clone();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514176983L + "'", long15 == 1645514176983L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:16.983+10:22" + "'", str28, "2022-02-22T17:38:16.983+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:16.983+10:22" + "'", str40, "2022-02-22T17:38:16.983+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:38:16.983+10:22" + "'", str47, "2022-02-22T17:38:16.983+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration60);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T17:38:16.983+10:22" + "'", str63, "2022-02-22T17:38:16.983+10:22");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(obj77);
// flaky:         org.junit.Assert.assertEquals(obj77.toString(), "2005-02-20T09:28:16.010+10:22/2022-02-22T17:38:16.010+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "2005-02-20T09:28:16.010+10:22/2022-02-22T17:38:16.010+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "2005-02-20T09:28:16.010+10:22/2022-02-22T17:38:16.010+10:22");
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 8, periodType7, chronology14);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration5, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.millisOfSecond();
        org.joda.time.Period period20 = new org.joda.time.Period(1645513783355L, chronology14);
        org.joda.time.DurationField durationField21 = chronology14.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = durationField21.getDifference(1645514061791L, 1645514028823L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Interval interval15 = interval13.gap(readableInterval14);
        org.joda.time.Interval interval17 = interval13.withEndMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Interval interval25 = interval13.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        boolean boolean26 = interval13.containsNow();
        org.joda.time.Interval interval27 = interval13.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval49);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) interval49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.setMonths((int) ' ');
        java.lang.Object obj55 = mutablePeriod52.clone();
        mutablePeriod52.setDays(40);
        mutableInterval29.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.Chronology chronology59 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.minuteOfHour();
        org.joda.time.Chronology chronology62 = chronology59.withUTC();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 63138623, chronology59);
        org.joda.time.Interval interval64 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod63);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514177166L + "'", long2 == 1645514177166L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "P32M40D");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval64);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = interval4.contains(readableInstant5);
        boolean boolean7 = interval4.isBeforeNow();
        org.joda.time.DateTime dateTime8 = interval4.getStart();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Seconds seconds32 = period31.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod33 = period31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period36 = period31.withFieldAdded(durationFieldType34, (int) (short) -1);
        org.joda.time.Interval interval37 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval38 = interval4.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Duration duration40 = interval38.toDuration();
        long long41 = duration40.getStandardMinutes();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514177211L + "'", long2 == 1645514177211L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:38:17.211+10:22" + "'", str25, "2022-02-22T17:38:17.211+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        java.lang.String str8 = durationField7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = duration21.toPeriod();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        boolean boolean30 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21, periodType31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        org.joda.time.Interval interval44 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.Period period47 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType31, chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        long long55 = dateTimeZone53.convertUTCToLocal(1645513763679L);
        java.lang.String str57 = dateTimeZone53.getShortName(1645513769549L);
        long long59 = dateTimeZone53.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology60 = chronology45.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) 1645513768836L, chronology60);
        org.joda.time.DurationField durationField62 = chronology60.months();
        int int63 = durationField7.compareTo(durationField62);
        org.joda.time.DurationFieldType durationFieldType64 = durationField62.getType();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DurationField[minutes]" + "'", str8, "DurationField[minutes]");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514177241L + "'", long14 == 1645514177241L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+10:22]" + "'", str46, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514177241L + "'", long50 == 1645514177241L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645551083679L + "'", long55 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:22" + "'", str57, "+10:22");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645513786393L + "'", long59 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType64);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.joda.time.Period period1 = new org.joda.time.Period(1645514072060L);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = duration8.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        boolean boolean27 = dateTime25.isBefore((-1L));
        int int28 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        java.lang.String str30 = periodType29.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 8, periodType37, chronology44);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration35, chronology44);
        int int48 = mutablePeriod33.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = durationFieldType50.getField(chronology57);
        mutablePeriod33.add(durationFieldType50, 0);
        boolean boolean63 = periodType29.isSupported(durationFieldType50);
        org.joda.time.Period period64 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime25, periodType29);
        org.joda.time.MutablePeriod mutablePeriod65 = period64.toMutablePeriod();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:17.296+10:22" + "'", str13, "2022-02-22T17:38:17.296+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:17.296+10:22" + "'", str23, "2022-02-22T17:38:17.296+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Millis" + "'", str30, "Millis");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(mutablePeriod65);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType34 = period32.getPeriodType();
        org.joda.time.Period period36 = period32.plusMonths(63247935);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) period32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime22 = mutableInterval0.getStart();
        org.joda.time.DateTime dateTime23 = mutableInterval0.getStart();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        boolean boolean25 = mutableInterval24.containsNow();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withEra((int) (byte) 1);
        boolean boolean31 = mutableInterval24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        boolean boolean42 = mutableInterval32.contains((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime41.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime44.getMillisOfDay();
        org.joda.time.DateTime.Property property47 = dateTime44.yearOfEra();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period58 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType67 = periodType66.withYearsRemoved();
        org.joda.time.PeriodType periodType68 = periodType67.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 3, 1645513762121L, periodType67, chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.dayOfMonth();
        int int79 = dateTime60.get(dateTimeField78);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType81 = periodType80.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime60, periodType80);
        org.joda.time.DateTime.Property property83 = dateTime60.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone84);
        long long86 = dateTime85.getMillis();
        org.joda.time.DateTime.Property property87 = dateTime85.yearOfEra();
        org.joda.time.Interval interval88 = property87.toInterval();
        java.util.Locale locale89 = null;
        int int90 = property87.getMaximumTextLength(locale89);
        java.lang.String str91 = property87.toString();
        org.joda.time.DurationField durationField92 = property87.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property87.getFieldType();
        org.joda.time.Interval interval94 = property87.toInterval();
        org.joda.time.DateTime dateTime95 = property87.roundHalfEvenCopy();
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime95);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:17.410+10:22" + "'", str28, "2022-02-22T17:38:17.410+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514177410L + "'", long39 == 1645514177410L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 63497410 + "'", int43 == 63497410);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 63497410 + "'", int46 == 63497410);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T17:38:17.410+10:22" + "'", str52, "2022-02-22T17:38:17.410+10:22");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:38:17.410+10:22" + "'", str61, "2022-02-22T17:38:17.410+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(property83);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645514177410L + "'", long86 == 1645514177410L);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Property[yearOfEra]" + "'", str91, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645513759301L);
        java.lang.String str18 = dateTimeZone14.getName(1645513762160L);
        java.util.TimeZone timeZone19 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.minus(1645513768963L);
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        int int28 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime24);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone14.getShortName(1645513812242L, locale30);
        org.joda.time.DateTime dateTime32 = dateTime10.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime34 = dateTime32.minus(1645513788116L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:17.457+10:22" + "'", str2, "2022-02-22T17:38:17.457+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:22" + "'", str18, "+10:22");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514177457L + "'", long22 == 1645514177457L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37320000 + "'", int28 == 37320000);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:22" + "'", str31, "+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTime dateTime9 = dateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(52);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        int int22 = dateTime20.getMonthOfYear();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray26 = new org.joda.time.DurationFieldType[] { durationFieldType25 };
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.forFields(durationFieldTypeArray26);
        org.joda.time.PeriodType periodType28 = periodType27.withSecondsRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20, periodType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        boolean boolean41 = dateTime38.isAfterNow();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.millisOfSecond();
        org.joda.time.DateTime dateTime51 = dateTime38.withChronology(chronology48);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1645513808089L, periodType28, chronology48);
        org.joda.time.DurationField durationField53 = chronology48.centuries();
        org.joda.time.DurationField durationField54 = chronology48.eras();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T17:38:17.487+10:22" + "'", str3, "2022-02-22T17:38:17.487+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514177487L + "'", long18 == 1645514177487L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(durationFieldTypeArray26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:38:17.487+10:22" + "'", str32, "2022-02-22T17:38:17.487+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.Interval interval11 = property9.toInterval();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:17.526+10:22" + "'", str2, "2022-02-22T17:38:17.526+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 38 + "'", int8 == 38);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType8 = periodType7.withMinutesRemoved();
        java.lang.String str9 = periodType7.getName();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513760253L, chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.year();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 8, periodType22, chronology29);
        long long34 = chronology17.add((org.joda.time.ReadablePeriod) mutablePeriod31, (long) 10, 6);
        org.joda.time.Period period35 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType7, chronology17);
        org.joda.time.DateTimeField dateTimeField36 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology17.weekyearOfCentury();
        org.joda.time.Period period38 = new org.joda.time.Period(1645513768680L, 1645513773443L, periodType4, chronology17);
        org.joda.time.PeriodType periodType39 = periodType4.withDaysRemoved();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfEra();
        org.joda.time.Chronology chronology48 = chronology46.withUTC();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1645513796328L, 1645513776688L, periodType39, chronology48);
        org.joda.time.PeriodType periodType51 = periodType39.withWeeksRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.DurationField durationField60 = dateTimeField59.getDurationField();
        org.joda.time.DurationFieldType durationFieldType61 = durationField60.getType();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod();
        mutablePeriod62.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = dateTime71.plusWeeks((int) (byte) 10);
        boolean boolean75 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime74);
        mutablePeriod62.setPeriod((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        boolean boolean81 = mutableInterval77.overlaps((org.joda.time.ReadableInterval) mutableInterval79);
        java.lang.Object obj82 = mutableInterval77.clone();
        org.joda.time.Chronology chronology83 = mutableInterval77.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.yearOfEra();
        org.joda.time.Chronology chronology85 = chronology83.withUTC();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod();
        mutablePeriod86.setMonths((int) ' ');
        java.lang.Object obj89 = mutablePeriod86.clone();
        long long92 = chronology83.add((org.joda.time.ReadablePeriod) mutablePeriod86, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField93 = chronology83.weekyear();
        mutableInterval65.setChronology(chronology83);
        org.joda.time.DurationField durationField95 = durationFieldType61.getField(chronology83);
        org.joda.time.DateTimeField dateTimeField96 = chronology83.centuryOfEra();
        org.joda.time.DurationField durationField97 = chronology83.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((java.lang.Object) periodType51, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Months" + "'", str9, "Months");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645514177548L + "'", long72 == 1645514177548L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "P32M");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1851379200000L + "'", long92 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(durationField97);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 63114399);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.Days days3 = duration1.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 63114399L + "'", long2 == 63114399L);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property64 = dateTime48.secondOfMinute();
        org.joda.time.DateTime dateTime66 = dateTime48.plusDays((int) (byte) 100);
        org.joda.time.DateTime.Property property67 = dateTime66.yearOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:17.662+10:22" + "'", str5, "2022-02-22T17:38:17.662+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:17.662+10:22" + "'", str18, "2022-02-22T17:38:17.662+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:17.662+10:22" + "'", str33, "2022-02-22T17:38:17.662+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:38:17.662+10:22" + "'", str46, "2022-02-22T17:38:17.662+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:38:17.662+10:22" + "'", str53, "2022-02-22T17:38:17.662+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        boolean boolean22 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone27);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.Period period33 = period29.plusWeeks((int) (short) -1);
        org.joda.time.Period period35 = period29.minusMillis(4);
        org.joda.time.Interval interval36 = interval28.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.Period period39 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType23, chronology37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime.Property property43 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        long long47 = dateTimeZone45.convertUTCToLocal(1645513763679L);
        java.lang.String str49 = dateTimeZone45.getShortName(1645513769549L);
        long long51 = dateTimeZone45.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology52 = chronology37.withZone(dateTimeZone45);
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period53.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        org.joda.time.Period period58 = period55.plusMillis((int) (short) 100);
        int int59 = period55.getMillis();
        int[] intArray61 = chronology37.get((org.joda.time.ReadablePeriod) period55, (long) (-6));
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1645513765710L, chronology37);
        org.joda.time.DateTimeField dateTimeField63 = chronology37.halfdayOfDay();
        int int66 = dateTimeField63.getDifference(1645513833675L, 1645513795026L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514177699L + "'", long6 == 1645514177699L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[+10:22]" + "'", str38, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514177700L + "'", long42 == 1645514177700L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645551083679L + "'", long47 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:22" + "'", str49, "+10:22");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645513786393L + "'", long51 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, -6]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period7 = period2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime12.hourOfDay();
        org.joda.time.DateTime.Property property17 = dateTime12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27, periodType37);
        long long39 = duration27.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime.Property property43 = dateTime41.yearOfEra();
        org.joda.time.Interval interval44 = property43.toInterval();
        java.util.Locale locale45 = null;
        int int46 = property43.getMaximumTextLength(locale45);
        java.lang.String str47 = property43.getName();
        java.util.Locale locale48 = null;
        int int49 = property43.getMaximumTextLength(locale48);
        org.joda.time.DateTime dateTime50 = property43.getDateTime();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        boolean boolean53 = periodType51.equals((java.lang.Object) 0.0f);
        org.joda.time.Period period54 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50, periodType51);
        org.joda.time.DateTime dateTime56 = dateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 63119929);
        org.joda.time.Period period57 = period7.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period58 = period7.negated();
        java.lang.String str59 = period7.toString();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:17.763+10:22" + "'", str10, "2022-02-22T17:38:17.763+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514177763L + "'", long20 == 1645514177763L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100000L + "'", long39 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514177763L + "'", long42 == 1645514177763L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "yearOfEra" + "'", str47, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT-1S" + "'", str59, "PT-1S");
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        boolean boolean11 = mutableInterval0.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        boolean boolean25 = mutableInterval12.equals((java.lang.Object) 17);
        boolean boolean26 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(25760283);
        int int38 = dateTime37.getYearOfCentury();
        mutableInterval12.setStart((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = dateTime37.isAfter(readableInstant40);
        org.joda.time.DateTime dateTime43 = dateTime37.withMillis(1645513777206L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.withChronology(chronology44);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:38:17.821+10:22" + "'", str29, "2022-02-22T17:38:17.821+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) '4');
        int int16 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime39 = dateTime33.withField(dateTimeFieldType37, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = dateTime33.toString(dateTimeFormatter40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (byte) 10);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime53);
        long long55 = duration45.getStandardDays();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration45);
        boolean boolean57 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514177851L + "'", long7 == 1645514177851L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 63507 + "'", int13 == 63507);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:17.851+10:22" + "'", str27, "2022-02-22T17:38:17.851+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:38:17.851+10:22" + "'", str41, "2022-02-22T17:38:17.851+10:22");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514177851L + "'", long49 == 1645514177851L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Interval interval27 = interval11.withEndMillis(1645513767961L);
        java.lang.String str28 = interval11.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514177926L + "'", long2 == 1645514177926L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22" + "'", str28, "2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22");
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime25 = dateTime17.withZone(dateTimeZone22);
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration50 = duration39.minus(0L);
        org.joda.time.DateTime dateTime52 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (short) 0);
        long long53 = duration50.getStandardSeconds();
        org.joda.time.DateTime dateTime54 = dateTime25.plus((org.joda.time.ReadableDuration) duration50);
        int int55 = dateTime54.getSecondOfDay();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 3, 1645513762121L, periodType59, chronology67);
        org.joda.time.PeriodType periodType70 = periodType59.withMinutesRemoved();
        org.joda.time.PeriodType periodType71 = periodType70.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime54, periodType71);
        org.joda.time.PeriodType periodType73 = periodType71.withMonthsRemoved();
        org.joda.time.PeriodType periodType74 = periodType71.withWeeksRemoved();
        java.lang.String str75 = periodType74.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:17.999+10:22" + "'", str2, "2022-02-22T17:38:17.999+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514178000L + "'", long15 == 1645514178000L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:38:18.000+10:22" + "'", str29, "2022-02-22T17:38:18.000+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:38:18.000+10:22" + "'", str42, "2022-02-22T17:38:18.000+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 63598 + "'", int55 == 63598);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PeriodType[HoursNoHours]" + "'", str75, "PeriodType[HoursNoHours]");
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime46 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) 8);
        org.joda.time.Instant instant56 = instant48.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Instant instant58 = instant56.minus(1645513769274L);
        int int59 = dateTime40.compareTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType68 = periodType67.withYearsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        java.lang.Object obj75 = mutableInterval70.clone();
        org.joda.time.Chronology chronology76 = mutableInterval70.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 3, 1645513762121L, periodType68, chronology76);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.dayOfMonth();
        int int80 = dateTime61.get(dateTimeField79);
        boolean boolean81 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = dateTime40.withMinuteOfHour(63421455);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63421455 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:18.046+10:22" + "'", str34, "2022-02-22T17:38:18.046+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:38:18.046+10:22" + "'", str62, "2022-02-22T17:38:18.046+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        long long27 = duration17.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime42 = interval39.getStart();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        boolean boolean46 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 3, 1645513762121L, periodType50, chronology58);
        org.joda.time.Period period61 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType50);
        org.joda.time.Interval interval62 = interval11.withStart((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property63 = dateTime44.dayOfMonth();
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        org.joda.time.DurationField durationField66 = property63.getLeapDurationField();
        org.joda.time.DateTime dateTime67 = property63.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTime dateTime72 = dateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology80);
        org.joda.time.DateTime dateTime82 = dateTime76.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateTime dateTime83 = dateTime74.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Days days84 = period81.toStandardDays();
        org.joda.time.Period period86 = period81.multipliedBy(10);
        int int87 = period86.getSeconds();
        org.joda.time.Period period89 = period86.minusWeeks(4);
        org.joda.time.Period period91 = period89.withSeconds(63118458);
        org.joda.time.DateTime dateTime92 = dateTime67.plus((org.joda.time.ReadablePeriod) period91);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514178082L + "'", long2 == 1645514178082L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:38:18.082+10:22" + "'", str20, "2022-02-22T17:38:18.082+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100000L + "'", long27 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514178082L + "'", long30 == 1645514178082L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514178082L + "'", long45 == 1645514178082L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNull(durationField66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514178082L + "'", long70 == 1645514178082L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-22T17:38:18.082+10:22" + "'", str77, "2022-02-22T17:38:18.082+10:22");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(days84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1645513864060L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours2 = duration1.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513864060");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime26.minusMonths(63109642);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime26, periodType32);
        boolean boolean35 = duration14.equals((java.lang.Object) "2022-02-22T07:09:23.364Z");
        org.joda.time.Period period36 = duration14.toPeriod();
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = period36.get(durationFieldType37);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:18.206+10:22" + "'", str4, "2022-02-22T17:38:18.206+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514178206L + "'", long22 == 1645514178206L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 63508 + "'", int28 == 63508);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        mutablePeriod2.addMonths(52);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(chronology51);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime50.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours((int) ' ');
        org.joda.time.DateMidnight dateMidnight59 = dateTime58.toDateMidnight();
        boolean boolean60 = dateMidnight59.isEqualNow();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period71 = duration62.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property72 = dateTime64.weekyear();
        org.joda.time.DateTime dateTime74 = property72.setCopy(3);
        org.joda.time.DateTime dateTime76 = property72.setCopy(0);
        org.joda.time.DateTime dateTime77 = dateTime76.toDateTimeISO();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableInstant) dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:18.233+10:22" + "'", str5, "2022-02-22T17:38:18.233+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:18.233+10:22" + "'", str18, "2022-02-22T17:38:18.233+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:18.233+10:22" + "'", str33, "2022-02-22T17:38:18.233+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T17:38:18.233+10:22" + "'", str48, "2022-02-22T17:38:18.233+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:38:18.233+10:22" + "'", str65, "2022-02-22T17:38:18.233+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes((int) (byte) 0);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTime dateTime18 = dateTime8.toDateTime(chronology15);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime38, periodType39);
        org.joda.time.Duration duration42 = duration31.plus(1645513768963L);
        org.joda.time.Duration duration44 = duration42.withMillis(1645513769945L);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration58 = duration47.minus(0L);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1L), 1L, periodType63, chronology64);
        java.lang.String str66 = periodType63.toString();
        java.lang.String str67 = periodType63.getName();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(1645513760165L, periodType63);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant59, periodType63);
        mutableInterval45.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology71 = mutableInterval45.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval45.setEndMillis(1645514001641L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:18.422+10:22" + "'", str2, "2022-02-22T17:38:18.422+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:38:18.422+10:22" + "'", str23, "2022-02-22T17:38:18.422+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:18.422+10:22" + "'", str34, "2022-02-22T17:38:18.422+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:38:18.422+10:22" + "'", str50, "2022-02-22T17:38:18.422+10:22");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[Time]" + "'", str66, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Time" + "'", str67, "Time");
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '#');
        boolean boolean3 = period1.equals((java.lang.Object) "2022-02-22T17:31:39.743+10:22");
        org.joda.time.Period period5 = period1.withMinutes(63297681);
        org.joda.time.Period period7 = period1.withSeconds(25812654);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime8 = dateTime4.minusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, readableDuration9, periodType10);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        boolean boolean26 = mutableInterval19.isAfter(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval38 = interval31.toInterval();
        org.joda.time.Interval interval40 = interval38.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime41 = interval38.getStart();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval46 = interval38.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        mutableInterval48.setInterval(100000L, 1645513759601L);
        long long56 = mutableInterval48.getStartMillis();
        org.joda.time.Duration duration57 = mutableInterval48.toDuration();
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.minusSeconds((int) (short) 1);
        org.joda.time.Period period62 = period58.plusMinutes(3);
        org.joda.time.Period period64 = period62.plusWeeks(17);
        org.joda.time.Duration duration65 = period64.toStandardDuration();
        mutableInterval48.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant47, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval68 = interval38.overlap((org.joda.time.ReadableInterval) mutableInterval67);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) interval38);
        boolean boolean70 = dateTime4.equals((java.lang.Object) interval38);
        org.joda.time.Chronology chronology71 = interval38.getChronology();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514178473L + "'", long2 == 1645514178473L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514178473L + "'", long29 == 1645514178473L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514178473L + "'", long44 == 1645514178473L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100000L + "'", long56 == 100000L);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        java.lang.String str13 = dateTimeField10.getAsShortText(1645514043232L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((long) 9);
        int int30 = dateTimeField26.getLeapAmount(1645513763885L);
        int int31 = dateTime15.get(dateTimeField26);
        int int32 = dateTimeField26.getMaximumValue();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514178561L + "'", long2 == 1645514178561L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:18.561+10:22" + "'", str9, "2022-02-22T17:38:18.561+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1058 + "'", int31 == 1058);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1439 + "'", int32 == 1439);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        java.lang.String str28 = periodType25.toString();
        java.lang.String str29 = periodType25.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645513760165L, periodType25);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant21, periodType25);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration45 = duration9.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period48 = duration47.toPeriod();
        int int49 = duration9.compareTo((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes(0);
        boolean boolean68 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime.Property property69 = dateTime54.year();
        org.joda.time.LocalDateTime localDateTime70 = dateTime54.toLocalDateTime();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType72 = periodType71.withMinutesRemoved();
        org.joda.time.Period period73 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime54, periodType72);
        org.joda.time.PeriodType periodType74 = periodType72.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(63422597, (int) (short) -1, 63279103, 0, 63212, 25846182, 63298597, 63344812, periodType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:18.657+10:22" + "'", str12, "2022-02-22T17:38:18.657+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Time]" + "'", str28, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Time" + "'", str29, "Time");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514178657L + "'", long39 == 1645514178657L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T17:38:18.657+10:22" + "'", str52, "2022-02-22T17:38:18.657+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T17:38:18.657+10:22" + "'", str59, "2022-02-22T17:38:18.657+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.setMonths((int) ' ');
        java.lang.Object obj14 = mutablePeriod11.clone();
        long long17 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod11, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology8);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = chronology8.withUTC();
        org.joda.time.DurationField durationField22 = chronology21.centuries();
        boolean boolean23 = durationField22.isPrecise();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "P32M");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1851379200000L + "'", long17 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal(1645513763679L);
        java.lang.String str10 = dateTimeZone6.getShortName(1645513769549L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 25774, dateTimeZone6);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(0);
        org.joda.time.LocalTime localTime14 = dateTime11.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone17);
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.Period period23 = period19.plusWeeks((int) (short) -1);
        org.joda.time.Period period25 = period19.minusMillis(4);
        org.joda.time.Interval interval26 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.DurationField durationField44 = dateTimeField43.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        int int52 = yearMonthDay51.size();
        int[] intArray57 = new int[] { 40, 40, '#', 10 };
        int int58 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay51, intArray57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay35, (org.joda.time.ReadablePartial) yearMonthDay51);
        int int60 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay35);
        int int61 = yearMonthDay35.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime14, (org.joda.time.ReadablePartial) yearMonthDay35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514178711L + "'", long3 == 1645514178711L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645551083679L + "'", long8 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:22" + "'", str10, "+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514178712L + "'", long31 == 1645514178712L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514178712L + "'", long47 == 1645514178712L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1439 + "'", int60 == 1439);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime7.minus((org.joda.time.ReadablePeriod) period14);
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.Period period22 = period18.plusMinutes(3);
        org.joda.time.Period period24 = period22.plusWeeks(17);
        org.joda.time.Duration duration25 = period24.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = dateTimeFieldType26.isSupported(chronology27);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getRangeDurationType();
        int int30 = period24.get(durationFieldType29);
        boolean boolean31 = period14.isSupported(durationFieldType29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime41 = dateTime36.withFieldAdded(durationFieldType39, (int) '#');
        int int42 = period14.indexOf(durationFieldType39);
        int int43 = periodType0.indexOf(durationFieldType39);
        org.joda.time.PeriodType periodType44 = periodType0.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514178744L + "'", long3 == 1645514178744L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:18.744+10:22" + "'", str10, "2022-02-22T17:38:18.744+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.006S" + "'", str17, "PT0.006S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:38:18.744+10:22" + "'", str34, "2022-02-22T17:38:18.744+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(periodType44);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        boolean boolean9 = dateTime7.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean31 = mutableInterval29.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval29.setChronology(chronology38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1645513782198L, periodType1, chronology38);
        java.lang.String str41 = chronology38.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology38.getZone();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        long long46 = dateTimeZone44.convertUTCToLocal(1645513876460L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:18.771+10:22" + "'", str5, "2022-02-22T17:38:18.771+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:18.771+10:22" + "'", str12, "2022-02-22T17:38:18.771+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:38:18.771+10:22" + "'", str19, "2022-02-22T17:38:18.771+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+10:22]" + "'", str41, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645551196460L + "'", long46 == 1645551196460L);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 8, periodType33, chronology40);
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration31, chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.millisOfSecond();
        org.joda.time.Period period46 = new org.joda.time.Period(1645513783355L, chronology40);
        boolean boolean47 = localTime25.equals((java.lang.Object) chronology40);
        org.joda.time.DurationField durationField48 = chronology40.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology40.getDateTimeMillis(1645513807686L, 63372374, 63387383, 63341, 63347423);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63372374 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:18.803+10:22" + "'", str4, "2022-02-22T17:38:18.803+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514178803L + "'", long18 == 1645514178803L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.minuteOfDay();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology18);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime4.toMutableDateTime(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = chronology18.getDateTimeMillis(63284958, 50, 63375376, 63172983);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:18.830+10:22" + "'", str2, "2022-02-22T17:38:18.830+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Interval interval9 = interval7.toInterval();
        org.joda.time.Interval interval11 = interval7.withStartMillis(1645513879237L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514178854L + "'", long2 == 1645514178854L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime33.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond((int) (short) 10);
        boolean boolean45 = dateTime43.isBefore((-1L));
        int int46 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int48 = dateTime43.get(dateTimeFieldType47);
        java.lang.String str49 = dateTime43.toString();
        org.joda.time.LocalDateTime localDateTime50 = dateTime43.toLocalDateTime();
        boolean boolean51 = dateTimeZone18.isLocalDateTimeGap(localDateTime50);
        java.lang.String str52 = dateTimeZone18.getID();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long56 = dateTimeZone18.getMillisKeepLocal(dateTimeZone54, 1645514021890L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:38:18.876+10:22" + "'", str31, "2022-02-22T17:38:18.876+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:38:18.876+10:22" + "'", str41, "2022-02-22T17:38:18.876+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:18.010+10:22" + "'", str49, "2022-02-22T17:38:18.010+10:22");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:22" + "'", str52, "+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645551341790L + "'", long56 == 1645551341790L);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        java.util.Locale locale25 = null;
        int int26 = property23.getMaximumTextLength(locale25);
        java.lang.String str27 = property23.getAsString();
        org.joda.time.DateTime dateTime28 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(1244);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime35.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        boolean boolean47 = dateTime45.isBefore((-1L));
        int int48 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int50 = dateTime45.get(dateTimeFieldType49);
        java.lang.String str51 = dateTime45.toString();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime45);
        mutablePeriod52.setPeriod(1645514041010L, 1645513940352L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:18.914+10:22" + "'", str4, "2022-02-22T17:38:18.914+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514178914L + "'", long15 == 1645514178914L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63498914 + "'", int19 == 63498914);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63498914 + "'", int22 == 63498914);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1058" + "'", str27, "1058");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:38:18.914+10:22" + "'", str33, "2022-02-22T17:38:18.914+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:38:18.914+10:22" + "'", str43, "2022-02-22T17:38:18.914+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:38:18.010+10:22" + "'", str51, "2022-02-22T17:38:18.010+10:22");
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 3, 1645513762121L, periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology13.months();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        java.lang.String str24 = dateTimeZone20.getName(1645513762160L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        int int27 = dateTimeZone20.getStandardOffset(1645513761942L);
        int int29 = dateTimeZone20.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology30 = chronology13.withZone(dateTimeZone20);
        int int32 = dateTimeZone20.getOffset((long) 115200000);
        int int34 = dateTimeZone20.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone35.toString();
        long long38 = dateTimeZone20.getMillisKeepLocal(dateTimeZone35, 1645513792520L);
        java.util.TimeZone timeZone39 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.Interval interval41 = new org.joda.time.Interval(1645513812244L, 1645514106424L, dateTimeZone20);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:22" + "'", str24, "+10:22");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 37320000 + "'", int29 == 37320000);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37320000 + "'", int32 == 37320000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 37320000 + "'", int34 == 37320000);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:22" + "'", str36, "+10:22");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645513792520L + "'", long38 == 1645513792520L);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        java.lang.String str16 = chronology12.toString();
        mutablePeriod0.setPeriod(1645513766329L, chronology12);
        mutablePeriod0.setMinutes(63135);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        org.joda.time.Period period30 = period24.minusMillis(4);
        org.joda.time.Interval interval31 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Seconds seconds43 = period42.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod44 = period42.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period47 = period42.withFieldAdded(durationFieldType45, (int) (short) -1);
        org.joda.time.Interval interval48 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period63 = duration61.toPeriod();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period69 = duration67.toPeriod();
        boolean boolean70 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration67);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration61, periodType71);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone75);
        org.joda.time.Period period77 = org.joda.time.Period.ZERO;
        org.joda.time.Period period79 = period77.minusSeconds((int) (short) 1);
        org.joda.time.Period period81 = period77.plusWeeks((int) (short) -1);
        org.joda.time.Period period83 = period77.minusMillis(4);
        org.joda.time.Interval interval84 = interval76.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        java.lang.String str86 = chronology85.toString();
        org.joda.time.Period period87 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType71, chronology85);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology85);
        boolean boolean89 = interval31.isAfter((org.joda.time.ReadableInstant) dateTime88);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) interval31);
        mutablePeriod0.setYears(25774);
        int int93 = mutablePeriod0.getDays();
        mutablePeriod0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+10:22]" + "'", str16, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:38:18.978+10:22" + "'", str36, "2022-02-22T17:38:18.978+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645514178978L + "'", long54 == 1645514178978L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[+10:22]" + "'", str86, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(63370043, 63197, 406, 63412852, 17, 63313034, (-10), 63329718);
        mutablePeriod8.addHours(0);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        mutableInterval0.setEndMillis(1645513771344L);
        mutableInterval0.setInterval((long) 63129534, 1645514071092L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.util.Locale locale16 = null;
        java.lang.String str17 = property12.getAsShortText(locale16);
        org.joda.time.Interval interval18 = property12.toInterval();
        int int19 = property12.get();
        org.joda.time.DateTime dateTime20 = property12.roundCeilingCopy();
        org.joda.time.Duration duration22 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration35 = duration24.minus(0L);
        org.joda.time.Duration duration37 = duration24.withMillis(1645513760253L);
        org.joda.time.Duration duration38 = duration24.toDuration();
        org.joda.time.Duration duration39 = duration22.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration39, periodType40);
        org.joda.time.Duration duration43 = duration39.minus(1645513802226L);
        org.joda.time.Duration duration45 = duration39.withMillis(1645513798198L);
        org.joda.time.Duration duration46 = duration39.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514179175L + "'", long11 == 1645514179175L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:19.175+10:22" + "'", str27, "2022-02-22T17:38:19.175+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.joda.time.Period period2 = new org.joda.time.Period(1645513869747L, (long) 63247935);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        int int13 = dateTime12.getCenturyOfEra();
        int int14 = dateTime12.getSecondOfDay();
        boolean boolean16 = dateTime12.equals((java.lang.Object) "2022-02-22T17:31:48.549+10:22");
        org.joda.time.DateTime dateTime18 = dateTime12.plusMillis(63345142);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514179307L + "'", long7 == 1645514179307L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 63499307 + "'", int11 == 63499307);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 63499 + "'", int14 == 63499);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:25.389+10:22");
        org.joda.time.DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(1645513789159L);
        java.lang.String str6 = duration5.toString();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(1645513766979L);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra(63110);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        java.util.Locale locale27 = null;
        int int28 = property25.getMaximumTextLength(locale27);
        java.lang.String str29 = property25.toString();
        int int30 = property25.get();
        int int31 = property25.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime33.withEarlierOffsetAtOverlap();
        long long38 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime();
        java.lang.String str40 = dateTime33.toString();
        org.joda.time.DateTime dateTime42 = dateTime33.plusSeconds(999);
        boolean boolean43 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime19.secondOfDay();
        boolean boolean45 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime19);
        mutableInterval7.setStartMillis(1645513853523L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime.Property property56 = dateTime55.centuryOfEra();
        org.joda.time.DateTime dateTime58 = property56.setCopy(59);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.Period period66 = new org.joda.time.Period((-1), 63110, (int) (short) -1, 0);
        org.joda.time.MutablePeriod mutablePeriod67 = period66.toMutablePeriod();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period78 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime80 = dateTime71.minusSeconds((int) ' ');
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod67, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime82 = interval81.getStart();
        org.joda.time.DateTime.Property property83 = dateTime82.dayOfMonth();
        org.joda.time.DateTime dateTime85 = property83.addToCopy(0);
        org.joda.time.DateTime dateTime87 = dateTime85.minusMillis(63252437);
        long long88 = property61.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean89 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT5923849640972400S" + "'", str6, "PT5923849640972400S");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:19.329+10:22" + "'", str10, "2022-02-22T17:38:19.329+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514179330L + "'", long24 == 1645514179330L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[yearOfEra]" + "'", str29, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514179330L + "'", long34 == 1645514179330L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:19.330+10:22" + "'", str40, "2022-02-22T17:38:19.330+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:38:19.330+10:22" + "'", str50, "2022-02-22T17:38:19.330+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration69);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:38:19.330+10:22" + "'", str72, "2022-02-22T17:38:19.330+10:22");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 2051263849L + "'", long88 == 2051263849L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.monthOfYear();
        org.joda.time.DurationField durationField19 = chronology8.hours();
        long long21 = durationField19.getMillis(429);
        long long24 = durationField19.add(1645513802314L, 25833900);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        java.lang.String str34 = periodType31.toString();
        java.lang.String str35 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645513760165L, periodType31);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType31, chronology43);
        boolean boolean45 = dateTimeFieldType25.isSupported(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        int int52 = dateTime48.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime54.toDateTimeISO();
        int int62 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.LocalDate localDate63 = dateTime61.toLocalDate();
        org.joda.time.DateTimeField dateTimeField65 = localDate63.getField((int) (short) 0);
        int int66 = localDate63.size();
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDate63, 25774, locale68);
        org.joda.time.DurationField durationField70 = dateTimeField46.getRangeDurationField();
        long long73 = durationField70.subtract(1645513809738L, 1645513807401L);
        long long76 = durationField70.getMillis((long) 63172983, 1645513811749L);
        int int77 = durationField19.compareTo(durationField70);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514179384L + "'", long11 == 1645514179384L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1544400000L + "'", long21 == 1544400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 94647553802314L + "'", long24 == 94647553802314L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PeriodType[Time]" + "'", str34, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Time" + "'", str35, "Time");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514179384L + "'", long49 == 1645514179384L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T17:38:19.384+10:22" + "'", str55, "2022-02-22T17:38:19.384+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "25774" + "'", str69, "25774");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1643868293591262L) + "'", long73 == (-1643868293591262L));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 63172983000L + "'", long76 == 63172983000L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period19 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration21 = duration10.minus(0L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1L), 1L, periodType26, chronology27);
        java.lang.String str29 = periodType26.toString();
        java.lang.String str30 = periodType26.getName();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645513760165L, periodType26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant22, periodType26);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) (byte) 10);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration46 = duration10.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = duration50.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime62 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration50);
        int int65 = duration3.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType69 = periodType68.withMinutesRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((long) (short) 0, 1645513761744L, periodType68);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone74);
        org.joda.time.Period period76 = org.joda.time.Period.ZERO;
        org.joda.time.Period period78 = period76.minusSeconds((int) (short) 1);
        org.joda.time.Period period80 = period76.plusWeeks((int) (short) -1);
        org.joda.time.Period period82 = period76.minusMillis(4);
        org.joda.time.Interval interval83 = interval75.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1645513766040L, chronology84);
        org.joda.time.DateTimeField dateTimeField86 = chronology84.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str91 = dateTimeZone89.getNameKey(1645513759301L);
        int int93 = dateTimeZone89.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology94 = chronology84.withZone(dateTimeZone89);
        org.joda.time.Period period95 = duration36.toPeriod(periodType68, chronology94);
        org.joda.time.DateTimeField dateTimeField96 = chronology94.dayOfYear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:19.426+10:22" + "'", str13, "2022-02-22T17:38:19.426+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[Time]" + "'", str29, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Time" + "'", str30, "Time");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514179426L + "'", long40 == 1645514179426L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:38:19.426+10:22" + "'", str56, "2022-02-22T17:38:19.426+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 37320000 + "'", int93 == 37320000);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(25822374);
        org.joda.time.Period period3 = period1.minusHours(292278993);
        org.joda.time.Period period5 = period3.plusSeconds(63288946);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setMonths((int) ' ');
        java.lang.Object obj26 = mutablePeriod23.clone();
        mutablePeriod23.setDays(40);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology30 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfHour();
        java.lang.String str34 = dateTimeField32.getAsShortText((long) 63171221);
        org.joda.time.DurationField durationField35 = dateTimeField32.getRangeDurationField();
        long long38 = durationField35.getMillis(63310993, 0L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P32M40D");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "54" + "'", str34, "54");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 227919574800000L + "'", long38 == 227919574800000L);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        int int9 = property7.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514179589L + "'", long2 == 1645514179589L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 40, 40, '#', 10 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        long long24 = dateTimeField7.roundHalfFloor((long) (byte) 1);
        boolean boolean26 = dateTimeField7.isLeap(1645513765246L);
        int int29 = dateTimeField7.getDifference(1645513784125L, 1645513776688L);
        long long32 = dateTimeField7.set(1645513815489L, 905);
        java.lang.String str34 = dateTimeField7.getAsShortText((long) 1188);
        java.util.Locale locale35 = null;
        int int36 = dateTimeField7.getMaximumShortTextLength(locale35);
        int int38 = dateTimeField7.getMaximumValue(1645514135807L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514179612L + "'", long11 == 1645514179612L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-37320000L) + "'", long24 == (-37320000L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-33603612584511L) + "'", long32 == (-33603612584511L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970" + "'", str34, "1970");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(63387436);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        java.lang.String str16 = property15.getName();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21);
        boolean boolean36 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone39);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period41.minusSeconds((int) (short) 1);
        org.joda.time.Period period45 = period41.plusWeeks((int) (short) -1);
        org.joda.time.Period period47 = period41.minusMillis(4);
        org.joda.time.Interval interval48 = interval40.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        boolean boolean50 = interval3.contains((org.joda.time.ReadableInterval) interval48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        long long53 = interval52.toDurationMillis();
        boolean boolean54 = interval3.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval55 = interval3.toInterval();
        org.joda.time.Chronology chronology56 = interval3.getChronology();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfEra();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 3, 1645513762121L, periodType60, chronology68);
        org.joda.time.PeriodType periodType71 = periodType60.withMinutesRemoved();
        org.joda.time.PeriodType periodType72 = periodType71.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) interval3, periodType71);
        org.joda.time.Interval interval75 = interval3.withEndMillis(1645514027092L);
        boolean boolean76 = interval3.isAfterNow();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514179723L + "'", long14 == 1645514179723L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfEra" + "'", str16, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:38:19.723+10:22" + "'", str27, "2022-02-22T17:38:19.723+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsText(1645513802010L, locale11);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "17" + "'", str12, "17");
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 100, 63102368, 63113600, 63208010, 63121637, 38, 63214125, 63181923);
        org.joda.time.Period period10 = period8.minusSeconds(63090717);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime12.withYearOfEra(63208932);
        org.joda.time.DateTime dateTime24 = dateTime12.minusWeeks(63088836);
        org.joda.time.Duration duration25 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = dateTime24.isEqual(1645513828593L);
        org.junit.Assert.assertNotNull(period10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:38:19.877+10:22" + "'", str13, "2022-02-22T17:38:19.877+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfDay();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod14, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period23 = mutablePeriod14.toPeriod();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:38:19.896+10:22" + "'", str17, "2022-02-22T17:38:19.896+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property26.getAsText(locale27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:19.918+10:22" + "'", str4, "2022-02-22T17:38:19.918+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514179918L + "'", long15 == 1645514179918L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63499918 + "'", int19 == 63499918);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63499918 + "'", int22 == 63499918);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "123" + "'", str28, "123");
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        long long10 = durationField8.getValueAsLong(1645513760382L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology22.months();
        java.lang.String str27 = durationField26.getName();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime34.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.minuteOfDay();
        int int56 = dateTimeField54.getMinimumValue((long) 9);
        int int58 = dateTimeField54.getLeapAmount(1645513763885L);
        int int59 = dateTime43.get(dateTimeField54);
        org.joda.time.DurationField durationField60 = dateTimeField54.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType61 = durationField60.getType();
        int int62 = durationField26.compareTo(durationField60);
        org.joda.time.DurationFieldType durationFieldType63 = durationField60.getType();
        int int64 = durationField8.compareTo(durationField60);
        long long65 = durationField60.getUnitMillis();
        long long68 = durationField60.add(1645513966065L, 63360883);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514179943L + "'", long2 == 1645514179943L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "months" + "'", str27, "months");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514179943L + "'", long30 == 1645514179943L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:38:19.943+10:22" + "'", str37, "2022-02-22T17:38:19.943+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1058 + "'", int59 == 1058);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 86400000L + "'", long65 == 86400000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 5476025805166065L + "'", long68 == 5476025805166065L);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime21 = mutableInterval0.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withDayOfMonth(969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 969 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514179985L + "'", long11 == 1645514179985L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval18.setDurationAfterStart(1645513773716L);
        mutableInterval18.setDurationBeforeEnd(1645513828888L);
        long long76 = mutableInterval18.toDurationMillis();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514180043L + "'", long30 == 1645514180043L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:38:20.043+10:22" + "'", str44, "2022-02-22T17:38:20.043+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:38:20.043+10:22" + "'", str57, "2022-02-22T17:38:20.043+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(seconds70);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645513828888L + "'", long76 == 1645513828888L);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField17 = chronology6.minutes();
        int int20 = durationField17.getValue(1645513779761L, 1645513781584L);
        boolean boolean21 = durationField17.isPrecise();
        long long24 = durationField17.getValueAsLong(1645513843512L, 0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27425229 + "'", int20 == 27425229);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27425230L + "'", long24 == 27425230L);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        mutableInterval0.setEnd(readableInstant9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        mutableInterval0.setChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.weekyear();
        java.lang.String str27 = dateTimeField26.getName();
        long long29 = dateTimeField26.roundHalfEven(1645514173399L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1641130680000L + "'", long29 == 1641130680000L);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '#');
        org.joda.time.DateTime.Property property22 = dateTime18.centuryOfEra();
        org.joda.time.DateTime dateTime23 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(63213047);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        mutableInterval26.setEndMillis(1645513759027L);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.negated();
        mutableInterval26.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        mutableInterval26.setEndMillis(1645513766127L);
        org.joda.time.Period period39 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period40 = period39.toPeriod();
        org.joda.time.Weeks weeks41 = period39.toStandardWeeks();
        org.joda.time.PeriodType periodType42 = period39.getPeriodType();
        org.joda.time.Period period43 = mutableInterval26.toPeriod(periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(63110, 366, (int) ' ', 63101202);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.Chronology chronology61 = chronology59.withUTC();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay68 = dateTime67.toYearMonthDay();
        int[] intArray70 = chronology61.get((org.joda.time.ReadablePartial) yearMonthDay68, 1645513760770L);
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period71.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean75 = period73.equals((java.lang.Object) dateTimeFieldType74);
        org.joda.time.Period period77 = period73.plusWeeks(17);
        int[] intArray80 = chronology61.get((org.joda.time.ReadablePeriod) period77, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone83);
        org.joda.time.Period period85 = org.joda.time.Period.ZERO;
        org.joda.time.Period period87 = period85.minusSeconds((int) (short) 1);
        org.joda.time.Period period89 = period85.plusWeeks((int) (short) -1);
        org.joda.time.Period period91 = period85.minusMillis(4);
        org.joda.time.Interval interval92 = interval84.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period85);
        int[] intArray94 = chronology61.get((org.joda.time.ReadablePeriod) period85, (long) 63099629);
        mutablePeriod51.add(1645513796851L, chronology61);
        org.joda.time.Interval interval96 = new org.joda.time.Interval(1645513766806L, 1645513805842L, chronology61);
        org.joda.time.DateTimeField dateTimeField97 = chronology61.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period98 = new org.joda.time.Period((java.lang.Object) 63213047, periodType42, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:38:20.124+10:22" + "'", str9, "2022-02-22T17:38:20.124+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514180124L + "'", long19 == 1645514180124L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514180124L + "'", long64 == 1645514180124L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, 17, 31, 39, 629]");
        org.junit.Assert.assertNotNull(dateTimeField97);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        boolean boolean33 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType34);
        long long36 = duration24.getMillis();
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime49.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        org.joda.time.DateTime dateTime54 = dateTime49.minusMonths(63109642);
        org.joda.time.Period period55 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Hours hours56 = duration24.toStandardHours();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514180153L + "'", long10 == 1645514180153L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514180153L + "'", long17 == 1645514180153L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100000L + "'", long36 == 100000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514180153L + "'", long45 == 1645514180153L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 63510 + "'", int51 == 63510);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(hours56);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.Period period14 = period10.minusMinutes(63219443);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:20.189+10:22" + "'", str4, "2022-02-22T17:38:20.189+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay(41);
        org.joda.time.DateTime.Property property14 = dateTime13.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property14.setCopy(63332734);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63332734 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514180210L + "'", long2 == 1645514180210L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(4);
        org.joda.time.LocalDate localDate60 = dateTime57.toLocalDate();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        boolean boolean71 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime70);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime70.getZone();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514180275L + "'", long2 == 1645514180275L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514180275L + "'", long18 == 1645514180275L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514180275L + "'", long53 == 1645514180275L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514180275L + "'", long68 == 1645514180275L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.withZoneRetainFields(dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime55.withField(dateTimeFieldType59, 25774);
        int int62 = dateTime37.get(dateTimeFieldType59);
        org.joda.time.Interval interval63 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime37);
        long long64 = duration31.getStandardDays();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology72);
        org.joda.time.DateTime dateTime74 = dateTime68.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Period period75 = duration66.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime77 = dateTime68.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval78.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateTime dateTime83 = dateTime77.plus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration84 = duration81.toDuration();
        org.joda.time.Duration duration85 = duration31.minus((org.joda.time.ReadableDuration) duration84);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:38:20.320+10:22" + "'", str14, "2022-02-22T17:38:20.320+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514180320L + "'", long35 == 1645514180320L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:38:20.321+10:22" + "'", str49, "2022-02-22T17:38:20.321+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20 + "'", int62 == 20);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-22T17:38:20.321+10:22" + "'", str69, "2022-02-22T17:38:20.321+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        long long9 = dateTimeField7.remainder(1645513794665L);
        int int11 = dateTimeField7.getMinimumValue(1645513943128L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1914665L + "'", long9 == 1914665L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        org.joda.time.DateTime.Property property9 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime11 = property9.addWrapFieldToCopy(63186732);
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        boolean boolean33 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.Period period50 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType34, chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime.Property property54 = dateTime52.yearOfEra();
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        long long58 = dateTimeZone56.convertUTCToLocal(1645513763679L);
        java.lang.String str60 = dateTimeZone56.getShortName(1645513769549L);
        long long62 = dateTimeZone56.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology63 = chronology48.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.Chronology chronology65 = dateTime64.getChronology();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        boolean boolean75 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.Object obj76 = mutableInterval71.clone();
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 8, periodType70, chronology77);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1645513769779L, periodType70);
        org.joda.time.Period period81 = new org.joda.time.Period(1645513799815L, 1645513829795L, periodType70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime64, periodType70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -23078480033");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514180420L + "'", long2 == 1645514180420L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514180420L + "'", long17 == 1645514180420L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[+10:22]" + "'", str49, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514180420L + "'", long53 == 1645514180420L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645551083679L + "'", long58 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:22" + "'", str60, "+10:22");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645513786393L + "'", long62 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        int[] intArray30 = mutablePeriod29.getValues();
        org.joda.time.Period period32 = org.joda.time.Period.hours((int) 'a');
        org.joda.time.Period period34 = period32.minusMillis((int) ' ');
        mutablePeriod29.add((org.joda.time.ReadablePeriod) period34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutablePeriod29.setPeriod(readableDuration36);
        mutablePeriod29.add(1645513793766L);
        mutablePeriod29.setPeriod(1645514011543L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:38:20.453+10:22" + "'", str5, "2022-02-22T17:38:20.453+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.millisOfDay();
        java.lang.String str32 = chronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology12.year();
        java.lang.String str36 = dateTimeField34.getAsShortText(1645513836807L);
        java.lang.String str37 = dateTimeField34.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+10:22]" + "'", str32, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DateTimeField[year]" + "'", str37, "DateTimeField[year]");
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime4.withEarlierOffsetAtOverlap();
        int int9 = dateTime8.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime8.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(6);
        int int17 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.plusWeeks(46);
        org.joda.time.DateTime dateTime20 = dateTime14.withTimeAtStartOfDay();
        int int21 = dateTime14.getYearOfCentury();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:20.505+10:22" + "'", str2, "2022-02-22T17:38:20.505+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 38 + "'", int9 == 38);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 115200000 + "'", int17 == 115200000);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513766895L);
        int int2 = mutablePeriod1.getYears();
        int int3 = mutablePeriod1.getMonths();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded(readableDuration15, 6);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(115200040);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        mutableInterval35.setInterval(100000L, 1645513759601L);
        long long43 = mutableInterval35.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime.Property property47 = dateTime45.yearOfEra();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval54 = interval48.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        mutableInterval35.setDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime dateTime56 = mutableInterval35.getEnd();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime56);
        long long58 = duration25.getStandardMinutes();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration25.toPeriod(chronology59);
        org.joda.time.Duration duration62 = duration25.minus(1645513786244L);
        org.joda.time.DateTime dateTime63 = dateTime20.minus((org.joda.time.ReadableDuration) duration62);
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration62);
        mutablePeriod1.setWeeks((-8990));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:38:20.587+10:22" + "'", str6, "2022-02-22T17:38:20.587+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514180587L + "'", long29 == 1645514180587L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100000L + "'", long43 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514180587L + "'", long46 == 1645514180587L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(1645513762564L);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(1645513778646L, 1645513861582L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = duration25.toPeriod();
        boolean boolean28 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone33);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.minusSeconds((int) (short) 1);
        org.joda.time.Period period39 = period35.plusWeeks((int) (short) -1);
        org.joda.time.Period period41 = period35.minusMillis(4);
        org.joda.time.Interval interval42 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.Period period45 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType29, chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = property49.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        long long53 = dateTimeZone51.convertUTCToLocal(1645513763679L);
        java.lang.String str55 = dateTimeZone51.getShortName(1645513769549L);
        long long57 = dateTimeZone51.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology58 = chronology43.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.centuryOfEra();
        mutableInterval0.setChronology(chronology58);
        org.joda.time.Duration duration61 = mutableInterval0.toDuration();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514180626L + "'", long12 == 1645514180626L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+10:22]" + "'", str44, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514180626L + "'", long48 == 1645514180626L);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645551083679L + "'", long53 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:22" + "'", str55, "+10:22");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645513786393L + "'", long57 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property3.getAsShortText(locale11);
        java.lang.String str13 = property3.getAsShortText();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property3.getAsShortText(locale14);
        org.joda.time.DateTime dateTime16 = property3.getDateTime();
        java.lang.String str17 = property3.getAsShortText();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514180692L + "'", long2 == 1645514180692L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        long long11 = property9.remainder();
        org.joda.time.DateTime dateTime12 = property9.withMaximumValue();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        boolean boolean32 = dateTime30.isBefore((-1L));
        int int33 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int35 = dateTime30.get(dateTimeFieldType34);
        java.lang.String str36 = dateTime30.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property40.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        org.joda.time.DateTime dateTime43 = property40.roundHalfEvenCopy();
        boolean boolean44 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant14, (org.joda.time.ReadableInstant) dateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:20.747+10:22" + "'", str2, "2022-02-22T17:38:20.747+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2300747L + "'", long11 == 2300747L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:38:20.747+10:22" + "'", str18, "2022-02-22T17:38:20.747+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:20.747+10:22" + "'", str28, "2022-02-22T17:38:20.747+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:38:20.010+10:22" + "'", str36, "2022-02-22T17:38:20.010+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514180747L + "'", long39 == 1645514180747L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 8, periodType9, chronology16);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration7, chronology16);
        int int20 = mutablePeriod5.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField32 = durationFieldType22.getField(chronology29);
        mutablePeriod5.add(durationFieldType22, 0);
        boolean boolean35 = periodType1.isSupported(durationFieldType22);
        org.joda.time.PeriodType periodType36 = periodType1.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645514041993L, periodType36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514041993");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Millis" + "'", str2, "Millis");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        boolean boolean15 = durationField14.isPrecise();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DurationField durationField10 = chronology7.months();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        int int12 = mutablePeriod11.getSeconds();
        mutablePeriod11.addDays((int) (byte) 1);
        int[] intArray16 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod11, 1645513771496L);
        mutablePeriod11.addWeeks(19676);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 2720, 5, 7, 9, 31, 496]");
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("DateTimeField[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'DateTimeField[secondOfMinute]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval16 = interval10.withDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval17 = interval10.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = interval17.gap((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod();
        mutablePeriod32.setMonths((int) ' ');
        java.lang.Object obj35 = mutablePeriod32.clone();
        mutablePeriod32.setDays(40);
        org.joda.time.Interval interval38 = interval17.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Period period41 = period39.plusSeconds((int) (byte) 1);
        boolean boolean42 = property3.equals((java.lang.Object) period41);
        org.joda.time.Period period44 = period41.minusHours(63129196);
        org.joda.time.Period period46 = period41.minusHours(0);
        org.joda.time.Period period48 = period46.minusMinutes(63429010);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514180911L + "'", long2 == 1645514180911L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514180911L + "'", long8 == 1645514180911L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "P32M40D");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        mutableInterval12.setInterval(100000L, 1645513759601L);
        long long20 = mutableInterval12.getStartMillis();
        org.joda.time.Chronology chronology21 = mutableInterval12.getChronology();
        boolean boolean22 = interval11.contains((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean23 = interval11.isBeforeNow();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514180943L + "'", long2 == 1645514180943L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100000L + "'", long20 == 100000L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.Duration duration43 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) '#');
        org.joda.time.Hours hours44 = duration34.toStandardHours();
        org.joda.time.Interval interval45 = interval21.withPeriodAfterStart((org.joda.time.ReadablePeriod) hours44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekyear();
        boolean boolean50 = dateTimeField48.isLeap(1645513962013L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:20.967+10:22" + "'", str26, "2022-02-22T17:38:20.967+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(4);
        org.joda.time.LocalDate localDate11 = dateTime8.toLocalDate();
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType1.getField(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T07:10:36.637+00:00:00.100", chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:10:36.637+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514181037L + "'", long4 == 1645514181037L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField23 = chronology19.months();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645513759301L);
        java.lang.String str30 = dateTimeZone26.getName(1645513762160L);
        java.util.TimeZone timeZone31 = dateTimeZone26.toTimeZone();
        int int33 = dateTimeZone26.getStandardOffset(1645513761942L);
        int int35 = dateTimeZone26.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology36 = chronology19.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField37 = chronology19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology19.getZone();
        org.joda.time.DateTime dateTime39 = dateTime7.toDateTime(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) 63228792);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:22" + "'", str30, "+10:22");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 37320000 + "'", int33 == 37320000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37320000 + "'", int35 == 37320000);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 63228792L + "'", long41 == 63228792L);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = mutableInterval2.containsNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withEra((int) (byte) 1);
        boolean boolean9 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        boolean boolean20 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime19.getMillisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime22.getMillisOfDay();
        org.joda.time.DateTime.Property property25 = dateTime22.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int35 = dateTime33.get(dateTimeFieldType34);
        int int36 = dateTime22.get(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645513766040L, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        boolean boolean53 = dateTimeFieldType34.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.monthOfYear();
        org.joda.time.DurationField durationField56 = chronology50.halfdays();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1645513933890L, 1645513849051L, chronology50);
        org.joda.time.DurationField durationField58 = chronology50.months();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:38:21.102+10:22" + "'", str6, "2022-02-22T17:38:21.102+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514181102L + "'", long17 == 1645514181102L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 63501102 + "'", int21 == 63501102);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 63501102 + "'", int24 == 63501102);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:21.102+10:22" + "'", str28, "2022-02-22T17:38:21.102+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfEra();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:21.134+10:22" + "'", str4, "2022-02-22T17:38:21.134+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514181134L + "'", long15 == 1645514181134L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63501134 + "'", int19 == 63501134);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63501134 + "'", int22 == 63501134);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        int int10 = property3.get();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property3.getAsText(locale11);
        org.joda.time.DateTime dateTime14 = property3.addToCopy(258);
        org.joda.time.DateTime dateTime15 = property3.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.withYear(37445);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime15.withDayOfMonth(63344812);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63344812 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514181154L + "'", long2 == 1645514181154L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        int int3 = periodType1.size();
        org.joda.time.PeriodType periodType4 = periodType1.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 3, 1645513762121L, periodType19, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTime dateTime31 = dateTime9.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.clockhourOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 115200000, chronology27);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology27);
        int[] intArray35 = mutablePeriod34.getValues();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period60 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DurationFieldType durationFieldType62 = period60.getFieldType(4);
        java.lang.String str63 = durationFieldType62.getName();
        mutablePeriod34.set(durationFieldType62, 63130617);
        boolean boolean66 = periodType4.isSupported(durationFieldType62);
        org.joda.time.PeriodType periodType67 = periodType4.withDaysRemoved();
        java.lang.String str68 = periodType4.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(periodType4);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:38:21.175+10:22" + "'", str10, "2022-02-22T17:38:21.175+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:38:21.175+10:22" + "'", str40, "2022-02-22T17:38:21.175+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645514181175L + "'", long54 == 1645514181175L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PeriodType[Hours]" + "'", str68, "PeriodType[Hours]");
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        int int9 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime14.year();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime31 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime14.minusYears(63142);
        org.joda.time.LocalDate localDate34 = dateTime14.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37320000 + "'", int9 == 37320000);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:38:21.236+10:22" + "'", str12, "2022-02-22T17:38:21.236+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:38:21.236+10:22" + "'", str19, "2022-02-22T17:38:21.236+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval11.withEndMillis((long) 63129534);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval15 = new org.joda.time.Interval((java.lang.Object) 63129534);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        boolean boolean18 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime16);
        long long19 = interval11.getEndMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean33 = mutableInterval20.containsNow();
        boolean boolean34 = interval11.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        boolean boolean35 = interval11.containsNow();
        org.joda.time.MutableInterval mutableInterval36 = interval11.toMutableInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514181276L + "'", long2 == 1645514181276L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514181276L + "'", long17 == 1645514181276L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1672493880000L + "'", long19 == 1672493880000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableInterval36);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513760165L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        java.lang.String str21 = chronology17.toString();
        org.joda.time.DurationField durationField22 = chronology17.years();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+10:22]" + "'", str21, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.joda.time.Period period1 = org.joda.time.Period.months(63120817);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Interval interval11 = interval5.withDurationAfterStart((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Interval interval12 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Interval interval26 = interval12.gap((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        boolean boolean33 = dateTime31.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        boolean boolean52 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (short) 10, 25760283, (int) (short) 0, 1);
        org.joda.time.DateTime dateTime60 = dateTime31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod58, (int) (short) 10);
        boolean boolean61 = mutableInterval13.isAfter((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime60.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime64 = dateTime60.minusHours(25825);
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property66 = dateTime64.yearOfCentury();
        org.joda.time.DateTime dateTime68 = dateTime64.minusMillis(63101169);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514181407L + "'", long3 == 1645514181407L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:38:21.407+10:22" + "'", str29, "2022-02-22T17:38:21.407+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:38:21.407+10:22" + "'", str36, "2022-02-22T17:38:21.407+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:38:21.407+10:22" + "'", str43, "2022-02-22T17:38:21.407+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration23 = duration12.plus(1645513768963L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        int int29 = dateTime25.getWeekOfWeekyear();
        org.joda.time.Interval interval30 = duration23.toIntervalFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Days days31 = duration23.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:21.446+10:22" + "'", str4, "2022-02-22T17:38:21.446+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:21.446+10:22" + "'", str15, "2022-02-22T17:38:21.446+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:38:21.446+10:22" + "'", str26, "2022-02-22T17:38:21.446+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(days31);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.hourOfHalfday();
        java.util.Locale locale18 = null;
        int int19 = dateTimeField17.getMaximumTextLength(locale18);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 8, periodType12, chronology19);
        long long24 = chronology7.add((org.joda.time.ReadablePeriod) mutablePeriod21, (long) 10, 6);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod();
        mutablePeriod35.setMonths((int) ' ');
        java.lang.Object obj38 = mutablePeriod35.clone();
        long long41 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField42 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology32.hourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology32.days();
        mutablePeriod21.add(1645513821376L, chronology32);
        mutablePeriod21.setDays(63279293);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "P32M");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1851379200000L + "'", long41 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(readableDuration11, 6);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod();
        mutablePeriod25.setMonths((int) ' ');
        java.lang.Object obj28 = mutablePeriod25.clone();
        long long31 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod25, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology22);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        int int40 = dateTime36.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime41 = dateTime36.toLocalTime();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localTime41, locale42);
        org.joda.time.DateTime dateTime44 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTime.Property property45 = dateTime44.centuryOfEra();
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:38:21.511+10:22" + "'", str2, "2022-02-22T17:38:21.511+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "P32M");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1851379200000L + "'", long31 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514181511L + "'", long37 == 1645514181511L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "5" + "'", str43, "5");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration23 = duration12.plus(1645513768963L);
        org.joda.time.Duration duration25 = duration23.withMillis(1645513769945L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime37 = property35.addToCopy(1645513766979L);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra(63110);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(37);
        org.joda.time.DateTime dateTime43 = dateTime37.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone44.toString();
        int int47 = dateTimeZone44.getStandardOffset(1645513766329L);
        long long51 = dateTimeZone44.convertLocalToUTC(1645513990001L, true, (long) 24);
        java.lang.String str52 = dateTimeZone44.getID();
        long long54 = dateTimeZone42.getMillisKeepLocal(dateTimeZone44, 1645513800816L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:38:21.537+10:22" + "'", str4, "2022-02-22T17:38:21.537+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:38:21.537+10:22" + "'", str15, "2022-02-22T17:38:21.537+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:21.537+10:22" + "'", str28, "2022-02-22T17:38:21.537+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:22" + "'", str45, "+10:22");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 37320000 + "'", int47 == 37320000);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645476670001L + "'", long51 == 1645476670001L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:22" + "'", str52, "+10:22");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645609680816L + "'", long54 == 1645609680816L);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime.Property property18 = dateTime14.era();
        java.lang.String str19 = property18.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = property18.addToCopy(1645513886262L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514181624L + "'", long2 == 1645514181624L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:38:21.624+10:22" + "'", str8, "2022-02-22T17:38:21.624+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AD" + "'", str19, "AD");
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(4);
        org.joda.time.LocalDate localDate20 = dateTime17.toLocalDate();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate20, 9, locale22);
        java.lang.Object obj24 = null;
        boolean boolean25 = localDate20.equals(obj24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(52);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        int int47 = dateTime45.getMonthOfYear();
        org.joda.time.DateTime.Property property48 = dateTime45.minuteOfDay();
        org.joda.time.DateTime.Property property49 = dateTime45.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray51 = new org.joda.time.DurationFieldType[] { durationFieldType50 };
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.forFields(durationFieldTypeArray51);
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime45, periodType53);
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime36.toYearMonthDay();
        int int56 = localDate20.compareTo((org.joda.time.ReadablePartial) yearMonthDay55);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = localDate20.getValue(63231334);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63231334");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514181646L + "'", long13 == 1645514181646L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "September" + "'", str23, "September");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:38:21.646+10:22" + "'", str28, "2022-02-22T17:38:21.646+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514181646L + "'", long43 == 1645514181646L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldTypeArray51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }
}

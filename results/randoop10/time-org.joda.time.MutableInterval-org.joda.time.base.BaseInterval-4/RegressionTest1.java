import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = new org.joda.time.Interval((java.lang.Object) 1645513793379L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        boolean boolean33 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType34);
        long long36 = duration24.getMillis();
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period39 = org.joda.time.Period.hours((int) 'a');
        java.lang.String str40 = period39.toString();
        mutablePeriod0.add((org.joda.time.ReadablePeriod) period39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType43 = period39.getFieldType(25813877);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513823485L + "'", long10 == 1645513823485L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513823485L + "'", long17 == 1645513823485L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100000L + "'", long36 == 100000L);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT97H" + "'", str40, "PT97H");
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        mutablePeriod2.add(8, (int) ' ', 292278993, 63088836, 10, 292278993, (int) '4', (int) (byte) 100);
        mutablePeriod2.clear();
        org.joda.time.DurationFieldType durationFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.set(durationFieldType27, 63090717);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-22T17:31:36.319+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:36.319+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-22T17:31:33.471+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:31:33.471+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) yearMonthDay22, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField25 = chronology15.monthOfYear();
        org.joda.time.DurationField durationField26 = chronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime39 = dateTime31.withZone(dateTimeZone36);
        boolean boolean40 = dateTimeZone36.isFixed();
        org.joda.time.Chronology chronology41 = chronology15.withZone(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(63102174, 63116949, 252, 25812654, (int) (byte) 0, 63116635, 1051, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25812654 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513823887L + "'", long18 == 1645513823887L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645513823887L + "'", long29 == 1645513823887L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property11.setCopy("2022-02-22T17:32:17.714+10:22", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:32:17.714+10:22\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:23.909+10:22" + "'", str4, "2022-02-22T17:32:23.909+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        int int8 = property3.get();
        int int9 = property3.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        long long16 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime11.withTime(1052, 63126015, 63110, 87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1052 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513824006L + "'", long2 == 1645513824006L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513824006L + "'", long12 == 1645513824006L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.DurationField durationField21 = dateTimeField19.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField19.set(1645513811507L, "2022-02-22T17:31:29.349+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:31:29.349+10:22\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:24.068+10:22" + "'", str2, "2022-02-22T17:32:24.068+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNull(durationField21);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime12.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime18);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645513824105L + "'", long3 == 1645513824105L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:32:24.105+10:22" + "'", str10, "2022-02-22T17:32:24.105+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes((int) (byte) 0);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTime dateTime18 = dateTime8.toDateTime(chronology15);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime38, periodType39);
        org.joda.time.Duration duration42 = duration31.plus(1645513768963L);
        org.joda.time.Duration duration44 = duration42.withMillis(1645513769945L);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Period period54 = period46.minusDays((int) (short) 10);
        org.joda.time.Duration duration55 = period46.toStandardDuration();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType59 = periodType58.withMinutesRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period(1645513766081L, 1645513768392L, periodType58);
        org.joda.time.Period period61 = duration55.toPeriod(periodType58);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod();
        mutablePeriod64.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        long long74 = dateTime73.getMillis();
        org.joda.time.DateTime dateTime76 = dateTime73.plusWeeks((int) (byte) 10);
        boolean boolean77 = mutableInterval67.contains((org.joda.time.ReadableInstant) dateTime76);
        mutablePeriod64.setPeriod((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        java.lang.Object obj86 = mutableInterval81.clone();
        org.joda.time.Chronology chronology87 = mutableInterval81.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1645513760253L, chronology87);
        org.joda.time.DateTimeField dateTimeField90 = chronology87.year();
        mutablePeriod64.add(1645513767484L, chronology87);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((-359999779L), 33166356552000L, chronology87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period93 = duration42.toPeriod(periodType58, chronology87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513868963");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:24.226+10:22" + "'", str2, "2022-02-22T17:32:24.226+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:32:24.227+10:22" + "'", str23, "2022-02-22T17:32:24.227+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:32:24.227+10:22" + "'", str34, "2022-02-22T17:32:24.227+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645513824227L + "'", long74 == 1645513824227L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(obj86);
// flaky:         org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant14, periodType18);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration2);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        boolean boolean32 = mutableInterval26.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        boolean boolean34 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval33);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Period period36 = mutableInterval0.toPeriod();
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:32:24.284+10:22" + "'", str5, "2022-02-22T17:32:24.284+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        long long7 = dateTimeZone5.convertUTCToLocal(1645513763679L);
        java.lang.String str9 = dateTimeZone5.getShortName(1645513769549L);
        int int11 = dateTimeZone5.getOffsetFromLocal(1645513772789L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime24 = dateTime16.withZone(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration49 = duration38.minus(0L);
        org.joda.time.DateTime dateTime51 = dateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (short) 0);
        long long52 = duration49.getStandardSeconds();
        org.joda.time.DateTime dateTime53 = dateTime24.plus((org.joda.time.ReadableDuration) duration49);
        int int54 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime24);
        java.lang.String str55 = dateTimeZone5.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513824303L + "'", long2 == 1645513824303L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645551083679L + "'", long7 == 1645551083679L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:22" + "'", str9, "+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513824303L + "'", long14 == 1645513824303L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:32:24.304+10:22" + "'", str28, "2022-02-22T17:32:24.304+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:32:24.304+10:22" + "'", str41, "2022-02-22T17:32:24.304+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 37320000 + "'", int54 == 37320000);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:22" + "'", str55, "+10:22");
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime2 = dateTime1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime12 = instant9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        boolean boolean19 = dateTime17.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        boolean boolean38 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((int) (short) 10, 25760283, (int) (short) 0, 1);
        org.joda.time.DateTime dateTime46 = dateTime17.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod44, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime17);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:32:24.629+10:22" + "'", str15, "2022-02-22T17:32:24.629+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:32:24.629+10:22" + "'", str22, "2022-02-22T17:32:24.629+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:32:24.629+10:22" + "'", str29, "2022-02-22T17:32:24.629+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        java.lang.Object obj3 = mutablePeriod0.clone();
        mutablePeriod0.setDays(40);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        boolean boolean18 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withZoneRetainFields(dateTimeZone36);
        int int38 = dateTime34.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime34.toMutableDateTime();
        org.joda.time.Period period40 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime34.plus(readableDuration41);
        org.joda.time.DateTime.Property property43 = dateTime34.weekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight56 = dateTime54.toDateMidnight();
        int int57 = dateTime54.getDayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime54.withEarlierOffsetAtOverlap();
        int int59 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration60 = mutablePeriod0.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period61 = new org.joda.time.Period((java.lang.Object) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P32M40D");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:32:24.648+10:22" + "'", str28, "2022-02-22T17:32:24.648+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 17 + "'", int38 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:32:24.648+10:22" + "'", str46, "2022-02-22T17:32:24.648+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(duration60);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = dateTime4.toString("2022-02-22T17:31:46.692+10:22", locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645513824916,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=24,MILLISECOND=916,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T17:32:05.881+10:22", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((long) 9);
        int int30 = dateTimeField26.getLeapAmount(1645513763885L);
        int int31 = dateTime15.get(dateTimeField26);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField26.getAsShortText(37320000, locale33);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1L), 1L, periodType41, chronology42);
        java.lang.String str44 = periodType41.toString();
        java.lang.String str45 = periodType41.getName();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1645513760165L, periodType41);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType41, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.yearOfEra();
        org.joda.time.DurationField durationField56 = chronology53.weeks();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = duration60.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology69);
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTime dateTime72 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime72);
        int int74 = mutablePeriod73.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        boolean boolean77 = mutablePeriod73.equals((java.lang.Object) dateTime76);
        int[] intArray79 = chronology53.get((org.joda.time.ReadablePeriod) mutablePeriod73, 1645513767592L);
        int int80 = dateTimeField26.getMinimumValue(readablePartial35, intArray79);
        java.lang.Class<?> wildcardClass81 = intArray79.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513825330L + "'", long2 == 1645513825330L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:25.330+10:22" + "'", str9, "2022-02-22T17:32:25.330+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1052 + "'", int31 == 1052);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "37320000" + "'", str34, "37320000");
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PeriodType[Time]" + "'", str44, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Time" + "'", str45, "Time");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration63);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T17:32:25.330+10:22" + "'", str66, "2022-02-22T17:32:25.330+10:22");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 40 + "'", int74 == 40);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 2720, 5, 7, 9, 27, 592]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-22T17:31:33.906+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:33.906+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime15.toMutableDateTime();
        int int22 = mutableDateTime21.getMinuteOfDay();
        int int23 = mutableDateTime21.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:25.420+10:22" + "'", str9, "2022-02-22T17:32:25.420+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1052 + "'", int22 == 1052);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 25 + "'", int23 == 25);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(25774, 25813626, 100, 63099, 25774, 69, 63098347, 63128134, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        java.lang.String str17 = property16.getName();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration22);
        boolean boolean37 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes(0);
        boolean boolean56 = dateTime42.isEqual((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean57 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableDuration0, (org.joda.time.ReadableInstant) dateTime42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = dateTime42.withHourOfDay(37320000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37320000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513825546L + "'", long15 == 1645513825546L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:32:25.546+10:22" + "'", str28, "2022-02-22T17:32:25.546+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:32:25.546+10:22" + "'", str40, "2022-02-22T17:32:25.546+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:32:25.546+10:22" + "'", str47, "2022-02-22T17:32:25.546+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 8, periodType58, chronology65);
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration56, chronology65);
        int int69 = mutablePeriod54.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.yearOfEra();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.minuteOfDay();
        org.joda.time.DurationField durationField81 = durationFieldType71.getField(chronology78);
        mutablePeriod54.add(durationFieldType71, 0);
        org.joda.time.Interval interval84 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Interval interval85 = interval33.toInterval();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513825709L + "'", long24 == 1645513825709L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
// flaky:         org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes(3);
        org.joda.time.Period period6 = period4.plusWeeks(17);
        org.joda.time.Period period8 = period6.minusMillis(59);
        org.joda.time.Period period9 = period8.toPeriod();
        org.joda.time.Period period11 = period8.minusYears(63139743);
        org.joda.time.Period period13 = period8.withHours(0);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        org.joda.time.Period period1 = org.joda.time.Period.hours(63139384);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant22 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str34 = dateTimeZone32.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime35 = dateTime27.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadablePeriod) mutablePeriod44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:32:26.171+10:22" + "'", str14, "2022-02-22T17:32:26.171+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(instant22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513826171L + "'", long25 == 1645513826171L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:32:26.171+10:22" + "'", str38, "2022-02-22T17:32:26.171+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.toMutableInterval();
        mutableInterval9.setInterval((long) 37, 1645513786392L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        long long15 = mutableInterval13.getEndMillis();
        boolean boolean16 = mutableInterval13.containsNow();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        long long28 = duration18.getMillis();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration55 = duration44.minus(0L);
        org.joda.time.DateTime dateTime57 = dateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (short) 0);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Period period68 = duration59.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration70 = duration59.minus(0L);
        boolean boolean71 = duration55.isShorterThan((org.joda.time.ReadableDuration) duration59);
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.DateTime dateTime77 = dateTime74.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime(chronology78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone80);
        java.lang.String str82 = dateTime81.toString();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology85);
        org.joda.time.DateTime dateTime87 = dateTime81.minus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.DateTime dateTime88 = dateTime81.toDateTimeISO();
        org.joda.time.DateTime dateTime90 = dateTime88.minusMinutes(0);
        boolean boolean91 = dateTime77.isEqual((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration94 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (short) 10);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        boolean boolean96 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval13);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:32:26.192+10:22" + "'", str21, "2022-02-22T17:32:26.192+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100000L + "'", long28 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:32:26.192+10:22" + "'", str34, "2022-02-22T17:32:26.192+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:32:26.192+10:22" + "'", str47, "2022-02-22T17:32:26.192+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration59);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:32:26.192+10:22" + "'", str62, "2022-02-22T17:32:26.192+10:22");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T17:32:26.192+10:22" + "'", str75, "2022-02-22T17:32:26.192+10:22");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T17:32:26.192+10:22" + "'", str82, "2022-02-22T17:32:26.192+10:22");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime17.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        boolean boolean29 = dateTime27.isBefore((-1L));
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int32 = dateTime27.get(dateTimeFieldType31);
        java.lang.String str33 = dateTime27.toString();
        org.joda.time.DateTime dateTime35 = dateTime27.withYearOfEra(9);
        boolean boolean36 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:26.304+10:22" + "'", str2, "2022-02-22T17:32:26.304+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:32:26.304+10:22" + "'", str15, "2022-02-22T17:32:26.304+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:32:26.304+10:22" + "'", str25, "2022-02-22T17:32:26.304+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:32:26.010+10:22" + "'", str33, "2022-02-22T17:32:26.010+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        mutablePeriod8.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.Period period19 = period15.plusWeeks((int) (short) -1);
        org.joda.time.Period period21 = period15.minusMillis(4);
        org.joda.time.Interval interval22 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval22);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod();
        mutablePeriod25.setMonths((int) ' ');
        java.lang.Object obj28 = mutablePeriod25.clone();
        mutablePeriod25.setDays(40);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology32 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(1645513776881L, 0L, chronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "P32M40D");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTime dateTime41 = dateTime4.plusWeeks(63139010);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513826704L + "'", long2 == 1645513826704L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 63146 + "'", int10 == 63146);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513826705L + "'", long22 == 1645513826705L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        mutablePeriod5.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645513760253L, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.year();
        mutablePeriod5.add(1645513767484L, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(63121447, 63096041, (int) (short) 10, 123, (-40), chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 123 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513826782L + "'", long15 == 1645513826782L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        java.lang.String str14 = chronology13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(63119276, 63119816, (int) (byte) 0, 25812540, (int) (byte) -1, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25812540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology26 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType31 = periodType30.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 3, 1645513762121L, periodType31, chronology39);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 8, periodType43, chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeField27, periodType31, chronology50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513826980L + "'", long2 == 1645513826980L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        boolean boolean11 = property3.equals((java.lang.Object) periodType9);
        java.lang.String str12 = property3.getName();
        int int13 = property3.getLeapAmount();
        org.joda.time.DateTime dateTime14 = property3.roundCeilingCopy();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513827043L + "'", long2 == 1645513827043L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfEra" + "'", str12, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1645513799929L);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        long long2 = mutableInterval0.getEndMillis();
        boolean boolean3 = mutableInterval0.containsNow();
        mutableInterval0.setEndMillis(1645513794678L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval0.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setEndMillis(106L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(mutableInterval9);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        int int3 = dateTime1.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime1.withDayOfMonth(63100366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63100366 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:27.431+10:22" + "'", str2, "2022-02-22T17:32:27.431+10:22");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        int int10 = dateTime8.getMinuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513827686L + "'", long2 == 1645513827686L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period6.multipliedBy((int) (byte) 0);
        org.joda.time.Period period10 = period6.withHours((int) (short) 1);
        org.joda.time.Period period12 = period6.withMonths((-1));
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration14.minus(readableDuration38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1L), 1L, periodType42, chronology43);
        mutablePeriod44.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        mutablePeriod44.add((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime dateTime64 = dateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime64.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes(4);
        org.joda.time.LocalDate localDate69 = dateTime66.toLocalDate();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        long long77 = dateTime76.getMillis();
        org.joda.time.DateTime dateTime79 = dateTime76.plusWeeks((int) (byte) 10);
        boolean boolean80 = mutableInterval70.contains((org.joda.time.ReadableInstant) dateTime79);
        mutablePeriod44.setPeriod((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.time();
        org.joda.time.Period period83 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateTime66, periodType82);
        org.joda.time.PeriodType periodType84 = periodType82.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period85 = period12.withPeriodType(periodType84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:32:27.725+10:22" + "'", str17, "2022-02-22T17:32:27.725+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513827725L + "'", long31 == 1645513827725L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645513827725L + "'", long62 == 1645513827725L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645513827725L + "'", long77 == 1645513827725L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType84);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period2.minusSeconds((int) (short) 0);
        boolean boolean10 = period8.equals((java.lang.Object) (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant11 = new org.joda.time.Instant((java.lang.Object) period8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 28 + "'", int2 == 28);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((java.lang.Object) dateTime3, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:28.168+10:22" + "'", str4, "2022-02-22T17:32:28.168+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513828168L + "'", long22 == 1645513828168L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, -5, -312]");
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Minutes minutes7 = period2.toStandardMinutes();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        int int40 = dateTime39.getMillisOfDay();
        int int41 = dateTime39.getSecondOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513828434L + "'", long2 == 1645513828434L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 63148 + "'", int10 == 63148);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513828434L + "'", long22 == 1645513828434L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 25828434 + "'", int40 == 25828434);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 25828 + "'", int41 == 25828);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        int int30 = dateTimeZone18.getOffset((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.DateTime dateTime56 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (short) 0);
        java.util.Locale locale57 = null;
        java.util.Calendar calendar58 = dateTime39.toCalendar(locale57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) locale57);
        int int60 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime59);
        int int61 = dateTime59.getEra();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37320000 + "'", int30 == 37320000);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:32:28.519+10:22" + "'", str33, "2022-02-22T17:32:28.519+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:32:28.519+10:22" + "'", str46, "2022-02-22T17:32:28.519+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645513828519,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=28,MILLISECOND=519,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 37320000 + "'", int60 == 37320000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime26.minusMonths(63109642);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime26, periodType32);
        org.joda.time.DateTime dateTime34 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(63119816);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:28.550+10:22" + "'", str4, "2022-02-22T17:32:28.550+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513828550L + "'", long22 == 1645513828550L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 63158 + "'", int28 == 63158);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        int[] intArray17 = period14.getValues();
        int int18 = period14.getMonths();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.Period period23 = period19.plusMinutes(3);
        org.joda.time.Period period25 = period23.plusWeeks(17);
        org.joda.time.Duration duration26 = period25.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = dateTimeFieldType27.isSupported(chronology28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getRangeDurationType();
        int int31 = period25.get(durationFieldType30);
        org.joda.time.Period period33 = period14.withField(durationFieldType30, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = period33.multipliedBy(63138623);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2022 * 63138623");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:28.577+10:22" + "'", str4, "2022-02-22T17:32:28.577+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 17 + "'", int31 == 17);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        boolean boolean25 = dateTime20.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime27 = dateTime20.minusHours(63102000);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths(3);
        org.joda.time.DateTime dateTime36 = dateTime32.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime32.withTimeAtStartOfDay();
        boolean boolean38 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime20.withTime(63140231, 252, 63110067, 1052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63140231 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:28.628+10:22" + "'", str4, "2022-02-22T17:32:28.628+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513828628L + "'", long15 == 1645513828628L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63148628 + "'", int19 == 63148628);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63148628 + "'", int22 == 63148628);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513828628L + "'", long30 == 1645513828628L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime33, periodType34);
        org.joda.time.Period period36 = mutablePeriod35.toPeriod();
        org.joda.time.Period period37 = mutablePeriod35.toPeriod();
        org.joda.time.Period period39 = period37.plusDays(27425229);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period41 = period37.withSeconds(63138623);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:28.665+10:22" + "'", str4, "2022-02-22T17:32:28.665+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:32:28.665+10:22" + "'", str24, "2022-02-22T17:32:28.665+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 115200000, chronology30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology30);
        int[] intArray38 = mutablePeriod37.getValues();
        org.joda.time.Period period39 = period6.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime(chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = duration52.toPeriodTo((org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.Duration duration64 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days65 = duration64.toStandardDays();
        org.joda.time.Days days66 = duration64.toStandardDays();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration68 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str69 = mutablePeriod37.toString();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) str69);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513828681L + "'", long2 == 1645513828681L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:32:28.681+10:22" + "'", str13, "2022-02-22T17:32:28.681+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:32:28.681+10:22" + "'", str44, "2022-02-22T17:32:28.681+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T17:32:28.681+10:22" + "'", str55, "2022-02-22T17:32:28.681+10:22");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT16.381S" + "'", str69, "PT16.381S");
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period20.toDurationTo(readableInstant26);
        long long28 = duration27.getStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration31 = duration27.withDurationAdded(1645513788699L, 63126015);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513788699 * 63126015");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:32:28.718+10:22" + "'", str14, "2022-02-22T17:32:28.718+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) yearMonthDay22, 1645513760770L);
        org.joda.time.DurationField durationField25 = chronology15.eras();
        org.joda.time.DateTime dateTime26 = dateTime6.withChronology(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513828861L + "'", long2 == 1645513828861L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513828861L + "'", long18 == 1645513828861L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(63120817, 502, 25774, 69, 63144090);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = period4.plusWeeks(100);
        org.joda.time.Period period28 = period4.negated();
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = period4.isSupported(durationFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType32 = period4.getFieldType(63101202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T07:09:22.239Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withMillisOfDay(52);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        int int25 = mutablePeriod24.getSeconds();
        mutablePeriod24.addDays((int) (byte) 1);
        int int28 = mutablePeriod24.size();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 3, 1645513762121L, periodType32, chronology40);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str44 = durationFieldType43.toString();
        boolean boolean45 = periodType32.isSupported(durationFieldType43);
        mutablePeriod24.add(durationFieldType43, 63111649);
        org.joda.time.DateTime dateTime49 = dateTime23.withFieldAdded(durationFieldType43, 1439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(63102);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63102 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:29.027+10:22" + "'", str9, "2022-02-22T17:32:29.027+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645513829027L + "'", long19 == 1645513829027L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "seconds" + "'", str44, "seconds");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime6 = dateTime1.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime11.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        int int18 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTime1.toString("2022-02-22T17:32:10.759+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513829086L + "'", long2 == 1645513829086L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:29.087+10:22" + "'", str9, "2022-02-22T17:32:29.087+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        java.lang.String str9 = dateTime8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime8.withWeekOfWeekyear(63128571);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63128571 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513829133L + "'", long2 == 1645513829133L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-05-03T17:32:38.133+10:22" + "'", str9, "2022-05-03T17:32:38.133+10:22");
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long4 = dateTimeZone1.convertLocalToUTC(1645513775652L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getName(1645513785124L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645513775552L + "'", long4 == 1645513775552L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.100" + "'", str7, "+00:00:00.100");
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        org.joda.time.Period period1 = org.joda.time.Period.hours(63105);
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        long long82 = dateTime80.getMillis();
        int int83 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property84 = dateTime80.hourOfDay();
        org.joda.time.DateTime dateTime85 = property84.getDateTime();
        int int86 = dateTime85.getYearOfEra();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:29.388+00:00:00.100" + "'", str16, "2022-02-22T07:10:29.388+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513829288L + "'", long34 == 1645513829288L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str66, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T07:10:29.388+00:00:00.100" + "'", str72, "2022-02-22T07:10:29.388+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645513828910L + "'", long82 == 1645513828910L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T17:32:23.760+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T17:32:23.760+10:22' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes((int) (byte) 0);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTime dateTime18 = dateTime8.toDateTime(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime8.withMinuteOfHour(63133);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63133 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:29.504+00:00:00.100" + "'", str2, "2022-02-22T07:10:29.504+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime8 = property3.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        boolean boolean11 = mutableInterval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra((int) (byte) 1);
        boolean boolean17 = mutableInterval10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTime dateTime35 = property33.withMinimumValue();
        boolean boolean36 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime9.minusDays(63119929);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513829557L + "'", long2 == 1645513829557L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:10:29.657+00:00:00.100" + "'", str14, "2022-02-22T07:10:29.657+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513829557L + "'", long25 == 1645513829557L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 25829657 + "'", int29 == 25829657);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 25829657 + "'", int32 == 25829657);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = period16.withFieldAdded(durationFieldType17, 25774);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:29.683+00:00:00.100" + "'", str4, "2022-02-22T07:10:29.683+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        java.lang.String str27 = mutableInterval26.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        boolean boolean32 = property31.isLeap();
        org.joda.time.DateTime dateTime33 = property31.roundCeilingCopy();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 3, 1645513762121L, periodType37, chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime33.toMutableDateTime(chronology45);
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = mutableDateTime49.toCalendar(locale50);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setStart((org.joda.time.ReadableInstant) mutableDateTime49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:29.699+00:00:00.100" + "'", str2, "2022-02-22T07:10:29.699+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:29.699+00:00:00.100" + "'", str9, "2022-02-22T07:10:29.699+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:29.699+00:00:00.100" + "'", str16, "2022-02-22T07:10:29.699+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:10:29.010+00:00:00.100/2022-02-22T07:10:29.699+00:00:00.100" + "'", str27, "2022-02-22T07:10:29.010+00:00:00.100/2022-02-22T07:10:29.699+00:00:00.100");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513829599L + "'", long30 == 1645513829599L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1672531199900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.100,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period9 = mutableInterval0.toPeriod(periodType8);
        mutableInterval0.setEndMillis(1645513766329L);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period12.minusSeconds((int) (short) 1);
        org.joda.time.Period period16 = period12.plusWeeks((int) (short) -1);
        org.joda.time.Period period18 = period12.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = period18.getFieldTypes();
        org.joda.time.Period period21 = period18.multipliedBy(100);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        boolean boolean8 = dateTimeField7.isSupported();
        boolean boolean9 = dateTimeField7.isSupported();
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField7.set(1645513811387L, "", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 115200000, chronology30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology30);
        int[] intArray38 = mutablePeriod37.getValues();
        org.joda.time.Period period39 = period6.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime(chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = duration52.toPeriodTo((org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.Duration duration64 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days65 = duration64.toStandardDays();
        org.joda.time.Days days66 = duration64.toStandardDays();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration68 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime70 = instant69.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime71 = instant69.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime71);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513829908L + "'", long2 == 1645513829908L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T07:10:30.008+00:00:00.100" + "'", str13, "2022-02-22T07:10:30.008+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:10:30.009+00:00:00.100" + "'", str44, "2022-02-22T07:10:30.009+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T07:10:30.009+00:00:00.100" + "'", str55, "2022-02-22T07:10:30.009+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        mutablePeriod2.add(8, (int) ' ', 292278993, 63088836, 10, 292278993, (int) '4', (int) (byte) 100);
        java.lang.String str26 = mutablePeriod2.toString();
        org.joda.time.Period period27 = mutablePeriod2.toPeriod();
        org.joda.time.Period period29 = period27.withMinutes(63139743);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P8Y32M292278993W63088836DT10H292278994M92.100S" + "'", str26, "P8Y32M292278993W63088836DT10H292278994M92.100S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMillis(27425229);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 3, 1645513762121L, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str50 = dateTimeZone48.getNameKey(1645513759301L);
        java.lang.String str52 = dateTimeZone48.getName(1645513762160L);
        java.util.TimeZone timeZone53 = dateTimeZone48.toTimeZone();
        int int55 = dateTimeZone48.getStandardOffset(1645513761942L);
        int int57 = dateTimeZone48.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology58 = chronology41.withZone(dateTimeZone48);
        int int60 = dateTimeZone48.getOffset((long) 115200000);
        java.lang.String str62 = dateTimeZone48.getShortName(1645513770717L);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime25.toMutableDateTime(dateTimeZone48);
        long long65 = dateTimeZone48.previousTransition(1645513813526L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((java.lang.Object) dateTimeZone48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:30.272+00:00:00.100" + "'", str4, "2022-02-22T07:10:30.272+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513830172L + "'", long15 == 1645513830172L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25830272 + "'", int19 == 25830272);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25830272 + "'", int22 == 25830272);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-05-03T07:10:30.272+00:00:00.100" + "'", str27, "2022-05-03T07:10:30.272+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:22" + "'", str52, "+10:22");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 37320000 + "'", int55 == 37320000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 37320000 + "'", int57 == 37320000);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 37320000 + "'", int60 == 37320000);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:22" + "'", str62, "+10:22");
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645513813526L + "'", long65 == 1645513813526L);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1645513766040L, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        int int24 = dateTimeZone20.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone20);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645513760283L, 1645513801847L, chronology25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod();
        mutablePeriod30.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.DateTime dateTime39 = dateTime36.withMillisOfSecond((int) (short) 10);
        boolean boolean41 = dateTime39.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(0);
        boolean boolean60 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean63 = mutableInterval61.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Chronology chronology70 = mutableInterval64.getChronology();
        mutableInterval61.setChronology(chronology70);
        mutablePeriod30.setPeriod(100000L, 1645513762364L, chronology70);
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType29.getField(chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.secondOfMinute();
        org.joda.time.DurationField durationField75 = durationFieldType28.getField(chronology70);
        mutablePeriod26.setPeriod(1645513810861L, chronology70);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37320000 + "'", int24 == 37320000);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:10:30.369+00:00:00.100" + "'", str37, "2022-02-22T07:10:30.369+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:10:30.369+00:00:00.100" + "'", str44, "2022-02-22T07:10:30.369+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T07:10:30.369+00:00:00.100" + "'", str51, "2022-02-22T07:10:30.369+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        java.util.Locale locale25 = null;
        int int26 = property23.getMaximumTextLength(locale25);
        org.joda.time.DateTimeField dateTimeField27 = property23.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = property23.setCopy("2022-02-22T17:32:22.516+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:32:22.516+10:22\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:30.459+00:00:00.100" + "'", str4, "2022-02-22T07:10:30.459+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513830359L + "'", long15 == 1645513830359L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25830459 + "'", int19 == 25830459);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25830459 + "'", int22 == 25830459);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone29);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period31.minusSeconds((int) (short) 1);
        org.joda.time.Period period35 = period31.plusWeeks((int) (short) -1);
        org.joda.time.Period period37 = period31.minusMillis(4);
        org.joda.time.Interval interval38 = interval30.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        java.lang.String str43 = property42.getName();
        org.joda.time.DateTime dateTime44 = property42.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration48.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration48);
        boolean boolean63 = interval30.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone66);
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period70 = period68.minusSeconds((int) (short) 1);
        org.joda.time.Period period72 = period68.plusWeeks((int) (short) -1);
        org.joda.time.Period period74 = period68.minusMillis(4);
        org.joda.time.Interval interval75 = interval67.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        boolean boolean77 = interval30.contains((org.joda.time.ReadableInterval) interval75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        long long80 = interval79.toDurationMillis();
        boolean boolean81 = interval30.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.MutableInterval mutableInterval82 = interval79.toMutableInterval();
        boolean boolean83 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval79);
        mutableInterval26.setDurationBeforeEnd(1645513761504L);
        mutableInterval26.setStartMillis(0L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:30.514+00:00:00.100" + "'", str2, "2022-02-22T07:10:30.514+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:30.514+00:00:00.100" + "'", str9, "2022-02-22T07:10:30.514+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:30.514+00:00:00.100" + "'", str16, "2022-02-22T07:10:30.514+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645513830414L + "'", long41 == 1645513830414L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfEra" + "'", str43, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:10:30.514+00:00:00.100" + "'", str54, "2022-02-22T07:10:30.514+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = dateTime14.toString("2022-02-22T07:09:22.121Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513830583L + "'", long2 == 1645513830583L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(63121447, 0, 100, 366, 63095888, 63114585, 25813626, 63138598);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(25813626, 8, 20, 63147663, 502, 63128571);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63147663 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        org.joda.time.Duration duration28 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.Instant instant39 = instant31.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Instant instant52 = instant39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 100);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((-1L), 1L, periodType55, chronology56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.minuteOfDay();
        org.joda.time.DurationField durationField67 = chronology64.halfdays();
        org.joda.time.Period period68 = duration41.toPeriod(periodType55, chronology64);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1645513790850L, periodType55);
        int int70 = periodType55.size();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration28, periodType55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period73 = period71.plusDays(25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:30.904+00:00:00.100" + "'", str2, "2022-02-22T07:10:30.904+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:30.904+00:00:00.100" + "'", str15, "2022-02-22T07:10:30.904+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:10:30.904+00:00:00.100" + "'", str44, "2022-02-22T07:10:30.904+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.joda.time.Period period1 = new org.joda.time.Period(1645513803471L);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology11.getZone();
        org.joda.time.DurationField durationField31 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology11.dayOfMonth();
        long long34 = dateTimeField32.roundHalfEven(1645513793656L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645487999900L + "'", long34 == 1645487999900L);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant39 = instant37.toInstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:31.037+00:00:00.100" + "'", str4, "2022-02-22T07:10:31.037+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513830937L + "'", long15 == 1645513830937L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25831037 + "'", int19 == 25831037);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25831037 + "'", int22 == 25831037);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645513830937L + "'", long27 == 1645513830937L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfEra();
        boolean boolean10 = dateTime4.isAfter(1645513769570L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime4.withSecondOfMinute(25813094);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25813094 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513830987L + "'", long2 == 1645513830987L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T17:31:31.496+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T17:31:31.496+10:22' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime8.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        java.lang.String str24 = dateTimeZone20.getName(1645513762160L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime26 = dateTime8.withZone(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = new org.joda.time.Interval(1645513770033L, (long) 63100366, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645513831099L + "'", long4 == 1645513831099L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:10:31.199+00:00:00.100" + "'", str11, "2022-02-22T07:10:31.199+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:22" + "'", str24, "+10:22");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval0.containsNow();
        mutableInterval0.setEndMillis(1645513776987L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(52);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis(0);
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears(37320000);
        org.joda.time.Instant instant45 = dateTime44.toInstant();
        org.joda.time.DateTime dateTime47 = dateTime44.minusYears(63111089);
        mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:10:31.296+00:00:00.100" + "'", str18, "2022-02-22T07:10:31.296+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:10:31.296+00:00:00.100" + "'", str34, "2022-02-22T07:10:31.296+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-05-03T17:32:01.447+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-05-03T17:32:01.447+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval29.containsNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval47.toInterval();
        org.joda.time.Interval interval56 = interval54.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime57 = interval54.getStart();
        boolean boolean58 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) interval54);
        boolean boolean59 = mutableInterval26.contains((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType63 = period62.getPeriodType();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.Period period65 = mutableInterval26.toPeriod(periodType63);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        int int71 = period69.getValue(5);
        org.joda.time.Period period72 = period65.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period73 = period69.toPeriod();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:31.424+00:00:00.100" + "'", str2, "2022-02-22T07:10:31.424+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:31.424+00:00:00.100" + "'", str9, "2022-02-22T07:10:31.424+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:31.424+00:00:00.100" + "'", str16, "2022-02-22T07:10:31.424+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645513831324L + "'", long45 == 1645513831324L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        int int57 = dateTime56.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property58 = dateTime56.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.toDateTime(chronology64);
        org.joda.time.DateTime dateTime66 = dateTime63.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int68 = dateTime66.get(dateTimeFieldType67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval18.contains((org.joda.time.ReadableInterval) interval69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime.Property property74 = dateTime72.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumTextLength(locale76);
        java.lang.String str78 = property74.getName();
        org.joda.time.Interval interval79 = property74.toInterval();
        org.joda.time.Interval interval80 = interval18.overlap((org.joda.time.ReadableInterval) interval79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime81 = interval80.getEnd();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513831354L + "'", long24 == 1645513831354L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:10:31.455+00:00:00.100" + "'", str54, "2022-02-22T07:10:31.455+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T07:10:31.455+00:00:00.100" + "'", str61, "2022-02-22T07:10:31.455+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645513831355L + "'", long73 == 1645513831355L);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "yearOfEra" + "'", str78, "yearOfEra");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNull(interval80);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period33 = period31.withYears(52);
        org.joda.time.Period period35 = period31.multipliedBy(2022);
        org.joda.time.Period period37 = period35.plusMonths((int) (byte) 10);
        int[] intArray38 = period35.getValues();
        int[] intArray41 = chronology18.get((org.joda.time.ReadablePeriod) period35, 1645513796165L, 1645513773396000L);
        org.joda.time.DurationField durationField42 = chronology18.seconds();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod();
        mutablePeriod45.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime54.plusWeeks((int) (byte) 10);
        boolean boolean58 = mutableInterval48.contains((org.joda.time.ReadableInstant) dateTime57);
        mutablePeriod45.setPeriod((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1645513760253L, chronology68);
        org.joda.time.DateTimeField dateTimeField71 = chronology68.year();
        mutablePeriod45.add(1645513767484L, chronology68);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((-359999779L), 33166356552000L, chronology68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) durationField42, chronology68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:10:31.527+00:00:00.100" + "'", str25, "2022-02-22T07:10:31.527+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[52092, 1, 1, 6, 0, 6, 39, 835]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645513831427L + "'", long55 == 1645513831427L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        long long10 = dateTimeField7.addWrapField(1645513760382L, 22);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(4);
        org.joda.time.LocalDate localDate20 = dateTime17.toLocalDate();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        int int37 = yearMonthDay36.size();
        int[] intArray42 = new int[] { 40, 40, '#', 10 };
        int int43 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay36, intArray42);
        int int44 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate20, intArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDate20.getFieldType(63095888);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63095888");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2339737760382L + "'", long10 == 2339737760382L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645513831455L + "'", long13 == 1645513831455L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645513831456L + "'", long32 == 1645513831456L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1645513806420L, 1645513771344L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(25831104, 2, 63120, 52, 25831104, 25830425, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Seconds seconds9 = duration5.toStandardSeconds();
        org.joda.time.Duration duration10 = duration5.toDuration();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1L), 1L, periodType28, chronology29);
        java.lang.String str31 = periodType28.toString();
        java.lang.String str32 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645513760165L, periodType28);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant24, periodType28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = dateTime57.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration52);
        int int67 = duration5.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType71 = periodType70.withMinutesRemoved();
        org.joda.time.Period period72 = new org.joda.time.Period((long) (short) 0, 1645513761744L, periodType70);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone76);
        org.joda.time.Period period78 = org.joda.time.Period.ZERO;
        org.joda.time.Period period80 = period78.minusSeconds((int) (short) 1);
        org.joda.time.Period period82 = period78.plusWeeks((int) (short) -1);
        org.joda.time.Period period84 = period78.minusMillis(4);
        org.joda.time.Interval interval85 = interval77.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Chronology chronology86 = interval85.getChronology();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1645513766040L, chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str93 = dateTimeZone91.getNameKey(1645513759301L);
        int int95 = dateTimeZone91.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology96 = chronology86.withZone(dateTimeZone91);
        org.joda.time.Period period97 = duration38.toPeriod(periodType70, chronology96);
        org.joda.time.MutablePeriod mutablePeriod98 = new org.joda.time.MutablePeriod(1645513770330L, 1645513793600L, periodType70);
        org.joda.time.Period period99 = mutablePeriod98.toPeriod();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:31.774+00:00:00.100" + "'", str15, "2022-02-22T07:10:31.774+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PeriodType[Time]" + "'", str31, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Time" + "'", str32, "Time");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645513831674L + "'", long42 == 1645513831674L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T07:10:31.774+00:00:00.100" + "'", str58, "2022-02-22T07:10:31.774+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 37320000 + "'", int95 == 37320000);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        boolean boolean13 = dateTime11.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean35 = mutableInterval33.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        mutableInterval33.setChronology(chronology42);
        mutablePeriod2.setPeriod(100000L, 1645513762364L, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType1.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.secondOfMinute();
        org.joda.time.DurationField durationField47 = durationFieldType0.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.millisOfDay();
        java.util.Locale locale51 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long52 = dateTimeField48.set(1645513785464L, "2022-02-22T17:32:17.192+10:22", locale51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:32:17.192+10:22\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:31.818+00:00:00.100" + "'", str9, "2022-02-22T07:10:31.818+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:31.818+00:00:00.100" + "'", str16, "2022-02-22T07:10:31.818+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T07:10:31.818+00:00:00.100" + "'", str23, "2022-02-22T07:10:31.818+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        int int17 = durationField15.getValue(1645513785009L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 625 + "'", int17 == 625);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        mutablePeriod0.setPeriod(1645513808968L);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.clockhourOfHalfday();
        java.util.Locale locale29 = null;
        int int30 = dateTimeField28.getMaximumTextLength(locale29);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T07:10:32.195+00:00:00.100" + "'", str3, "2022-02-22T07:10:32.195+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T17:32:07.256+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:32:07.256+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        boolean boolean8 = dateTimeField7.isSupported();
        boolean boolean10 = dateTimeField7.isLeap(1645513765710L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period35 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime36 = dateTime33.toLocalTime();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime36, 63124, locale38);
        int int41 = dateTimeField7.getLeapAmount(1645513778646L);
        int int42 = dateTimeField7.getMaximumValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:32.523+00:00:00.100" + "'", str15, "2022-02-22T07:10:32.523+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645513832423L + "'", long29 == 1645513832423L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "63124" + "'", str39, "63124");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = property3.addToCopy(1645513774059L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513774059");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513832454L + "'", long2 == 1645513832454L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period19 = period16.minusYears(3);
        org.joda.time.Period period21 = period16.withDays((int) 'a');
        int int22 = period21.getMinutes();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period21.toDurationFrom(readableInstant23);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod();
        mutablePeriod25.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        boolean boolean38 = mutableInterval28.contains((org.joda.time.ReadableInstant) dateTime37);
        mutablePeriod25.setPeriod((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration55.toPeriod();
        boolean boolean58 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration49, periodType59);
        long long61 = duration49.getMillis();
        mutablePeriod25.add((org.joda.time.ReadableDuration) duration49);
        boolean boolean63 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645513832465L + "'", long35 == 1645513832465L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645513832465L + "'", long42 == 1645513832465L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100000L + "'", long61 == 100000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 8, periodType33, chronology40);
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration31, chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.millisOfSecond();
        org.joda.time.Period period46 = new org.joda.time.Period(1645513783355L, chronology40);
        boolean boolean47 = localTime25.equals((java.lang.Object) chronology40);
        org.joda.time.DurationField durationField48 = chronology40.millis();
        long long49 = durationField48.getUnitMillis();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:32.627+00:00:00.100" + "'", str4, "2022-02-22T07:10:32.627+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513832527L + "'", long18 == 1645513832527L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        int int22 = dateTimeField21.getMinimumValue();
        int int25 = dateTimeField21.getDifference(1645513798445L, 1645513807435L);
        org.joda.time.DurationField durationField26 = dateTimeField21.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-8990) + "'", int25 == (-8990));
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        long long7 = dateTimeZone5.convertUTCToLocal(1645513763679L);
        java.lang.String str9 = dateTimeZone5.getShortName(1645513769549L);
        int int11 = dateTimeZone5.getOffsetFromLocal(1645513760934L);
        java.lang.String str12 = dateTimeZone5.toString();
        java.util.TimeZone timeZone13 = dateTimeZone5.toTimeZone();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513832603L + "'", long2 == 1645513832603L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513763779L + "'", long7 == 1645513763779L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.100" + "'", str9, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.100" + "'", str12, "+00:00:00.100");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField30 = dateTimeField29.getRangeDurationField();
        long long32 = durationField30.getValueAsLong(1645513807369L);
        boolean boolean33 = durationField30.isSupported();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 27425230L + "'", long32 == 27425230L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds(502);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        int[] intArray17 = period14.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType18.getDurationType();
        org.joda.time.Period period22 = period14.withFieldAdded(durationFieldType20, 4);
        org.joda.time.Days days23 = period14.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:33.198+00:00:00.100" + "'", str4, "2022-02-22T07:10:33.198+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfWeek" + "'", str19, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("10");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        java.lang.String str10 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.era();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.add((long) 63121637, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str10, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.hourOfHalfday();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField27.getAsText((int) (byte) 1, locale29);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T07:10:33.409+00:00:00.100" + "'", str3, "2022-02-22T07:10:33.409+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(63114399, 22, 63138973, (int) (short) 100, 63136697, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(63139384);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        java.util.Locale locale8 = null;
        int int9 = property3.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime10 = property3.getDateTime();
        int int11 = dateTime10.getCenturyOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513833525L + "'", long2 == 1645513833525L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        int[] intArray20 = chronology11.get((org.joda.time.ReadablePartial) yearMonthDay18, 1645513760770L);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1645513793029L, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval22 = new org.joda.time.Interval(1645513799953L, 1645513776860L, chronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513833543L + "'", long14 == 1645513833543L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2022, 2, 22]");
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        java.lang.String str17 = dateTimeField15.getAsText(1645513775484L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField15.getAsShortText((int) '#', locale19);
        long long22 = dateTimeField15.remainder(1645513765751L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(4);
        org.joda.time.LocalDate localDate43 = dateTime40.toLocalDate();
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDate43, 9, locale45);
        java.lang.Object obj47 = null;
        boolean boolean48 = localDate43.equals(obj47);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType64 = periodType63.withYearsRemoved();
        org.joda.time.PeriodType periodType65 = periodType64.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        java.lang.Object obj71 = mutableInterval66.clone();
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfEra();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 3, 1645513762121L, periodType64, chronology72);
        org.joda.time.DurationField durationField75 = chronology72.eras();
        org.joda.time.DateTime dateTime76 = dateTime54.toDateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField77 = chronology72.clockhourOfDay();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 115200000, chronology72);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology72);
        int[] intArray80 = mutablePeriod79.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField15.addWrapPartial((org.joda.time.ReadablePartial) localDate43, 25832010, intArray80, 63121637);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25832010");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "25775584" + "'", str17, "25775584");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645513833559L + "'", long36 == 1645513833559L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "September" + "'", str46, "September");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T07:10:33.659+00:00:00.100" + "'", str55, "2022-02-22T07:10:33.659+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, 16, 381]");
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1645513804238L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513804238 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        int[] intArray30 = mutablePeriod29.getValues();
        org.joda.time.Period period32 = org.joda.time.Period.hours((int) 'a');
        org.joda.time.Period period34 = period32.minusMillis((int) ' ');
        mutablePeriod29.add((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period37 = period34.withHours(5);
        org.joda.time.Weeks weeks38 = period37.toStandardWeeks();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:10:33.708+00:00:00.100" + "'", str5, "2022-02-22T07:10:33.708+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(weeks38);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.getDateTime();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        java.lang.String str37 = periodType34.toString();
        java.lang.String str38 = periodType34.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513760165L, periodType34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant30, periodType34);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = duration18.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime55 = dateTime16.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Interval interval61 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean63 = interval61.isBefore(1645513800000L);
        boolean boolean64 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Duration duration65 = mutableInterval0.toDuration();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:10:34.006+00:00:00.100" + "'", str8, "2022-02-22T07:10:34.006+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T07:10:34.006+00:00:00.100" + "'", str21, "2022-02-22T07:10:34.006+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[Time]" + "'", str37, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645513833906L + "'", long48 == 1645513833906L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T07:10:34.006+00:00:00.100" + "'", str58, "2022-02-22T07:10:34.006+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        java.lang.String str16 = durationField15.getName();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        int int45 = dateTimeField43.getMinimumValue((long) 9);
        int int47 = dateTimeField43.getLeapAmount(1645513763885L);
        int int48 = dateTime32.get(dateTimeField43);
        org.joda.time.DurationField durationField49 = dateTimeField43.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType50 = durationField49.getType();
        int int51 = durationField15.compareTo(durationField49);
        long long54 = durationField15.getValueAsLong(1645513788699L, 1645513828749L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "months" + "'", str16, "months");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645513833973L + "'", long19 == 1645513833973L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:10:34.073+00:00:00.100" + "'", str26, "2022-02-22T07:10:34.073+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 430 + "'", int48 == 430);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 625L + "'", long54 == 625L);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        int int7 = period0.getHours();
        int int8 = period0.getSeconds();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513760165L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period40 = duration39.toPeriod();
        int int41 = duration1.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(0);
        boolean boolean60 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property61 = dateTime46.year();
        org.joda.time.LocalDateTime localDateTime62 = dateTime46.toLocalDateTime();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType64 = periodType63.withMinutesRemoved();
        org.joda.time.Period period65 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime46, periodType64);
        long long66 = duration1.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:34.312+00:00:00.100" + "'", str4, "2022-02-22T07:10:34.312+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513834212L + "'", long31 == 1645513834212L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:10:34.312+00:00:00.100" + "'", str44, "2022-02-22T07:10:34.312+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T07:10:34.312+00:00:00.100" + "'", str51, "2022-02-22T07:10:34.312+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T17:31:42.440+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T17:31:42.440+10:22' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime11 = dateTime6.plusWeeks(3);
        org.joda.time.DateTime.Property property12 = dateTime6.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime6.withMillisOfSecond(63109642);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63109642 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:34.566+00:00:00.100" + "'", str2, "2022-02-22T07:10:34.566+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        int int8 = dateTimeField6.get((long) 63101169);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513834561L + "'", long2 == 1645513834561L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 8, periodType58, chronology65);
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration56, chronology65);
        int int69 = mutablePeriod54.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.yearOfEra();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.minuteOfDay();
        org.joda.time.DurationField durationField81 = durationFieldType71.getField(chronology78);
        mutablePeriod54.add(durationFieldType71, 0);
        org.joda.time.Interval interval84 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod54);
        mutablePeriod54.addMonths(4);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513834667L + "'", long24 == 1645513834667L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(interval84);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.withEra((int) (byte) 1);
        org.joda.time.LocalTime localTime9 = dateTime8.toLocalTime();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        long long21 = dateTimeField18.add(1645513768262L, 22);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField18.getType();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        int int28 = dateTime24.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        int int38 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDate localDate39 = dateTime37.toLocalDate();
        org.joda.time.DateTimeField dateTimeField41 = localDate39.getField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks((int) (byte) 10);
        int int47 = dateTime43.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTimeISO();
        int int57 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDate localDate58 = dateTime56.toLocalDate();
        org.joda.time.DateTimeField dateTimeField60 = localDate58.getField((int) (short) 0);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType62 = periodType61.withYearsRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withSecondsRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate58, periodType63);
        int int65 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType67 = periodType66.withYearsRemoved();
        org.joda.time.PeriodType periodType68 = periodType67.withSecondsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localDate58, periodType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513834723L + "'", long2 == 1645513834723L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645513768284L + "'", long21 == 1645513768284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513834723L + "'", long25 == 1645513834723L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:10:34.823+00:00:00.100" + "'", str31, "2022-02-22T07:10:34.823+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645513834723L + "'", long44 == 1645513834723L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:10:34.823+00:00:00.100" + "'", str50, "2022-02-22T07:10:34.823+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property22.addWrapFieldToCopy((int) (short) 0);
        int int26 = property22.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = property22.addToCopy(1645513793200L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513793200 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:34.910+00:00:00.100" + "'", str4, "2022-02-22T07:10:34.910+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:34.911+00:00:00.100" + "'", str15, "2022-02-22T07:10:34.911+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        int int57 = dateTime56.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property58 = dateTime56.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.toDateTime(chronology64);
        org.joda.time.DateTime dateTime66 = dateTime63.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int68 = dateTime66.get(dateTimeFieldType67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval18.contains((org.joda.time.ReadableInterval) interval69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime.Property property74 = dateTime72.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumTextLength(locale76);
        java.lang.String str78 = property74.getName();
        org.joda.time.Interval interval79 = property74.toInterval();
        org.joda.time.Interval interval80 = interval18.overlap((org.joda.time.ReadableInterval) interval79);
        // The following exception was thrown during execution in test generation
        try {
            long long81 = interval80.getStartMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513834955L + "'", long24 == 1645513834955L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:10:35.055+00:00:00.100" + "'", str54, "2022-02-22T07:10:35.055+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T07:10:35.055+00:00:00.100" + "'", str61, "2022-02-22T07:10:35.055+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645513834955L + "'", long73 == 1645513834955L);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "yearOfEra" + "'", str78, "yearOfEra");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNull(interval80);
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes(63094282);
        int int20 = dateTime19.getMinuteOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513835143L + "'", long2 == 1645513835143L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:10:35.243+00:00:00.100" + "'", str8, "2022-02-22T07:10:35.243+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1188 + "'", int20 == 1188);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513766040L, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(115200040, 63098347, 63147663, 252, 25814300, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.Duration duration26 = interval3.toDuration();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.negated();
        org.joda.time.Period period30 = period27.withDays(1);
        int int32 = period27.getValue((int) (short) 0);
        org.joda.time.Interval interval33 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = interval33.abuts(readableInterval34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod();
        mutablePeriod36.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        boolean boolean49 = mutableInterval39.contains((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod36.setPeriod((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Chronology chronology59 = chronology57.withUTC();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod();
        mutablePeriod60.setMonths((int) ' ');
        java.lang.Object obj63 = mutablePeriod60.clone();
        long long66 = chronology57.add((org.joda.time.ReadablePeriod) mutablePeriod60, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField67 = chronology57.weekyear();
        mutableInterval39.setChronology(chronology57);
        boolean boolean69 = interval33.abuts((org.joda.time.ReadableInterval) mutableInterval39);
        long long70 = mutableInterval39.getStartMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645513835658L + "'", long46 == 1645513835658L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "P32M");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1851379200000L + "'", long66 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        java.lang.String str13 = property12.toString();
        int int14 = property12.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone17);
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.Period period23 = period19.plusWeeks((int) (short) -1);
        org.joda.time.Period period25 = period19.minusMillis(4);
        org.joda.time.Interval interval26 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period28 = period19.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period42 = period19.plusWeeks(100);
        org.joda.time.Period period43 = period19.negated();
        org.joda.time.MutablePeriod mutablePeriod44 = period19.toMutablePeriod();
        boolean boolean45 = property12.equals((java.lang.Object) period19);
        int int46 = period19.getMinutes();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:35.788+00:00:00.100" + "'", str2, "2022-02-22T07:10:35.788+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[year]" + "'", str13, "Property[year]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withYearsRemoved();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval14 = interval7.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval28 = interval14.gap((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Chronology chronology29 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((java.lang.Object) 1645513819075L, periodType2, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645513835781L + "'", long5 == 1645513835781L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        java.lang.String str12 = property9.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:35.989+00:00:00.100" + "'", str2, "2022-02-22T07:10:35.989+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[hourOfDay]" + "'", str12, "Property[hourOfDay]");
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        org.joda.time.DateTime dateTime23 = dateTime15.minus(1645513766926L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTimeISO();
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime32.withMillisOfSecond((-8990));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -8990 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:36.228+00:00:00.100" + "'", str9, "2022-02-22T07:10:36.228+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:10:36.228+00:00:00.100" + "'", str26, "2022-02-22T07:10:36.228+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:36.259+00:00:00.100" + "'", str16, "2022-02-22T07:10:36.259+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        mutablePeriod2.addMonths(52);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        mutablePeriod2.setPeriod(1645513764889L, chronology59);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Chronology chronology70 = mutableInterval64.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfEra();
        org.joda.time.Chronology chronology72 = chronology70.withUTC();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod();
        mutablePeriod73.setMonths((int) ' ');
        java.lang.Object obj76 = mutablePeriod73.clone();
        long long79 = chronology70.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField80 = chronology70.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology70);
        mutablePeriod2.add(1645513766979L, chronology70);
        // The following exception was thrown during execution in test generation
        try {
            long long87 = chronology70.getDateTimeMillis(0, 40, 63094282, 63119816);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:10:36.292+00:00:00.100" + "'", str5, "2022-02-22T07:10:36.292+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:10:36.292+00:00:00.100" + "'", str18, "2022-02-22T07:10:36.292+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T07:10:36.292+00:00:00.100" + "'", str33, "2022-02-22T07:10:36.292+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "P32M");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1851379200000L + "'", long79 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime6 = dateTime1.toLocalTime();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period17 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration19 = duration8.minus(0L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1L), 1L, periodType24, chronology25);
        java.lang.String str27 = periodType24.toString();
        java.lang.String str28 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760165L, periodType24);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant20, periodType24);
        boolean boolean31 = localTime6.equals((java.lang.Object) readableInstant20);
        org.joda.time.Chronology chronology32 = localTime6.getChronology();
        java.lang.String str33 = chronology32.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513836218L + "'", long2 == 1645513836218L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:10:36.318+00:00:00.100" + "'", str11, "2022-02-22T07:10:36.318+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Time]" + "'", str27, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Time" + "'", str28, "Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval31 = interval24.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Interval interval45 = interval31.gap((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean46 = interval13.contains((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        java.lang.String str63 = property62.getName();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration68);
        boolean boolean83 = interval50.isAfter((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean84 = interval13.isAfter((org.joda.time.ReadableInterval) interval50);
        boolean boolean85 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval50);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1645513766895L);
        int int88 = mutablePeriod87.getYears();
        org.joda.time.Interval interval89 = interval50.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod87);
        long long90 = interval89.getStartMillis();
        org.joda.time.Interval interval92 = interval89.withEndMillis(1645513814616L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513836238L + "'", long11 == 1645513836238L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513836238L + "'", long22 == 1645513836238L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645513836238L + "'", long61 == 1645513836238L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfEra" + "'", str63, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T07:10:36.338+00:00:00.100" + "'", str74, "2022-02-22T07:10:36.338+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNotNull(interval92);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) ' ');
        int int13 = dateTime10.getSecondOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:36.637+00:00:00.100" + "'", str2, "2022-02-22T07:10:36.637+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        org.joda.time.DateTime dateTime21 = dateTime8.withChronology(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        boolean boolean28 = dateTime26.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(0);
        boolean boolean47 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime49 = mutableInterval48.getEnd();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfMonth(10);
        org.joda.time.Duration duration54 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:36.864+00:00:00.100" + "'", str2, "2022-02-22T07:10:36.864+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:10:36.864+00:00:00.100" + "'", str24, "2022-02-22T07:10:36.864+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:10:36.864+00:00:00.100" + "'", str31, "2022-02-22T07:10:36.864+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:10:36.864+00:00:00.100" + "'", str38, "2022-02-22T07:10:36.864+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField23 = chronology19.months();
        boolean boolean24 = durationFieldType7.isSupported(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(63112184, 63112184, 0, 63138623, 0, 59, 0, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63138623 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) ' ', (int) ' ', 2022, (int) 'a');
        mutablePeriod4.setMonths((int) (short) 100);
        int int7 = mutablePeriod4.getMonths();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        boolean boolean13 = dateTimeField10.isSupported();
        org.joda.time.DurationField durationField14 = dateTimeField10.getLeapDurationField();
        long long16 = dateTimeField10.remainder(1645513803277L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeField10.getAsShortText(1645513772605L, locale18);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3277L + "'", long16 == 3277L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "429" + "'", str19, "429");
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(63098347);
        int int25 = property22.getMaximumValueOverall();
        org.joda.time.DateTime dateTime27 = property22.addWrapFieldToCopy(25760283);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:37.027+00:00:00.100" + "'", str4, "2022-02-22T07:10:37.027+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:37.028+00:00:00.100" + "'", str15, "2022-02-22T07:10:37.028+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 366 + "'", int25 == 366);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DurationField durationField21 = dateTimeField20.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        int int29 = yearMonthDay28.size();
        int[] intArray34 = new int[] { 40, 40, '#', 10 };
        int int35 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay28, intArray34);
        long long37 = dateTimeField20.roundHalfFloor((long) (byte) 1);
        int int38 = dateTime9.get(dateTimeField20);
        long long40 = dateTimeField20.roundHalfCeiling(1645513801151L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513836947L + "'", long7 == 1645513836947L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 25837047 + "'", int11 == 25837047);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513836947L + "'", long24 == 1645513836947L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-100L) + "'", long37 == (-100L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1640995199900L + "'", long40 == 1640995199900L);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        mutablePeriod9.addYears(17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        boolean boolean31 = dateTime28.isAfterNow();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = dateTime28.withChronology(chronology38);
        mutablePeriod9.setPeriod((long) 63088836, 1645513764834L, chronology38);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime59);
        int int61 = mutablePeriod60.getSeconds();
        int int62 = mutablePeriod60.getSeconds();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        mutableInterval63.setInterval((org.joda.time.ReadableInterval) mutableInterval70);
        boolean boolean76 = mutableInterval70.containsNow();
        mutablePeriod60.add((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Duration duration78 = mutableInterval70.toDuration();
        org.joda.time.Duration duration80 = duration78.minus(1645513762241L);
        org.joda.time.Period period81 = new org.joda.time.Period(readableInstant43, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration82 = duration80.toDuration();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration80);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P-2720W-5DT-7H-9M-22.241S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P-2720W-5DT-7H-9M-22.241S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P-2720W-5DT-7H-9M-22.241S");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:10:37.070+00:00:00.100" + "'", str22, "2022-02-22T07:10:37.070+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:10:37.070+00:00:00.100" + "'", str53, "2022-02-22T07:10:37.070+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 40 + "'", int61 == 40);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 40 + "'", int62 == 40);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.Period period24 = period21.multipliedBy(17);
        java.lang.String str25 = period24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period24.get(durationFieldType26);
        org.joda.time.Period period29 = period24.withHours(63212);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:37.119+00:00:00.100" + "'", str4, "2022-02-22T07:10:37.119+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:37.119+00:00:00.100" + "'", str15, "2022-02-22T07:10:37.119+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT17M680S" + "'", str25, "PT17M680S");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(63102000);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration17.plus((long) 8);
        org.joda.time.Instant instant21 = instant13.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Instant instant34 = instant21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 100);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1L), 1L, periodType37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.minuteOfDay();
        org.joda.time.DurationField durationField49 = chronology46.halfdays();
        org.joda.time.Period period50 = duration23.toPeriod(periodType37, chronology46);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645513790850L, periodType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period52 = new org.joda.time.Period((java.lang.Object) dateTime9, periodType37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513837089L + "'", long2 == 1645513837089L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:10:37.189+00:00:00.100" + "'", str26, "2022-02-22T07:10:37.189+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        int int8 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration21 = interval20.toDuration();
        boolean boolean22 = duration1.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((java.lang.Object) 1645513765991L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration26 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration24, 63113468);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513765991 * 63113468");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:10:37.265+00:00:00.100" + "'", str5, "2022-02-22T07:10:37.265+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:10:37.265+00:00:00.100" + "'", str12, "2022-02-22T07:10:37.265+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.Period period37 = mutableInterval26.toPeriod();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(1645513765843L);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes(63099);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:37.340+00:00:00.100" + "'", str2, "2022-02-22T07:10:37.340+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:37.340+00:00:00.100" + "'", str9, "2022-02-22T07:10:37.340+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:37.340+00:00:00.100" + "'", str16, "2022-02-22T07:10:37.340+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(4);
        org.joda.time.LocalDate localDate29 = dateTime26.toLocalDate();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        boolean boolean40 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime39);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTimeISO();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(periodType45);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) mutablePeriod47);
        int int49 = mutablePeriod47.getMonths();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513837262L + "'", long22 == 1645513837262L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513837262L + "'", long37 == 1645513837262L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.DateTime dateTime7 = instant5.toDateTimeISO();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1813L) + "'", long6 == (-1813L));
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        boolean boolean20 = mutablePeriod16.equals((java.lang.Object) dateTime19);
        int int21 = mutablePeriod16.getMonths();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone36);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period38.minusSeconds((int) (short) 1);
        org.joda.time.Period period42 = period38.plusWeeks((int) (short) -1);
        org.joda.time.Period period44 = period38.minusMillis(4);
        org.joda.time.Interval interval45 = interval37.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Interval interval46 = interval25.gap((org.joda.time.ReadableInterval) interval45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = duration50.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime62 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = dateTime62.withZoneRetainFields(dateTimeZone64);
        int int66 = dateTime62.getHourOfDay();
        boolean boolean67 = interval45.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration68 = interval45.toDuration();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval69.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration72);
        mutableInterval69.setInterval(100000L, 1645513759601L);
        long long77 = mutableInterval69.getStartMillis();
        java.lang.String str78 = mutableInterval69.toString();
        boolean boolean79 = interval45.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str81 = durationFieldType80.toString();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.Interval interval85 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone84);
        org.joda.time.Period period86 = org.joda.time.Period.ZERO;
        org.joda.time.Period period88 = period86.minusSeconds((int) (short) 1);
        org.joda.time.Period period90 = period86.plusWeeks((int) (short) -1);
        org.joda.time.Period period92 = period86.minusMillis(4);
        org.joda.time.Interval interval93 = interval85.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Chronology chronology94 = interval93.getChronology();
        java.lang.String str95 = chronology94.toString();
        org.joda.time.DurationField durationField96 = durationFieldType80.getField(chronology94);
        org.joda.time.DateTimeField dateTimeField97 = chronology94.centuryOfEra();
        org.joda.time.Interval interval98 = interval45.withChronology(chronology94);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInterval) interval98);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:37.624+00:00:00.100" + "'", str9, "2022-02-22T07:10:37.624+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNull(interval46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T07:10:37.624+00:00:00.100" + "'", str56, "2022-02-22T07:10:37.624+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 7 + "'", int66 == 7);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100000L + "'", long77 == 100000L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-01T00:01:40.100+00:00:00.100/2022-02-22T07:09:19.701+00:00:00.100" + "'", str78, "1970-01-01T00:01:40.100+00:00:00.100/2022-02-22T07:09:19.701+00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "seconds" + "'", str81, "seconds");
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str95, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        int int12 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime25.centuryOfEra();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        boolean boolean36 = mutableInterval30.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        boolean boolean38 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval28.overlap((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone43);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period47 = period45.minusSeconds((int) (short) 1);
        org.joda.time.Period period49 = period45.plusWeeks((int) (short) -1);
        org.joda.time.Period period51 = period45.minusMillis(4);
        org.joda.time.Interval interval52 = interval44.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Interval interval65 = interval44.gap((org.joda.time.ReadableInterval) interval64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval66.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration69.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = dateTime81.withZoneRetainFields(dateTimeZone83);
        int int85 = dateTime81.getHourOfDay();
        boolean boolean86 = interval64.isBefore((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration87 = interval64.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval88 = interval40.overlap((org.joda.time.ReadableInterval) interval64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:37.679+00:00:00.100" + "'", str9, "2022-02-22T07:10:37.679+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:37.679+00:00:00.100" + "'", str15, "2022-02-22T07:10:37.679+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNull(interval65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T07:10:37.679+00:00:00.100" + "'", str75, "2022-02-22T07:10:37.679+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 7 + "'", int85 == 7);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        int int17 = mutablePeriod2.getMinutes();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Seconds seconds25 = duration21.toStandardSeconds();
        org.joda.time.Duration duration26 = duration21.toDuration();
        org.joda.time.Duration duration28 = duration26.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime33.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond((int) (short) 10);
        boolean boolean45 = dateTime43.isBefore((-1L));
        int int46 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        java.lang.String str48 = periodType47.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 8, periodType55, chronology62);
        mutablePeriod51.setPeriod((org.joda.time.ReadableDuration) duration53, chronology62);
        int int66 = mutablePeriod51.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.minuteOfDay();
        org.joda.time.DurationField durationField78 = durationFieldType68.getField(chronology75);
        mutablePeriod51.add(durationFieldType68, 0);
        boolean boolean81 = periodType47.isSupported(durationFieldType68);
        org.joda.time.Period period82 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime43, periodType47);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration28);
        long long84 = duration28.getMillis();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:10:37.735+00:00:00.100" + "'", str31, "2022-02-22T07:10:37.735+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:10:37.735+00:00:00.100" + "'", str41, "2022-02-22T07:10:37.735+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Millis" + "'", str48, "Millis");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 37320000L + "'", long84 == 37320000L);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        int int16 = dateTimeField14.getMinimumValue((long) 20);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        int[] intArray34 = chronology25.get((org.joda.time.ReadablePartial) yearMonthDay32, 1645513760770L);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        int int36 = yearMonthDay32.get(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfEra();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval43.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Interval interval48 = interval42.withDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Interval interval49 = interval42.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Interval interval63 = interval49.gap((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Chronology chronology64 = mutableInterval50.getChronology();
        org.joda.time.Period period66 = org.joda.time.Period.weeks(292278993);
        int[] intArray68 = chronology64.get((org.joda.time.ReadablePeriod) period66, 1645513801341L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = dateTimeField14.addWrapField((org.joda.time.ReadablePartial) yearMonthDay32, 63145797, intArray68, 25831037);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63145797");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645513837786L + "'", long28 == 1645513837786L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645513837786L + "'", long40 == 1645513837786L);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 2720, 5, 7, 10, 1, 341]");
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(63109658, 63119, (int) (byte) 0, 63121447, 63092);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63121447 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.joda.time.Period period1 = org.joda.time.Period.days(7);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str12 = dateTimeZone10.getName(52L);
        long long15 = dateTimeZone10.adjustOffset(1645513796129L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513796129L + "'", long15 == 1645513796129L);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField8.subtract(1645513800950L, 1645513821424L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1645513821424");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513837964L + "'", long2 == 1645513837964L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 3, 1645513762121L, periodType9, chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology17.months();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getNameKey(1645513759301L);
        java.lang.String str28 = dateTimeZone24.getName(1645513762160L);
        java.util.TimeZone timeZone29 = dateTimeZone24.toTimeZone();
        int int31 = dateTimeZone24.getStandardOffset(1645513761942L);
        int int33 = dateTimeZone24.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology34 = chronology17.withZone(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(63123709, 63101202, 37345, 25830425, 63131370, 63099, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25830425 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:22" + "'", str28, "+10:22");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37320000 + "'", int31 == 37320000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 37320000 + "'", int33 == 37320000);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513760165L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        org.joda.time.Period period20 = period18.multipliedBy(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = period18.plusWeeks(63101169);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(25760283, 9, 63088836, 63111649, 1, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63111649 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long11 = dateTimeZone8.convertLocalToUTC(1645513775652L, true);
        long long13 = dateTimeZone8.convertUTCToLocal((long) 6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(63138932, 123, (int) '#', 63124, 63101169, 63102000, 63142010, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63124 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513775552L + "'", long11 == 1645513775552L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 106L + "'", long13 == 106L);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        long long82 = dateTime80.getMillis();
        int int83 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property84 = dateTime80.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime86 = property84.addToCopy(1645513833525L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513833525 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:38.507+00:00:00.100" + "'", str16, "2022-02-22T07:10:38.507+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513838407L + "'", long34 == 1645513838407L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str66, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T07:10:38.508+00:00:00.100" + "'", str72, "2022-02-22T07:10:38.508+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645513837910L + "'", long82 == 1645513837910L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-22T17:32:22.219+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:32:22.219+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1, (-52), 63148593, 87, 0, 25832373, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 87 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfDay();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod14, (org.joda.time.ReadableInstant) dateTime19);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = mutablePeriod14.getValue(63094);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63094");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:10:39.014+00:00:00.100" + "'", str17, "2022-02-22T07:10:39.014+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513760165L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText(22, locale21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField19.getAsText(1645513776710L, locale24);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField19.set(1645513815866L, 25837924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25837924 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "22" + "'", str22, "22");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "810" + "'", str25, "810");
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (short) 10);
        boolean boolean7 = dateTime5.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        boolean boolean26 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean29 = mutableInterval27.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        mutableInterval27.setChronology(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) 63125790, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T07:10:39.081+00:00:00.100" + "'", str3, "2022-02-22T07:10:39.081+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:39.081+00:00:00.100" + "'", str10, "2022-02-22T07:10:39.081+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:10:39.081+00:00:00.100" + "'", str17, "2022-02-22T07:10:39.081+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        java.lang.String str6 = dateTimeZone2.getName(1645513762160L);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        int int9 = dateTimeZone2.getStandardOffset(1645513761942L);
        org.joda.time.Period period14 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period15 = period14.toPeriod();
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.Chronology chronology17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period((java.lang.Object) 1645513761942L, periodType16, chronology17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:22" + "'", str6, "+10:22");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37320000 + "'", int9 == 37320000);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        mutablePeriod2.addMonths(52);
        mutablePeriod2.addWeeks((-1));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(63102228, 63100366);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63102228");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:10:39.233+00:00:00.100" + "'", str5, "2022-02-22T07:10:39.233+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:10:39.233+00:00:00.100" + "'", str18, "2022-02-22T07:10:39.233+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T07:10:39.233+00:00:00.100" + "'", str33, "2022-02-22T07:10:39.233+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy(3);
        long long14 = property11.remainder();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime26.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = property11.compareTo((org.joda.time.ReadablePartial) timeOfDay29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:39.281+00:00:00.100" + "'", str4, "2022-02-22T07:10:39.281+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4345839281L + "'", long14 == 4345839281L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513839181L + "'", long22 == 1645513839181L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 25849 + "'", int28 == 25849);
        org.junit.Assert.assertNotNull(timeOfDay29);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int[] intArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = dateTimeField7.add(readablePartial8, 69, intArray10, 63123709);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property64 = dateTime48.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime.Property property68 = dateTime66.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Interval interval75 = interval69.withDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = interval75.toDuration();
        org.joda.time.DateTime dateTime77 = interval75.getStart();
        int int78 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology80 = null;
        boolean boolean81 = dateTimeFieldType79.isSupported(chronology80);
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType79.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = dateTime77.withField(dateTimeFieldType79, 63109642);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63109642 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:10:39.332+00:00:00.100" + "'", str5, "2022-02-22T07:10:39.332+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:10:39.332+00:00:00.100" + "'", str18, "2022-02-22T07:10:39.332+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T07:10:39.332+00:00:00.100" + "'", str33, "2022-02-22T07:10:39.332+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T07:10:39.332+00:00:00.100" + "'", str46, "2022-02-22T07:10:39.332+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:10:39.332+00:00:00.100" + "'", str53, "2022-02-22T07:10:39.332+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645513839232L + "'", long67 == 1645513839232L);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(durationFieldType82);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = dateTime11.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        int int33 = dateTimeField31.getMinimumValue((long) 9);
        int int35 = dateTimeField31.getLeapAmount(1645513763885L);
        int int36 = dateTime20.get(dateTimeField31);
        org.joda.time.DurationField durationField37 = dateTimeField31.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType38 = durationField37.getType();
        org.joda.time.DateTime dateTime40 = dateTime4.withFieldAdded(durationFieldType38, 366);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType44 = periodType43.withMinutesRemoved();
        java.lang.String str45 = periodType43.getName();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1645513760253L, chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.year();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 8, periodType58, chronology65);
        long long70 = chronology53.add((org.joda.time.ReadablePeriod) mutablePeriod67, (long) 10, 6);
        org.joda.time.Period period71 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType43, chronology53);
        org.joda.time.DateTimeField dateTimeField72 = chronology53.millisOfDay();
        java.lang.String str73 = chronology53.toString();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime4.toMutableDateTime(chronology53);
        org.joda.time.DurationField durationField75 = chronology53.minutes();
        long long78 = durationField75.getValueAsLong(1645513762160L, 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:39.457+00:00:00.100" + "'", str2, "2022-02-22T07:10:39.457+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513839357L + "'", long7 == 1645513839357L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:10:39.457+00:00:00.100" + "'", str14, "2022-02-22T07:10:39.457+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 430 + "'", int36 == 430);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Months" + "'", str45, "Months");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str73, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 27425229L + "'", long78 == 27425229L);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime57 = dateTime51.withField(dateTimeFieldType55, 25774);
        int int58 = dateTime33.get(dateTimeFieldType55);
        int int59 = instant27.get(dateTimeFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513839445L + "'", long2 == 1645513839445L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513839445L + "'", long17 == 1645513839445L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513839445L + "'", long31 == 1645513839445L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T07:10:39.545+00:00:00.100" + "'", str45, "2022-02-22T07:10:39.545+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime26 = interval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        boolean boolean30 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime28, periodType34);
        org.joda.time.Duration duration46 = duration1.toDuration();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        boolean boolean53 = dateTime51.isBefore((-1L));
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime51);
        mutableInterval54.setStartMillis(1645513813761L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:39.805+00:00:00.100" + "'", str4, "2022-02-22T07:10:39.805+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513839705L + "'", long14 == 1645513839705L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645513839705L + "'", long29 == 1645513839705L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T07:10:39.805+00:00:00.100" + "'", str49, "2022-02-22T07:10:39.805+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTimeField dateTimeField18 = localDate16.getField((int) (short) 0);
        int int21 = dateTimeField18.getDifference(0L, (long) 63094);
        long long24 = dateTimeField18.addWrapField(1645513771143L, 63115438);
        java.lang.String str26 = dateTimeField18.getAsShortText(1645513803143L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513839835L + "'", long2 == 1645513839835L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:10:39.935+00:00:00.100" + "'", str8, "2022-02-22T07:10:39.935+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1991732492876971143L + "'", long24 == 1991732492876971143L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022" + "'", str26, "2022");
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        int int8 = dateTime7.getEra();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(4);
        org.joda.time.LocalDate localDate18 = dateTime15.toLocalDate();
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.DurationField durationField42 = dateTimeField41.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        int int50 = yearMonthDay49.size();
        int[] intArray55 = new int[] { 40, 40, '#', 10 };
        int int56 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay49, intArray55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay26, (org.joda.time.ReadablePartial) yearMonthDay33, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateTime dateTime61 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime.Property property65 = dateTime63.yearOfEra();
        org.joda.time.Interval interval66 = property65.toInterval();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Interval interval72 = interval66.withDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Interval interval73 = interval66.toInterval();
        org.joda.time.Interval interval75 = interval73.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime76 = interval73.getStart();
        org.joda.time.TimeOfDay timeOfDay77 = dateTime76.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period78 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) timeOfDay77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513839892L + "'", long2 == 1645513839892L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513839892L + "'", long11 == 1645513839892L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513839892L + "'", long22 == 1645513839892L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645513839892L + "'", long29 == 1645513839892L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645513839892L + "'", long45 == 1645513839892L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645513839892L + "'", long64 == 1645513839892L);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeOfDay77);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str13 = dateTimeZone11.getNameKey(1645513759301L);
        int int15 = dateTimeZone11.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        int int18 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long27 = dateTimeZone25.convertUTCToLocal(1645513763679L);
        java.lang.String str29 = dateTimeZone25.getShortName(1645513769549L);
        int int31 = dateTimeZone25.getOffsetFromLocal(1645513760934L);
        java.lang.String str32 = dateTimeZone25.toString();
        long long34 = dateTimeZone11.getMillisKeepLocal(dateTimeZone25, 1645513778970L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(63124, 0, 63094282, 63100366, 63138274, 63112184, 87, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63100366 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37320000 + "'", int15 == 37320000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37320000 + "'", int18 == 37320000);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513839940L + "'", long22 == 1645513839940L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645513763779L + "'", long27 == 1645513763779L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.100" + "'", str29, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.100" + "'", str32, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645551098870L + "'", long34 == 1645551098870L);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        java.lang.String str17 = dateTimeField15.getAsText(1645513775484L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField15.getAsShortText((int) '#', locale19);
        long long22 = dateTimeField15.remainder(1645513765751L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField15.getAsShortText(1645513790834L, locale24);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "25775584" + "'", str17, "25775584");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "25790934" + "'", str25, "25790934");
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        org.joda.time.DateTime dateTime23 = dateTime15.minus(1645513766926L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime15.withDayOfWeek(63095888);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63095888 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:40.112+00:00:00.100" + "'", str9, "2022-02-22T07:10:40.112+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Interval interval20 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Interval interval21 = interval9.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Seconds seconds45 = period44.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod46 = period44.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period49 = period44.withFieldAdded(durationFieldType47, (int) (short) -1);
        org.joda.time.Interval interval50 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period49);
        boolean boolean52 = interval33.equals((java.lang.Object) 63115438);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval53 = interval21.overlap((org.joda.time.ReadableInterval) interval33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513840106L + "'", long2 == 1645513840106L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513840106L + "'", long12 == 1645513840106L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:10:40.206+00:00:00.100" + "'", str38, "2022-02-22T07:10:40.206+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = mutablePeriod18.getSeconds();
        int int20 = mutablePeriod18.getSeconds();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean34 = mutableInterval28.containsNow();
        mutablePeriod18.add((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime.Property property39 = dateTime37.yearOfEra();
        java.lang.String str40 = property39.getName();
        org.joda.time.DateTime dateTime41 = property39.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = duration45.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone62);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period64.minusSeconds((int) (short) 1);
        org.joda.time.Period period68 = period64.plusWeeks((int) (short) -1);
        org.joda.time.Period period70 = period64.minusMillis(4);
        org.joda.time.Interval interval71 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        java.lang.String str73 = chronology72.toString();
        org.joda.time.DurationField durationField74 = chronology72.weekyears();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.monthOfYear();
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration45, chronology72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(1645513817328L, (long) 22, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:10:40.288+00:00:00.100" + "'", str11, "2022-02-22T07:10:40.288+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 40 + "'", int19 == 40);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645513840188L + "'", long38 == 1645513840188L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "yearOfEra" + "'", str40, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T07:10:40.288+00:00:00.100" + "'", str51, "2022-02-22T07:10:40.288+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str73, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.add(1645513834088L, 1645513809738L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513809738 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusMinutes(3);
        org.joda.time.Period period16 = period14.plusWeeks(17);
        org.joda.time.Duration duration17 = period16.toStandardDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period43 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime44 = dateTime41.toLocalTime();
        boolean boolean46 = dateTime41.isAfter(1645513770243L);
        org.joda.time.DateMidnight dateMidnight47 = dateTime41.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.Period period58 = period57.toPeriod();
        org.joda.time.Period period60 = period58.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime54.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime dateTime67 = dateTime64.withMillisOfSecond((int) (short) 10);
        boolean boolean69 = dateTime67.isBefore((-1L));
        org.joda.time.DateTime.Property property70 = dateTime67.millisOfDay();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        org.joda.time.DateTime dateTime72 = property70.roundFloorCopy();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1645513765947L, periodType74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime72, periodType74);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateMidnight47, (org.joda.time.ReadableInstant) dateTime72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T07:10:40.370+00:00:00.100" + "'", str23, "2022-02-22T07:10:40.370+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513840270L + "'", long37 == 1645513840270L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:10:40.370+00:00:00.100" + "'", str50, "2022-02-22T07:10:40.370+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T07:10:40.370+00:00:00.100" + "'", str65, "2022-02-22T07:10:40.370+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType74);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = property20.addToCopy(63121637);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2054518426 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:40.561+00:00:00.100" + "'", str2, "2022-02-22T07:10:40.561+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:10:40.561+00:00:00.100" + "'", str8, "2022-02-22T07:10:40.561+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 8, periodType7, chronology14);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration5, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyear();
        org.joda.time.Period period19 = new org.joda.time.Period(1645513783635L, chronology14);
        int int20 = period19.getDays();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((long) 9);
        int int30 = dateTimeField26.getLeapAmount(1645513763885L);
        int int31 = dateTime15.get(dateTimeField26);
        org.joda.time.DurationField durationField32 = dateTimeField26.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType33 = durationField32.getType();
        java.lang.String str34 = durationField32.getName();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513840743L + "'", long2 == 1645513840743L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:40.843+00:00:00.100" + "'", str9, "2022-02-22T07:10:40.843+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 430 + "'", int31 == 430);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "days" + "'", str34, "days");
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        long long40 = duration23.getStandardDays();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:40.868+00:00:00.100" + "'", str2, "2022-02-22T07:10:40.868+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:40.868+00:00:00.100" + "'", str15, "2022-02-22T07:10:40.868+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:10:40.868+00:00:00.100" + "'", str30, "2022-02-22T07:10:40.868+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.joda.time.Period period4 = new org.joda.time.Period(63125881, 429, 0, 63099629);
        org.joda.time.Period period5 = period4.toPeriod();
        int int6 = period5.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = period5.multipliedBy(63149071);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 63125881 * 63149071");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 63099629 + "'", int6 == 63099629);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getLeapDurationField();
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property3.setCopy("2022-02-22T07:09:22.921Z", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:09:22.921Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513840981L + "'", long2 == 1645513840981L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNull(durationField8);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.minus(1645513773685L);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 63116617);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) 63116617, chronology16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513841140L + "'", long2 == 1645513841140L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.joda.time.Period period4 = new org.joda.time.Period(25831104, 63129534, 32, 63119276);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes(63094282);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime27 = dateTime21.withYear(63129196);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513841218L + "'", long2 == 1645513841218L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:10:41.318+00:00:00.100" + "'", str8, "2022-02-22T07:10:41.318+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:10:41.318+00:00:00.100" + "'", str22, "2022-02-22T07:10:41.318+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.months();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str25 = dateTimeZone23.getNameKey(1645513759301L);
        java.lang.String str27 = dateTimeZone23.getName(1645513762160L);
        java.util.TimeZone timeZone28 = dateTimeZone23.toTimeZone();
        int int30 = dateTimeZone23.getStandardOffset(1645513761942L);
        int int32 = dateTimeZone23.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology33 = chronology16.withZone(dateTimeZone23);
        int int35 = dateTimeZone23.getOffset((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(0);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        org.joda.time.DateTime dateTime61 = dateTime44.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (short) 0);
        java.util.Locale locale62 = null;
        java.util.Calendar calendar63 = dateTime44.toCalendar(locale62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) locale62);
        int int65 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime64);
        long long69 = dateTimeZone23.convertLocalToUTC(1645513771518L, true, 1645475946006L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(8, 63116949, 25832373, 52, 25839660, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:22" + "'", str27, "+10:22");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37320000 + "'", int30 == 37320000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37320000 + "'", int32 == 37320000);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37320000 + "'", int35 == 37320000);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:10:41.379+00:00:00.100" + "'", str38, "2022-02-22T07:10:41.379+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T07:10:41.380+00:00:00.100" + "'", str51, "2022-02-22T07:10:41.380+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645513841279,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.100,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=41,MILLISECOND=379,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 37320000 + "'", int65 == 37320000);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645476451518L + "'", long69 == 1645476451518L);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone7);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period9.minusSeconds((int) (short) 1);
        org.joda.time.Period period13 = period9.plusWeeks((int) (short) -1);
        org.joda.time.Period period15 = period9.minusMillis(4);
        org.joda.time.Interval interval16 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1645513766040L, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(1645513775416L, 1645513779025L, chronology17);
        org.joda.time.Interval interval20 = new org.joda.time.Interval(1645513760283L, 1645513790834L, chronology17);
        long long21 = interval20.getEndMillis();
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645513790834L + "'", long21 == 1645513790834L);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), 1L, periodType51, chronology52);
        java.lang.String str54 = periodType51.toString();
        java.lang.String str55 = periodType51.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645513760165L, periodType51);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant47, periodType51);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime69 = dateTime67.plusSeconds((int) (byte) 10);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration71 = duration35.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval72.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration78 = duration75.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        java.lang.String str81 = dateTime80.toString();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology84);
        org.joda.time.DateTime dateTime86 = dateTime80.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTime dateTime87 = dateTime80.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration91 = duration61.minus(1645513765947L);
        org.joda.time.Instant instant93 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration61, 63099);
        org.joda.time.Instant instant95 = instant93.minus(1645513775416L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:10:41.427+00:00:00.100" + "'", str14, "2022-02-22T07:10:41.427+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645517463304L + "'", long33 == 1645517463304L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:10:41.427+00:00:00.100" + "'", str38, "2022-02-22T07:10:41.427+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[Time]" + "'", str54, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Time" + "'", str55, "Time");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645513841328L + "'", long65 == 1645513841328L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration78);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22T07:10:41.428+00:00:00.100" + "'", str81, "2022-02-22T07:10:41.428+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(instant95);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(63088836);
        org.joda.time.DateTime dateTime13 = dateTime9.withHourOfDay(9);
        int int14 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.dayOfYear();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        mutableInterval16.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime36 = dateTime9.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant37 = instant1.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableDuration readableDuration38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = duration21.compareTo(readableDuration38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513841576L + "'", long7 == 1645513841576L);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:10:41.676+00:00:00.100" + "'", str27, "2022-02-22T07:10:41.676+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        mutablePeriod1.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        boolean boolean8 = mutableInterval4.overlaps((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        boolean boolean14 = mutableInterval4.contains((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) mutableInterval4);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645513760253L, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.year();
        mutablePeriod1.add(1645513767484L, chronology24);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) 1645513773283L, chronology24);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTime29.toString("2022-02-22T17:31:35.671+10:22", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513841660L + "'", long11 == 1645513841660L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T17:31:43.078+10:22");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant4 = instant1.withDurationAdded(1645513818973L, 25833900);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513818973 * 25833900");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        java.lang.String str16 = chronology12.toString();
        mutablePeriod0.setPeriod(1645513766329L, chronology12);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration30 = duration19.minus(0L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1L), 1L, periodType35, chronology36);
        java.lang.String str38 = periodType35.toString();
        java.lang.String str39 = periodType35.getName();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1645513760165L, periodType35);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant31, periodType35);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (byte) 10);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration55 = duration19.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period58 = duration57.toPeriod();
        int int59 = duration19.compareTo((org.joda.time.ReadableDuration) duration57);
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration19);
        mutablePeriod0.setMonths(25830609);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str16, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:10:41.965+00:00:00.100" + "'", str22, "2022-02-22T07:10:41.965+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[Time]" + "'", str38, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Time" + "'", str39, "Time");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645513841865L + "'", long49 == 1645513841865L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        boolean boolean20 = dateTimeField19.isSupported();
        boolean boolean22 = dateTimeField19.isLeap(1645513765710L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime48 = dateTime45.toLocalTime();
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localTime48, 63124, locale50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime.Property property55 = dateTime53.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        java.util.Locale locale57 = null;
        int int58 = property55.getMaximumTextLength(locale57);
        java.util.Locale locale59 = null;
        java.lang.String str60 = property55.getAsShortText(locale59);
        org.joda.time.DateTime dateTime61 = property55.roundHalfEvenCopy();
        org.joda.time.DurationField durationField62 = property55.getDurationField();
        long long65 = durationField62.getDifferenceAsLong(1645513760357L, 1645513778035L);
        boolean boolean66 = localTime48.equals((java.lang.Object) long65);
        java.util.Locale locale67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localTime48, locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:10:42.016+00:00:00.100" + "'", str27, "2022-02-22T07:10:42.016+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645513841916L + "'", long41 == 1645513841916L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "63124" + "'", str51, "63124");
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645513841916L + "'", long54 == 1645513841916L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022" + "'", str60, "2022");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime12.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime12.withYearOfCentury(63149071);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63149071 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513842083L + "'", long2 == 1645513842083L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:42.183+00:00:00.100" + "'", str15, "2022-02-22T07:10:42.183+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        int int10 = property3.get();
        org.joda.time.DurationField durationField11 = property3.getLeapDurationField();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513842108L + "'", long2 == 1645513842108L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNull(durationField11);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1645513766040L, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        int int24 = dateTimeZone20.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone20);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645513760283L, 1645513801847L, chronology25);
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = durationField27.add(1645513813034L, 1645513807159L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513807159");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37320000 + "'", int24 == 37320000);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setMonths((int) ' ');
        java.lang.Object obj26 = mutablePeriod23.clone();
        mutablePeriod23.setDays(40);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology30 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfDay();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P32M40D");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.setMonths((int) ' ');
        java.lang.Object obj14 = mutablePeriod11.clone();
        long long17 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod11, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology8);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        int int26 = dateTime22.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime27 = dateTime22.toLocalTime();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localTime27, locale28);
        int int30 = localTime27.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localTime27.get(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "P32M");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1851379200000L + "'", long17 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513842307L + "'", long23 == 1645513842307L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7" + "'", str29, "7");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        boolean boolean13 = dateTimeField10.isSupported();
        java.util.Locale locale14 = null;
        int int15 = dateTimeField10.getMaximumShortTextLength(locale14);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 8, periodType22, chronology29);
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration20, chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) int15, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology11.getZone();
        org.joda.time.DurationField durationField31 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(4);
        org.joda.time.LocalDate localDate43 = dateTime40.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime57.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.DurationField durationField67 = dateTimeField66.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTime dateTime72 = dateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime73 = dateTime72.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay74 = dateTime73.toYearMonthDay();
        int int75 = yearMonthDay74.size();
        int[] intArray80 = new int[] { 40, 40, '#', 10 };
        int int81 = dateTimeField66.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay74, intArray80);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay58, (org.joda.time.ReadablePartial) yearMonthDay74);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay51, (org.joda.time.ReadablePartial) yearMonthDay58, periodType83);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) yearMonthDay58);
        java.util.Locale locale87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) yearMonthDay58, 59, locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645513842385L + "'", long36 == 1645513842385L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645513842385L + "'", long47 == 1645513842385L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645513842385L + "'", long54 == 1645513842385L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645513842385L + "'", long70 == 1645513842385L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(periodType83);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        int int27 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        int int37 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = dateTime36.toLocalDate();
        org.joda.time.DateTimeField dateTimeField40 = localDate38.getField((int) (short) 0);
        int int41 = localDate38.size();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDate38, 25774, locale43);
        org.joda.time.DurationField durationField45 = dateTimeField21.getRangeDurationField();
        int int48 = durationField45.getDifference(1645513824728L, (long) 37363);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513842442L + "'", long24 == 1645513842442L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:10:42.542+00:00:00.100" + "'", str30, "2022-02-22T07:10:42.542+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "25774" + "'", str44, "25774");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1645513787 + "'", int48 == 1645513787);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfDay();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((int) (short) 100, 63138274, 28, (-292275054), 1645513765, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTime.Property property39 = dateTime11.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime11.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:10:42.879+00:00:00.100" + "'", str12, "2022-02-22T07:10:42.879+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = period4.withMonths(63120);
        int int28 = period27.size();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(63114399, 25828434);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 25828434");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime.Property property10 = dateTime8.millisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513843255L + "'", long2 == 1645513843255L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy((int) (byte) 0);
        int int14 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType23 = periodType22.withYearsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 3, 1645513762121L, periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfMonth();
        int int35 = dateTime16.get(dateTimeField34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period60 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalTime localTime61 = dateTime58.toLocalTime();
        int int62 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.millis();
        java.lang.String str64 = periodType63.getName();
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period67 = period65.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean69 = period67.equals((java.lang.Object) dateTimeFieldType68);
        org.joda.time.Period period71 = period67.plusWeeks(17);
        org.joda.time.Period period72 = period67.toPeriod();
        boolean boolean73 = periodType63.equals((java.lang.Object) period72);
        org.joda.time.Period period75 = period72.plusDays(2);
        boolean boolean76 = localTime61.equals((java.lang.Object) period72);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = property11.compareTo((org.joda.time.ReadablePartial) localTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:43.471+00:00:00.100" + "'", str4, "2022-02-22T07:10:43.471+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:10:43.471+00:00:00.100" + "'", str17, "2022-02-22T07:10:43.471+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T07:10:43.471+00:00:00.100" + "'", str40, "2022-02-22T07:10:43.471+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645513843371L + "'", long54 == 1645513843371L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Millis" + "'", str64, "Millis");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T17:31:34.498+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:31:34.498+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.era();
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology28.getDateTimeMillis(25831037, (int) (short) 100, 28, 63136697);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = period13.toStandardDays();
        org.joda.time.Period period18 = period13.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period21 = period13.withField(durationFieldType19, 63141921);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513843765L + "'", long2 == 1645513843765L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:43.865+00:00:00.100" + "'", str9, "2022-02-22T07:10:43.865+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.era();
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = durationField30.subtract(1645513774390L, 63149145);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -6314914500");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 3, 1645513762121L, periodType19, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTime dateTime31 = dateTime9.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.clockhourOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 115200000, chronology27);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology27);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Chronology chronology44 = chronology42.withUTC();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod();
        mutablePeriod45.setMonths((int) ' ');
        java.lang.Object obj48 = mutablePeriod45.clone();
        long long51 = chronology42.add((org.joda.time.ReadablePeriod) mutablePeriod45, (long) (byte) 0, 22);
        mutablePeriod34.setPeriod(1645513782000L, chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(25812540, 25774, 25842901, 63099629, (int) (byte) 0, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63099629 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:44.105+00:00:00.100" + "'", str10, "2022-02-22T07:10:44.105+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "P32M");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1851379200000L + "'", long51 == 1851379200000L);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds(63146531);
        org.joda.time.Instant instant11 = dateTime8.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:44.122+00:00:00.100" + "'", str2, "2022-02-22T07:10:44.122+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-22T17:31:39.849+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval16 = interval10.withDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval17 = interval10.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = interval17.gap((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod();
        mutablePeriod32.setMonths((int) ' ');
        java.lang.Object obj35 = mutablePeriod32.clone();
        mutablePeriod32.setDays(40);
        org.joda.time.Interval interval38 = interval17.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Period period41 = period39.plusSeconds((int) (byte) 1);
        boolean boolean42 = property3.equals((java.lang.Object) period41);
        java.util.Locale locale43 = null;
        java.lang.String str44 = property3.getAsShortText(locale43);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513844065L + "'", long2 == 1645513844065L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513844066L + "'", long8 == 1645513844066L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "P32M40D");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022" + "'", str44, "2022");
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (short) 100, (int) 'a', 40, 25838440, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25838440 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        int int22 = dateTimeField21.getMinimumValue();
        int int25 = dateTimeField21.getDifference(1645513798445L, 1645513807435L);
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField21.set((long) 63128571, "2022-02-22T17:31:56.494+10:22", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:31:56.494+10:22\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-8990) + "'", int25 == (-8990));
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.joda.time.Period period2 = new org.joda.time.Period(2339737760382L, 1645513766895L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        int int34 = dateTime15.get(dateTimeField33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType36 = periodType35.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime15, periodType35);
        org.joda.time.Chronology chronology38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) 1645513766895L, periodType35, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:10:44.243+00:00:00.100" + "'", str7, "2022-02-22T07:10:44.243+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:44.243+00:00:00.100" + "'", str16, "2022-02-22T07:10:44.243+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1051);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = yearMonthDay22.getFieldType(63116617);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63116617");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513844270L + "'", long2 == 1645513844270L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513844270L + "'", long18 == 1645513844270L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) '#');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-1L), 1L, periodType15, chronology16);
        java.lang.String str18 = periodType15.toString();
        java.lang.String str19 = periodType15.getName();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1645513760165L, periodType15);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType15, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.yearOfEra();
        boolean boolean30 = durationFieldType7.isSupported(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology27.getDateTimeMillis(430, 63129196, 25843148, 63138274);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63129196 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:44.529+00:00:00.100" + "'", str2, "2022-02-22T07:10:44.529+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Time]" + "'", str18, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Time" + "'", str19, "Time");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        int int22 = dateTime18.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = dateTime24.toDateTimeISO();
        int int32 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = dateTime31.toLocalDate();
        org.joda.time.DateTimeField dateTimeField35 = localDate33.getField((int) (short) 0);
        org.joda.time.Chronology chronology36 = localDate33.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.Chronology chronology46 = chronology44.withUTC();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        int[] intArray55 = chronology46.get((org.joda.time.ReadablePartial) yearMonthDay53, 1645513760770L);
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period56.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean60 = period58.equals((java.lang.Object) dateTimeFieldType59);
        org.joda.time.Period period62 = period58.plusWeeks(17);
        int[] intArray65 = chronology46.get((org.joda.time.ReadablePeriod) period62, 1645513771022L, 1645513765710L);
        java.util.Locale locale67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = dateTimeField16.set((org.joda.time.ReadablePartial) localDate33, 63146, intArray65, "2022-02-22T17:31:53.766+10:22", locale67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:31:53.766+10:22\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645513844567L + "'", long19 == 1645513844567L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:10:44.667+00:00:00.100" + "'", str25, "2022-02-22T07:10:44.667+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645513844567L + "'", long49 == 1645513844567L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, -5, -312]");
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        java.util.Locale locale8 = null;
        int int9 = property3.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property3.getAsText(locale10);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513844620L + "'", long2 == 1645513844620L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.Duration duration23 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime28.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime35, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period(1645513803832L, periodType36);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513830600L, periodType36);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:10:44.801+00:00:00.100" + "'", str6, "2022-02-22T07:10:44.801+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:10:44.802+00:00:00.100" + "'", str26, "2022-02-22T07:10:44.802+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513843214L);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime6 = property4.getDateTime();
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645513844894,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.100,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=44,MILLISECOND=994,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        boolean boolean11 = property3.equals((java.lang.Object) periodType9);
        java.lang.String str12 = property3.getName();
        java.lang.String str13 = property3.getAsText();
        java.util.Locale locale14 = null;
        int int15 = property3.getMaximumShortTextLength(locale14);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513844987L + "'", long2 == 1645513844987L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfEra" + "'", str12, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        boolean boolean9 = dateTime7.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean31 = mutableInterval29.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval29.setChronology(chronology38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1645513782198L, periodType1, chronology38);
        java.lang.String str41 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.millisOfDay();
        long long44 = dateTimeField42.roundHalfFloor(1645513768606L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:10:45.103+00:00:00.100" + "'", str5, "2022-02-22T07:10:45.103+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:10:45.103+00:00:00.100" + "'", str12, "2022-02-22T07:10:45.103+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:10:45.103+00:00:00.100" + "'", str19, "2022-02-22T07:10:45.103+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str41, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645513768606L + "'", long44 == 1645513768606L);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology11.getZone();
        org.joda.time.DurationField durationField31 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology11.dayOfWeek();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        long long44 = dateTimeField41.addWrapField(1645513760382L, 22);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes(4);
        org.joda.time.LocalDate localDate54 = dateTime51.toLocalDate();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        boolean boolean59 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) mutableInterval57);
        java.lang.Object obj60 = mutableInterval55.clone();
        org.joda.time.Chronology chronology61 = mutableInterval55.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfEra();
        org.joda.time.DurationField durationField63 = dateTimeField62.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay70 = dateTime69.toYearMonthDay();
        int int71 = yearMonthDay70.size();
        int[] intArray76 = new int[] { 40, 40, '#', 10 };
        int int77 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay70, intArray76);
        int int78 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate54, intArray76);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDate54, 63148593, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63148593");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2339737760382L + "'", long44 == 2339737760382L);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645513845030L + "'", long47 == 1645513845030L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645513845030L + "'", long66 == 1645513845030L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 292278993 + "'", int78 == 292278993);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        mutableInterval0.setEndMillis(1645513771344L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        boolean boolean18 = property9.equals((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime20 = property9.setCopy(10);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setEnd((org.joda.time.ReadableInstant) mutableDateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513845131L + "'", long8 == 1645513845131L);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:10:45.231+00:00:00.100" + "'", str12, "2022-02-22T07:10:45.231+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        long long12 = dateTime11.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513845146L + "'", long2 == 1645513845146L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1640995199900L + "'", long12 == 1640995199900L);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        int int30 = dateTimeZone18.getOffset((long) 115200000);
        java.lang.String str32 = dateTimeZone18.getShortName(1645513770717L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone18.getShortName((long) 21, locale34);
        java.lang.String str37 = dateTimeZone18.getName(1645513813487L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37320000 + "'", int30 == 37320000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:22" + "'", str32, "+10:22");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:22" + "'", str35, "+10:22");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:22" + "'", str37, "+10:22");
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.DateTime dateTime40 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        boolean boolean54 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration42);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.toDateTimeISO();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes(0);
        boolean boolean74 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration77 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 10);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        long long81 = dateTime80.getMillis();
        org.joda.time.DateTime.Property property82 = dateTime80.yearOfEra();
        org.joda.time.DateTime dateTime83 = property82.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration77, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = dateTime84.withZoneRetainFields(dateTimeZone86);
        org.joda.time.Period period88 = org.joda.time.Period.ZERO;
        org.joda.time.Period period90 = period88.minusSeconds((int) (short) 1);
        org.joda.time.Period period92 = period88.plusWeeks((int) (short) -1);
        org.joda.time.Period period94 = period88.minusMillis(4);
        org.joda.time.Period period96 = period88.minusDays((int) (short) 10);
        org.joda.time.Duration duration97 = period88.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:45.275+00:00:00.100" + "'", str4, "2022-02-22T07:10:45.275+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:10:45.275+00:00:00.100" + "'", str17, "2022-02-22T07:10:45.275+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:10:45.275+00:00:00.100" + "'", str30, "2022-02-22T07:10:45.275+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T07:10:45.275+00:00:00.100" + "'", str45, "2022-02-22T07:10:45.275+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T07:10:45.276+00:00:00.100" + "'", str58, "2022-02-22T07:10:45.276+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T07:10:45.276+00:00:00.100" + "'", str65, "2022-02-22T07:10:45.276+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645513845176L + "'", long81 == 1645513845176L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(duration97);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setMonths((int) ' ');
        java.lang.Object obj26 = mutablePeriod23.clone();
        mutablePeriod23.setDays(40);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology30 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = dateTimeField31.set(1645513804238L, 63130617);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63130617 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P32M40D");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone4);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.Period period10 = period6.plusWeeks((int) (short) -1);
        org.joda.time.Period period12 = period6.minusMillis(4);
        org.joda.time.Interval interval13 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645513766040L, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645513759301L);
        int int23 = dateTimeZone19.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology24 = chronology14.withZone(dateTimeZone19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513767069L, chronology14);
        org.joda.time.PeriodType periodType26 = mutablePeriod25.getPeriodType();
        org.joda.time.Duration duration29 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfEra();
        boolean boolean34 = property33.isLeap();
        org.joda.time.DateTime dateTime35 = property33.roundCeilingCopy();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 3, 1645513762121L, periodType39, chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime35.toMutableDateTime(chronology47);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration29, chronology47);
        mutablePeriod25.setPeriod((long) 25812540, 1645513816681L);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37320000 + "'", int23 == 37320000);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(periodType26);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645513845449L + "'", long32 == 1645513845449L);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        boolean boolean23 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.setMonths((int) ' ');
        java.lang.Object obj37 = mutablePeriod34.clone();
        long long40 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekyear();
        mutableInterval13.setChronology(chronology31);
        org.joda.time.DurationField durationField43 = durationFieldType9.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField44 = chronology31.centuryOfEra();
        long long46 = dateTimeField44.roundFloor(1645513808499L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645513845603L + "'", long20 == 1645513845603L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "P32M");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1851379200000L + "'", long40 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 946684799900L + "'", long46 == 946684799900L);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(4);
        org.joda.time.LocalDate localDate60 = dateTime57.toLocalDate();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        boolean boolean71 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime70);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        int int74 = dateTime73.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        long long77 = dateTime76.getMillis();
        org.joda.time.DateTime dateTime79 = dateTime76.plusWeeks((int) (byte) 10);
        int int80 = dateTime76.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        java.lang.String str83 = dateTime82.toString();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology86);
        org.joda.time.DateTime dateTime88 = dateTime82.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.DateTime dateTime89 = dateTime82.toDateTimeISO();
        int int90 = dateTime76.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.LocalDate localDate91 = dateTime89.toLocalDate();
        org.joda.time.DateTime.Property property92 = dateTime89.era();
        org.joda.time.DateTime dateTime94 = dateTime89.minusMinutes(63094282);
        org.joda.time.Duration duration95 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = dateTime94.withField(dateTimeFieldType96, 63116617);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63116617 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513845869L + "'", long2 == 1645513845869L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513845869L + "'", long18 == 1645513845869L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645513845869L + "'", long53 == 1645513845869L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645513845869L + "'", long68 == 1645513845869L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645513845869L + "'", long77 == 1645513845869L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-22T07:10:45.969+00:00:00.100" + "'", str83, "2022-02-22T07:10:45.969+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField15.getMaximumValue(readablePartial16);
        boolean boolean18 = dateTimeField15.isLenient();
        int int19 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str13, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 86399999 + "'", int17 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399999 + "'", int19 == 86399999);
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 8, periodType13, chronology20);
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration11, chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyear();
        org.joda.time.DurationField durationField25 = chronology20.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(1051, 63109642, 63099629, 25835632, 63146, 63090717, 63114399, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25835632 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1645513839961L, 1645513769808L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        int int9 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.plusDays(0);
        int int12 = dateTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37320000 + "'", int9 == 37320000);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 25846182 + "'", int12 == 25846182);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645513760253L, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1L), 1L, periodType20, chronology21);
        java.lang.String str23 = periodType20.toString();
        java.lang.String str24 = periodType20.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513760165L, periodType20);
        int int26 = mutablePeriod25.getWeeks();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period36 = period33.minusYears(3);
        int[] intArray39 = chronology13.get((org.joda.time.ReadablePeriod) period33, 0L, 1645513765808L);
        org.joda.time.Period period40 = duration3.toPeriod(periodType5, chronology13);
        org.joda.time.Period period42 = period40.withYears(796);
        int int43 = period40.getWeeks();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[Time]" + "'", str23, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Time" + "'", str24, "Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[52, 1, 3, 0, 7, 9, 25, 808]");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        int int12 = dateTimeField10.get(63123709L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:46.513+00:00:00.100" + "'", str2, "2022-02-22T07:10:46.513+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 17 + "'", int12 == 17);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval0.toMutableInterval();
        mutableInterval9.setEndMillis((long) 63116635);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(mutableInterval9);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((java.lang.Object) property22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:46.635+00:00:00.100" + "'", str4, "2022-02-22T07:10:46.635+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:10:46.635+00:00:00.100" + "'", str15, "2022-02-22T07:10:46.635+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) "2022-02-22T17:31:26.418+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:26.418+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime46 = dateTime40.withTimeAtStartOfDay();
        int int47 = dateTime40.getSecondOfDay();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:10:46.762+00:00:00.100" + "'", str34, "2022-02-22T07:10:46.762+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 25846 + "'", int47 == 25846);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.withHours((int) (short) 0);
        int int14 = period13.getMonths();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), 1L, periodType30, chronology31);
        java.lang.String str33 = periodType30.toString();
        java.lang.String str34 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513760165L, periodType30);
        int int36 = mutablePeriod35.getWeeks();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        mutablePeriod35.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration48.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime60);
        int int62 = mutablePeriod61.getSeconds();
        mutablePeriod61.addSeconds(115200000);
        org.joda.time.Period period65 = period43.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod61.add(readablePeriod66);
        mutablePeriod61.setMonths(63100366);
        mutablePeriod61.add(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.DateTime dateTime76 = dateTime73.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTime(chronology77);
        org.joda.time.DateTime dateTime79 = dateTime76.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod61, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Instant instant82 = dateTime76.toInstant();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:47.001+00:00:00.100" + "'", str4, "2022-02-22T07:10:47.001+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513846901L + "'", long18 == 1645513846901L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[Time]" + "'", str33, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Time" + "'", str34, "Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:10:47.001+00:00:00.100" + "'", str54, "2022-02-22T07:10:47.001+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 40 + "'", int62 == 40);
        org.junit.Assert.assertNotNull(period65);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T07:10:47.001+00:00:00.100" + "'", str74, "2022-02-22T07:10:47.001+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(instant82);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime10.toTimeOfDay();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.DurationField durationField22 = dateTimeField21.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        int int30 = yearMonthDay29.size();
        int[] intArray35 = new int[] { 40, 40, '#', 10 };
        int int36 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay29, intArray35);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((-1L), 1L, periodType39, chronology40);
        org.joda.time.PeriodType periodType42 = periodType39.withDaysRemoved();
        java.lang.String str43 = periodType42.toString();
        org.joda.time.PeriodType periodType44 = periodType42.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay13, (org.joda.time.ReadablePartial) yearMonthDay29, periodType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:47.131+00:00:00.100" + "'", str2, "2022-02-22T07:10:47.131+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513847031L + "'", long25 == 1645513847031L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Time]" + "'", str43, "PeriodType[Time]");
        org.junit.Assert.assertNotNull(periodType44);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod16.set(durationFieldType17, 63120363);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:47.154+00:00:00.100" + "'", str9, "2022-02-22T07:10:47.154+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-22T17:31:51.948+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:51.948+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period9 = mutableInterval0.toPeriod(periodType8);
        mutableInterval0.setEndMillis(1645513766329L);
        long long12 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval0.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStartMillis(1645513837306L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-100000L) + "'", long12 == (-100000L));
        org.junit.Assert.assertNotNull(mutableInterval13);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        int int28 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone21);
        org.joda.time.DateTime dateTime30 = dateTime4.withZone(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37320000 + "'", int28 == 37320000);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval12 = new org.joda.time.Interval((java.lang.Object) 63146, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology6.withZone(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) "centuries");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"centuries\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime31 = dateTime28.toLocalTime();
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(45, 905, 63149103, 63231, 63100366, 0, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63231 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:10:47.939+00:00:00.100" + "'", str10, "2022-02-22T07:10:47.939+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645513847839L + "'", long24 == 1645513847839L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = dateTime11.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        int int33 = dateTimeField31.getMinimumValue((long) 9);
        int int35 = dateTimeField31.getLeapAmount(1645513763885L);
        int int36 = dateTime20.get(dateTimeField31);
        org.joda.time.DurationField durationField37 = dateTimeField31.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType38 = durationField37.getType();
        org.joda.time.DateTime dateTime40 = dateTime4.withFieldAdded(durationFieldType38, 366);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType44 = periodType43.withMinutesRemoved();
        java.lang.String str45 = periodType43.getName();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1645513760253L, chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.year();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 8, periodType58, chronology65);
        long long70 = chronology53.add((org.joda.time.ReadablePeriod) mutablePeriod67, (long) 10, 6);
        org.joda.time.Period period71 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType43, chronology53);
        org.joda.time.DateTimeField dateTimeField72 = chronology53.millisOfDay();
        java.lang.String str73 = chronology53.toString();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime4.toMutableDateTime(chronology53);
        org.joda.time.DurationField durationField75 = chronology53.minutes();
        org.joda.time.DurationField durationField76 = chronology53.centuries();
        java.lang.Class<?> wildcardClass77 = chronology53.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:47.951+00:00:00.100" + "'", str2, "2022-02-22T07:10:47.951+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513847851L + "'", long7 == 1645513847851L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:10:47.951+00:00:00.100" + "'", str14, "2022-02-22T07:10:47.951+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 430 + "'", int36 == 430);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Months" + "'", str45, "Months");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str73, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(63133);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        boolean boolean13 = dateTime10.isAfterNow();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        org.joda.time.DateTime dateTime23 = dateTime10.withChronology(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((java.lang.Object) 63133, chronology20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:48.157+00:00:00.100" + "'", str4, "2022-02-22T07:10:48.157+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = new org.joda.time.Period((java.lang.Object) "2022-02-22T17:31:59.254+10:22", chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:59.254+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.Duration duration26 = interval3.toDuration();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.negated();
        org.joda.time.Period period30 = period27.withDays(1);
        int int32 = period27.getValue((int) (short) 0);
        org.joda.time.Interval interval33 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period38 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.withZoneRetainFields(dateTimeZone57);
        int int59 = dateTime55.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime55.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime55.toMutableDateTime();
        int int62 = mutableDateTime61.getMinuteOfDay();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period38, (org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(periodType65);
        org.joda.time.PeriodType periodType67 = periodType65.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period68 = new org.joda.time.Period((java.lang.Object) mutableDateTime61, periodType67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T07:10:48.243+00:00:00.100" + "'", str49, "2022-02-22T07:10:48.243+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 430 + "'", int62 == 430);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Days days16 = period13.toStandardDays();
        int int17 = period13.getHours();
        org.joda.time.Chronology chronology18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) int17, chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513848224L + "'", long2 == 1645513848224L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:48.324+00:00:00.100" + "'", str9, "2022-02-22T07:10:48.324+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1L), 1L, periodType13, chronology14);
        java.lang.String str16 = periodType13.toString();
        java.lang.String str17 = periodType13.getName();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1645513760165L, periodType13);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType13, chronology25);
        boolean boolean27 = dateTimeFieldType7.isSupported(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime6.withField(dateTimeFieldType7, 221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 221 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513848265L + "'", long2 == 1645513848265L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[Time]" + "'", str16, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Time" + "'", str17, "Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        mutablePeriod6.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks((int) (byte) 10);
        boolean boolean19 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645513760253L, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.year();
        mutablePeriod6.add(1645513767484L, chronology29);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((int) (short) -1, 63124, 25812696, 18, 0, 63125790, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63125790 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645513848314L + "'", long16 == 1645513848314L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfEra();
        java.lang.String str24 = property23.getAsShortText();
        java.lang.String str25 = property23.getName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:48.433+00:00:00.100" + "'", str4, "2022-02-22T07:10:48.433+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513848333L + "'", long15 == 1645513848333L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25848433 + "'", int19 == 25848433);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25848433 + "'", int22 == 25848433);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "yearOfEra" + "'", str25, "yearOfEra");
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) 'a');
        org.joda.time.Period period3 = period1.minusMillis((int) ' ');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period28 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = period1.minus((org.joda.time.ReadablePeriod) period28);
        int int30 = period1.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:10:48.537+00:00:00.100" + "'", str8, "2022-02-22T07:10:48.537+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513848437L + "'", long22 == 1645513848437L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.Period period19 = period15.plusWeeks((int) (short) -1);
        org.joda.time.Period period21 = period15.minusMillis(4);
        org.joda.time.Interval interval22 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period24 = period15.minusMinutes(8);
        org.joda.time.Period period26 = period15.plusSeconds(3);
        org.joda.time.Period period28 = period26.minusHours(63212);
        boolean boolean29 = periodType8.equals((java.lang.Object) period28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((int) (short) 1, 25812540, 53, 63105479, 63148, 63138598, 63120363, 25831104, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField14.add(1645513838771L, 1645513770589L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        long long37 = mutableInterval26.getStartMillis();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:10:48.684+00:00:00.100" + "'", str2, "2022-02-22T07:10:48.684+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:10:48.684+00:00:00.100" + "'", str9, "2022-02-22T07:10:48.684+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:10:48.684+00:00:00.100" + "'", str16, "2022-02-22T07:10:48.684+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513847910L + "'", long37 == 1645513847910L);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsShortText(31556952000L, locale9);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField7.set(0L, 25831104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25831104 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "5" + "'", str10, "5");
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime6 = instant1.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(1645513846356L, 1645513776881L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime6 = dateTime1.toLocalTime();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period17 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration19 = duration8.minus(0L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1L), 1L, periodType24, chronology25);
        java.lang.String str27 = periodType24.toString();
        java.lang.String str28 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760165L, periodType24);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant20, periodType24);
        boolean boolean31 = localTime6.equals((java.lang.Object) readableInstant20);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localTime6.getValue(63120);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63120");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513848746L + "'", long2 == 1645513848746L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:10:48.846+00:00:00.100" + "'", str11, "2022-02-22T07:10:48.846+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Time]" + "'", str27, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Time" + "'", str28, "Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DurationField durationField4 = property3.getRangeDurationField();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513848901L + "'", long2 == 1645513848901L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.joda.time.DurationField durationField18 = chronology12.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology12.getDateTimeMillis(1645513837697L, 70, 87, 366, 63147365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.100]" + "'", str13, "ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        java.lang.String str6 = dateTimeFieldType5.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513849051L + "'", long2 == 1645513849051L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yearOfEra" + "'", str6, "yearOfEra");
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        int int13 = dateTime12.getCenturyOfEra();
        int int14 = dateTime12.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513849198L + "'", long7 == 1645513849198L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 25849298 + "'", int11 == 25849298);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25849298 + "'", int14 == 25849298);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime56 = dateTime36.minusMonths(37);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.negated();
        org.joda.time.Interval interval64 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period63, (-6));
        int int67 = period63.getMinutes();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513849383L + "'", long23 == 1645513849383L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:10:49.483+00:00:00.100" + "'", str30, "2022-02-22T07:10:49.483+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.100+00:00:00.100/1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 430 + "'", int52 == 430);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645513849383L + "'", long59 == 1645513849383L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513849445L + "'", long2 == 1645513849445L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime25 = dateTime22.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = localDateTime25.getField(25847010);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25847010");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:10:49.718+00:00:00.100" + "'", str4, "2022-02-22T07:10:49.718+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513849618L + "'", long18 == 1645513849618L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property12.getAsShortText(locale14);
        org.joda.time.DateTime dateTime17 = property12.addWrapFieldToCopy(63102368);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(1645513763016L);
        boolean boolean21 = instant19.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime22 = instant19.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withZoneRetainFields(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        boolean boolean43 = dateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime42);
        int int44 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:49.916+10:22" + "'", str2, "2022-02-22T17:32:49.916+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:32:49.916+10:22" + "'", str32, "2022-02-22T17:32:49.916+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.plus((long) 8);
        org.joda.time.Duration duration29 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Period period44 = mutablePeriod43.toPeriod();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) mutablePeriod43);
        mutableInterval45.setDurationBeforeEnd(1645513785124L);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        mutableInterval48.setInterval(100000L, 1645513759601L);
        long long56 = mutableInterval48.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval62.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = interval61.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval48.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval45.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj70 = mutableInterval45.clone();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:49.971+10:22" + "'", str2, "2022-02-22T17:32:49.971+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:32:49.971+10:22" + "'", str12, "2022-02-22T17:32:49.971+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:32:49.971+10:22" + "'", str32, "2022-02-22T17:32:49.971+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100000L + "'", long56 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645513849972L + "'", long59 == 1645513849972L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T10:23:40.000+10:22/1970-01-01T10:25:20.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T10:23:40.000+10:22/1970-01-01T10:25:20.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T10:23:40.000+10:22/1970-01-01T10:25:20.000+10:22");
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period9.minusSeconds((int) (short) 1);
        org.joda.time.Period period13 = period9.plusWeeks((int) (short) -1);
        org.joda.time.Period period15 = period9.minusMillis(4);
        int int16 = period9.getDays();
        org.joda.time.DateTime dateTime18 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 63099629);
        java.lang.Object obj19 = null;
        boolean boolean20 = dateTime18.equals(obj19);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:50.006+10:22" + "'", str2, "2022-02-22T17:32:50.006+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology8);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval13.setInterval(1645513811820L, 19044L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableInterval13);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval18.setDurationAfterStart(1645513773716L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval18.setStartMillis(1645513803709L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513850361L + "'", long30 == 1645513850361L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:32:50.361+10:22" + "'", str44, "2022-02-22T17:32:50.361+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:32:50.361+10:22" + "'", str57, "2022-02-22T17:32:50.361+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(seconds70);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        boolean boolean17 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DurationField durationField28 = dateTimeField27.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        int int36 = yearMonthDay35.size();
        int[] intArray41 = new int[] { 40, 40, '#', 10 };
        int int42 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay35, intArray41);
        long long44 = dateTimeField27.roundHalfFloor((long) (byte) 1);
        int int45 = dateTime16.get(dateTimeField27);
        org.joda.time.Chronology chronology46 = dateTime16.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((int) (short) 1, 9, (int) (byte) 0, 25838440, 63121447, (int) (short) 100, 63119, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25838440 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513850445L + "'", long14 == 1645513850445L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 63170445 + "'", int18 == 63170445);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513850445L + "'", long31 == 1645513850445L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-37320000L) + "'", long44 == (-37320000L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime18 = dateTime12.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.Period period34 = duration16.toPeriod(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = durationField36.getMillis(1645513845688L, 1645513830414L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513845688");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:50.468+10:22" + "'", str4, "2022-02-22T17:32:50.468+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+10:22]" + "'", str32, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.joda.time.Period period1 = new org.joda.time.Period(1645513787727L);
        org.joda.time.Period period3 = period1.withYears((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Weeks as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        long long10 = dateTimeField8.remainder((long) '#');
        java.lang.String str11 = dateTimeField8.getName();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField8.set((long) 1439, "2022-02-22T07:10:41.949+00:00:00.100", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:10:41.949+00:00:00.100\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfSecond" + "'", str11, "millisOfSecond");
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        int int11 = dateTime10.getYear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:51.026+10:22" + "'", str2, "2022-02-22T17:32:51.026+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5922 + "'", int11 == 5922);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        java.lang.String str64 = duration26.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:32:51.039+10:22" + "'", str5, "2022-02-22T17:32:51.039+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:32:51.039+10:22" + "'", str18, "2022-02-22T17:32:51.039+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:32:51.039+10:22" + "'", str33, "2022-02-22T17:32:51.039+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:32:51.039+10:22" + "'", str46, "2022-02-22T17:32:51.039+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:32:51.039+10:22" + "'", str53, "2022-02-22T17:32:51.039+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT100S" + "'", str64, "PT100S");
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType7 = periodType6.withMinutesRemoved();
        java.lang.String str8 = periodType6.getName();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1645513760253L, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.year();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 8, periodType21, chronology28);
        long long33 = chronology16.add((org.joda.time.ReadablePeriod) mutablePeriod30, (long) 10, 6);
        org.joda.time.Period period34 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType6, chronology16);
        org.joda.time.DateTimeField dateTimeField35 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology16.weekyearOfCentury();
        org.joda.time.Period period37 = new org.joda.time.Period(1645513768680L, 1645513773443L, periodType3, chronology16);
        org.joda.time.PeriodType periodType38 = periodType3.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period39 = new org.joda.time.Period((java.lang.Object) 1645513828550L, periodType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Months" + "'", str8, "Months");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645513819532L, 1645513772058L);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        int int64 = dateTime56.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTimeISO();
        int int71 = dateTime69.getMonthOfYear();
        org.joda.time.DateTime.Property property72 = dateTime69.minuteOfDay();
        int int73 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:51.256+10:22" + "'", str2, "2022-02-22T17:32:51.256+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645513851256L + "'", long13 == 1645513851256L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:32:51.256+10:22" + "'", str27, "2022-02-22T17:32:51.256+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:32:51.256+10:22" + "'", str40, "2022-02-22T17:32:51.256+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(seconds53);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:32:51.256+10:22" + "'", str57, "2022-02-22T17:32:51.256+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645513851256L + "'", long67 == 1645513851256L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology6.days();
        boolean boolean19 = durationField18.isSupported();
        long long22 = durationField18.add(1645513809634L, 27425229);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = durationField18.getMillis(1645513768281L, 1645513815489L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513768281 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2371185299409634L + "'", long22 == 2371185299409634L);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period7 = duration5.toPeriod();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period13 = duration11.toPeriod();
        boolean boolean14 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = new org.joda.time.DurationFieldType[] { durationFieldType15 };
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.forFields(durationFieldTypeArray16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.forFields(durationFieldTypeArray16);
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) duration11, periodType18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfDay();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Seconds seconds41 = period40.toStandardSeconds();
        int int42 = period40.getMillis();
        int[] intArray45 = chronology26.get((org.joda.time.ReadablePeriod) period40, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period46 = new org.joda.time.Period(1645513770909L, 1645513760283L, periodType18, chronology26);
        org.joda.time.DateTimeField dateTimeField47 = chronology26.centuryOfEra();
        int int49 = dateTimeField47.getMinimumValue(0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:32:51.329+10:22" + "'", str34, "2022-02-22T17:32:51.329+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        long long12 = durationField8.getMillis(6, 1645513768454L);
        long long14 = durationField8.getMillis(1051);
        long long17 = durationField8.subtract(1645513806420L, 429);
        long long18 = durationField8.getUnitMillis();
        long long21 = durationField8.getMillis(63102, 1645513805915L);
        long long23 = durationField8.getValueAsLong(1645513815362L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 189302400000L + "'", long12 == 189302400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 33166356552000L + "'", long14 == 33166356552000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-11892415793580L) + "'", long17 == (-11892415793580L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 31556952000L + "'", long18 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1991306678400000L + "'", long21 == 1991306678400000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 100);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        mutablePeriod16.addSeconds(115200000);
        mutablePeriod16.addMillis(63140231);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:51.543+10:22" + "'", str9, "2022-02-22T17:32:51.543+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = dateTime11.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = timeOfDay14.getField(63094282);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63094282");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513851563L + "'", long7 == 1645513851563L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 63181 + "'", int13 == 63181);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime52 = dateTime49.toLocalTime();
        boolean boolean54 = dateTime49.isAfter(1645513770243L);
        org.joda.time.DateMidnight dateMidnight55 = dateTime49.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateMidnight55.toString(dateTimeFormatter56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Interval interval69 = interval63.withDurationAfterStart((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime.Property property73 = dateTime71.yearOfEra();
        org.joda.time.Interval interval74 = property73.toInterval();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval75.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Interval interval80 = interval74.withDurationAfterStart((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Interval interval81 = interval74.toInterval();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval();
        long long83 = mutableInterval82.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        boolean boolean86 = mutableInterval82.overlaps((org.joda.time.ReadableInterval) mutableInterval84);
        java.lang.Object obj87 = mutableInterval82.clone();
        org.joda.time.Chronology chronology88 = mutableInterval82.getChronology();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval();
        long long90 = mutableInterval89.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        boolean boolean93 = mutableInterval89.overlaps((org.joda.time.ReadableInterval) mutableInterval91);
        mutableInterval82.setInterval((org.joda.time.ReadableInterval) mutableInterval89);
        org.joda.time.Interval interval95 = interval81.gap((org.joda.time.ReadableInterval) mutableInterval82);
        boolean boolean96 = interval63.contains((org.joda.time.ReadableInterval) interval81);
        org.joda.time.Interval interval97 = interval58.gap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Period period98 = interval58.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:51.576+10:22" + "'", str4, "2022-02-22T17:32:51.576+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513851576L + "'", long18 == 1645513851576L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:32:51.576+10:22" + "'", str31, "2022-02-22T17:32:51.576+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645513851576L + "'", long45 == 1645513851576L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-05-03T00:00:00.000+10:22" + "'", str57, "2022-05-03T00:00:00.000+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645513851576L + "'", long61 == 1645513851576L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645513851577L + "'", long72 == 1645513851577L);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(interval97);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (byte) -1, 63156, 87, 63120930, 63128571, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63120930 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.Interval interval15 = interval13.withEndMillis(65422105775888L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime32);
        int int34 = mutablePeriod33.getSeconds();
        int int35 = mutablePeriod33.getSeconds();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        mutableInterval36.setInterval((org.joda.time.ReadableInterval) mutableInterval43);
        boolean boolean49 = mutableInterval43.containsNow();
        mutablePeriod33.add((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.Duration duration51 = mutableInterval43.toDuration();
        org.joda.time.Duration duration53 = duration51.minus(1645513762241L);
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant16, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration55 = duration53.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval56 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513851976L + "'", long2 == 1645513851976L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:32:51.976+10:22" + "'", str26, "2022-02-22T17:32:51.976+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.Duration duration27 = duration14.withMillis(1645513760253L);
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant12, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        boolean boolean36 = dateTime34.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes(0);
        boolean boolean55 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval56 = null; // flaky: new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime57 = null; // flaky: mutableInterval56.getEnd();
        java.lang.Object obj58 = null; // flaky: mutableInterval56.clone();
// flaky:         mutableInterval56.setDurationBeforeEnd(1645513796379L);
        boolean boolean61 = interval29.abuts((org.joda.time.ReadableInterval) mutableInterval56);
        long long62 = interval29.getStartMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:32:52.075+10:22" + "'", str17, "2022-02-22T17:32:52.075+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:32:52.075+10:22" + "'", str32, "2022-02-22T17:32:52.075+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:32:52.075+10:22" + "'", str39, "2022-02-22T17:32:52.075+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:32:52.075+10:22" + "'", str46, "2022-02-22T17:32:52.075+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "2022-02-22T17:32:52.010+10:22/2022-02-22T17:32:52.075+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "2022-02-22T17:32:52.010+10:22/2022-02-22T17:32:52.075+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "2022-02-22T17:32:52.010+10:22/2022-02-22T17:32:52.075+10:22");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1645772960254L) + "'", long62 == (-1645772960254L));
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period45 = period42.withMonths(20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:32:52.149+10:22" + "'", str16, "2022-02-22T17:32:52.149+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) locale26);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.DurationField durationField37 = dateTimeField36.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        int int45 = yearMonthDay44.size();
        int[] intArray50 = new int[] { 40, 40, '#', 10 };
        int int51 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay44, intArray50);
        boolean boolean52 = dateTimeField36.isSupported();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay59 = dateTime58.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DurationField durationField68 = dateTimeField67.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay75 = dateTime74.toYearMonthDay();
        int int76 = yearMonthDay75.size();
        int[] intArray81 = new int[] { 40, 40, '#', 10 };
        int int82 = dateTimeField67.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay75, intArray81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay59, (org.joda.time.ReadablePartial) yearMonthDay75);
        java.util.Locale locale85 = null;
        java.lang.String str86 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay59, 0, locale85);
        org.joda.time.DateTime dateTime87 = dateTime28.withFields((org.joda.time.ReadablePartial) yearMonthDay59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField89 = yearMonthDay59.getField(63140415);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63140415");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:52.165+10:22" + "'", str2, "2022-02-22T17:32:52.165+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:32:52.165+10:22" + "'", str15, "2022-02-22T17:32:52.165+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645513852165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=52,MILLISECOND=165,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645513852165L + "'", long40 == 1645513852165L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645513852165L + "'", long55 == 1645513852165L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645513852165L + "'", long71 == 1645513852165L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0" + "'", str86, "0");
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.withHours((int) (short) 0);
        org.joda.time.Period period15 = period4.plusSeconds(0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(obj0, periodType1, chronology2);
        org.joda.time.Period period5 = period3.plusSeconds(123);
        org.joda.time.Period period7 = period3.minusSeconds(1970);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        mutableInterval3.setChronology(chronology21);
        boolean boolean33 = mutableInterval3.isBeforeNow();
        org.joda.time.DateTime dateTime34 = mutableInterval3.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str36 = dateTimeFieldType35.getName();
        boolean boolean37 = dateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.DateTime dateTime39 = dateTime34.minusMinutes(1052);
        org.joda.time.DateTime dateTime41 = dateTime39.plusWeeks((-292275054));
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds(366);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513852319L + "'", long10 == 1645513852319L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod21.setPeriod(1645513781803L);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod21.toMutablePeriod();
        mutablePeriod21.addMinutes(25812654);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513852425L + "'", long2 == 1645513852425L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:32:52.426+10:22" + "'", str15, "2022-02-22T17:32:52.426+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withDaysRemoved();
        java.lang.String str6 = periodType5.toString();
        org.joda.time.PeriodType periodType7 = periodType5.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str9 = durationFieldType8.toString();
        boolean boolean10 = periodType7.isSupported(durationFieldType8);
        java.lang.String str11 = periodType7.getName();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "halfdays" + "'", str9, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TimeNoSeconds" + "'", str11, "TimeNoSeconds");
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T07:10:14.020+00:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:10:14.020+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '4');
        org.joda.time.Period period3 = period1.plusDays(37320000);
        int int4 = period1.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        long long12 = duration2.getMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval24 = interval17.toInterval();
        org.joda.time.Interval interval26 = interval24.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime27 = interval24.getStart();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        boolean boolean31 = interval24.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 3, 1645513762121L, periodType35, chronology43);
        org.joda.time.Period period46 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType35);
        org.joda.time.PeriodType periodType47 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        java.lang.Object obj53 = mutableInterval48.clone();
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfEra();
        org.joda.time.Chronology chronology56 = chronology54.withUTC();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod();
        mutablePeriod57.setMonths((int) ' ');
        java.lang.Object obj60 = mutablePeriod57.clone();
        long long63 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField64 = chronology54.weekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology54.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1645513770570L, periodType35, chronology54);
        org.joda.time.PeriodType periodType67 = periodType35.withHoursRemoved();
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:32:52.669+10:22" + "'", str5, "2022-02-22T17:32:52.669+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100000L + "'", long12 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513852669L + "'", long15 == 1645513852669L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513852669L + "'", long30 == 1645513852669L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "P32M");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1851379200000L + "'", long63 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(periodType67);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        mutablePeriod2.addMonths(52);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        mutablePeriod2.setPeriod(1645513764889L, chronology59);
        mutablePeriod2.addMonths(63138274);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:32:52.781+10:22" + "'", str5, "2022-02-22T17:32:52.781+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:32:52.781+10:22" + "'", str18, "2022-02-22T17:32:52.781+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:32:52.781+10:22" + "'", str33, "2022-02-22T17:32:52.781+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(25829657, 25847168, 25814300, (int) (byte) 0, (-6), 25825);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime4.dayOfYear();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        mutableInterval11.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime31 = dateTime4.minus((org.joda.time.ReadableDuration) duration16);
        java.lang.String str32 = duration16.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513852818L + "'", long2 == 1645513852818L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:32:52.818+10:22" + "'", str22, "2022-02-22T17:32:52.818+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT100S" + "'", str32, "PT100S");
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.DateTime dateTime40 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        boolean boolean54 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration42);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.toDateTimeISO();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes(0);
        boolean boolean74 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration77 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 10);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        long long81 = dateTime80.getMillis();
        org.joda.time.DateTime.Property property82 = dateTime80.yearOfEra();
        org.joda.time.DateTime dateTime83 = property82.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration77, (org.joda.time.ReadableInstant) dateTime84);
        mutableInterval85.setInterval(0L, 1645513852851L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:52.870+10:22" + "'", str4, "2022-02-22T17:32:52.870+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:32:52.870+10:22" + "'", str17, "2022-02-22T17:32:52.870+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:32:52.870+10:22" + "'", str30, "2022-02-22T17:32:52.870+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:32:52.870+10:22" + "'", str45, "2022-02-22T17:32:52.870+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:32:52.870+10:22" + "'", str58, "2022-02-22T17:32:52.870+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:32:52.870+10:22" + "'", str65, "2022-02-22T17:32:52.870+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645513852870L + "'", long81 == 1645513852870L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy((int) (byte) 0);
        int int14 = property11.getMinimumValueOverall();
        java.lang.String str15 = property11.getName();
        org.joda.time.DurationField durationField16 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:52.905+10:22" + "'", str4, "2022-02-22T17:32:52.905+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyear" + "'", str15, "weekyear");
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        boolean boolean33 = dateTime31.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        boolean boolean52 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval53 = null; // flaky: new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean55 = false; // flaky: mutableInterval53.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
// flaky:         mutableInterval53.setChronology(chronology62);
        org.joda.time.Period period64 = null; // flaky: mutableInterval53.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod();
        mutablePeriod65.setMonths((int) ' ');
        java.lang.Object obj68 = mutablePeriod65.clone();
        mutablePeriod65.setDays(40);
// flaky:         mutableInterval53.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int72 = mutablePeriod65.getHours();
        mutablePeriod65.setDays(63110);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:32:52.943+10:22" + "'", str29, "2022-02-22T17:32:52.943+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:32:52.944+10:22" + "'", str36, "2022-02-22T17:32:52.944+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:32:52.944+10:22" + "'", str43, "2022-02-22T17:32:52.944+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology62);
// flaky:         org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "P32M63110D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "P32M63110D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "P32M63110D");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("PeriodType[Millis]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[Millis]\" is malformed at \"eriodType[Millis]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime21 = mutableInterval0.getEnd();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(252);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime21.withWeekOfWeekyear(63088836);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63088836 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513853152L + "'", long11 == 1645513853152L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) "2022-02-22T17:31:39.743+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:31:39.743+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.monthOfYear();
        org.joda.time.DurationField durationField30 = chronology19.hours();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        int int36 = dateTime32.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        int int46 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDate localDate47 = dateTime45.toLocalDate();
        org.joda.time.DateTimeField dateTimeField49 = localDate47.getField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        int int55 = dateTime51.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = dateTime57.toDateTimeISO();
        int int65 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDate localDate66 = dateTime64.toLocalDate();
        org.joda.time.DateTimeField dateTimeField68 = localDate66.getField((int) (short) 0);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType70 = periodType69.withYearsRemoved();
        org.joda.time.PeriodType periodType71 = periodType70.withSecondsRemoved();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate66, periodType71);
        int[] intArray74 = chronology19.get((org.joda.time.ReadablePartial) localDate47, 1645513779909L);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        boolean boolean79 = mutableInterval75.overlaps((org.joda.time.ReadableInterval) mutableInterval77);
        java.lang.Object obj80 = mutableInterval75.clone();
        org.joda.time.Chronology chronology81 = mutableInterval75.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.yearOfEra();
        org.joda.time.Chronology chronology83 = chronology81.withUTC();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone84);
        long long86 = dateTime85.getMillis();
        org.joda.time.DateTime dateTime88 = dateTime85.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime89 = dateTime88.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay90 = dateTime89.toYearMonthDay();
        int[] intArray92 = chronology83.get((org.joda.time.ReadablePartial) yearMonthDay90, 1645513760770L);
        int int93 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray92);
        boolean boolean95 = dateTimeField10.isLeap((long) 25812654);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513853333L + "'", long22 == 1645513853333L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645513853333L + "'", long33 == 1645513853333L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:32:53.333+10:22" + "'", str39, "2022-02-22T17:32:53.333+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeField49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645513853333L + "'", long52 == 1645513853333L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:32:53.333+10:22" + "'", str58, "2022-02-22T17:32:53.333+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(chronology83);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645513853334L + "'", long86 == 1645513853334L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 292278993 + "'", int93 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = null; // flaky: new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = false; // flaky: mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval29.containsNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval47.toInterval();
        org.joda.time.Interval interval56 = interval54.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime57 = interval54.getStart();
        boolean boolean58 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) interval54);
        boolean boolean59 = false; // flaky: mutableInterval26.contains((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType63 = period62.getPeriodType();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.Period period65 = null; // flaky: mutableInterval26.toPeriod(periodType63);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType67 = periodType66.withMinutesRemoved();
        org.joda.time.Period period68 = null; // flaky: mutableInterval26.toPeriod(periodType66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType70 = periodType66.getFieldType(63120817);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63120817");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:53.433+10:22" + "'", str2, "2022-02-22T17:32:53.433+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:53.433+10:22" + "'", str9, "2022-02-22T17:32:53.433+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:32:53.433+10:22" + "'", str16, "2022-02-22T17:32:53.433+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645513853433L + "'", long45 == 1645513853433L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
// flaky:         org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
// flaky:         org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        long long7 = dateTimeZone5.convertUTCToLocal(1645513763679L);
        java.lang.String str9 = dateTimeZone5.getShortName(1645513769549L);
        int int11 = dateTimeZone5.getOffsetFromLocal(1645513760934L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone5.getName(1645513793989L, locale13);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513853609L + "'", long2 == 1645513853609L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645551083679L + "'", long7 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:22" + "'", str9, "+10:22");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:22" + "'", str14, "+10:22");
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getShortName(1645513771906L, locale5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = new org.joda.time.Interval(1645513808571L, 1645513764889L, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.100" + "'", str6, "+00:00:00.100");
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime11 = dateTime6.plusWeeks(3);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = dateTime6.isBefore(readableInstant12);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:53.775+10:22" + "'", str2, "2022-02-22T17:32:53.775+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 115200000, chronology30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology30);
        int[] intArray38 = mutablePeriod37.getValues();
        org.joda.time.Period period39 = period6.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime(chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = duration52.toPeriodTo((org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.Duration duration64 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days65 = duration64.toStandardDays();
        org.joda.time.Days days66 = duration64.toStandardDays();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration68 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateTime59);
        mutablePeriod37.setWeeks(19045);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513853791L + "'", long2 == 1645513853791L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:32:53.791+10:22" + "'", str13, "2022-02-22T17:32:53.791+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:32:53.791+10:22" + "'", str44, "2022-02-22T17:32:53.791+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T17:32:53.791+10:22" + "'", str55, "2022-02-22T17:32:53.791+10:22");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period45 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalTime localTime46 = dateTime43.toLocalTime();
        int int47 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.millis();
        java.lang.String str49 = periodType48.getName();
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean54 = period52.equals((java.lang.Object) dateTimeFieldType53);
        org.joda.time.Period period56 = period52.plusWeeks(17);
        org.joda.time.Period period57 = period52.toPeriod();
        boolean boolean58 = periodType48.equals((java.lang.Object) period57);
        org.joda.time.Period period60 = period57.plusDays(2);
        boolean boolean61 = localTime46.equals((java.lang.Object) period57);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = localTime46.getValue(2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2022");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:53.834+10:22" + "'", str2, "2022-02-22T17:32:53.834+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:32:53.834+10:22" + "'", str25, "2022-02-22T17:32:53.834+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645513853834L + "'", long39 == 1645513853834L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Millis" + "'", str49, "Millis");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        int int9 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime14.year();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        int int31 = period30.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37320000 + "'", int9 == 37320000);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:32:54.156+10:22" + "'", str12, "2022-02-22T17:32:54.156+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:32:54.156+10:22" + "'", str19, "2022-02-22T17:32:54.156+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime8 = property3.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        java.util.Date date10 = dateTime9.toDate();
        int int11 = dateTime9.getMinuteOfDay();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTime9.toString("2022-02-22T17:32:20.947+10:22", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513854222L + "'", long2 == 1645513854222L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 22 07:10:54 UTC 292278993");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1052 + "'", int11 == 1052);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) dateTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:54.234+10:22" + "'", str2, "2022-02-22T17:32:54.234+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology6.days();
        int int21 = durationField18.getValue(1645513839775L, 1645513798260L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19045 + "'", int21 == 19045);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Period period11 = duration8.toPeriod();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration8.toIntervalFrom(readableInstant12);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513854311L + "'", long2 == 1645513854311L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645513760165L, periodType22);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType22, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        int int41 = dateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        int int51 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDate localDate52 = dateTime50.toLocalDate();
        int[] intArray54 = chronology34.get((org.joda.time.ReadablePartial) localDate52, 1645513760075L);
        org.joda.time.DateTimeField dateTimeField55 = chronology34.dayOfWeek();
        org.joda.time.Period period56 = new org.joda.time.Period((java.lang.Object) period16, chronology34);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:54.380+10:22" + "'", str4, "2022-02-22T17:32:54.380+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Time]" + "'", str25, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Time" + "'", str26, "Time");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645513854380L + "'", long38 == 1645513854380L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:32:54.380+10:22" + "'", str44, "2022-02-22T17:32:54.380+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus(1645513764861L);
        org.joda.time.DateTime dateTime16 = instant13.toDateTime();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfDay();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology25.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval31 = new org.joda.time.Interval((java.lang.Object) instant13, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:54.540+10:22" + "'", str2, "2022-02-22T17:32:54.540+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime15.toMutableDateTime();
        int int22 = mutableDateTime21.getMinuteOfDay();
        org.joda.time.Chronology chronology23 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:54.637+10:22" + "'", str9, "2022-02-22T17:32:54.637+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1052 + "'", int22 == 1052);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) "2022-02-22T17:32:25.420+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:32:25.420+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        mutablePeriod9.addYears(17);
        int int18 = mutablePeriod9.getMillis();
        mutablePeriod9.add(63109642, 63171500, 25842901, 258, 25841858, (int) (byte) 0, 1, 625);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P63109659Y63171532M25842901W258DT25841858H1.625S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P63109659Y63171532M25842901W258DT25841858H1.625S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P63109659Y63171532M25842901W258DT25841858H1.625S");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = mutablePeriod34.getSeconds();
        mutablePeriod34.addSeconds(115200000);
        org.joda.time.Period period38 = period16.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int39 = mutablePeriod34.getSeconds();
        mutablePeriod34.setMillis(25840126);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:32:54.841+10:22" + "'", str27, "2022-02-22T17:32:54.841+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 115200040 + "'", int39 == 115200040);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = duration22.toPeriod();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        boolean boolean31 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray33 = new org.joda.time.DurationFieldType[] { durationFieldType32 };
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.forFields(durationFieldTypeArray33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray33);
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration28, periodType35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfDay();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Seconds seconds58 = period57.toStandardSeconds();
        int int59 = period57.getMillis();
        int[] intArray62 = chronology43.get((org.joda.time.ReadablePeriod) period57, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period63 = new org.joda.time.Period(1645513770909L, 1645513760283L, periodType35, chronology43);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period69 = duration67.toPeriod();
        org.joda.time.Duration duration70 = duration67.toDuration();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.DateTime dateTime75 = dateTime72.withMillisOfSecond((int) (short) 10);
        int int76 = dateTime75.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone77);
        java.lang.String str79 = dateTime78.toString();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology82);
        org.joda.time.DateTime dateTime84 = dateTime78.minus((org.joda.time.ReadablePeriod) period83);
        org.joda.time.DateTime dateTime85 = dateTime78.toDateTimeISO();
        org.joda.time.DateTime dateTime87 = dateTime85.minusMinutes(0);
        org.joda.time.DateTime dateTime89 = dateTime87.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime.Property property91 = dateTime89.centuryOfEra();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.TimeOfDay timeOfDay93 = dateTime89.toTimeOfDay();
        int[] intArray95 = chronology43.get((org.joda.time.ReadablePartial) timeOfDay93, 1645513760253L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) timeOfDay93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513854858L + "'", long2 == 1645513854858L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:32:54.858+10:22" + "'", str51, "2022-02-22T17:32:54.858+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration70);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T17:32:54.858+10:22" + "'", str73, "2022-02-22T17:32:54.858+10:22");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-22T17:32:54.858+10:22" + "'", str79, "2022-02-22T17:32:54.858+10:22");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[17, 31, 20, 253]");
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        java.lang.String str13 = property12.toString();
        int int14 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime15 = property12.roundHalfEvenCopy();
        java.util.Date date16 = dateTime15.toDate();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:55.025+10:22" + "'", str2, "2022-02-22T17:32:55.025+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[year]" + "'", str13, "Property[year]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Dec 31 13:38:00 UTC 2021");
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-22T17:32:50.553+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTime dateTime14 = mutableInterval7.getStart();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStartMillis(1645513842466L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long5 = dateTimeZone2.convertLocalToUTC((long) 221, true);
        boolean boolean6 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-359999779L) + "'", long5 == (-359999779L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        boolean boolean17 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DurationField durationField28 = dateTimeField27.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        int int36 = yearMonthDay35.size();
        int[] intArray41 = new int[] { 40, 40, '#', 10 };
        int int42 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay35, intArray41);
        long long44 = dateTimeField27.roundHalfFloor((long) (byte) 1);
        int int45 = dateTime16.get(dateTimeField27);
        long long46 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property47 = dateTime16.centuryOfEra();
        org.joda.time.DurationField durationField48 = property47.getDurationField();
        boolean boolean49 = durationField48.isSupported();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513855341L + "'", long2 == 1645513855341L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513855341L + "'", long14 == 1645513855341L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 63175341 + "'", int18 == 63175341);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513855341L + "'", long31 == 1645513855341L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-37320000L) + "'", long44 == (-37320000L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.DateTimeField dateTimeField3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = dateTime1.get(dateTimeField3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeField must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime4.dayOfYear();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        mutableInterval11.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime31 = dateTime4.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime.Property property35 = dateTime33.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        java.util.Locale locale37 = null;
        int int38 = property35.getMaximumTextLength(locale37);
        org.joda.time.DateTime dateTime40 = property35.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime41 = property35.withMaximumValue();
        boolean boolean42 = duration16.equals((java.lang.Object) dateTime41);
        org.joda.time.DateTimeField dateTimeField43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = dateTime41.get(dateTimeField43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeField must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513855577L + "'", long2 == 1645513855577L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:32:55.577+10:22" + "'", str22, "2022-02-22T17:32:55.577+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513855577L + "'", long34 == 1645513855577L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval23.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Interval interval36 = interval22.gap((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTime dateTime37 = mutableInterval23.getEnd();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMillis((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval40 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:55.681+10:22" + "'", str2, "2022-02-22T17:32:55.681+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645513855681L + "'", long13 == 1645513855681L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((-1L), 1L, periodType7, chronology8);
        java.lang.String str10 = periodType7.toString();
        java.lang.String str11 = periodType7.getName();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1645513760165L, periodType7);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType7, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(1645513853379L, (long) 63133, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PeriodType[Time]" + "'", str10, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Time" + "'", str11, "Time");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime.Property property58 = dateTime56.yearOfEra();
        org.joda.time.Interval interval59 = property58.toInterval();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval65 = interval59.withDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval66 = interval59.toInterval();
        org.joda.time.Interval interval68 = interval66.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime69 = interval66.getStart();
        org.joda.time.Duration duration70 = interval66.toDuration();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Period period81 = duration72.toPeriodFrom((org.joda.time.ReadableInstant) dateTime74);
        int int82 = duration70.compareTo((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime36.withMillisOfSecond(63125790);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63125790 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513855733L + "'", long23 == 1645513855733L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:32:55.733+10:22" + "'", str30, "2022-02-22T17:32:55.733+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1052 + "'", int52 == 1052);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645513855733L + "'", long57 == 1645513855733L);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T17:32:55.733+10:22" + "'", str75, "2022-02-22T17:32:55.733+10:22");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withMillisOfDay(52);
        int int24 = dateTime18.getYear();
        long long25 = dateTime18.getMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:55.755+10:22" + "'", str9, "2022-02-22T17:32:55.755+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645513855755L + "'", long19 == 1645513855755L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513855755L + "'", long25 == 1645513855755L);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property22.addWrapFieldToCopy((int) (short) 0);
        int int26 = dateTime25.getYearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:55.816+10:22" + "'", str4, "2022-02-22T17:32:55.816+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:32:55.816+10:22" + "'", str15, "2022-02-22T17:32:55.816+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = duration8.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        boolean boolean27 = dateTime25.isBefore((-1L));
        int int28 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        java.lang.String str30 = periodType29.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 8, periodType37, chronology44);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration35, chronology44);
        int int48 = mutablePeriod33.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = durationFieldType50.getField(chronology57);
        mutablePeriod33.add(durationFieldType50, 0);
        boolean boolean63 = periodType29.isSupported(durationFieldType50);
        org.joda.time.Period period64 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime25, periodType29);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime71.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property82 = dateTime80.property(dateTimeFieldType81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        long long84 = mutableInterval83.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        boolean boolean87 = mutableInterval83.overlaps((org.joda.time.ReadableInterval) mutableInterval85);
        java.lang.Object obj88 = mutableInterval83.clone();
        org.joda.time.Chronology chronology89 = mutableInterval83.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.yearOfEra();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.minuteOfDay();
        int int93 = dateTimeField91.getMinimumValue((long) 9);
        int int95 = dateTimeField91.getLeapAmount(1645513763885L);
        int int96 = dateTime80.get(dateTimeField91);
        org.joda.time.DurationField durationField97 = dateTimeField91.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType98 = durationField97.getType();
        int int99 = periodType29.indexOf(durationFieldType98);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:32:55.838+10:22" + "'", str13, "2022-02-22T17:32:55.838+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:32:55.838+10:22" + "'", str23, "2022-02-22T17:32:55.838+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Millis" + "'", str30, "Millis");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645513855838L + "'", long67 == 1645513855838L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T17:32:55.838+10:22" + "'", str74, "2022-02-22T17:32:55.838+10:22");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1052 + "'", int96 == 1052);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertNotNull(durationFieldType98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.lang.String str7 = dateTimeField5.getAsText(227196000000L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField5.getAsShortText((long) 25843148, locale9);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513855993L + "'", long2 == 1645513855993L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1977" + "'", str7, "1977");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        mutableInterval0.setDurationAfterStart(1645513781244L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(0);
        boolean boolean30 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property31 = dateTime16.year();
        boolean boolean32 = mutableInterval0.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:32:56.125+10:22" + "'", str14, "2022-02-22T17:32:56.125+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:32:56.125+10:22" + "'", str21, "2022-02-22T17:32:56.125+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime33, periodType34);
        org.joda.time.Period period36 = mutablePeriod35.toPeriod();
        org.joda.time.Period period37 = mutablePeriod35.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period39 = period37.withMinutes(63129739);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:56.242+10:22" + "'", str4, "2022-02-22T17:32:56.242+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:32:56.242+10:22" + "'", str24, "2022-02-22T17:32:56.242+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval23.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Interval interval36 = interval22.gap((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean37 = interval4.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfEra();
        java.lang.String str54 = property53.getName();
        org.joda.time.DateTime dateTime55 = property53.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration59.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration59);
        boolean boolean74 = interval41.isAfter((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean75 = interval4.isAfter((org.joda.time.ReadableInterval) interval41);
        long long76 = interval41.toDurationMillis();
        org.joda.time.Interval interval77 = interval41.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513856257L + "'", long2 == 1645513856257L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645513856257L + "'", long13 == 1645513856257L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645513856258L + "'", long52 == 1645513856258L);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "yearOfEra" + "'", str54, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:32:56.258+10:22" + "'", str65, "2022-02-22T17:32:56.258+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(interval77);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        java.lang.String str14 = mutableInterval7.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22" + "'", str14, "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths((int) '#');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        java.lang.String str36 = periodType33.toString();
        java.lang.String str37 = periodType33.getName();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1645513760165L, periodType33);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant29, periodType33);
        org.joda.time.DateTime dateTime41 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, 63106441);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513856399L + "'", long7 == 1645513856399L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 63176399 + "'", int11 == 63176399);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:32:56.399+10:22" + "'", str20, "2022-02-22T17:32:56.399+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[Time]" + "'", str36, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Time" + "'", str37, "Time");
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period6.multipliedBy((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        org.joda.time.PeriodType periodType14 = periodType10.withMinutesRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period33 = new org.joda.time.Period((java.lang.Object) (byte) 0, periodType10, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 40, 40, '#', 10 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        long long24 = dateTimeField7.roundHalfFloor((long) (byte) 1);
        int int26 = dateTimeField7.getMaximumValue(1645513760382L);
        int int28 = dateTimeField7.get(1645513794665L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeField7.getAsShortText(1645513843048L, locale30);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513856550L + "'", long11 == 1645513856550L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-37320000L) + "'", long24 == (-37320000L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal(1645513763679L);
        java.lang.String str10 = dateTimeZone6.getShortName(1645513769549L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 25774, dateTimeZone6);
        java.lang.String str12 = dateTimeZone6.getID();
        long long14 = dateTimeZone6.previousTransition(1645513761197L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645513856629L + "'", long3 == 1645513856629L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645551083679L + "'", long8 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:22" + "'", str10, "+10:22");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513761197L + "'", long14 == 1645513761197L);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-22T17:31:48.363+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.DateTime dateTime40 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        boolean boolean54 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration42);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.toDateTimeISO();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes(0);
        boolean boolean74 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration77 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 10);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        long long81 = dateTime80.getMillis();
        org.joda.time.DateTime.Property property82 = dateTime80.yearOfEra();
        org.joda.time.DateTime dateTime83 = property82.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration77, (org.joda.time.ReadableInstant) dateTime84);
        long long86 = mutableInterval85.toDurationMillis();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:56.744+10:22" + "'", str4, "2022-02-22T17:32:56.744+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:32:56.744+10:22" + "'", str17, "2022-02-22T17:32:56.744+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:32:56.744+10:22" + "'", str30, "2022-02-22T17:32:56.744+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:32:56.744+10:22" + "'", str45, "2022-02-22T17:32:56.744+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:32:56.744+10:22" + "'", str58, "2022-02-22T17:32:56.744+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:32:56.744+10:22" + "'", str65, "2022-02-22T17:32:56.744+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645513856744L + "'", long81 == 1645513856744L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1100000L + "'", long86 == 1100000L);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        int int10 = property9.getLeapAmount();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:56.841+10:22" + "'", str2, "2022-02-22T17:32:56.841+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        java.lang.String str15 = property14.getName();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration20);
        boolean boolean35 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean47 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Hours hours48 = duration37.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:56.852+10:22" + "'", str4, "2022-02-22T17:32:56.852+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645513856852L + "'", long13 == 1645513856852L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfEra" + "'", str15, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:32:56.853+10:22" + "'", str26, "2022-02-22T17:32:56.853+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:32:56.853+10:22" + "'", str40, "2022-02-22T17:32:56.853+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(hours48);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513760165L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        int int24 = mutablePeriod23.size();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:56.979+10:22" + "'", str4, "2022-02-22T17:32:56.979+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-22T07:10:46.317+00:00:00.100", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(25812654);
        int int2 = period1.size();
        int int3 = period1.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfWeek();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withMillisRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period(1645513766098L, periodType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period33 = new org.joda.time.Period((java.lang.Object) dateTime20, periodType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:57.380+10:22" + "'", str4, "2022-02-22T17:32:57.380+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513857380L + "'", long15 == 1645513857380L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63177380 + "'", int19 == 63177380);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63177380 + "'", int22 == 63177380);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumTextLength(locale15);
        java.lang.String str17 = property13.toString();
        org.joda.time.DurationField durationField18 = property13.getDurationField();
        long long19 = durationField18.getUnitMillis();
        int int20 = durationField9.compareTo(durationField18);
        java.lang.String str21 = durationField9.toString();
        int int24 = durationField9.getDifference(1645513811387L, 1645513805406L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513857402L + "'", long12 == 1645513857402L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31556952000L + "'", long19 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DurationField[halfdays]" + "'", str21, "DurationField[halfdays]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        int int22 = dateTimeField21.getMinimumValue();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration35 = duration24.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = duration35.toPeriodTo((org.joda.time.ReadableInstant) dateTime42, periodType43);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime46 = property45.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate47 = dateTime46.toLocalDate();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfDay();
        org.joda.time.DurationField durationField58 = chronology55.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.era();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Seconds seconds71 = period70.toStandardSeconds();
        int int72 = period70.getMillis();
        int[] intArray74 = chronology55.get((org.joda.time.ReadablePeriod) period70, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = dateTimeField21.add((org.joda.time.ReadablePartial) localDate47, 70, intArray74, 63145797);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:32:57.433+10:22" + "'", str27, "2022-02-22T17:32:57.433+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:32:57.433+10:22" + "'", str38, "2022-02-22T17:32:57.433+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:32:57.433+10:22" + "'", str64, "2022-02-22T17:32:57.433+10:22");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-22T07:10:41.742+00:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T07:10:41.742+00:00:00.100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(63141921, 25845058, 63172983, 70, 37319);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime26 = interval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        boolean boolean30 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime28, periodType34);
        org.joda.time.Duration duration46 = duration1.toDuration();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        boolean boolean53 = dateTime51.isBefore((-1L));
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration57 = new org.joda.time.Duration(136746792000L, 1645513762687L);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval54.setInterval(1645513798248L, 1645513776897L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:57.523+10:22" + "'", str4, "2022-02-22T17:32:57.523+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513857524L + "'", long14 == 1645513857524L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645513857524L + "'", long29 == 1645513857524L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:32:57.524+10:22" + "'", str49, "2022-02-22T17:32:57.524+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration46 = interval23.toDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        mutableInterval47.setInterval(100000L, 1645513759601L);
        long long55 = mutableInterval47.getStartMillis();
        java.lang.String str56 = mutableInterval47.toString();
        boolean boolean57 = interval23.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str59 = durationFieldType58.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone62);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period64.minusSeconds((int) (short) 1);
        org.joda.time.Period period68 = period64.plusWeeks((int) (short) -1);
        org.joda.time.Period period70 = period64.minusMillis(4);
        org.joda.time.Interval interval71 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        java.lang.String str73 = chronology72.toString();
        org.joda.time.DurationField durationField74 = durationFieldType58.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField75 = chronology72.centuryOfEra();
        org.joda.time.Interval interval76 = interval23.withChronology(chronology72);
        boolean boolean78 = interval23.isAfter(1645513813875L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:32:57.646+10:22" + "'", str34, "2022-02-22T17:32:57.646+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100000L + "'", long55 == 100000L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22" + "'", str56, "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "seconds" + "'", str59, "seconds");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+10:22]" + "'", str73, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes((int) (byte) 0);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTime4.toString("2022-02-22T17:31:38.347+10:22", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:57.741+10:22" + "'", str2, "2022-02-22T17:32:57.741+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean20 = timeOfDay15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField29 = yearMonthDay27.getField(2);
        java.lang.String str30 = yearMonthDay27.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = timeOfDay15.compareTo((org.joda.time.ReadablePartial) yearMonthDay27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513857832L + "'", long2 == 1645513857832L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513857832L + "'", long23 == 1645513857832L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-05-03" + "'", str30, "2022-05-03");
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration56 = duration18.minus(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513857852L + "'", long23 == 1645513857852L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:32:57.852+10:22" + "'", str30, "2022-02-22T17:32:57.852+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1052 + "'", int52 == 1052);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration56);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime4.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime4.minusSeconds(63098347);
        long long20 = dateTime4.getMillis();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:57.883+10:22" + "'", str2, "2022-02-22T17:32:57.883+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:32:57.883+10:22" + "'", str9, "2022-02-22T17:32:57.883+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645513857010L + "'", long20 == 1645513857010L);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTimeField dateTimeField18 = localDate16.getField((int) (short) 0);
        int int19 = dateTimeField18.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField18.getType();
        long long23 = dateTimeField18.add(1645513828341L, 25843148);
        long long26 = dateTimeField18.set(0L, 63149071);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513858087L + "'", long2 == 1645513858087L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:32:58.087+10:22" + "'", str8, "2022-02-22T17:32:58.087+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 815532626445028341L + "'", long23 == 815532626445028341L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1992730035196800000L + "'", long26 == 1992730035196800000L);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration46 = interval23.toDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        mutableInterval47.setInterval(100000L, 1645513759601L);
        long long55 = mutableInterval47.getStartMillis();
        java.lang.String str56 = mutableInterval47.toString();
        boolean boolean57 = interval23.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str59 = durationFieldType58.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone62);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period64.minusSeconds((int) (short) 1);
        org.joda.time.Period period68 = period64.plusWeeks((int) (short) -1);
        org.joda.time.Period period70 = period64.minusMillis(4);
        org.joda.time.Interval interval71 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        java.lang.String str73 = chronology72.toString();
        org.joda.time.DurationField durationField74 = durationFieldType58.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField75 = chronology72.centuryOfEra();
        org.joda.time.Interval interval76 = interval23.withChronology(chronology72);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval79.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration85 = duration82.plus((long) 8);
        org.joda.time.Instant instant86 = instant78.plus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateTimeZone dateTimeZone87 = instant86.getZone();
        org.joda.time.DateTime dateTime88 = instant86.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime89 = instant86.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval90 = interval76.withStart((org.joda.time.ReadableInstant) mutableDateTime89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:32:58.185+10:22" + "'", str34, "2022-02-22T17:32:58.185+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100000L + "'", long55 == 100000L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22" + "'", str56, "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "seconds" + "'", str59, "seconds");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+10:22]" + "'", str73, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Period period23 = period21.withSeconds((int) (short) -1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) period23, chronology24);
        org.joda.time.Period period27 = period25.plusDays(63096041);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusMinutes(3);
        org.joda.time.Period period34 = period32.plusWeeks(17);
        org.joda.time.Duration duration35 = period34.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType36.getRangeDurationType();
        int int40 = period34.get(durationFieldType39);
        org.joda.time.Period period42 = period25.withFieldAdded(durationFieldType39, 63105178);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:58.453+10:22" + "'", str4, "2022-02-22T17:32:58.453+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:32:58.453+10:22" + "'", str15, "2022-02-22T17:32:58.453+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 17 + "'", int40 == 17);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        boolean boolean6 = periodType3.isSupported(durationFieldType5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) 17, 1645513763846L, periodType3, chronology15);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.getDateTimeMillis(25774, 63138274, (int) (byte) 0, 25835632, 63120817, 12, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25835632 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setMonths((int) ' ');
        java.lang.Object obj26 = mutablePeriod23.clone();
        mutablePeriod23.setDays(40);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology30 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DurationField durationField34 = dateTimeField33.getDurationField();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P32M40D");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(63099, 1052, 25835974, 63116617, 0, 63149071, 25813877, 63102);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1L), 1L, periodType8, chronology9);
        mutablePeriod10.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone15);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period17.plusWeeks((int) (short) -1);
        org.joda.time.Period period23 = period17.minusMillis(4);
        org.joda.time.Interval interval24 = interval16.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        mutablePeriod10.add((org.joda.time.ReadableInterval) interval24);
        mutableInterval4.setInterval((org.joda.time.ReadableInterval) interval24);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        mutablePeriod27.setMonths((int) ' ');
        java.lang.Object obj30 = mutablePeriod27.clone();
        mutablePeriod27.setDays(40);
        mutableInterval4.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology34 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645513804465L, 1645513760075L, periodType3, chronology34);
        int int37 = mutablePeriod36.getSeconds();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "P32M40D");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-44) + "'", int37 == (-44));
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1645513800304L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513800304 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology12.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology12.add(1645513813103L, 1645513798844L, 63123709);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645513798844 * 63123709");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        long long11 = dateTimeZone8.adjustOffset(1645513763885L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(25848044, 0, 63175156, 63146, 48, 11, 63113468, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63146 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513763885L + "'", long11 == 1645513763885L);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        mutableInterval0.setInterval(1645513766040L, 1645513782148L);
        mutableInterval0.setDurationBeforeEnd(1645513825306L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType2 = periodType1.withYearsRemoved();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((-1L), 1L, periodType7, chronology8);
        mutablePeriod9.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval23);
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology33 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) "2022-02-22T17:31:53.504+10:22", periodType1, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:53.504+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P32M40D");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType7 = periodType6.withYearsRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 3, 1645513762121L, periodType7, chronology15);
        org.joda.time.PeriodType periodType18 = periodType7.withMinutesRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 3, 1645513762121L, periodType32, chronology40);
        org.joda.time.DurationField durationField43 = chronology40.eras();
        org.joda.time.DateTime dateTime44 = dateTime22.toDateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfDay();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 115200000, chronology40);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period48 = new org.joda.time.Period((java.lang.Object) periodType2, periodType18, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Hours" + "'", str3, "Hours");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:32:59.038+10:22" + "'", str23, "2022-02-22T17:32:59.038+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        int int12 = durationField8.getDifference(1645513767069L, 1645513762364L);
        long long15 = durationField8.getValueAsLong(1645513803517L, 1645513764612L);
        long long18 = durationField8.getValueAsLong(1645513812702L, 1645517463304L);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = durationField8.getMillis(1645513857164L, 1645513776398L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513857164");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period10.minusHours(63090717);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval27 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval28 = interval21.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Interval interval42 = interval28.gap((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.DateTime dateTime43 = mutableInterval29.getEnd();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime59);
        int int61 = mutablePeriod60.getSeconds();
        int int62 = mutablePeriod60.getSeconds();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        mutableInterval63.setInterval((org.joda.time.ReadableInterval) mutableInterval70);
        boolean boolean76 = mutableInterval70.containsNow();
        mutablePeriod60.add((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Duration duration78 = mutableInterval70.toDuration();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType82 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval();
        long long85 = mutableInterval84.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        boolean boolean88 = mutableInterval84.overlaps((org.joda.time.ReadableInterval) mutableInterval86);
        java.lang.Object obj89 = mutableInterval84.clone();
        org.joda.time.Chronology chronology90 = mutableInterval84.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.yearOfEra();
        org.joda.time.Period period92 = new org.joda.time.Period((long) 3, 1645513762121L, periodType82, chronology90);
        org.joda.time.PeriodType periodType93 = periodType82.withMinutesRemoved();
        org.joda.time.PeriodType periodType94 = periodType93.withHoursRemoved();
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration78, periodType94);
        org.joda.time.Period period96 = period16.normalizedStandard(periodType94);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:32:59.223+10:22" + "'", str4, "2022-02-22T17:32:59.223+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645513859223L + "'", long19 == 1645513859223L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:32:59.223+10:22" + "'", str53, "2022-02-22T17:32:59.223+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 40 + "'", int61 == 40);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 40 + "'", int62 == 40);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-22T17:31:36.141+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumTextLength(locale15);
        java.lang.String str17 = property13.toString();
        org.joda.time.DurationField durationField18 = property13.getDurationField();
        long long19 = durationField18.getUnitMillis();
        int int20 = durationField9.compareTo(durationField18);
        long long21 = durationField18.getUnitMillis();
        long long22 = durationField18.getUnitMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513859332L + "'", long12 == 1645513859332L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31556952000L + "'", long19 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31556952000L + "'", long21 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31556952000L + "'", long22 == 31556952000L);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513760165L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = mutablePeriod37.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        boolean boolean41 = mutablePeriod37.equals((java.lang.Object) dateTime40);
        int[] intArray43 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1645513767592L);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = chronology17.getDateTimeMillis(1645513784643L, 25838284, 25843407, 63123709, 63113600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25838284 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:32:59.352+10:22" + "'", str30, "2022-02-22T17:32:59.352+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 2720, 5, 7, 9, 27, 592]");
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology11.hours();
        long long33 = durationField30.getMillis(63110, 1645513766098L);
        org.joda.time.DurationFieldType durationFieldType34 = durationField30.getType();
        long long35 = durationField30.getUnitMillis();
        long long37 = durationField30.getMillis(0L);
        long long40 = durationField30.getMillis(0, 1645513773042L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 227196000000L + "'", long33 == 227196000000L);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3600000L + "'", long35 == 3600000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(63102000);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadableDuration) duration11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(502);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 502 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513859540L + "'", long2 == 1645513859540L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval12 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval13 = interval6.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Interval interval27 = interval13.gap((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.Chronology chronology28 = mutableInterval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645476455718L, 1645513767304L, chronology28);
        int int30 = mutablePeriod29.getYears();
        java.lang.Object obj31 = mutablePeriod29.clone();
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645513859596L + "'", long4 == 1645513859596L);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT10H21M51.586S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT10H21M51.586S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT10H21M51.586S");
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        boolean boolean7 = mutableInterval6.containsNow();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withEra((int) (byte) 1);
        boolean boolean13 = mutableInterval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        boolean boolean24 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getMillisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        mutableInterval6.setEnd((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getMillisOfDay();
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.DateTime dateTime31 = property29.withMinimumValue();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod();
        mutablePeriod41.setMonths((int) ' ');
        java.lang.Object obj44 = mutablePeriod41.clone();
        long long47 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField48 = chronology38.weekyear();
        org.joda.time.DateTime dateTime49 = dateTime31.withChronology(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(63109642, 63124, 63125790, 252, 63102, 63143672, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:32:59.619+10:22" + "'", str10, "2022-02-22T17:32:59.619+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645513859619L + "'", long21 == 1645513859619L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 63179619 + "'", int25 == 63179619);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 63179619 + "'", int28 == 63179619);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "P32M");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1851379200000L + "'", long47 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        java.lang.Object obj0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(obj0);
        java.lang.Object obj2 = mutablePeriod1.clone();
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        java.lang.String str8 = property7.getName();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        long long39 = duration29.getMillis();
        long long40 = duration29.getStandardMinutes();
        org.joda.time.Duration duration41 = duration29.toDuration();
        boolean boolean42 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration13.withMillis((long) (byte) 0);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration46 = org.joda.time.Duration.ZERO;
        org.joda.time.Hours hours47 = duration46.toStandardHours();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645513859672L + "'", long6 == 1645513859672L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfEra" + "'", str8, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:32:59.672+10:22" + "'", str19, "2022-02-22T17:32:59.672+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:32:59.672+10:22" + "'", str32, "2022-02-22T17:32:59.672+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100000L + "'", long39 == 100000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(hours47);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.Instant instant15 = dateTime10.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:32:59.703+10:22" + "'", str2, "2022-02-22T17:32:59.703+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        boolean boolean23 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.setMonths((int) ' ');
        java.lang.Object obj37 = mutablePeriod34.clone();
        long long40 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekyear();
        mutableInterval13.setChronology(chronology31);
        org.joda.time.DurationField durationField43 = durationFieldType9.getField(chronology31);
        org.joda.time.DurationField durationField44 = chronology31.days();
        long long47 = durationField44.add((long) 63146531, 25828434);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645513859883L + "'", long20 == 1645513859883L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "P32M");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1851379200000L + "'", long40 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2231576760746531L + "'", long47 == 2231576760746531L);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        org.joda.time.DateTime dateTime14 = property3.setCopy(10);
        long long15 = property3.remainder();
        org.joda.time.DateTime dateTime16 = property3.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withDayOfMonth(63142010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63142010 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513859941L + "'", long2 == 1645513859941L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:32:59.941+10:22" + "'", str6, "2022-02-22T17:32:59.941+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4555979941L + "'", long15 == 4555979941L);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded(1645513771467L, 1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property28.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long32 = dateTimeZone30.convertUTCToLocal(1645513763679L);
        java.lang.String str34 = dateTimeZone30.getShortName(1645513769549L);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 25774, dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:33:00.002+10:22" + "'", str9, "2022-02-22T17:33:00.002+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645513860002L + "'", long27 == 1645513860002L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645551083679L + "'", long32 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:22" + "'", str34, "+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration46 = interval23.toDuration();
        org.joda.time.DateTime dateTime47 = interval23.getEnd();
        int int48 = dateTime47.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:33:00.472+10:22" + "'", str34, "2022-02-22T17:33:00.472+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Seconds seconds12 = period11.toStandardSeconds();
        int int13 = period11.getMillis();
        org.joda.time.DurationFieldType durationFieldType15 = period11.getFieldType(0);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 3, 1645513762121L, periodType19, chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfMonth();
        boolean boolean31 = durationFieldType15.isSupported(chronology27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T17:31:41.879+10:22", chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime32.withMonthOfYear(63092);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63092 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:33:00.502+10:22" + "'", str5, "2022-02-22T17:33:00.502+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval12.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval19 = interval12.toInterval();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Interval interval33 = interval19.gap((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTime dateTime34 = mutableInterval20.getEnd();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime50);
        int int52 = mutablePeriod51.getSeconds();
        int int53 = mutablePeriod51.getSeconds();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean67 = mutableInterval61.containsNow();
        mutablePeriod51.add((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.Duration duration69 = mutableInterval61.toDuration();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType73 = periodType72.withYearsRemoved();
        org.joda.time.PeriodType periodType74 = periodType73.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        boolean boolean79 = mutableInterval75.overlaps((org.joda.time.ReadableInterval) mutableInterval77);
        java.lang.Object obj80 = mutableInterval75.clone();
        org.joda.time.Chronology chronology81 = mutableInterval75.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.yearOfEra();
        org.joda.time.Period period83 = new org.joda.time.Period((long) 3, 1645513762121L, periodType73, chronology81);
        org.joda.time.PeriodType periodType84 = periodType73.withMinutesRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withHoursRemoved();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration69, periodType85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period87 = new org.joda.time.Period(25847168, 25840691, 63138973, 63149145, 63120, 0, 59, 63090717, periodType85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513860527L + "'", long10 == 1645513860527L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:33:00.527+10:22" + "'", str44, "2022-02-22T17:33:00.527+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 40 + "'", int52 == 40);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 40 + "'", int53 == 40);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.withMillisOfDay(63149103);
        int int8 = dateTime1.getEra();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:00.553+10:22" + "'", str2, "2022-02-22T17:33:00.553+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        int int16 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.Interval interval20 = property17.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513860813L + "'", long2 == 1645513860813L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:33:00.813+10:22" + "'", str9, "2022-02-22T17:33:00.813+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Interval interval13 = interval3.withEndMillis(1645513791936L);
        boolean boolean15 = interval3.contains(1645513833629L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1645513789679L, 1645513792296L, periodType3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period5 = new org.joda.time.Period((java.lang.Object) 1645513767187L, periodType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1645513856783L, 1645513842631L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        boolean boolean3 = mutableInterval0.isAfter(1645513780665L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(1645513849368L, 1645513814518L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        boolean boolean10 = dateTimeField8.isLeap(1645513785346L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        int[] intArray17 = period14.getValues();
        int int18 = period14.getMonths();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.Period period23 = period19.plusMinutes(3);
        org.joda.time.Period period25 = period23.plusWeeks(17);
        org.joda.time.Duration duration26 = period25.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = dateTimeFieldType27.isSupported(chronology28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getRangeDurationType();
        int int31 = period25.get(durationFieldType30);
        org.joda.time.Period period33 = period14.withField(durationFieldType30, (int) (byte) 10);
        org.joda.time.Period period35 = period14.multipliedBy(0);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:01.543+10:22" + "'", str4, "2022-02-22T17:33:01.543+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 17 + "'", int31 == 17);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645513776824L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period27 = period15.withWeeks(258);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:01.739+10:22" + "'", str4, "2022-02-22T17:33:01.739+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513861739L + "'", long18 == 1645513861739L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType32 = period30.getFieldType(63147663);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime29 = instant27.toMutableDateTimeISO();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513861838L + "'", long2 == 1645513861838L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513861838L + "'", long17 == 1645513861838L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.Period period9 = period6.multipliedBy(100);
        org.joda.time.Period period11 = period6.plusSeconds((-292275054));
        org.joda.time.Period period13 = period11.plusHours(25843407);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period1.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withMillisRemoved();
        org.joda.time.PeriodType periodType7 = periodType4.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513821823L, periodType7);
        int int9 = mutablePeriod8.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        long long17 = dateTimeField15.roundCeiling(10L);
        java.util.Locale locale18 = null;
        int int19 = dateTimeField15.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1000L + "'", long17 == 1000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.Period period9 = period6.multipliedBy(100);
        org.joda.time.Period period11 = period6.plusSeconds((-292275054));
        org.joda.time.Period period13 = period6.minusDays(63094282);
        int int14 = period13.getSeconds();
        int int15 = period13.getSeconds();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int5 = dateTimeZone3.getOffsetFromLocal(1645513761942L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval6 = new org.joda.time.Interval(1645513816974L, 1645513759774L, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 115200000 + "'", int5 == 115200000);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        boolean boolean12 = dateTime10.isAfter((long) 100);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str20 = durationFieldType19.toString();
        boolean boolean21 = periodType8.isSupported(durationFieldType19);
        mutablePeriod0.add(durationFieldType19, 63111649);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((java.lang.Object) mutablePeriod0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "seconds" + "'", str20, "seconds");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Instant instant45 = instant3.minus(1645513792564L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:33:02.634+10:22" + "'", str16, "2022-02-22T17:33:02.634+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval24 = interval18.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval25 = interval18.toInterval();
        org.joda.time.Interval interval27 = interval25.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime28 = interval25.getStart();
        boolean boolean29 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) interval25);
        boolean boolean31 = mutableInterval0.isBefore(1645513771496L);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval0.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStartMillis(1645513842799L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645513862709L + "'", long16 == 1645513862709L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableInterval32);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        long long11 = dateTimeField8.add(1645513768262L, 22);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField8.getType();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType18, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        int int37 = dateTime33.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTimeISO();
        int int47 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDate localDate48 = dateTime46.toLocalDate();
        int[] intArray50 = chronology30.get((org.joda.time.ReadablePartial) localDate48, 1645513760075L);
        int[] intArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = dateTimeField8.add((org.joda.time.ReadablePartial) localDate48, (-292275054), intArray52, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513768284L + "'", long11 == 1645513768284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513862757L + "'", long34 == 1645513862757L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:33:02.757+10:22" + "'", str40, "2022-02-22T17:33:02.757+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 22]");
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        long long10 = dateTimeField8.remainder((long) '#');
        java.lang.String str11 = dateTimeField8.getName();
        int int13 = dateTimeField8.get(1645513763221L);
        long long16 = dateTimeField8.getDifferenceAsLong(1645513827750L, 1645513779396L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfSecond" + "'", str11, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 221 + "'", int13 == 221);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 48354L + "'", long16 == 48354L);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTimeField dateTimeField18 = localDate16.getField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        int int24 = dateTime20.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        int int34 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDate localDate35 = dateTime33.toLocalDate();
        org.joda.time.DateTimeField dateTimeField37 = localDate35.getField((int) (short) 0);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate35, periodType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period43 = period41.plusMillis(63138623);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513862828L + "'", long2 == 1645513862828L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:33:02.828+10:22" + "'", str8, "2022-02-22T17:33:02.828+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645513862828L + "'", long21 == 1645513862828L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:33:02.828+10:22" + "'", str27, "2022-02-22T17:33:02.828+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        int int8 = property3.get();
        int int9 = property3.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        long long16 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury(63125790);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63125790 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513862871L + "'", long2 == 1645513862871L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513862871L + "'", long12 == 1645513862871L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        java.lang.String str16 = property15.getName();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21);
        boolean boolean36 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property37 = dateTime17.year();
        boolean boolean38 = property37.isLeap();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513862901L + "'", long14 == 1645513862901L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfEra" + "'", str16, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:33:02.902+10:22" + "'", str27, "2022-02-22T17:33:02.902+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        java.lang.String str18 = property17.getName();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        int int43 = yearMonthDay42.size();
        int[] intArray48 = new int[] { 40, 40, '#', 10 };
        int int49 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay42, intArray48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay26, (org.joda.time.ReadablePartial) yearMonthDay42);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1L), 1L, periodType53, chronology54);
        mutablePeriod55.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone60);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.minusSeconds((int) (short) 1);
        org.joda.time.Period period66 = period62.plusWeeks((int) (short) -1);
        org.joda.time.Period period68 = period62.minusMillis(4);
        org.joda.time.Interval interval69 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        mutablePeriod55.add((org.joda.time.ReadableInterval) interval69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(4);
        org.joda.time.LocalDate localDate80 = dateTime77.toLocalDate();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        long long88 = dateTime87.getMillis();
        org.joda.time.DateTime dateTime90 = dateTime87.plusWeeks((int) (byte) 10);
        boolean boolean91 = mutableInterval81.contains((org.joda.time.ReadableInstant) dateTime90);
        mutablePeriod55.setPeriod((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = yearMonthDay26.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.YearMonthDay yearMonthDay94 = dateTime90.toYearMonthDay();
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime90);
        int int96 = dateTime90.getWeekyear();
        org.joda.time.DateTime.Property property97 = dateTime90.centuryOfEra();
        int int98 = dateTime90.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645513863115L + "'", long16 == 1645513863115L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513863115L + "'", long22 == 1645513863115L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645513863115L + "'", long38 == 1645513863115L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645513863115L + "'", long73 == 1645513863115L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1645513863115L + "'", long88 == 1645513863115L);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2022 + "'", int96 == 2022);
        org.junit.Assert.assertNotNull(property97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 115 + "'", int98 == 115);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.year();
        long long15 = dateTimeField12.add(1645513849165L, 18);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField12.getAsText(1645513857753L, locale17);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2213507449165L + "'", long15 == 2213507449165L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.plusYears(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292281015 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:03.215+10:22" + "'", str2, "2022-02-22T17:33:03.215+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.DateTime dateTime26 = mutableInterval12.getEnd();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((-292275054));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(63088836);
        org.joda.time.DateTime dateTime37 = dateTime33.withHourOfDay(9);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513863298L + "'", long2 == 1645513863298L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513863298L + "'", long31 == 1645513863298L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-01-01T09:00:00.000+10:22" + "'", str38, "2022-01-01T09:00:00.000+10:22");
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        long long15 = dateTimeField13.roundFloor(1645513859442L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513800000L + "'", long15 == 1645513800000L);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period10 = period9.toPeriod();
        org.joda.time.Period period12 = period10.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        boolean boolean21 = dateTime19.isBefore((-1L));
        org.joda.time.DateTime.Property property22 = dateTime19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.DateTime dateTime24 = property22.roundFloorCopy();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645513765947L, periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime24, periodType26);
        java.util.Locale locale29 = null;
        java.util.Calendar calendar30 = dateTime24.toCalendar(locale29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime24.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:03.762+10:22" + "'", str2, "2022-02-22T17:33:03.762+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:33:03.762+10:22" + "'", str17, "2022-02-22T17:33:03.762+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645513863010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=33,SECOND=3,MILLISECOND=10,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime18.withEra(63094282);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63094282 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:33:03.787+10:22" + "'", str9, "2022-02-22T17:33:03.787+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime3.withDayOfWeek(63101202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63101202 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:03.859+10:22" + "'", str4, "2022-02-22T17:33:03.859+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfHalfday();
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField25.set(1645513783532L, "2022-02-22T17:31:25.946+10:22", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:31:25.946+10:22\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:04.023+10:22" + "'", str2, "2022-02-22T17:33:04.023+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-22T17:31:36.483+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.forFields(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        java.lang.String str6 = dateTimeZone2.getName(1645513762160L);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (short) 10, 25760283, (int) (short) 0, 1);
        mutablePeriod11.setMinutes(10);
        boolean boolean14 = dateTimeZone2.equals((java.lang.Object) 10);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone2.getShortName(1645513751187L, locale16);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:22" + "'", str6, "+10:22");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:22" + "'", str17, "+10:22");
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        mutablePeriod8.clear();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod8.copy();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = duration23.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = mutablePeriod36.getSeconds();
        int int38 = mutablePeriod36.getSeconds();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        mutableInterval39.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        boolean boolean52 = mutableInterval46.containsNow();
        mutablePeriod36.add((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Duration duration54 = mutableInterval46.toDuration();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) mutableInterval46);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.setValue(63121447, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63121447");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:33:04.472+10:22" + "'", str29, "2022-02-22T17:33:04.472+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType12.isSupported(chronology14);
        int int16 = period10.indexOf(durationFieldType12);
        org.joda.time.Period period18 = period10.plusMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        mutablePeriod19.add(52, 20, 7, 7, 63101202, 22, 429, 20);
        mutablePeriod19.setYears(63148593);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:04.671+10:22" + "'", str4, "2022-02-22T17:33:04.671+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "seconds" + "'", str13, "seconds");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((-1L), 1L, periodType19, chronology20);
        mutablePeriod21.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval35);
        mutableInterval15.setInterval((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod();
        mutablePeriod38.setMonths((int) ' ');
        java.lang.Object obj41 = mutablePeriod38.clone();
        mutablePeriod38.setDays(40);
        mutableInterval15.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology45 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DurationField durationField55 = dateTimeField54.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay62 = dateTime61.toYearMonthDay();
        int int63 = yearMonthDay62.size();
        int[] intArray68 = new int[] { 40, 40, '#', 10 };
        int int69 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay62, intArray68);
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) yearMonthDay62, 63112091, locale71);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = localTime14.compareTo((org.joda.time.ReadablePartial) yearMonthDay62);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:04.691+10:22" + "'", str2, "2022-02-22T17:33:04.691+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "P32M40D");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645513864692L + "'", long58 == 1645513864692L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "63112091" + "'", str72, "63112091");
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period15 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period17 = period15.withYears(52);
        org.joda.time.Period period19 = period15.multipliedBy(2022);
        org.joda.time.Period period21 = period15.minusMinutes(0);
        mutablePeriod0.setPeriod((org.joda.time.ReadablePeriod) period21);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod0.setValue(1052, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1052");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:33:04.928+10:22" + "'", str9, "2022-02-22T17:33:04.928+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration11.minus(readableDuration35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, readableDuration35);
        java.lang.Object obj38 = mutableInterval37.clone();
        mutableInterval37.setStartMillis(1645513797327L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:04.947+10:22" + "'", str2, "2022-02-22T17:33:04.947+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:33:04.947+10:22" + "'", str14, "2022-02-22T17:33:04.947+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645513864947L + "'", long28 == 1645513864947L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2022-02-22T17:33:04.010+10:22/2022-02-22T17:33:04.010+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-22T17:33:04.010+10:22/2022-02-22T17:33:04.010+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-22T17:33:04.010+10:22/2022-02-22T17:33:04.010+10:22");
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        java.lang.Object obj2 = mutableInterval0.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(1645513829288L, (-19045L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        mutableInterval0.setInterval(1645513766040L, 1645513782148L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 3, 1645513762121L, periodType49, chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        org.joda.time.DateTime dateTime61 = dateTime39.toDateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.clockhourOfDay();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 115200000, chronology57);
        org.joda.time.DateTimeField dateTimeField64 = chronology57.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology57.clockhourOfHalfday();
        mutableInterval0.setChronology(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(1645513858477L, 1645513846948L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:33:05.150+10:22" + "'", str40, "2022-02-22T17:33:05.150+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        long long10 = dateTimeField7.addWrapField(1645513760382L, 22);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        int[] intArray43 = chronology34.get((org.joda.time.ReadablePartial) yearMonthDay41, 1645513760770L);
        int[] intArray45 = dateTimeField7.add((org.joda.time.ReadablePartial) yearMonthDay24, (int) '4', intArray43, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay59 = dateTime58.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DurationField durationField68 = dateTimeField67.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay75 = dateTime74.toYearMonthDay();
        int int76 = yearMonthDay75.size();
        int[] intArray81 = new int[] { 40, 40, '#', 10 };
        int int82 = dateTimeField67.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay75, intArray81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay59, (org.joda.time.ReadablePartial) yearMonthDay75);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay52, (org.joda.time.ReadablePartial) yearMonthDay59, periodType84);
        int int86 = yearMonthDay59.size();
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType88 = periodType87.withYearsRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay24, (org.joda.time.ReadablePartial) yearMonthDay59, periodType88);
        int int90 = yearMonthDay24.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((java.lang.Object) int90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2339737760382L + "'", long10 == 2339737760382L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645513865392L + "'", long13 == 1645513865392L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513865392L + "'", long37 == 1645513865392L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 22]");
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645513865392L + "'", long48 == 1645513865392L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645513865392L + "'", long55 == 1645513865392L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645513865392L + "'", long71 == 1645513865392L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        long long25 = property23.remainder();
        org.joda.time.Interval interval26 = property23.toInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone29);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period31.minusSeconds((int) (short) 1);
        org.joda.time.Period period35 = period31.plusWeeks((int) (short) -1);
        org.joda.time.Period period37 = period31.minusMillis(4);
        org.joda.time.Interval interval38 = interval30.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        java.lang.String str43 = property42.getName();
        org.joda.time.DateTime dateTime44 = property42.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration48.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration48);
        boolean boolean63 = interval30.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone66);
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period70 = period68.minusSeconds((int) (short) 1);
        org.joda.time.Period period72 = period68.plusWeeks((int) (short) -1);
        org.joda.time.Period period74 = period68.minusMillis(4);
        org.joda.time.Interval interval75 = interval67.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        boolean boolean77 = interval30.contains((org.joda.time.ReadableInterval) interval75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        long long80 = interval79.toDurationMillis();
        boolean boolean81 = interval30.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.MutableInterval mutableInterval82 = interval79.toMutableInterval();
        mutableInterval82.setDurationAfterStart(1645513810792L);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType86 = periodType85.withYearsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withSecondsRemoved();
        int int88 = periodType86.size();
        org.joda.time.PeriodType periodType89 = periodType86.withMinutesRemoved();
        org.joda.time.Period period90 = mutableInterval82.toPeriod(periodType89);
        boolean boolean91 = interval26.contains((org.joda.time.ReadableInterval) mutableInterval82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:05.478+10:22" + "'", str4, "2022-02-22T17:33:05.478+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513865478L + "'", long15 == 1645513865478L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63185478 + "'", int19 == 63185478);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63185478 + "'", int22 == 63185478);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 478L + "'", long25 == 478L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645513865479L + "'", long41 == 1645513865479L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfEra" + "'", str43, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:33:05.479+10:22" + "'", str54, "2022-02-22T17:33:05.479+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = dateTime68.withDayOfWeek(115200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 115200000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:33:05.522+10:22" + "'", str16, "2022-02-22T17:33:05.522+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513865523L + "'", long34 == 1645513865523L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime31.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        boolean boolean43 = dateTime41.isBefore((-1L));
        int int44 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int46 = dateTime41.get(dateTimeFieldType45);
        java.lang.String str47 = dateTime41.toString();
        java.lang.Object obj48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(obj48, periodType49, chronology50);
        int int52 = periodType49.size();
        org.joda.time.Period period53 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41, periodType49);
        org.joda.time.DateTime.Property property54 = dateTime41.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMonths(3);
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfDay();
        org.joda.time.DateTime dateTime63 = property62.getDateTime();
        int int64 = dateTime63.getHourOfDay();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = dateTime80.withZoneRetainFields(dateTimeZone82);
        int int84 = dateTime80.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime80.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime80.toMutableDateTime();
        int int87 = mutableDateTime86.getMinuteOfDay();
        org.joda.time.Chronology chronology88 = mutableDateTime86.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.era();
        int int90 = dateTime63.get(dateTimeField89);
        int int91 = dateTime41.get(dateTimeField89);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:05.601+10:22" + "'", str4, "2022-02-22T17:33:05.601+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513865601L + "'", long18 == 1645513865601L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:33:05.601+10:22" + "'", str29, "2022-02-22T17:33:05.601+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:33:05.601+10:22" + "'", str39, "2022-02-22T17:33:05.601+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:33:05.010+10:22" + "'", str47, "2022-02-22T17:33:05.010+10:22");
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645513865601L + "'", long57 == 1645513865601L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 17 + "'", int64 == 17);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T17:33:05.602+10:22" + "'", str74, "2022-02-22T17:33:05.602+10:22");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 17 + "'", int84 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1053 + "'", int87 == 1053);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645513767304L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1645513766040L, chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object) 1645513767304L, chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-22T17:32:24.483+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Duration duration17 = duration3.toDuration();
        org.joda.time.Duration duration18 = duration1.minus((org.joda.time.ReadableDuration) duration17);
        long long19 = duration18.getStandardDays();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period25.negated();
        org.joda.time.Interval interval27 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType42 = periodType41.withYearsRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 3, 1645513762121L, periodType42, chronology50);
        org.joda.time.DurationField durationField53 = chronology50.eras();
        org.joda.time.DateTime dateTime54 = dateTime32.toDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.clockhourOfDay();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 115200000, chronology50);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology50);
        int[] intArray58 = mutablePeriod57.getValues();
        org.joda.time.Period period59 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration72 = duration61.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.DateTime dateTime77 = dateTime74.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime(chronology78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = duration72.toPeriodTo((org.joda.time.ReadableInstant) dateTime79, periodType80);
        org.joda.time.Duration duration84 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days85 = duration84.toStandardDays();
        org.joda.time.Days days86 = duration84.toStandardDays();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableDuration) duration84);
        org.joda.time.Duration duration88 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean89 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration88);
        boolean boolean91 = duration18.equals((java.lang.Object) "2022-02-22T17:32:49.971+10:22");
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:33:05.796+10:22" + "'", str6, "2022-02-22T17:33:05.796+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 19045L + "'", long19 == 19045L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513865796L + "'", long22 == 1645513865796L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:33:05.796+10:22" + "'", str33, "2022-02-22T17:33:05.796+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:33:05.796+10:22" + "'", str64, "2022-02-22T17:33:05.796+10:22");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T17:33:05.796+10:22" + "'", str75, "2022-02-22T17:33:05.796+10:22");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(days85);
        org.junit.Assert.assertNotNull(days86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        int[] intArray27 = chronology8.get((org.joda.time.ReadablePeriod) period24, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone30);
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period32.minusSeconds((int) (short) 1);
        org.joda.time.Period period36 = period32.plusWeeks((int) (short) -1);
        org.joda.time.Period period38 = period32.minusMillis(4);
        org.joda.time.Interval interval39 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        int[] intArray41 = chronology8.get((org.joda.time.ReadablePeriod) period32, (long) 63099629);
        org.joda.time.Weeks weeks42 = period32.toStandardWeeks();
        int int43 = period32.getMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.Chronology chronology54 = chronology52.withUTC();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod();
        mutablePeriod55.setMonths((int) ' ');
        java.lang.Object obj58 = mutablePeriod55.clone();
        long long61 = chronology52.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField62 = chronology52.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology52);
        org.joda.time.DateTimeField dateTimeField64 = chronology52.clockhourOfHalfday();
        org.joda.time.Chronology chronology65 = chronology52.withUTC();
        org.joda.time.DurationField durationField66 = chronology65.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) period32, chronology65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513866011L + "'", long11 == 1645513866011L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 17, 31, 39, 629]");
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "P32M");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1851379200000L + "'", long61 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval29.containsNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval47.toInterval();
        org.joda.time.Interval interval56 = interval54.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime57 = interval54.getStart();
        boolean boolean58 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) interval54);
        boolean boolean59 = mutableInterval26.contains((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType63 = period62.getPeriodType();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.Period period65 = mutableInterval26.toPeriod(periodType63);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType67 = periodType66.withMinutesRemoved();
        org.joda.time.Period period68 = mutableInterval26.toPeriod(periodType66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType70 = period68.getFieldType(25847650);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:33:06.039+10:22" + "'", str2, "2022-02-22T17:33:06.039+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:33:06.039+10:22" + "'", str9, "2022-02-22T17:33:06.039+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:33:06.039+10:22" + "'", str16, "2022-02-22T17:33:06.039+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645513866039L + "'", long45 == 1645513866039L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        boolean boolean12 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withZoneRetainFields(dateTimeZone30);
        int int32 = dateTime28.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime();
        org.joda.time.Period period34 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime28.plus(readableDuration35);
        boolean boolean38 = dateTime36.isBefore(1613977792184L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime36.withMinuteOfHour(63094282);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63094282 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:33:06.066+10:22" + "'", str22, "2022-02-22T17:33:06.066+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 17 + "'", int32 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.DateTime dateTime26 = mutableInterval12.getEnd();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime42);
        int int44 = mutablePeriod43.getSeconds();
        int int45 = mutablePeriod43.getSeconds();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        mutableInterval46.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean59 = mutableInterval53.containsNow();
        mutablePeriod43.add((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Duration duration61 = mutableInterval53.toDuration();
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType65 = periodType64.withYearsRemoved();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        java.lang.Object obj72 = mutableInterval67.clone();
        org.joda.time.Chronology chronology73 = mutableInterval67.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.yearOfEra();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 3, 1645513762121L, periodType65, chronology73);
        org.joda.time.PeriodType periodType76 = periodType65.withMinutesRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withHoursRemoved();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration61, periodType77);
        org.joda.time.PeriodType periodType79 = periodType77.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType81 = periodType77.getFieldType(25838284);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25838284");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513866290L + "'", long2 == 1645513866290L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:33:06.290+10:22" + "'", str36, "2022-02-22T17:33:06.290+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 40 + "'", int45 == 40);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        java.util.Locale locale8 = null;
        int int9 = property3.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime10 = property3.getDateTime();
        org.joda.time.DateTime dateTime11 = property3.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withEra(40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513866320L + "'", long2 == 1645513866320L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        boolean boolean34 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval33);
        long long35 = mutableInterval0.getEndMillis();
        org.joda.time.DateTime dateTime36 = mutableInterval0.getStart();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration55.toPeriod();
        boolean boolean58 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration49, periodType59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone63);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period67 = period65.minusSeconds((int) (short) 1);
        org.joda.time.Period period69 = period65.plusWeeks((int) (short) -1);
        org.joda.time.Period period71 = period65.minusMillis(4);
        org.joda.time.Interval interval72 = interval64.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        java.lang.String str74 = chronology73.toString();
        org.joda.time.Period period75 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType59, chronology73);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology73);
        org.joda.time.DateTime dateTime78 = dateTime76.minusYears(905);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100000L + "'", long35 == 100000L);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645513866417L + "'", long42 == 1645513866417L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ISOChronology[+10:22]" + "'", str74, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        long long82 = dateTime80.getMillis();
        int int83 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property84 = dateTime80.hourOfDay();
        org.joda.time.DateTime dateTime85 = property84.getDateTime();
        org.joda.time.Interval interval86 = property84.toInterval();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:33:06.515+10:22" + "'", str16, "2022-02-22T17:33:06.515+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645513866515L + "'", long34 == 1645513866515L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:33:06.515+10:22" + "'", str72, "2022-02-22T17:33:06.515+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645513866010L + "'", long82 == 1645513866010L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval86);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTime.Property property39 = dateTime11.hourOfDay();
        int int40 = property39.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = property39.setCopy(2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:33:06.582+10:22" + "'", str12, "2022-02-22T17:33:06.582+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 17 + "'", int40 == 17);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.plus((long) 8);
        org.joda.time.Duration duration32 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime(chronology38);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        int int47 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        org.joda.time.DateTime dateTime54 = dateTime44.withZone(dateTimeZone53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval55 = new org.joda.time.Interval(1645513839400L, 1645513795950L, dateTimeZone53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:06.645+10:22" + "'", str4, "2022-02-22T17:33:06.645+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:33:06.645+10:22" + "'", str15, "2022-02-22T17:33:06.645+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:33:06.645+10:22" + "'", str35, "2022-02-22T17:33:06.645+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645513866645L + "'", long50 == 1645513866645L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:33:06.879+10:22" + "'", str4, "2022-02-22T17:33:06.879+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long15 = dateTimeField10.addWrapField(1645513771496L, 25774);
        java.util.Locale locale16 = null;
        int int17 = dateTimeField10.getMaximumShortTextLength(locale16);
        int int18 = dateTimeField10.getMaximumValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645505011496L + "'", long15 == 1645505011496L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1439 + "'", int18 == 1439);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumTextLength(locale15);
        java.lang.String str17 = property13.toString();
        org.joda.time.DurationField durationField18 = property13.getDurationField();
        long long19 = durationField18.getUnitMillis();
        int int20 = durationField9.compareTo(durationField18);
        boolean boolean21 = durationField9.isPrecise();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        long long33 = durationField31.getValueAsLong((-37320000L));
        long long35 = durationField31.getValueAsLong(1645513774891L);
        long long38 = durationField31.subtract(1645513779761L, 292278993);
        int int39 = durationField9.compareTo(durationField31);
        int int42 = durationField9.getValue(1645513768175L, 0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513867216L + "'", long12 == 1645513867216L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31556952000L + "'", long19 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 38090L + "'", long35 == 38090L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-12624806983820239L) + "'", long38 == (-12624806983820239L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 38090 + "'", int42 == 38090);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        boolean boolean9 = dateTime7.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean31 = mutableInterval29.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval29.setChronology(chronology38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1645513782198L, periodType1, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:33:07.238+10:22" + "'", str5, "2022-02-22T17:33:07.238+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:33:07.238+10:22" + "'", str12, "2022-02-22T17:33:07.238+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:33:07.238+10:22" + "'", str19, "2022-02-22T17:33:07.238+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Interval interval15 = interval13.gap(readableInterval14);
        org.joda.time.Interval interval17 = interval13.withEndMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Interval interval25 = interval13.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1L), 1L, periodType32, chronology33);
        java.lang.String str35 = periodType32.toString();
        java.lang.String str36 = periodType32.getName();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760165L, periodType32);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType32, chronology44);
        boolean boolean46 = dateTimeFieldType26.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.Interval interval48 = interval25.withChronology(chronology44);
        org.joda.time.DurationField durationField49 = chronology44.months();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = chronology44.getDateTimeMillis(123, 63171279, 25839660, (int) (short) 1, 63106441, 999, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63106441 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513867296L + "'", long2 == 1645513867296L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[Time]" + "'", str35, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Time" + "'", str36, "Time");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(38090);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

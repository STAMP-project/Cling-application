import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName(1645513761170L, locale14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType26 = period24.getFieldType(4);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType30 = periodType29.withYearsRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 3, 1645513762121L, periodType30, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DurationField durationField42 = durationFieldType26.getField(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField41, durationField42, and durationField41", !(durationField41.compareTo(durationField42) == 0) || (Math.signum(durationField41.compareTo(durationField41)) == Math.signum(durationField42.compareTo(durationField41))));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusMinutes(3);
        org.joda.time.Period period16 = period14.plusWeeks(17);
        org.joda.time.Duration duration17 = period16.toStandardDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration42 = duration31.minus(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1L), 1L, periodType47, chronology48);
        java.lang.String str50 = periodType47.toString();
        java.lang.String str51 = periodType47.getName();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1645513760165L, periodType47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant43, periodType47);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime dateTime63 = dateTime60.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime63.plusSeconds((int) (byte) 10);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration67 = duration31.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval68.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration71.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology80);
        org.joda.time.DateTime dateTime82 = dateTime76.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateTime dateTime83 = dateTime76.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = duration57.isShorterThan((org.joda.time.ReadableDuration) duration71);
        boolean boolean86 = duration17.isEqual((org.joda.time.ReadableDuration) duration71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime33", (dateTime28.compareTo(dateTime33) == 0) == dateTime28.equals(dateTime33));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime4.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime39", (dateTime24.compareTo(dateTime39) == 0) == dateTime24.equals(dateTime39));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis(1645513768037L);
        org.joda.time.Instant instant21 = instant19.minus(1645513769503L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1L), 1L, periodType38, chronology39);
        java.lang.String str41 = periodType38.toString();
        java.lang.String str42 = periodType38.getName();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1645513760165L, periodType38);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType38, chronology50);
        boolean boolean52 = dateTimeFieldType32.isSupported(chronology50);
        int int53 = dateTime31.get(dateTimeFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis(1645513768037L);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.DurationField durationField32 = dateTimeField31.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        int int40 = yearMonthDay39.size();
        int[] intArray45 = new int[] { 40, 40, '#', 10 };
        int int46 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay39, intArray45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay23, (org.joda.time.ReadablePartial) yearMonthDay39);
        int int48 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay23);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant54 = dateTime53.toInstant();
        org.joda.time.DateTime.Property property55 = dateTime53.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean64 = dateTime60.isSupported(dateTimeFieldType63);
        int int65 = dateTime53.get(dateTimeFieldType63);
        boolean boolean66 = yearMonthDay23.isSupported(dateTimeFieldType63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and instant54", (dateTime53.compareTo(instant54) == 0) == dateTime53.equals(instant54));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property6 = dateTime4.centuryOfEra();
        int int7 = property6.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        int int10 = dateTimeZone7.getStandardOffset(1645513770504L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology19.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant33 = instant0.minus(0L);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.parse("2022-02-22T07:09:19.956Z");
        boolean boolean36 = instant33.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime1", (instant33.compareTo(mutableDateTime1) == 0) == instant33.equals(mutableDateTime1));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType21 = periodType20.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = periodType21.isSupported(durationFieldType23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 17, 1645513763846L, periodType21, chronology33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableInstant) dateTime15, periodType21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        org.joda.time.Instant instant41 = instant0.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime42 = instant41.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 3, 1645513762121L, periodType4, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology12.months();
        boolean boolean17 = durationFieldType0.isSupported(chronology12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.Interval interval31 = interval29.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime32 = interval29.getStart();
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.LocalDate localDate34 = dateTime32.toLocalDate();
        int[] intArray36 = chronology12.get((org.joda.time.ReadablePartial) localDate34, 1645513786319L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant33", (dateTime32.compareTo(instant33) == 0) == dateTime32.equals(instant33));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 3, 1645513762121L, periodType13, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTime dateTime25 = dateTime3.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfDay();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 115200000, chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.minuteOfHour();
        org.joda.time.DurationField durationField30 = durationFieldType0.getField(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField30, and durationField24", !(durationField24.compareTo(durationField30) == 0) || (Math.signum(durationField24.compareTo(durationField24)) == Math.signum(durationField30.compareTo(durationField24))));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513763016L);
        boolean boolean5 = instant3.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.Interval interval7 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) instant3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean18 = period16.equals((java.lang.Object) dateTimeFieldType17);
        org.joda.time.Period period20 = period16.plusWeeks(17);
        boolean boolean21 = mutableInterval8.equals((java.lang.Object) 17);
        org.joda.time.Duration duration22 = mutableInterval8.toDuration();
        org.joda.time.Interval interval23 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = duration36.toPeriod();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period44 = duration42.toPeriod();
        boolean boolean45 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration36, periodType46);
        boolean boolean48 = duration26.isEqual((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime50 = instant49.toMutableDateTimeISO();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        org.joda.time.Duration duration65 = duration52.withMillis(1645513760253L);
        org.joda.time.Instant instant66 = instant49.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant68 = instant49.withMillis(1645513768037L);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.months();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) instant68, periodType71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant49", (dateTime3.compareTo(instant49) == 0) == dateTime3.equals(instant49));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfSecond();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration17.plus((long) 8);
        org.joda.time.Instant instant21 = instant13.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime22 = instant13.toDateTime();
        org.joda.time.Instant instant23 = instant13.toInstant();
        int int24 = dateTime10.compareTo((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant13", (dateTime22.compareTo(instant13) == 0) == dateTime22.equals(instant13));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        int int11 = period10.getSeconds();
        org.joda.time.Weeks weeks12 = period10.toStandardWeeks();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        mutableInterval13.setInterval(100000L, 1645513759601L);
        long long21 = mutableInterval13.getStartMillis();
        org.joda.time.Duration duration22 = mutableInterval13.toDuration();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusMinutes(3);
        org.joda.time.Period period29 = period27.plusWeeks(17);
        org.joda.time.Duration duration30 = period29.toStandardDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = period10.equals((java.lang.Object) mutablePeriod42);
        mutablePeriod42.setPeriod(1645513768392L, 1645513780528L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime41", (dateTime3.compareTo(dateTime41) == 0) == dateTime3.equals(dateTime41));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        org.joda.time.Seconds seconds18 = period17.toStandardSeconds();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant11, (org.joda.time.ReadablePeriod) period17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime10", (instant11.compareTo(dateTime10) == 0) == instant11.equals(dateTime10));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime12 = instant9.toMutableDateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 1645513768767L);
        boolean boolean16 = mutableDateTime12.equals((java.lang.Object) interval15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        int int18 = dateTime4.get(dateTimeField17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant0.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        boolean boolean12 = dateTimeFieldType10.isSupported(chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType10.getRangeDurationType();
        int int14 = instant9.get(dateTimeFieldType10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant33 = instant0.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime34 = instant33.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime1", (instant33.compareTo(mutableDateTime1) == 0) == instant33.equals(mutableDateTime1));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.DateTime dateTime93 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime96 = dateTime93.withField(dateTimeFieldType94, 63114585);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = dateTime47.toDateMidnight();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.standard();
        int int50 = periodType49.size();
        org.joda.time.PeriodType periodType51 = periodType49.withDaysRemoved();
        org.joda.time.Period period52 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight48, periodType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime47", (dateTime43.compareTo(dateTime47) == 0) == dateTime43.equals(dateTime47));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime4.toYearMonthDay();
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(dateTimeZone5);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = duration12.toPeriod();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = new org.joda.time.DurationFieldType[] { durationFieldType22 };
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.forFields(durationFieldTypeArray23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.forFields(durationFieldTypeArray23);
        org.joda.time.Period period26 = new org.joda.time.Period((java.lang.Object) duration18, periodType25);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfDay();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Seconds seconds48 = period47.toStandardSeconds();
        int int49 = period47.getMillis();
        int[] intArray52 = chronology33.get((org.joda.time.ReadablePeriod) period47, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period53 = new org.joda.time.Period(1645513770909L, 1645513760283L, periodType25, chronology33);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((java.lang.Object) dateTimeZone5, chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 40, 40, '#', 10 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        long long24 = dateTimeField7.roundHalfFloor((long) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(1645513770330L);
        boolean boolean28 = instant26.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime29 = instant26.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        int int31 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime29", (instant26.compareTo(dateTime29) == 0) == instant26.equals(dateTime29));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean14 = dateTime4.isSupported(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType27 = periodType26.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 3, 1645513762121L, periodType27, chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTime dateTime39 = dateTime17.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.clockhourOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 115200000, chronology35);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType13.getField(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513760165L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration41.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((java.lang.Object) 1645513765991L);
        boolean boolean58 = duration41.equals((java.lang.Object) duration57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = duration64.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Period period72 = duration70.toPeriod();
        boolean boolean73 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray75 = new org.joda.time.DurationFieldType[] { durationFieldType74 };
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.forFields(durationFieldTypeArray75);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.forFields(durationFieldTypeArray75);
        org.joda.time.Period period78 = new org.joda.time.Period((java.lang.Object) duration70, periodType77);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime60, periodType77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant59", (dateTime3.compareTo(instant59) == 0) == dateTime3.equals(instant59));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        mutableInterval18.setInterval(100000L, 1645513759601L);
        long long26 = mutableInterval18.getStartMillis();
        org.joda.time.Duration duration27 = mutableInterval18.toDuration();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusMinutes(3);
        org.joda.time.Period period34 = period32.plusWeeks(17);
        org.joda.time.Duration duration35 = period34.toStandardDuration();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = duration16.compareTo((org.joda.time.ReadableDuration) duration35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfDay();
        boolean boolean10 = dateTimeField9.isSupported();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        int[] intArray28 = new int[] { (byte) 10, 7, 8 };
        int int29 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay24, intArray28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks(63088836);
        org.joda.time.DateTime dateTime38 = dateTime34.withHourOfDay(9);
        int int39 = dateTime34.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration55.toPeriod();
        boolean boolean58 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration49, periodType59);
        long long61 = duration49.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime34.minus((org.joda.time.ReadableDuration) duration49);
        int int63 = dateTime62.getYearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime62.toYearMonthDay();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay24, (org.joda.time.ReadablePartial) yearMonthDay64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(63114585);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime8", (dateTime5.compareTo(dateTime8) == 0) == dateTime5.equals(dateTime8));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long15 = dateTimeField10.addWrapField(1645513771496L, 25774);
        int int17 = dateTimeField10.get(1645513772143L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime24.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property35 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        int int46 = dateTimeField44.getMinimumValue((long) 9);
        int int48 = dateTimeField44.getLeapAmount(1645513763885L);
        int int49 = dateTime33.get(dateTimeField44);
        org.joda.time.LocalTime localTime50 = dateTime33.toLocalTime();
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localTime50, locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime19", (dateTime9.compareTo(dateTime19) == 0) == dateTime9.equals(dateTime19));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        boolean boolean13 = dateTimeZone9.isFixed();
        boolean boolean14 = dateTimeZone9.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645513759301L);
        int int11 = dateTimeZone7.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.toString();
        int int15 = dateTimeZone7.getStandardOffset(1645513780667L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        int int39 = property23.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant37", (dateTime35.compareTo(instant37) == 0) == dateTime35.equals(instant37));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.dayOfWeek();
        org.joda.time.DateTime.Property property35 = dateTime27.year();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = durationFieldType39.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime37.withFieldAdded(durationFieldType39, 10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        java.util.Locale locale50 = null;
        int int51 = property48.getMaximumTextLength(locale50);
        java.lang.String str52 = property48.toString();
        org.joda.time.DurationField durationField53 = property48.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property48.getFieldType();
        int int55 = dateTime44.get(dateTimeFieldType54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.Chronology chronology64 = chronology62.withUTC();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        boolean boolean66 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration69 = org.joda.time.Duration.millis(1645513761776L);
        long long70 = duration69.getStandardHours();
        org.joda.time.Interval interval71 = interval67.withDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime65", (dateTime17.compareTo(dateTime65) == 0) == dateTime17.equals(dateTime65));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime10", (instant12.compareTo(dateTime10) == 0) == instant12.equals(dateTime10));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.PeriodType periodType62 = mutablePeriod61.getPeriodType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval12 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval13 = interval6.toInterval();
        org.joda.time.Interval interval15 = interval13.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime16 = interval13.getStart();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        java.util.Locale locale22 = null;
        int int23 = property20.getMaximumTextLength(locale22);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property20.getAsShortText(locale24);
        org.joda.time.Interval interval26 = property20.toInterval();
        org.joda.time.DateTime dateTime27 = property20.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.Instant instant29 = dateTime27.toInstant();
        org.joda.time.Interval interval30 = interval13.withStart((org.joda.time.ReadableInstant) instant29);
        boolean boolean31 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) interval13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant29", (dateTime16.compareTo(instant29) == 0) == dateTime16.equals(instant29));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        mutablePeriod14.setMonths(292278993);
        org.joda.time.Period period17 = mutablePeriod14.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod14.copy();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime28 = dateTime23.withFieldAdded(durationFieldType26, (int) '#');
        mutablePeriod14.add(durationFieldType26, 63101202);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        mutablePeriod14.add(2629746000L, chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant37", (dateTime23.compareTo(instant37) == 0) == dateTime23.equals(instant37));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.Duration duration22 = interval21.toDuration();
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.Duration duration39 = duration26.withMillis(1645513760253L);
        org.joda.time.Instant instant40 = instant23.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str52 = dateTimeZone50.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime53 = dateTime45.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = instant23.toDateTime(dateTimeZone50);
        org.joda.time.Instant instant57 = instant23.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.Instant instant59 = instant23.minus(1645513776688L);
        boolean boolean60 = interval21.isAfter((org.joda.time.ReadableInstant) instant59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime24", (instant23.compareTo(mutableDateTime24) == 0) == instant23.equals(mutableDateTime24));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) 63118458);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        boolean boolean14 = instant12.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime15 = instant12.toDateTimeISO();
        long long16 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        java.util.Locale locale17 = null;
        int int18 = property8.getMaximumTextLength(locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime15", (instant12.compareTo(dateTime15) == 0) == instant12.equals(dateTime15));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant56.minus(1645513772143L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime79.withZoneRetainFields(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        boolean boolean85 = dateTime82.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime87 = dateTime82.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime89 = instant63.toDateTimeISO();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType91 = periodType90.withYearsRemoved();
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.Period period93 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) instant63, periodType90);
        org.joda.time.Duration duration94 = period93.toStandardDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant63 and dateTime89", (instant63.compareTo(dateTime89) == 0) == instant63.equals(dateTime89));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.Duration duration15 = duration1.toDuration();
        java.lang.String str16 = duration15.toString();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.Minutes minutes20 = duration15.toStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant17", (dateTime3.compareTo(instant17) == 0) == dateTime3.equals(instant17));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.joda.time.DurationField durationField18 = chronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Interval interval26 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType41 = periodType40.withYearsRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 3, 1645513762121L, periodType41, chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTime dateTime53 = dateTime31.toDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.clockhourOfDay();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 115200000, chronology49);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology49);
        int[] intArray57 = mutablePeriod56.getValues();
        org.joda.time.Period period58 = period25.withFields((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod56.setDays((-1));
        int[] intArray63 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod56, 1645513815461L, 1645513819075L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField52", Math.signum(durationField14.compareTo(durationField52)) == -Math.signum(durationField52.compareTo(durationField14)));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType73 = periodType72.withMinutesRemoved();
        int int74 = periodType73.size();
        org.joda.time.Period period75 = mutableInterval18.toPeriod(periodType73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        long long10 = dateTimeField7.addWrapField(1645513760382L, 22);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        int[] intArray43 = chronology34.get((org.joda.time.ReadablePartial) yearMonthDay41, 1645513760770L);
        int[] intArray45 = dateTimeField7.add((org.joda.time.ReadablePartial) yearMonthDay24, (int) '4', intArray43, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay59 = dateTime58.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DurationField durationField68 = dateTimeField67.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay75 = dateTime74.toYearMonthDay();
        int int76 = yearMonthDay75.size();
        int[] intArray81 = new int[] { 40, 40, '#', 10 };
        int int82 = dateTimeField67.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay75, intArray81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay59, (org.joda.time.ReadablePartial) yearMonthDay75);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay52, (org.joda.time.ReadablePartial) yearMonthDay59, periodType84);
        int int86 = yearMonthDay59.size();
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType88 = periodType87.withYearsRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay24, (org.joda.time.ReadablePartial) yearMonthDay59, periodType88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType91 = dateTimeFieldType90.getRangeDurationType();
        boolean boolean92 = yearMonthDay59.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod21.setPeriod(1645513781803L);
        mutablePeriod21.setPeriod(1645513803143L);
        mutablePeriod21.addWeeks((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        int int18 = mutablePeriod16.getSeconds();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean32 = mutableInterval26.containsNow();
        mutablePeriod16.add((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        java.lang.String str38 = property37.getName();
        org.joda.time.DateTime dateTime39 = property37.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone60);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.minusSeconds((int) (short) 1);
        org.joda.time.Period period66 = period62.plusWeeks((int) (short) -1);
        org.joda.time.Period period68 = period62.minusMillis(4);
        org.joda.time.Interval interval69 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        java.lang.String str71 = chronology70.toString();
        org.joda.time.DurationField durationField72 = chronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration43, chronology70);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        boolean boolean79 = mutableInterval75.overlaps((org.joda.time.ReadableInterval) mutableInterval77);
        java.lang.Object obj80 = mutableInterval75.clone();
        org.joda.time.Chronology chronology81 = mutableInterval75.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.yearOfEra();
        org.joda.time.DurationField durationField83 = dateTimeField82.getDurationField();
        org.joda.time.DurationFieldType durationFieldType84 = durationField83.getType();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DurationField durationField86 = durationFieldType84.getField(chronology85);
        mutablePeriod16.set(durationFieldType84, 25813626);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField72 and durationField83", (durationField72.compareTo(durationField83) == 0) == durationField72.equals(durationField83));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645513759301L);
        int int18 = dateTimeZone14.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime11.toMutableDateTime(dateTimeZone14);
        boolean boolean20 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime21 = dateTime4.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and mutableDateTime19", (dateTime11.compareTo(mutableDateTime19) == 0) == dateTime11.equals(mutableDateTime19));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645513759301L);
        int int18 = dateTimeZone14.getOffset(1645513759301L);
        java.lang.String str20 = dateTimeZone14.getShortName((long) 9);
        org.joda.time.DateTime dateTime21 = dateTime3.withZone(dateTimeZone14);
        int int23 = dateTimeZone14.getOffsetFromLocal((long) 63098347);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        long long18 = instant17.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(4);
        org.joda.time.LocalDate localDate60 = dateTime57.toLocalDate();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        boolean boolean71 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime70);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean75 = yearMonthDay6.isSupported(dateTimeFieldType74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime.Property property79 = dateTime77.yearOfEra();
        org.joda.time.Interval interval80 = property79.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval81.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Interval interval86 = interval80.withDurationAfterStart((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Interval interval87 = interval80.toInterval();
        org.joda.time.Interval interval89 = interval87.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime90 = interval87.getStart();
        org.joda.time.Instant instant91 = dateTime90.toInstant();
        org.joda.time.LocalDate localDate92 = dateTime90.toLocalDate();
        org.joda.time.Period period93 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) localDate92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime90 and instant91", (dateTime90.compareTo(instant91) == 0) == dateTime90.equals(instant91));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645513761776L);
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str14 = dateTimeZone12.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime15 = dateTime7.withZone(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 3, 1645513762121L, periodType20, chronology28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str32 = durationFieldType31.toString();
        boolean boolean33 = periodType20.isSupported(durationFieldType31);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime15, periodType20);
        long long35 = duration1.getStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime15", (dateTime7.compareTo(dateTime15) == 0) == dateTime7.equals(dateTime15));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str75 = dateTimeZone73.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime76 = dateTime68.withZone(dateTimeZone73);
        org.joda.time.YearMonthDay yearMonthDay77 = dateTime76.toYearMonthDay();
        boolean boolean78 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        java.lang.String str81 = dateTime80.toString();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology84);
        org.joda.time.DateTime dateTime86 = dateTime80.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTime dateTime87 = dateTime80.toDateTimeISO();
        org.joda.time.DateTime dateTime89 = dateTime87.minusMinutes(0);
        org.joda.time.DateTime dateTime91 = dateTime89.minusMinutes(52);
        org.joda.time.DateTime dateTime93 = dateTime89.minusMillis(0);
        org.joda.time.Period period94 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime89);
        int int95 = period94.getMonths();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and dateTime76", (dateTime68.compareTo(dateTime76) == 0) == dateTime68.equals(dateTime76));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.minuteOfHour();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod();
        mutablePeriod28.setMonths((int) ' ');
        java.lang.Object obj31 = mutablePeriod28.clone();
        long long34 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod28, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.DurationField durationField51 = dateTimeField50.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime57.toYearMonthDay();
        int int59 = yearMonthDay58.size();
        int[] intArray64 = new int[] { 40, 40, '#', 10 };
        int int65 = dateTimeField50.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay58, intArray64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay42, (org.joda.time.ReadablePartial) yearMonthDay58);
        int int67 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay42);
        int[] intArray69 = chronology12.get((org.joda.time.ReadablePartial) yearMonthDay42, 1645513781803L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField51", (durationField14.compareTo(durationField51) == 0) == durationField14.equals(durationField51));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(52);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMillis(0);
        org.joda.time.Instant instant27 = dateTime22.toInstant();
        int int28 = property11.getDifference((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant27", (dateTime22.compareTo(instant27) == 0) == dateTime22.equals(instant27));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645513759301L);
        int int11 = dateTimeZone7.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration(1645513777843L);
        long long22 = duration21.getMillis();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.DateTime dateTime33 = property31.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str45 = dateTimeZone43.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime46 = dateTime38.withZone(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime46.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes(0);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Period period69 = duration60.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration71 = duration60.minus(0L);
        org.joda.time.DateTime dateTime73 = dateTime56.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (short) 0);
        long long74 = duration71.getStandardSeconds();
        org.joda.time.DateTime dateTime75 = dateTime46.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Seconds seconds76 = duration71.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration71);
        boolean boolean78 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration81 = duration71.withDurationAdded((long) 20, 0);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime46", (dateTime38.compareTo(dateTime46) == 0) == dateTime38.equals(dateTime46));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant71 = dateTime40.toInstant();
        org.joda.time.MutableDateTime mutableDateTime72 = instant71.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        int int11 = period10.getSeconds();
        org.joda.time.Weeks weeks12 = period10.toStandardWeeks();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        mutableInterval13.setInterval(100000L, 1645513759601L);
        long long21 = mutableInterval13.getStartMillis();
        org.joda.time.Duration duration22 = mutableInterval13.toDuration();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusMinutes(3);
        org.joda.time.Period period29 = period27.plusWeeks(17);
        org.joda.time.Duration duration30 = period29.toStandardDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = period10.equals((java.lang.Object) mutablePeriod42);
        mutablePeriod42.setHours(63147365);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime41", (dateTime3.compareTo(dateTime41) == 0) == dateTime3.equals(dateTime41));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.toInstant();
        boolean boolean12 = instant1.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant1", (dateTime10.compareTo(instant1) == 0) == dateTime10.equals(instant1));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513766895L);
        int int2 = mutablePeriod1.getYears();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(3);
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(9);
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime7.plusWeeks(69);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Instant instant25 = instant17.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.Duration duration47 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) '#');
        org.joda.time.Instant instant48 = instant25.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str54 = dateTimeZone52.getNameKey(1645513759301L);
        java.lang.String str56 = dateTimeZone52.getName(1645513762160L);
        java.util.TimeZone timeZone57 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Instant instant64 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant66 = instant64.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant68 = instant64.minus(1645513772143L);
        long long69 = instant68.getMillis();
        org.joda.time.Instant instant71 = instant68.minus(1645513778347L);
        org.joda.time.DateTime dateTime72 = instant71.toDateTimeISO();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        boolean boolean82 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        java.lang.Object obj83 = mutableInterval78.clone();
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfEra();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 3, 1645513762121L, periodType76, chronology84);
        org.joda.time.PeriodType periodType87 = periodType76.withMinutesRemoved();
        org.joda.time.PeriodType periodType88 = periodType87.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) instant71, periodType87);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant71 and dateTime72", (instant71.compareTo(dateTime72) == 0) == instant71.equals(dateTime72));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513763016L);
        boolean boolean5 = instant3.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.Interval interval7 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) instant3);
        org.joda.time.Interval interval9 = interval7.withEndMillis(1645513824670L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = duration8.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        long long18 = dateTimeZone16.convertUTCToLocal(1645513763679L);
        java.lang.String str20 = dateTimeZone16.getShortName(1645513769549L);
        int int22 = dateTimeZone16.getOffsetFromLocal(1645513772789L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str34 = dateTimeZone32.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime35 = dateTime27.withZone(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period58 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration60 = duration49.minus(0L);
        org.joda.time.DateTime dateTime62 = dateTime45.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (short) 0);
        long long63 = duration60.getStandardSeconds();
        org.joda.time.DateTime dateTime64 = dateTime35.plus((org.joda.time.ReadableDuration) duration60);
        int int65 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration68 = duration10.withMillis(1645513782930L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime35", (dateTime27.compareTo(dateTime35) == 0) == dateTime27.equals(dateTime35));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period9.minusSeconds((int) (short) 1);
        org.joda.time.Period period13 = period9.plusWeeks((int) (short) -1);
        org.joda.time.Period period15 = period9.minusMillis(4);
        int int16 = period9.getDays();
        org.joda.time.DateTime dateTime18 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 63099629);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.plus((long) 8);
        org.joda.time.Instant instant28 = instant20.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        org.joda.time.DateTime dateTime30 = instant28.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears(40);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime30", (instant28.compareTo(dateTime30) == 0) == instant28.equals(dateTime30));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime71 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval72.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period77 = duration75.toPeriod();
        org.joda.time.DateTime dateTime78 = dateTime40.minus((org.joda.time.ReadableDuration) duration75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant56.minus(1645513772143L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime79.withZoneRetainFields(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        boolean boolean85 = dateTime82.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime87 = dateTime82.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime89 = instant63.toDateTimeISO();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType91 = periodType90.withYearsRemoved();
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.Period period93 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) instant63, periodType90);
        org.joda.time.Minutes minutes94 = period93.toStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645513761776L);
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str14 = dateTimeZone12.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime15 = dateTime7.withZone(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 3, 1645513762121L, periodType20, chronology28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str32 = durationFieldType31.toString();
        boolean boolean33 = periodType20.isSupported(durationFieldType31);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime15, periodType20);
        org.joda.time.PeriodType periodType35 = period34.getPeriodType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime15", (dateTime7.compareTo(dateTime15) == 0) == dateTime7.equals(dateTime15));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withYear(1);
        org.joda.time.LocalDateTime localDateTime24 = dateTime18.toLocalDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime26 = instant25.toMutableDateTimeISO();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration39 = duration28.minus(0L);
        org.joda.time.Duration duration41 = duration28.withMillis(1645513760253L);
        org.joda.time.Instant instant42 = instant25.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval47.toInterval();
        org.joda.time.Interval interval56 = interval54.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime57 = interval54.getStart();
        org.joda.time.Duration duration58 = interval54.toDuration();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Period period69 = duration60.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        int int70 = duration58.compareTo((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Instant instant71 = instant25.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant25", (dateTime18.compareTo(instant25) == 0) == dateTime18.equals(instant25));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.DateTime dateTime39 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (short) 0);
        long long40 = duration37.getStandardSeconds();
        org.joda.time.DateTime dateTime41 = dateTime12.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        java.lang.String str47 = duration45.toString();
        org.joda.time.Duration duration49 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period60 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration62 = duration51.minus(0L);
        org.joda.time.Duration duration64 = duration51.withMillis(1645513760253L);
        org.joda.time.Duration duration65 = duration51.toDuration();
        org.joda.time.Duration duration66 = duration49.minus((org.joda.time.ReadableDuration) duration65);
        boolean boolean67 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration70 = duration65.withDurationAdded(1645513768203L, (int) (short) 1);
        boolean boolean71 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime56 = instant55.toMutableDateTimeISO();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        org.joda.time.Duration duration71 = duration58.withMillis(1645513760253L);
        org.joda.time.Instant instant72 = instant55.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime77.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str84 = dateTimeZone82.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime85 = dateTime77.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime86 = instant55.toDateTime(dateTimeZone82);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.MutableDateTime mutableDateTime88 = instant55.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime86", (dateTime22.compareTo(dateTime86) == 0) == dateTime22.equals(dateTime86));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant56.minus(1645513772143L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime79.withZoneRetainFields(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        boolean boolean85 = dateTime82.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime87 = dateTime82.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime89 = instant63.toDateTimeISO();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType91 = periodType90.withYearsRemoved();
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.Period period93 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) instant63, periodType90);
        org.joda.time.Instant instant95 = instant63.withMillis((long) ' ');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        int int3 = dateTime2.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime34 = dateTime25.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime40 = dateTime34.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone43);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period47 = period45.minusSeconds((int) (short) 1);
        org.joda.time.Period period49 = period45.plusWeeks((int) (short) -1);
        org.joda.time.Period period51 = period45.minusMillis(4);
        org.joda.time.Interval interval52 = interval44.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        java.lang.String str54 = chronology53.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology53.getZone();
        org.joda.time.Period period56 = duration38.toPeriod(chronology53);
        org.joda.time.DurationField durationField57 = chronology53.eras();
        int int58 = durationField21.compareTo(durationField57);
        org.joda.time.DurationFieldType durationFieldType59 = durationField21.getType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField57, durationField21, and durationField57", !(durationField57.compareTo(durationField21) == 0) || (Math.signum(durationField57.compareTo(durationField57)) == Math.signum(durationField21.compareTo(durationField57))));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(1645513763016L);
        boolean boolean67 = instant65.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime68 = instant65.toDateTimeISO();
        org.joda.time.Interval interval69 = duration63.toIntervalFrom((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Duration duration70 = duration9.minus((org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period3.plusMillis((int) 'a');
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str75 = dateTimeZone73.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime76 = dateTime68.withZone(dateTimeZone73);
        org.joda.time.YearMonthDay yearMonthDay77 = dateTime76.toYearMonthDay();
        boolean boolean78 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property79 = dateTime48.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and dateTime76", (dateTime68.compareTo(dateTime76) == 0) == dateTime68.equals(dateTime76));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        mutablePeriod54.clear();
        mutablePeriod54.addHours(37363);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant71 = dateTime40.toInstant();
        org.joda.time.DateTime.Property property72 = dateTime40.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant71", (dateTime32.compareTo(instant71) == 0) == dateTime32.equals(instant71));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.DateTime dateTime15 = instant13.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        org.joda.time.Instant instant41 = instant0.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1L), 1L, periodType44, chronology45);
        java.lang.String str47 = periodType44.toString();
        org.joda.time.PeriodType periodType48 = periodType44.withYearsRemoved();
        org.joda.time.Period period49 = duration38.toPeriod(periodType48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMillis(27425229);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 3, 1645513762121L, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str50 = dateTimeZone48.getNameKey(1645513759301L);
        java.lang.String str52 = dateTimeZone48.getName(1645513762160L);
        java.util.TimeZone timeZone53 = dateTimeZone48.toTimeZone();
        int int55 = dateTimeZone48.getStandardOffset(1645513761942L);
        int int57 = dateTimeZone48.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology58 = chronology41.withZone(dateTimeZone48);
        int int60 = dateTimeZone48.getOffset((long) 115200000);
        java.lang.String str62 = dateTimeZone48.getShortName(1645513770717L);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime25.toMutableDateTime(dateTimeZone48);
        long long65 = dateTimeZone48.previousTransition(1645513813526L);
        java.lang.String str66 = dateTimeZone48.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime63", (dateTime17.compareTo(mutableDateTime63) == 0) == dateTime17.equals(mutableDateTime63));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime15.toMutableDateTime();
        int int22 = mutableDateTime21.getMinuteOfDay();
        org.joda.time.Chronology chronology23 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.minuteOfDay();
        boolean boolean35 = dateTimeField34.isSupported();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str47 = dateTimeZone45.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime48 = dateTime40.withZone(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        int[] intArray53 = new int[] { (byte) 10, 7, 8 };
        int int54 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay49, intArray53);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) yearMonthDay49, 52, locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime48", (dateTime40.compareTo(dateTime48) == 0) == dateTime40.equals(dateTime48));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.plusSeconds(25813877);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645513769274L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1645513763016L);
        boolean boolean7 = instant5.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime8 = instant5.toDateTimeISO();
        org.joda.time.Interval interval9 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime8", (instant5.compareTo(dateTime8) == 0) == instant5.equals(dateTime8));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        mutablePeriod2.add(8, (int) ' ', 292278993, 63088836, 10, 292278993, (int) '4', (int) (byte) 100);
        mutablePeriod2.clear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight39 = dateTime37.toDateMidnight();
        org.joda.time.Instant instant40 = dateMidnight39.toInstant();
        org.joda.time.Instant instant42 = instant40.plus(1645513764861L);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime44 = instant43.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTimeISO();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant40, (org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant43", (dateTime28.compareTo(instant43) == 0) == dateTime28.equals(instant43));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus(1645513764861L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.Duration duration30 = duration17.withMillis(1645513760253L);
        org.joda.time.Instant instant31 = instant15.minus((org.joda.time.ReadableDuration) duration30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and instant13", (dateMidnight12.compareTo(instant13) == 0) == dateMidnight12.equals(instant13));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        java.lang.String str6 = dateTimeFieldType5.getName();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513766040L, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DurationField durationField26 = durationFieldType7.getField(chronology21);
        org.joda.time.DurationField durationField27 = chronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField27, and durationField26", !(durationField26.compareTo(durationField27) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField27.compareTo(durationField26))));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DurationField durationField4 = property3.getRangeDurationField();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTimeISO();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period17 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration19 = duration8.minus(0L);
        org.joda.time.Duration duration21 = duration8.withMillis(1645513760253L);
        org.joda.time.Instant instant22 = instant5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str34 = dateTimeZone32.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime35 = dateTime27.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = instant5.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant39 = instant5.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.Instant instant41 = instant5.minus(1645513776688L);
        int int42 = property3.getDifference((org.joda.time.ReadableInstant) instant41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Period period2 = org.joda.time.Period.hours(22);
        org.joda.time.Period period4 = period2.plusMillis(221);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period2);
        org.joda.time.DateTime dateTime6 = mutableInterval0.getEnd();
        org.joda.time.LocalDate localDate7 = dateTime6.toLocalDate();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.Instant instant17 = instant8.minus((org.joda.time.ReadableDuration) duration13);
        int int18 = dateTime6.compareTo((org.joda.time.ReadableInstant) instant17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime9", (instant8.compareTo(mutableDateTime9) == 0) == instant8.equals(mutableDateTime9));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((java.lang.Object) 1645513795687L);
        org.joda.time.Instant instant64 = instant39.plus((org.joda.time.ReadableDuration) duration63);
        long long65 = duration63.getStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField28 = dateTimeField27.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField28, and durationField23", !(durationField23.compareTo(durationField28) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField28.compareTo(durationField23))));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime6", (instant1.compareTo(mutableDateTime6) == 0) == instant1.equals(mutableDateTime6));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTimeZone dateTimeZone90 = null;
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime(dateTimeZone90);
        java.lang.String str92 = dateTime91.toString();
        org.joda.time.DateTime dateTime94 = dateTime91.withMillisOfSecond((int) (short) 10);
        int int95 = dateTime91.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime97 = dateTime91.minusMillis(22);
        org.joda.time.Interval interval98 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.Duration duration8 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime24.withField(dateTimeFieldType28, 25774);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(63112091);
        boolean boolean33 = duration8.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant34 = instant5.minus((org.joda.time.ReadableDuration) duration8);
        boolean boolean36 = instant34.isAfter(1645513859153L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period22 = period13.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration35 = period13.toStandardDuration();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = dateTime45.toDateMidnight();
        boolean boolean47 = interval36.contains((org.joda.time.ReadableInstant) dateMidnight46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime45", (dateTime41.compareTo(dateTime45) == 0) == dateTime41.equals(dateTime45));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Duration duration32 = org.joda.time.Duration.ZERO;
        long long33 = duration32.getStandardHours();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime46 = dateTime37.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTime dateTime52 = dateTime46.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTime dateTime54 = dateTime46.plusHours(63105565);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.standard();
        int int56 = periodType55.size();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime46, periodType55);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = duration32.toPeriod();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        boolean boolean41 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone46);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period48.minusSeconds((int) (short) 1);
        org.joda.time.Period period52 = period48.plusWeeks((int) (short) -1);
        org.joda.time.Period period54 = period48.minusMillis(4);
        org.joda.time.Interval interval55 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        java.lang.String str57 = chronology56.toString();
        org.joda.time.Period period58 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType42, chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        long long66 = dateTimeZone64.convertUTCToLocal(1645513763679L);
        java.lang.String str68 = dateTimeZone64.getShortName(1645513769549L);
        long long70 = dateTimeZone64.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology71 = chronology56.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology72 = chronology56.withUTC();
        org.joda.time.DateTime dateTime73 = dateTime1.toDateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime1.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime73", (dateTime24.compareTo(dateTime73) == 0) == dateTime24.equals(dateTime73));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.dayOfWeek();
        org.joda.time.DateTime.Property property35 = dateTime27.year();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = durationFieldType39.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime37.withFieldAdded(durationFieldType39, 10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        java.util.Locale locale50 = null;
        int int51 = property48.getMaximumTextLength(locale50);
        java.lang.String str52 = property48.toString();
        org.joda.time.DurationField durationField53 = property48.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property48.getFieldType();
        int int55 = dateTime44.get(dateTimeFieldType54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.Chronology chronology64 = chronology62.withUTC();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        boolean boolean66 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime65", (dateTime17.compareTo(dateTime65) == 0) == dateTime17.equals(dateTime65));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) yearMonthDay22, 1645513760770L);
        org.joda.time.DurationField durationField25 = chronology15.eras();
        org.joda.time.DateTime dateTime26 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.Duration duration15 = duration1.toDuration();
        java.lang.String str16 = duration15.toString();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        java.util.Locale locale25 = null;
        int int26 = property23.getMaximumTextLength(locale25);
        java.lang.String str27 = property23.getName();
        boolean boolean28 = property23.isLeap();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = property23.equals((java.lang.Object) periodType29);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str33 = durationFieldType32.toString();
        int int34 = periodType29.indexOf(durationFieldType32);
        int int35 = mutablePeriod19.get(durationFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant17", (dateTime3.compareTo(instant17) == 0) == dateTime3.equals(instant17));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        mutablePeriod1.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        boolean boolean12 = dateTime10.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        boolean boolean31 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean34 = mutableInterval32.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        mutableInterval32.setChronology(chronology41);
        mutablePeriod1.setPeriod(100000L, 1645513762364L, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType0.getField(chronology41);
        int int46 = dateTimeField44.getMaximumValue(1645513818687L);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        mutableInterval47.setInterval(100000L, 1645513759601L);
        long long55 = mutableInterval47.getStartMillis();
        org.joda.time.Duration duration56 = mutableInterval47.toDuration();
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusMinutes(3);
        org.joda.time.Period period63 = period61.plusWeeks(17);
        org.joda.time.Duration duration64 = period63.toStandardDuration();
        mutableInterval47.setDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        java.lang.Object obj71 = mutableInterval66.clone();
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfEra();
        org.joda.time.Chronology chronology74 = chronology72.withUTC();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology74);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Period period78 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTime dateTime80 = dateTime75.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 6);
        org.joda.time.LocalDate localDate81 = dateTime80.toLocalDate();
        int int82 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) localDate81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime75", (dateTime7.compareTo(dateTime75) == 0) == dateTime7.equals(dateTime75));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        int int9 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime14.year();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears(37320000);
        org.joda.time.Instant instant44 = dateTime43.toInstant();
        org.joda.time.MutableDateTime mutableDateTime45 = instant44.toMutableDateTimeISO();
        boolean boolean46 = dateTime8.isBefore((org.joda.time.ReadableInstant) instant44);
        int int47 = dateTime8.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and instant44", (dateTime43.compareTo(instant44) == 0) == dateTime43.equals(instant44));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        long long11 = durationField9.getValueAsLong((-37320000L));
        java.lang.String str12 = durationField9.getName();
        long long13 = durationField9.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType14 = durationField9.getType();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        long long32 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology23);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType14.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField38", (durationField9.compareTo(durationField38) == 0) == durationField9.equals(durationField38));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        java.lang.String str40 = dateTimeZone36.getName(1645513762160L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant50 = instant48.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant52 = instant48.minus(1645513772143L);
        long long53 = instant52.getMillis();
        org.joda.time.Instant instant55 = instant52.minus(1645513778347L);
        org.joda.time.DateTime dateTime56 = instant55.toDateTimeISO();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfEra();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 3, 1645513762121L, periodType60, chronology68);
        org.joda.time.PeriodType periodType71 = periodType60.withMinutesRemoved();
        org.joda.time.PeriodType periodType72 = periodType71.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant55, periodType71);
        mutablePeriod73.addHours(63188060);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and dateTime56", (instant55.compareTo(dateTime56) == 0) == instant55.equals(dateTime56));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime4.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(4);
        org.joda.time.LocalDate localDate26 = dateTime23.toLocalDate();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDate26, 9, locale28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay5, (org.joda.time.ReadablePartial) localDate26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis(1645513768037L);
        org.joda.time.MutableDateTime mutableDateTime20 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        boolean boolean27 = dateTime25.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(0);
        boolean boolean46 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime48 = mutableInterval47.getEnd();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfMonth(10);
        boolean boolean51 = mutableDateTime20.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.Duration duration63 = duration9.withMillis(1645513798511L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(4);
        org.joda.time.LocalDate localDate27 = dateTime24.toLocalDate();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType17.getField(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime4.toDateTime(chronology28);
        int int31 = dateTime30.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        int int35 = dateTime33.getMonthOfYear();
        org.joda.time.DateTime.Property property36 = dateTime33.minuteOfDay();
        org.joda.time.DateTime dateTime37 = property36.getDateTime();
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.Interval interval39 = interval11.withStart((org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant27", (dateTime14.compareTo(instant27) == 0) == dateTime14.equals(instant27));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getMonthOfYear();
        org.joda.time.Instant instant13 = dateTime11.toInstant();
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant13", (dateTime11.compareTo(instant13) == 0) == dateTime11.equals(instant13));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        boolean boolean23 = duration21.equals((java.lang.Object) 1645513771022L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant27 = instant25.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Instant instant29 = instant25.minus(1645513772143L);
        long long30 = instant29.getMillis();
        org.joda.time.Instant instant32 = instant29.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = duration36.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.withZoneRetainFields(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        boolean boolean54 = dateTime51.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime56 = dateTime51.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime58 = instant32.toDateTimeISO();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime58, periodType59);
        org.joda.time.PeriodType periodType62 = periodType59.withHoursRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime58", (instant32.compareTo(dateTime58) == 0) == instant32.equals(dateTime58));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(63088836);
        org.joda.time.DateTime dateTime13 = dateTime9.withHourOfDay(9);
        int int14 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.dayOfYear();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        mutableInterval16.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime36 = dateTime9.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant37 = instant1.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration51 = duration40.minus(0L);
        org.joda.time.Duration duration53 = duration40.withMillis(1645513760253L);
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant38, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = duration53.toPeriod();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(1645513769274L);
        boolean boolean58 = duration53.isEqual((org.joda.time.ReadableDuration) duration57);
        boolean boolean59 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant33 = instant0.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime34 = instant0.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant0", (mutableDateTime1.compareTo(instant0) == 0) == mutableDateTime1.equals(instant0));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant17.plus(1645513791964L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType93.getDurationType();
        java.lang.String str95 = dateTimeFieldType93.getName();
        boolean boolean96 = instant5.isSupported(dateTimeFieldType93);
        org.joda.time.MutableDateTime mutableDateTime97 = instant5.toMutableDateTime();
        org.joda.time.Chronology chronology98 = instant5.getChronology();
        org.joda.time.DurationField durationField99 = chronology98.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DurationField durationField21 = dateTimeField20.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        int int29 = yearMonthDay28.size();
        int[] intArray34 = new int[] { 40, 40, '#', 10 };
        int int35 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay28, intArray34);
        long long37 = dateTimeField20.roundHalfFloor((long) (byte) 1);
        int int38 = dateTime9.get(dateTimeField20);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property48 = dateTime40.hourOfDay();
        org.joda.time.DateTime dateTime50 = property48.addToCopy(1645513766979L);
        boolean boolean52 = dateTime50.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis(10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        int int58 = dateTimeZone56.getStandardOffset((long) (-292275054));
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        boolean boolean66 = dateTime64.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.DateTime dateTime71 = dateTime68.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTime(chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        java.lang.String str76 = dateTime75.toString();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology79);
        org.joda.time.DateTime dateTime81 = dateTime75.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.DateTime dateTime82 = dateTime75.toDateTimeISO();
        org.joda.time.DateTime dateTime84 = dateTime82.minusMinutes(0);
        boolean boolean85 = dateTime71.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime82);
        boolean boolean87 = dateTime59.isBefore((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean88 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and dateTime59", (dateTime54.compareTo(dateTime59) == 0) == dateTime54.equals(dateTime59));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime56 = instant55.toMutableDateTimeISO();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        org.joda.time.Duration duration71 = duration58.withMillis(1645513760253L);
        org.joda.time.Instant instant72 = instant55.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime77.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str84 = dateTimeZone82.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime85 = dateTime77.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime86 = instant55.toDateTime(dateTimeZone82);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) instant55);
        long long88 = duration87.getStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant55", (dateTime22.compareTo(instant55) == 0) == dateTime22.equals(instant55));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(63088836);
        org.joda.time.DateTime dateTime13 = dateTime9.withHourOfDay(9);
        int int14 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.dayOfYear();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        mutableInterval16.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime36 = dateTime9.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant37 = instant1.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime54);
        int int56 = mutablePeriod55.getSeconds();
        int int57 = mutablePeriod55.getSeconds();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval65);
        boolean boolean71 = mutableInterval65.containsNow();
        mutablePeriod55.add((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.Duration duration73 = mutableInterval65.toDuration();
        org.joda.time.Duration duration75 = duration73.minus(1645513762241L);
        org.joda.time.Period period76 = new org.joda.time.Period(readableInstant38, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Instant instant77 = instant37.plus((org.joda.time.ReadableDuration) duration75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period73 = org.joda.time.Period.ZERO;
        org.joda.time.Period period75 = period73.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType76 = period75.getPeriodType();
        org.joda.time.PeriodType periodType77 = periodType76.withWeeksRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withMillisRemoved();
        org.joda.time.Period period79 = new org.joda.time.Period(1645513766098L, periodType78);
        org.joda.time.Period period80 = duration65.toPeriod(periodType78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(63088836);
        org.joda.time.DateTime dateTime13 = dateTime9.withHourOfDay(9);
        int int14 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.dayOfYear();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        mutableInterval16.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime36 = dateTime9.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant37 = instant1.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant39 = instant1.withMillis(1645513786127L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration55.toPeriod();
        boolean boolean58 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration49, periodType59);
        long long61 = duration49.getMillis();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime.Property property65 = dateTime63.yearOfEra();
        org.joda.time.Interval interval66 = property65.toInterval();
        java.util.Locale locale67 = null;
        int int68 = property65.getMaximumTextLength(locale67);
        java.lang.String str69 = property65.getName();
        java.util.Locale locale70 = null;
        int int71 = property65.getMaximumTextLength(locale70);
        org.joda.time.DateTime dateTime72 = property65.getDateTime();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.time();
        boolean boolean75 = periodType73.equals((java.lang.Object) 0.0f);
        org.joda.time.Period period76 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime72, periodType73);
        org.joda.time.Instant instant77 = instant39.minus((org.joda.time.ReadableDuration) duration49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withMillisOfSecond((int) (short) 10);
        boolean boolean49 = dateTime47.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes(0);
        boolean boolean68 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean71 = mutableInterval69.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        mutableInterval69.setChronology(chronology78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1645513782198L, periodType41, chronology78);
        org.joda.time.DateTime dateTime81 = dateTime39.toDateTime(chronology78);
        org.joda.time.LocalDateTime localDateTime82 = dateTime81.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645513759301L);
        int int11 = dateTimeZone7.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str14 = dateTimeFieldType13.getName();
        boolean boolean15 = mutableDateTime12.isSupported(dateTimeFieldType13);
        java.lang.String str16 = dateTimeFieldType13.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval26 = interval19.toInterval();
        org.joda.time.Interval interval28 = interval26.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime29 = interval26.getStart();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        java.util.Locale locale35 = null;
        int int36 = property33.getMaximumTextLength(locale35);
        java.util.Locale locale37 = null;
        java.lang.String str38 = property33.getAsShortText(locale37);
        org.joda.time.Interval interval39 = property33.toInterval();
        org.joda.time.DateTime dateTime40 = property33.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime40.toInstant();
        org.joda.time.Interval interval43 = interval26.withStart((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration54.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTime dateTime66 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime72 = dateTime66.withField(dateTimeFieldType70, 25774);
        int int73 = dateTime48.get(dateTimeFieldType70);
        int int74 = instant42.get(dateTimeFieldType70);
        boolean boolean75 = localTime14.isSupported(dateTimeFieldType70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and instant42", (dateTime29.compareTo(instant42) == 0) == dateTime29.equals(instant42));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        java.util.Locale locale8 = null;
        int int9 = property3.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime10 = property3.getDateTime();
        org.joda.time.DateTime dateTime11 = property3.roundCeilingCopy();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 3, 1645513762121L, periodType15, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology23.months();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str32 = dateTimeZone30.getNameKey(1645513759301L);
        java.lang.String str34 = dateTimeZone30.getName(1645513762160L);
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        int int37 = dateTimeZone30.getStandardOffset(1645513761942L);
        int int39 = dateTimeZone30.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology40 = chronology23.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime45.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillisOfSecond((int) (short) 10);
        boolean boolean57 = dateTime55.isBefore((-1L));
        int int58 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int60 = dateTime55.get(dateTimeFieldType59);
        java.lang.String str61 = dateTime55.toString();
        org.joda.time.LocalDateTime localDateTime62 = dateTime55.toLocalDateTime();
        boolean boolean63 = dateTimeZone30.isLocalDateTimeGap(localDateTime62);
        long long65 = dateTimeZone30.previousTransition(19045L);
        java.lang.String str67 = dateTimeZone30.getName((long) 25812540);
        org.joda.time.DateTime dateTime68 = dateTime11.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime70 = dateTime68.plusMillis(63125790);
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime68", (dateTime11.compareTo(dateTime68) == 0) == dateTime11.equals(dateTime68));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        boolean boolean8 = dateTime6.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        boolean boolean27 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime29 = mutableInterval28.getEnd();
        java.lang.Object obj30 = mutableInterval28.clone();
        boolean boolean31 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval28.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.DateTime dateTime39 = dateTime36.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645513759301L);
        int int46 = dateTimeZone42.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime39.toMutableDateTime(dateTimeZone42);
        java.lang.String str48 = dateTimeZone42.toString();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(1645513796316L, 1645513832423L, dateTimeZone42);
        mutableInterval28.setInterval((org.joda.time.ReadableInterval) interval49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime47", (dateTime6.compareTo(mutableDateTime47) == 0) == dateTime6.equals(mutableDateTime47));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration24 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days25 = duration24.toStandardDays();
        org.joda.time.Days days26 = duration24.toStandardDays();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears(37320000);
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        org.joda.time.DateTime dateTime43 = dateTime40.minusYears(63111089);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period44.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType47 = period46.getPeriodType();
        org.joda.time.PeriodType periodType48 = periodType47.withWeeksRemoved();
        org.joda.time.PeriodType periodType49 = periodType47.withMillisRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.Duration duration51 = duration24.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and instant41", (dateTime40.compareTo(instant41) == 0) == dateTime40.equals(instant41));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType3.isSupported(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime1.withFieldAdded(durationFieldType3, 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.toString();
        org.joda.time.DurationField durationField17 = property12.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property12.getFieldType();
        int int19 = dateTime8.get(dateTimeFieldType18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        boolean boolean30 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime8.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime25 = dateTime17.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime3.plusMillis(63112184);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime25", (dateTime17.compareTo(dateTime25) == 0) == dateTime17.equals(dateTime25));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645513761776L);
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str14 = dateTimeZone12.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime15 = dateTime7.withZone(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 3, 1645513762121L, periodType20, chronology28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str32 = durationFieldType31.toString();
        boolean boolean33 = periodType20.isSupported(durationFieldType31);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime15, periodType20);
        int int35 = period34.getHours();
        org.joda.time.MutablePeriod mutablePeriod36 = period34.toMutablePeriod();
        org.joda.time.Days days37 = period34.toStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime15", (dateTime7.compareTo(dateTime15) == 0) == dateTime7.equals(dateTime15));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(4);
        org.joda.time.LocalDate localDate27 = dateTime24.toLocalDate();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType17.getField(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime4.toDateTime(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology20.months();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        java.lang.String str31 = dateTimeZone27.getName(1645513762160L);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        int int34 = dateTimeZone27.getStandardOffset(1645513761942L);
        int int36 = dateTimeZone27.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology37 = chronology20.withZone(dateTimeZone27);
        int int39 = dateTimeZone27.getOffset((long) 115200000);
        int int41 = dateTimeZone27.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTime dateTime42 = dateTime4.toDateTime(dateTimeZone27);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((-1L), 1L, periodType48, chronology49);
        java.lang.String str51 = periodType48.toString();
        java.lang.String str52 = periodType48.getName();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1645513760165L, periodType48);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType48, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        int int67 = dateTime63.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology73);
        org.joda.time.DateTime dateTime75 = dateTime69.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateTime dateTime76 = dateTime69.toDateTimeISO();
        int int77 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDate localDate78 = dateTime76.toLocalDate();
        int[] intArray80 = chronology60.get((org.joda.time.ReadablePartial) localDate78, 1645513760075L);
        org.joda.time.DateTimeField dateTimeField81 = chronology60.dayOfWeek();
        long long84 = dateTimeField81.add(438L, (long) 63105565);
        boolean boolean86 = dateTimeField81.isLeap(1645513787496L);
        int int87 = dateTime42.get(dateTimeField81);
        long long89 = dateTimeField81.roundCeiling(1645513833525L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime42", (dateTime4.compareTo(dateTime42) == 0) == dateTime4.equals(dateTime42));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DurationField durationField17 = chronology6.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology6.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField19", Math.signum(durationField17.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField17)));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        boolean boolean10 = mutableInterval4.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        boolean boolean12 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.Instant instant22 = instant14.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration35 = duration24.minus(0L);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.Duration duration44 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '#');
        org.joda.time.Instant instant45 = instant22.plus((org.joda.time.ReadableDuration) duration44);
        long long46 = instant45.getMillis();
        boolean boolean47 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) instant45);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType51 = periodType50.withYearsRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 3, 1645513762121L, periodType51, chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.dayOfMonth();
        org.joda.time.DurationField durationField63 = chronology59.months();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str68 = dateTimeZone66.getNameKey(1645513759301L);
        java.lang.String str70 = dateTimeZone66.getName(1645513762160L);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        int int73 = dateTimeZone66.getStandardOffset(1645513761942L);
        int int75 = dateTimeZone66.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology76 = chronology59.withZone(dateTimeZone66);
        int int78 = dateTimeZone66.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        boolean boolean80 = dateTimeZone66.isFixed();
        org.joda.time.MutableDateTime mutableDateTime81 = instant45.toMutableDateTime(dateTimeZone66);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) mutableDateTime81);
        org.joda.time.MutableDateTime mutableDateTime83 = instant3.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant45 and mutableDateTime81", (instant45.compareTo(mutableDateTime81) == 0) == instant45.equals(mutableDateTime81));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        int int28 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone21);
        org.joda.time.DateTime dateTime30 = dateTime4.withZone(dateTimeZone21);
        java.util.Locale locale31 = null;
        java.util.Calendar calendar32 = dateTime4.toCalendar(locale31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        java.lang.String str16 = property15.getName();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        boolean boolean37 = dateTime17.isSupported(dateTimeFieldType36);
        boolean boolean38 = dateTime17.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime41 = dateTime17.minusHours(59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration27 = duration16.minus(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1L), 1L, periodType32, chronology33);
        java.lang.String str35 = periodType32.toString();
        java.lang.String str36 = periodType32.getName();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760165L, periodType32);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant28, periodType32);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds((int) (byte) 10);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration52 = duration16.minus((org.joda.time.ReadableDuration) duration42);
        long long53 = duration16.getStandardMinutes();
        org.joda.time.Instant instant55 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration59.plus((long) 8);
        org.joda.time.Instant instant63 = instant55.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period74 = duration65.toPeriodFrom((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Instant instant76 = instant63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 100);
        org.joda.time.Duration duration77 = duration16.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant79 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration77, 431);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and instant79", (dateMidnight12.compareTo(instant79) == 0) == dateMidnight12.equals(instant79));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        int int11 = dateTime10.getYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        int[] intArray36 = chronology27.get((org.joda.time.ReadablePartial) yearMonthDay34, 1645513760770L);
        org.joda.time.DurationField durationField37 = chronology27.eras();
        org.joda.time.DateTime dateTime38 = dateTime18.withChronology(chronology27);
        org.joda.time.DateTime dateTime39 = dateTime10.toDateTime(chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime38", (dateTime18.compareTo(dateTime38) == 0) == dateTime18.equals(dateTime38));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = duration32.toPeriod();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        boolean boolean41 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone46);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period48.minusSeconds((int) (short) 1);
        org.joda.time.Period period52 = period48.plusWeeks((int) (short) -1);
        org.joda.time.Period period54 = period48.minusMillis(4);
        org.joda.time.Interval interval55 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        java.lang.String str57 = chronology56.toString();
        org.joda.time.Period period58 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType42, chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        long long66 = dateTimeZone64.convertUTCToLocal(1645513763679L);
        java.lang.String str68 = dateTimeZone64.getShortName(1645513769549L);
        long long70 = dateTimeZone64.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology71 = chronology56.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology72 = chronology56.withUTC();
        org.joda.time.DateTime dateTime73 = dateTime1.toDateTime(chronology72);
        org.joda.time.DurationField durationField74 = chronology72.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime73", (dateTime1.compareTo(dateTime73) == 0) == dateTime1.equals(dateTime73));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(40);
        int int14 = dateTime13.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant91 = instant89.plus(1645513851694L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        boolean boolean10 = mutableInterval4.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        boolean boolean12 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.Instant instant22 = instant14.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration35 = duration24.minus(0L);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.Duration duration44 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '#');
        org.joda.time.Instant instant45 = instant22.plus((org.joda.time.ReadableDuration) duration44);
        long long46 = instant45.getMillis();
        boolean boolean47 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) instant45);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType51 = periodType50.withYearsRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 3, 1645513762121L, periodType51, chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.dayOfMonth();
        org.joda.time.DurationField durationField63 = chronology59.months();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str68 = dateTimeZone66.getNameKey(1645513759301L);
        java.lang.String str70 = dateTimeZone66.getName(1645513762160L);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        int int73 = dateTimeZone66.getStandardOffset(1645513761942L);
        int int75 = dateTimeZone66.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology76 = chronology59.withZone(dateTimeZone66);
        int int78 = dateTimeZone66.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        boolean boolean80 = dateTimeZone66.isFixed();
        org.joda.time.MutableDateTime mutableDateTime81 = instant45.toMutableDateTime(dateTimeZone66);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) mutableDateTime81);
        java.lang.Object obj83 = mutableInterval82.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant45 and mutableDateTime81", (instant45.compareTo(mutableDateTime81) == 0) == instant45.equals(mutableDateTime81));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        mutableInterval3.setInterval(100000L, 1645513759601L);
        long long11 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration12 = mutableInterval3.toDuration();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusMinutes(3);
        org.joda.time.Period period19 = period17.plusWeeks(17);
        org.joda.time.Duration duration20 = period19.toStandardDuration();
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant2, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime29.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property40 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.minuteOfDay();
        int int51 = dateTimeField49.getMinimumValue((long) 9);
        int int53 = dateTimeField49.getLeapAmount(1645513763885L);
        int int54 = dateTime38.get(dateTimeField49);
        org.joda.time.LocalTime localTime55 = dateTime38.toLocalTime();
        org.joda.time.Interval interval56 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        int int57 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime24", (instant0.compareTo(dateTime24) == 0) == instant0.equals(dateTime24));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) yearMonthDay22, 1645513760770L);
        org.joda.time.DurationField durationField25 = chronology15.eras();
        org.joda.time.DateTime dateTime26 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.Interval interval31 = interval29.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime32 = interval29.getStart();
        org.joda.time.Duration duration33 = interval29.toDuration();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        int int45 = duration33.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant46 = instant0.minus((org.joda.time.ReadableDuration) duration33);
        boolean boolean48 = duration33.equals((java.lang.Object) 63112091);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTime dateTime40 = property23.addToCopy(1645513811819L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant37", (dateTime35.compareTo(instant37) == 0) == dateTime35.equals(instant37));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime();
        long long6 = mutableDateTime5.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration15 = duration4.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = duration15.toPeriodTo((org.joda.time.ReadableInstant) dateTime22, periodType23);
        org.joda.time.Duration duration26 = duration15.plus(1645513768963L);
        org.joda.time.Duration duration28 = duration26.withMillis(1645513769945L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime40 = property38.addToCopy(1645513766979L);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra(63110);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = duration53.toPeriod();
        boolean boolean56 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType57 };
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.forFields(durationFieldTypeArray58);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.forFields(durationFieldTypeArray58);
        org.joda.time.Period period61 = new org.joda.time.Period((java.lang.Object) duration53, periodType60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration26, periodType60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.MutableDateTime mutableDateTime93 = instant92.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property6 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        java.lang.String str16 = property15.getName();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        boolean boolean37 = dateTime17.isSupported(dateTimeFieldType36);
        boolean boolean38 = dateTime17.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod39.addHours(63224605);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime20.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long33 = dateTimeZone30.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime34 = dateTime27.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone30);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone30.getShortName(1645513770053L, locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        int int7 = dateTime6.getSecondOfMinute();
        int int8 = dateTime6.getCenturyOfEra();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration14.plus((long) 8);
        org.joda.time.Instant instant18 = instant10.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime19 = instant10.toDateTime();
        boolean boolean21 = dateTime19.isAfter((long) 100);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime6.toDateTime(chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime19", (instant10.compareTo(dateTime19) == 0) == instant10.equals(dateTime19));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime15.toString(dateTimeFormatter22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        long long37 = duration27.getStandardDays();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval62.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = interval61.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval68 = interval61.toInterval();
        org.joda.time.Interval interval70 = interval68.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime71 = interval68.getStart();
        org.joda.time.Duration duration72 = interval68.toDuration();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology80);
        org.joda.time.DateTime dateTime82 = dateTime76.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Period period83 = duration74.toPeriodFrom((org.joda.time.ReadableInstant) dateTime76);
        int int84 = duration72.compareTo((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Instant instant85 = instant39.minus((org.joda.time.ReadableDuration) duration72);
        boolean boolean86 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant39", (dateTime8.compareTo(instant39) == 0) == dateTime8.equals(instant39));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        java.lang.String str16 = property15.getName();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        boolean boolean37 = dateTime17.isSupported(dateTimeFieldType36);
        boolean boolean38 = dateTime17.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod39.addSeconds(1645513842);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime4.withMinuteOfHour(0);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = duration10.toPeriod();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period18 = duration16.toPeriod();
        boolean boolean19 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration16);
        long long20 = duration16.getStandardMinutes();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, readableInstant26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.Chronology chronology51 = chronology49.withUTC();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.setMonths((int) ' ');
        java.lang.Object obj55 = mutablePeriod52.clone();
        long long58 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField59 = chronology49.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology49);
        org.joda.time.DateTimeField dateTimeField61 = chronology49.clockhourOfHalfday();
        org.joda.time.Chronology chronology62 = chronology49.withUTC();
        java.lang.String str63 = chronology49.toString();
        mutableInterval40.setChronology(chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime39", (instant37.compareTo(dateTime39) == 0) == instant37.equals(dateTime39));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        boolean boolean27 = dateTime22.isAfter(1645513770243L);
        int int28 = dateTime22.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime22.withZone(dateTimeZone30);
        int int33 = dateTimeZone30.getOffset(1645513911785L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime31", (dateTime22.compareTo(dateTime31) == 0) == dateTime22.equals(dateTime31));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime6.minusDays((int) ' ');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Seconds seconds22 = period21.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod23 = period21.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period26 = period21.withFieldAdded(durationFieldType24, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.minus(1645513768963L);
        org.joda.time.DateTime dateTime35 = dateTime31.minusYears((int) (byte) 0);
        org.joda.time.Duration duration36 = period26.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long44 = dateTimeZone41.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime45 = dateTime38.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime10.toMutableDateTime(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime46", (dateTime1.compareTo(dateTime46) == 0) == dateTime1.equals(dateTime46));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 3, 1645513762121L, periodType13, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTime dateTime25 = dateTime3.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfDay();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 115200000, chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.minuteOfHour();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(1645513785178L, chronology21);
        org.joda.time.DurationField durationField31 = chronology21.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField31, and durationField24", !(durationField24.compareTo(durationField31) == 0) || (Math.signum(durationField24.compareTo(durationField24)) == Math.signum(durationField31.compareTo(durationField24))));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(63116635);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645513759301L);
        int int21 = dateTimeZone17.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        int int24 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal(1645513763679L);
        java.lang.String str35 = dateTimeZone31.getShortName(1645513769549L);
        int int37 = dateTimeZone31.getOffsetFromLocal(1645513760934L);
        java.lang.String str38 = dateTimeZone31.toString();
        long long40 = dateTimeZone17.getMillisKeepLocal(dateTimeZone31, 1645513778970L);
        long long42 = dateTimeZone11.getMillisKeepLocal(dateTimeZone31, 1645513808341L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = duration4.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = mutablePeriod17.getSeconds();
        int int19 = mutablePeriod17.getSeconds();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean33 = mutableInterval27.containsNow();
        mutablePeriod17.add((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Duration duration35 = mutableInterval27.toDuration();
        org.joda.time.Duration duration37 = duration35.minus(1645513762241L);
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = duration37.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Seconds seconds51 = period50.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod52 = period50.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period55 = period50.withFieldAdded(durationFieldType53, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.minus(1645513768963L);
        org.joda.time.DateTime dateTime64 = dateTime60.minusYears((int) (byte) 0);
        org.joda.time.Duration duration65 = period55.toDurationFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration65, readableInstant66);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = duration73.plus((long) 8);
        org.joda.time.Instant instant77 = instant69.plus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateTimeZone dateTimeZone78 = instant77.getZone();
        org.joda.time.DateTime dateTime79 = instant77.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) instant77);
        org.joda.time.Duration duration82 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration65, 25813924);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant77 and dateTime79", (instant77.compareTo(dateTime79) == 0) == instant77.equals(dateTime79));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime14.withFieldAdded(durationFieldType21, 221);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withZoneRetainFields(dateTimeZone41);
        int int43 = dateTime39.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime();
        int int45 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime47 = dateTime14.plus(1645513830009L);
        org.joda.time.Instant instant48 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime50 = dateTime14.plus(1991922118672195536L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant48", (dateTime4.compareTo(instant48) == 0) == dateTime4.equals(instant48));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.Duration duration15 = duration2.withMillis(1645513760253L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = duration32.plus((long) 8);
        org.joda.time.Duration duration37 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) '#');
        int int38 = duration2.compareTo((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        int int48 = dateTime40.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime52 = dateTime40.toDateTime(dateTimeZone51);
        org.joda.time.Period period53 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime52);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime52", (dateTime4.compareTo(dateTime52) == 0) == dateTime4.equals(dateTime52));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(40);
        org.joda.time.DateTime dateTime15 = dateTime13.withSecondOfMinute(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        boolean boolean24 = dateTime22.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        boolean boolean43 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = mutableInterval44.getEnd();
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis(25880610);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Instant instant45 = instant3.minus(1645513792564L);
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.DateTime dateTime47 = instant45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight60 = dateTime58.toDateMidnight();
        int int61 = dateTime58.getDayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property63 = dateTime58.year();
        org.joda.time.DateTimeField dateTimeField64 = property63.getField();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeField64.getAsText(25830425, locale66);
        int int68 = instant45.get(dateTimeField64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant45 and dateTime47", (instant45.compareTo(dateTime47) == 0) == instant45.equals(dateTime47));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime13 = dateTime1.toDateTime(dateTimeZone12);
        long long15 = dateTimeZone12.convertUTCToLocal(1645513762461L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime13", (dateTime1.compareTo(dateTime13) == 0) == dateTime1.equals(dateTime13));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusHours(63234600);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant37", (dateTime35.compareTo(instant37) == 0) == dateTime35.equals(instant37));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, readableInstant26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) instant37);
        long long41 = mutableInterval40.getEndMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime39", (instant37.compareTo(dateTime39) == 0) == instant37.equals(dateTime39));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        boolean boolean13 = dateTime11.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis(10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        int int19 = dateTimeZone17.getStandardOffset((long) (-292275054));
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        boolean boolean27 = dateTime25.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(0);
        boolean boolean46 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean48 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime50 = dateTime43.plusWeeks(63208773);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime20", (dateTime15.compareTo(dateTime20) == 0) == dateTime15.equals(dateTime20));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        mutableInterval0.setEnd(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.Interval interval24 = interval22.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime25 = interval22.getStart();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean29 = interval22.isBefore((org.joda.time.ReadableInstant) dateTime27);
        long long30 = interval22.getEndMillis();
        org.joda.time.Interval interval32 = interval22.withStartMillis(1645513761197L);
        org.joda.time.Interval interval33 = interval22.toInterval();
        boolean boolean34 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes(4);
        org.joda.time.LocalDate localDate45 = dateTime42.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType35.getField(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.years();
        java.lang.String str49 = chronology46.toString();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTime();
        boolean boolean52 = interval33.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime51", (dateTime12.compareTo(dateTime51) == 0) == dateTime12.equals(dateTime51));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(63138623);
        int int4 = dateTime1.getWeekyear();
        boolean boolean6 = dateTime1.isBefore((long) 63186663);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration27 = duration16.minus(0L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Duration duration36 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime48, periodType49);
        org.joda.time.Period period51 = mutablePeriod50.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) mutablePeriod50);
        mutableInterval52.setDurationBeforeEnd(1645513785124L);
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        long long56 = mutableInterval52.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        java.lang.String str61 = property60.getName();
        org.joda.time.DateTime dateTime62 = property60.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval63.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration69 = duration66.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateTime dateTime78 = dateTime71.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone83);
        java.lang.String str85 = dateTime84.toString();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology88);
        org.joda.time.DateTime dateTime90 = dateTime84.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.Period period91 = duration82.toPeriodFrom((org.joda.time.ReadableInstant) dateTime84);
        long long92 = duration82.getMillis();
        long long93 = duration82.getStandardMinutes();
        org.joda.time.Duration duration94 = duration82.toDuration();
        boolean boolean95 = duration66.isLongerThan((org.joda.time.ReadableDuration) duration94);
        org.joda.time.Duration duration97 = duration66.withMillis((long) (byte) 0);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration97);
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime8", (instant0.compareTo(dateTime8) == 0) == instant0.equals(dateTime8));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        int int21 = dateTime17.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime17.toMutableDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Interval interval25 = mutableInterval0.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime41 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.withZoneRetainFields(dateTimeZone43);
        int int45 = dateTime41.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime41.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime41.toMutableDateTime();
        int int48 = mutableDateTime47.getMinuteOfDay();
        org.joda.time.Chronology chronology49 = mutableDateTime47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.centuryOfEra();
        org.joda.time.DurationField durationField52 = chronology49.weekyears();
        mutableInterval0.setChronology(chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField50 and durationField52", (durationField50.compareTo(durationField52) == 0) == durationField50.equals(durationField52));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long15 = dateTimeField10.addWrapField(1645513794697L, 63101202);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(6);
        org.joda.time.LocalDate localDate20 = dateTime17.toLocalDate();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Chronology chronology29 = chronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        int[] intArray38 = chronology29.get((org.joda.time.ReadablePartial) yearMonthDay36, 1645513760770L);
        int int39 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate20, intArray38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime31", (dateTime9.compareTo(dateTime31) == 0) == dateTime9.equals(dateTime31));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long15 = dateTimeField10.add((-359999779L), 0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        boolean boolean22 = dateTime20.isBefore((-1L));
        org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.DateTime dateTime25 = property23.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.withYear(37320000);
        org.joda.time.LocalDate localDate28 = dateTime27.toLocalDate();
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate28, 33, locale30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime17", (dateTime9.compareTo(dateTime17) == 0) == dateTime9.equals(dateTime17));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1L), 1L, periodType27, chronology28);
        java.lang.String str30 = periodType27.toString();
        java.lang.String str31 = periodType27.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645513760165L, periodType27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant23, periodType27);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration47 = duration11.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration66 = duration51.toDuration();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        boolean boolean73 = mutableInterval67.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType75 = periodType74.withYearsRemoved();
        org.joda.time.Period period76 = mutableInterval67.toPeriod(periodType75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration66, periodType75);
        mutablePeriod77.addHours(63210430);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        int int16 = mutablePeriod9.getHours();
        org.joda.time.format.PeriodFormatter periodFormatter17 = null;
        java.lang.String str18 = mutablePeriod9.toString(periodFormatter17);
        int int19 = mutablePeriod9.getDays();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period20.minusSeconds((int) (short) 1);
        org.joda.time.Period period24 = period20.plusWeeks((int) (short) -1);
        org.joda.time.Period period26 = period20.minusMillis(4);
        org.joda.time.Period period28 = period20.minusDays((int) (short) 10);
        org.joda.time.Duration duration29 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime31.hourOfDay();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = duration43.toPeriod();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        boolean boolean52 = duration43.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray54 = new org.joda.time.DurationFieldType[] { durationFieldType53 };
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.forFields(durationFieldTypeArray54);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.forFields(durationFieldTypeArray54);
        org.joda.time.Period period57 = new org.joda.time.Period((java.lang.Object) duration49, periodType56);
        org.joda.time.Period period58 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31, periodType56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTimeISO();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period71 = duration62.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration73 = duration62.minus(0L);
        org.joda.time.Duration duration75 = duration62.withMillis(1645513760253L);
        org.joda.time.Instant instant76 = instant59.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType78 = periodType77.withYearsRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withSecondsRemoved();
        java.lang.String str80 = periodType79.getName();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) instant59, periodType79);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((java.lang.Object) 1645513795687L);
        org.joda.time.Instant instant84 = instant59.plus((org.joda.time.ReadableDuration) duration83);
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant59", (dateTime31.compareTo(instant59) == 0) == dateTime31.equals(instant59));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        int int5 = dateTime4.getMinuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        boolean boolean17 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.minus(1645513793801L);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513763016L);
        boolean boolean5 = instant3.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.Interval interval7 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) instant3);
        org.joda.time.Hours hours8 = duration1.toStandardHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime.Property property9 = dateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int13 = dateTimeZone11.getOffsetFromLocal(1645513761942L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, 1645513770932L);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime(dateTimeZone11);
        java.lang.String str20 = dateTimeZone11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime19", (dateTime4.compareTo(dateTime19) == 0) == dateTime4.equals(dateTime19));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.MutableDateTime mutableDateTime93 = instant92.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType3.isSupported(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime1.withFieldAdded(durationFieldType3, 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.toString();
        org.joda.time.DurationField durationField17 = property12.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property12.getFieldType();
        int int19 = dateTime8.get(dateTimeFieldType18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        boolean boolean30 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(366);
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        int int35 = dateTimeZone32.getOffsetFromLocal(1645513796464L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        org.joda.time.Instant instant16 = instant13.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant16", (dateTime12.compareTo(instant16) == 0) == dateTime12.equals(instant16));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) yearMonthDay22, 1645513760770L);
        org.joda.time.DurationField durationField25 = chronology15.eras();
        org.joda.time.DateTime dateTime26 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight17 = dateTime15.toDateMidnight();
        org.joda.time.Instant instant18 = dateMidnight17.toInstant();
        org.joda.time.Instant instant20 = instant18.plus(1645513764861L);
        org.joda.time.Chronology chronology21 = instant18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513834212L, 1645513933969L, periodType4, chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and instant18", (dateMidnight17.compareTo(instant18) == 0) == dateMidnight17.equals(instant18));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime.Property property71 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime73 = property71.addToCopy(1645513766979L);
        boolean boolean75 = dateTime73.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis(10);
        boolean boolean78 = dateTime77.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        java.lang.String str82 = dateTimeZone80.getNameKey(1645513776739L);
        org.joda.time.DateTime dateTime83 = dateTime77.withZone(dateTimeZone80);
        org.joda.time.Duration duration84 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant39, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Instant instant85 = dateTime77.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.Instant instant14 = instant9.withDurationAdded(19044L, 25847168);
        org.joda.time.Instant instant16 = instant9.withMillis(1645513863930L);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.Instant instant36 = instant0.minus(1645513776688L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.toDateTime(chronology7);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight14 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime27 = dateTime19.withZone(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.DateTime dateTime54 = dateTime37.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (short) 0);
        long long55 = duration52.getStandardSeconds();
        org.joda.time.DateTime dateTime56 = dateTime27.plus((org.joda.time.ReadableDuration) duration52);
        int int57 = dateTime56.getSecondOfDay();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType61 = periodType60.withYearsRemoved();
        org.joda.time.PeriodType periodType62 = periodType61.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfEra();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 3, 1645513762121L, periodType61, chronology69);
        org.joda.time.PeriodType periodType72 = periodType61.withMinutesRemoved();
        org.joda.time.PeriodType periodType73 = periodType72.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime56, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withMonthsRemoved();
        org.joda.time.PeriodType periodType76 = periodType73.withWeeksRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 25882664, 1645513799984L, periodType73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime27", (dateTime19.compareTo(dateTime27) == 0) == dateTime19.equals(dateTime27));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = duration32.toPeriod();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        boolean boolean41 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone46);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period48.minusSeconds((int) (short) 1);
        org.joda.time.Period period52 = period48.plusWeeks((int) (short) -1);
        org.joda.time.Period period54 = period48.minusMillis(4);
        org.joda.time.Interval interval55 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        java.lang.String str57 = chronology56.toString();
        org.joda.time.Period period58 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType42, chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        long long66 = dateTimeZone64.convertUTCToLocal(1645513763679L);
        java.lang.String str68 = dateTimeZone64.getShortName(1645513769549L);
        long long70 = dateTimeZone64.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology71 = chronology56.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology72 = chronology56.withUTC();
        org.joda.time.DateTime dateTime73 = dateTime1.toDateTime(chronology72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = dateTime1.toString(dateTimeFormatter74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime73", (dateTime24.compareTo(dateTime73) == 0) == dateTime24.equals(dateTime73));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTime dateTime41 = dateTime4.plusWeeks(63139010);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths(52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        int int8 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration21 = interval20.toDuration();
        boolean boolean22 = duration1.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        boolean boolean29 = dateTime27.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        int int41 = dateTimeZone37.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime34.toMutableDateTime(dateTimeZone37);
        boolean boolean43 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int44 = dateTime27.getYearOfEra();
        org.joda.time.Period period45 = duration21.toPeriodTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property46 = dateTime27.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime42", (dateTime7.compareTo(mutableDateTime42) == 0) == dateTime7.equals(mutableDateTime42));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime26 = interval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        boolean boolean30 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime28, periodType34);
        org.joda.time.PeriodType periodType46 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.minuteOfDay();
        org.joda.time.DurationField durationField56 = chronology53.halfdays();
        long long58 = durationField56.getValueAsLong((-37320000L));
        java.lang.String str59 = durationField56.getName();
        long long60 = durationField56.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType61 = durationField56.getType();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Chronology chronology70 = mutableInterval64.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfEra();
        org.joda.time.Chronology chronology72 = chronology70.withUTC();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod();
        mutablePeriod73.setMonths((int) ' ');
        java.lang.Object obj76 = mutablePeriod73.clone();
        long long79 = chronology70.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField80 = chronology70.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology70);
        org.joda.time.DateTimeField dateTimeField82 = chronology70.clockhourOfHalfday();
        org.joda.time.Chronology chronology83 = chronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.secondOfDay();
        org.joda.time.DurationField durationField85 = durationFieldType61.getField(chronology83);
        boolean boolean86 = periodType46.isSupported(durationFieldType61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField56 and durationField85", (durationField56.compareTo(durationField85) == 0) == durationField56.equals(durationField85));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime15.withField(dateTimeFieldType19, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime15.toString(dateTimeFormatter22);
        org.joda.time.DateTime dateTime24 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime15.withMillisOfDay(63088836);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        long long33 = instant32.getMillis();
        org.joda.time.Duration duration35 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime57 = dateTime51.withField(dateTimeFieldType55, 25774);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(63112091);
        boolean boolean60 = duration35.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant61 = instant32.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant63 = instant32.plus(1100000L);
        boolean boolean64 = dateTime26.isEqual((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant32", (dateTime31.compareTo(instant32) == 0) == dateTime31.equals(instant32));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundHalfCeilingCopy();
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.centuryOfEra();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.Instant instant17 = instant9.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration30 = duration19.minus(0L);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.plus((long) 8);
        org.joda.time.Duration duration39 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '#');
        org.joda.time.Instant instant40 = instant17.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str46 = dateTimeZone44.getNameKey(1645513759301L);
        java.lang.String str48 = dateTimeZone44.getName(1645513762160L);
        java.util.TimeZone timeZone49 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant56.minus(1645513772143L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645513778347L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTimeISO();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType68 = periodType67.withYearsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        java.lang.Object obj75 = mutableInterval70.clone();
        org.joda.time.Chronology chronology76 = mutableInterval70.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 3, 1645513762121L, periodType68, chronology76);
        org.joda.time.PeriodType periodType79 = periodType68.withMinutesRemoved();
        org.joda.time.PeriodType periodType80 = periodType79.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) instant63, periodType79);
        org.joda.time.MutableDateTime mutableDateTime82 = instant63.toMutableDateTime();
        int int83 = property7.compareTo((org.joda.time.ReadableInstant) mutableDateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant63 and dateTime64", (instant63.compareTo(dateTime64) == 0) == instant63.equals(dateTime64));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.clockhourOfDay();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology19.getZone();
        org.joda.time.DurationField durationField28 = chronology19.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period56 = new org.joda.time.Period(1645513810209L);
        org.joda.time.DurationFieldType durationFieldType58 = period56.getFieldType((int) (byte) 0);
        mutablePeriod54.add(durationFieldType58, 25825);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str1 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Instant instant10 = instant7.minus((long) 69);
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType3.isSupported(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime1.withFieldAdded(durationFieldType3, 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.toString();
        org.joda.time.DurationField durationField17 = property12.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property12.getFieldType();
        int int19 = dateTime8.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        org.joda.time.Interval interval34 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645513766040L, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str42 = dateTimeZone40.getNameKey(1645513759301L);
        int int44 = dateTimeZone40.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology45 = chronology35.withZone(dateTimeZone40);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1645513760283L, 1645513801847L, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weekyears();
        boolean boolean48 = dateTimeFieldType18.isSupported(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField47", (durationField17.compareTo(durationField47) == 0) == durationField17.equals(durationField47));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645513759301L);
        int int21 = dateTimeZone17.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime14.toMutableDateTime(dateTimeZone17);
        java.lang.String str23 = dateTimeZone17.getID();
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone17.getShortName(1645513759601L, locale25);
        long long28 = dateTimeZone17.convertUTCToLocal(1645513768203L);
        org.joda.time.DateTime dateTime29 = instant9.toDateTime(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime22", (dateTime14.compareTo(mutableDateTime22) == 0) == dateTime14.equals(mutableDateTime22));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        int int13 = dateTime6.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime15 = dateTime6.plusHours(63110);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = dateTime22.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645513759301L);
        java.lang.String str38 = dateTimeZone34.getName(1645513762160L);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime40 = dateTime22.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime41 = dateTime15.withZone(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime40", (dateTime22.compareTo(dateTime40) == 0) == dateTime22.equals(dateTime40));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.DurationField durationField18 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.yearOfEra();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        mutableInterval20.setInterval(100000L, 1645513759601L);
        long long28 = mutableInterval20.getStartMillis();
        org.joda.time.Duration duration29 = mutableInterval20.toDuration();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period30.minusSeconds((int) (short) 1);
        org.joda.time.Period period34 = period30.plusMinutes(3);
        org.joda.time.Period period36 = period34.plusWeeks(17);
        org.joda.time.Duration duration37 = period36.toStandardDuration();
        mutableInterval20.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.Chronology chronology47 = chronology45.withUTC();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period51 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime48.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 6);
        org.joda.time.LocalDate localDate54 = dateTime53.toLocalDate();
        int[] intArray56 = chronology8.get((org.joda.time.ReadablePartial) localDate54, 1645513872750L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime48", (dateTime10.compareTo(dateTime48) == 0) == dateTime10.equals(dateTime48));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.DateTime dateTime39 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (short) 0);
        long long40 = duration37.getStandardSeconds();
        org.joda.time.DateTime dateTime41 = dateTime12.plus((org.joda.time.ReadableDuration) duration37);
        int int42 = dateTime41.getSecondOfDay();
        org.joda.time.LocalDate localDate43 = dateTime41.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(63110);
        org.joda.time.DateTime dateTime8 = dateTime4.minusDays(4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMinutes((int) (byte) 0);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(chronology24);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        boolean boolean39 = instant29.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant41 = instant29.plus(1645513821127L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        boolean boolean43 = dateTime27.isEqual((org.joda.time.ReadableInstant) instant41);
        boolean boolean44 = dateTime8.isEqual((org.joda.time.ReadableInstant) instant41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime.Property property26 = dateTime24.hourOfDay();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) dateTime24);
        boolean boolean28 = interval10.isBefore((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.Duration duration43 = duration30.withMillis(1645513760253L);
        org.joda.time.Duration duration44 = duration30.toDuration();
        java.lang.String str45 = duration44.toString();
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime47 = instant46.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) instant46);
        boolean boolean49 = instant27.isBefore((org.joda.time.ReadableInstant) instant46);
        long long50 = instant27.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant46", (dateTime1.compareTo(instant46) == 0) == dateTime1.equals(instant46));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.plus((long) 8);
        org.joda.time.Duration duration29 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Period period44 = mutablePeriod43.toPeriod();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) mutablePeriod43);
        mutableInterval45.setDurationBeforeEnd(1645513785124L);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        mutableInterval48.setInterval(100000L, 1645513759601L);
        long long56 = mutableInterval48.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval62.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = interval61.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval48.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        mutableInterval45.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        long long70 = mutableInterval45.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime.Property property74 = dateTime72.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval76.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Interval interval81 = interval75.withDurationAfterStart((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Interval interval82 = interval75.toInterval();
        org.joda.time.Interval interval84 = interval82.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime85 = interval82.getStart();
        org.joda.time.Instant instant86 = dateTime85.toInstant();
        org.joda.time.Instant instant88 = new org.joda.time.Instant(1645513770330L);
        boolean boolean90 = instant88.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime91 = instant88.toDateTime();
        org.joda.time.DateTime dateTime93 = dateTime91.plusMinutes(63110);
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) instant86, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime96 = dateTime91.minusSeconds(25881497);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime85 and instant86", (dateTime85.compareTo(instant86) == 0) == dateTime85.equals(instant86));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType26 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 3, 1645513762121L, periodType26, chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField38 = chronology34.months();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str43 = dateTimeZone41.getNameKey(1645513759301L);
        java.lang.String str45 = dateTimeZone41.getName(1645513762160L);
        java.util.TimeZone timeZone46 = dateTimeZone41.toTimeZone();
        int int48 = dateTimeZone41.getStandardOffset(1645513761942L);
        int int50 = dateTimeZone41.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology51 = chronology34.withZone(dateTimeZone41);
        int int53 = dateTimeZone41.getOffset((long) 115200000);
        int int55 = dateTimeZone41.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone56.toString();
        long long59 = dateTimeZone41.getMillisKeepLocal(dateTimeZone56, 1645513792520L);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = dateTime20.toDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes(52);
        org.joda.time.DateTime dateTime76 = dateTime72.minusMillis(0);
        boolean boolean77 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Instant instant79 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        long long81 = mutableInterval80.toDurationMillis();
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval80.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = duration83.plus((long) 8);
        org.joda.time.Instant instant87 = instant79.plus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateTimeZone dateTimeZone88 = instant87.getZone();
        org.joda.time.DateTime dateTime89 = instant87.toDateTimeISO();
        org.joda.time.DateTime dateTime91 = dateTime89.plusYears(40);
        int int92 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime.Property property93 = dateTime20.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant87 and dateTime89", (instant87.compareTo(dateTime89) == 0) == instant87.equals(dateTime89));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra(63110);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(52);
        org.joda.time.DateTime dateTime28 = dateTime24.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1645513766040L, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str49 = dateTimeZone47.getNameKey(1645513759301L);
        int int51 = dateTimeZone47.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology52 = chronology42.withZone(dateTimeZone47);
        long long54 = dateTimeZone47.nextTransition(1645513765246L);
        org.joda.time.DateTime dateTime55 = dateTime28.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        long long58 = dateTimeZone47.previousTransition(1645513786292L);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone60.getShortName(1645513771104L, locale62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime68.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        java.lang.String str76 = dateTime75.toString();
        org.joda.time.DateTime dateTime78 = dateTime75.withMillisOfSecond((int) (short) 10);
        boolean boolean80 = dateTime78.isBefore((-1L));
        int int81 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int83 = dateTime78.get(dateTimeFieldType82);
        java.lang.String str84 = dateTime78.toString();
        org.joda.time.LocalDateTime localDateTime85 = dateTime78.toLocalDateTime();
        boolean boolean86 = dateTimeZone60.isLocalDateTimeGap(localDateTime85);
        boolean boolean87 = dateTimeZone47.isLocalDateTimeGap(localDateTime85);
        org.joda.time.DateTime dateTime88 = dateTime13.withZoneRetainFields(dateTimeZone47);
        long long90 = dateTimeZone47.previousTransition(1645513845744L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime59", (dateTime1.compareTo(dateTime59) == 0) == dateTime1.equals(dateTime59));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.Duration duration25 = duration12.withMillis(1645513760253L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.Duration duration47 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) '#');
        int int48 = duration12.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant50 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2021);
        org.joda.time.Instant instant51 = instant9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime52 = instant9.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime.Property property56 = dateTime54.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = interval57.contains(readableInstant58);
        boolean boolean60 = interval57.isBeforeNow();
        org.joda.time.DateTime dateTime61 = interval57.getStart();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone64);
        org.joda.time.Period period66 = org.joda.time.Period.ZERO;
        org.joda.time.Period period68 = period66.minusSeconds((int) (short) 1);
        org.joda.time.Period period70 = period66.plusWeeks((int) (short) -1);
        org.joda.time.Period period72 = period66.minusMillis(4);
        org.joda.time.Interval interval73 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology81);
        org.joda.time.DateTime dateTime83 = dateTime77.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.Period period84 = duration75.toPeriodFrom((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Seconds seconds85 = period84.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod86 = period84.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period89 = period84.withFieldAdded(durationFieldType87, (int) (short) -1);
        org.joda.time.Interval interval90 = interval73.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period89);
        org.joda.time.Interval interval91 = interval57.withPeriodAfterStart((org.joda.time.ReadablePeriod) period89);
        org.joda.time.Duration duration92 = interval91.toDuration();
        org.joda.time.Instant instant93 = instant9.minus((org.joda.time.ReadableDuration) duration92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime52", (instant9.compareTo(mutableDateTime52) == 0) == instant9.equals(mutableDateTime52));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        int int5 = periodType3.size();
        org.joda.time.PeriodType periodType6 = periodType3.withMonthsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        boolean boolean14 = dateTime12.isBefore((-1L));
        org.joda.time.DateTime.Property property15 = dateTime12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval18.copy();
        mutableInterval19.setEndMillis(1645513775498L);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Chronology chronology30 = chronology28.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        int[] intArray39 = chronology30.get((org.joda.time.ReadablePartial) yearMonthDay37, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField40 = chronology30.monthOfYear();
        org.joda.time.DurationField durationField41 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology30.clockhourOfHalfday();
        mutableInterval19.setChronology(chronology30);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime17.toMutableDateTime(chronology30);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 25813924, 1645513896179L, periodType7, chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime44", (dateTime12.compareTo(mutableDateTime44) == 0) == dateTime12.equals(mutableDateTime44));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        int int10 = property3.get();
        org.joda.time.DateTime dateTime11 = property3.roundCeilingCopy();
        org.joda.time.Duration duration13 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.Duration duration28 = duration15.withMillis(1645513760253L);
        org.joda.time.Duration duration29 = duration15.toDuration();
        org.joda.time.Duration duration30 = duration13.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration30, periodType31);
        org.joda.time.Duration duration34 = duration30.minus(1645513802226L);
        org.joda.time.Duration duration36 = duration30.withMillis(1645513798198L);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1L), 1L, periodType42, chronology43);
        java.lang.String str45 = periodType42.toString();
        java.lang.String str46 = periodType42.getName();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1645513760165L, periodType42);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        java.lang.Object obj53 = mutableInterval48.clone();
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType42, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        int int61 = dateTime57.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTimeISO();
        int int71 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalDate localDate72 = dateTime70.toLocalDate();
        int[] intArray74 = chronology54.get((org.joda.time.ReadablePartial) localDate72, 1645513760075L);
        org.joda.time.DateTimeField dateTimeField75 = chronology54.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((java.lang.Object) duration30, chronology54);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval79.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration85 = duration82.plus((long) 8);
        org.joda.time.Instant instant86 = instant78.plus((org.joda.time.ReadableDuration) duration85);
        boolean boolean88 = instant78.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.DateTime dateTime89 = instant78.toDateTimeISO();
        org.joda.time.Duration duration90 = mutablePeriod76.toDurationFrom((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Days days91 = duration90.toStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant78 and dateTime89", (instant78.compareTo(dateTime89) == 0) == instant78.equals(dateTime89));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.toString();
        java.lang.String str11 = dateTimeZone7.getName(1645513774282L);
        long long13 = dateTimeZone7.previousTransition(1645513774729L);
        long long16 = dateTimeZone7.adjustOffset(1645513808968L, true);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Duration duration38 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        boolean boolean51 = property42.equals((java.lang.Object) dateTime44);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property53 = dateTime44.era();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        long long58 = dateTimeZone55.convertLocalToUTC(1645513778970L, false);
        long long62 = dateTimeZone55.convertLocalToUTC(1645513816283L, false, 1645513794412L);
        org.joda.time.DateTime dateTime63 = dateTime44.toDateTime(dateTimeZone55);
        long long65 = dateTimeZone7.getMillisKeepLocal(dateTimeZone55, 1645513896406L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime63", (dateTime1.compareTo(dateTime63) == 0) == dateTime1.equals(dateTime63));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(63110);
        org.joda.time.DateTime dateTime8 = dateTime4.minusDays(4);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(63098347);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        java.lang.Object obj10 = mutableInterval0.clone();
        java.lang.String str11 = mutableInterval0.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime21 = dateTime16.withFieldAdded(durationFieldType19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(63116635);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime16.toMutableDateTime(dateTimeZone23);
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime24", (dateTime16.compareTo(mutableDateTime24) == 0) == dateTime16.equals(mutableDateTime24));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight9.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.Interval interval31 = interval29.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime32 = interval29.getStart();
        org.joda.time.Duration duration33 = interval29.toDuration();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        int int45 = duration33.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant46 = instant0.minus((org.joda.time.ReadableDuration) duration33);
        boolean boolean48 = instant46.equals((java.lang.Object) 1645513868330L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.minus(1645513941431L);
        long long7 = instant6.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        int int24 = yearMonthDay23.size();
        int[] intArray29 = new int[] { 40, 40, '#', 10 };
        int int30 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay23, intArray29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay7, (org.joda.time.ReadablePartial) yearMonthDay23);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        mutablePeriod36.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone41);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period43.minusSeconds((int) (short) 1);
        org.joda.time.Period period47 = period43.plusWeeks((int) (short) -1);
        org.joda.time.Period period49 = period43.minusMillis(4);
        org.joda.time.Interval interval50 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        mutablePeriod36.add((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes(4);
        org.joda.time.LocalDate localDate61 = dateTime58.toLocalDate();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        long long69 = dateTime68.getMillis();
        org.joda.time.DateTime dateTime71 = dateTime68.plusWeeks((int) (byte) 10);
        boolean boolean72 = mutableInterval62.contains((org.joda.time.ReadableInstant) dateTime71);
        mutablePeriod36.setPeriod((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str79 = dateTimeZone77.getNameKey(1645513759301L);
        int int81 = dateTimeZone77.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        int int84 = dateTimeZone77.getOffset((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone77);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long91 = dateTimeZone88.convertLocalToUTC(1645513775652L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone88);
        org.joda.time.DateTime dateTime93 = dateTime85.toDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime(obj0, dateTimeZone88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime93", (dateTime53.compareTo(dateTime93) == 0) == dateTime53.equals(dateTime93));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.Instant instant28 = dateTime25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime25.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant28", (dateTime25.compareTo(instant28) == 0) == dateTime25.equals(instant28));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), 1L, periodType30, chronology31);
        java.lang.String str33 = periodType30.toString();
        java.lang.String str34 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513760165L, periodType30);
        int int36 = mutablePeriod35.getWeeks();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        mutablePeriod35.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration48.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime60);
        int int62 = mutablePeriod61.getSeconds();
        mutablePeriod61.addSeconds(115200000);
        org.joda.time.Period period65 = period43.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod61.add(readablePeriod66);
        mutablePeriod61.setMonths(63100366);
        mutablePeriod61.add(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.DateTime dateTime76 = dateTime73.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTime(chronology77);
        org.joda.time.DateTime dateTime79 = dateTime76.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod61, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Instant instant82 = dateTime76.toInstant();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime85 = dateTime76.withPeriodAdded(readablePeriod83, 63199419);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime85 and instant82", (dateTime85.compareTo(instant82) == 0) == dateTime85.equals(instant82));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.DateTime dateTime93 = instant5.toDateTimeISO();
        java.lang.String str95 = dateTime93.toString("52");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTime dateTime41 = dateTime4.plusWeeks(63139010);
        org.joda.time.DateMidnight dateMidnight42 = dateTime41.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(4);
        org.joda.time.LocalDate localDate10 = dateTime7.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.years();
        java.lang.String str14 = chronology11.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645513760165L, periodType22);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType22, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        int int41 = dateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        int int51 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDate localDate52 = dateTime50.toLocalDate();
        int[] intArray54 = chronology34.get((org.joda.time.ReadablePartial) localDate52, 1645513760075L);
        org.joda.time.DateTimeField dateTimeField55 = chronology34.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime16.toMutableDateTime(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime16", (dateTime2.compareTo(dateTime16) == 0) == dateTime2.equals(dateTime16));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setMonths((int) ' ');
        java.lang.Object obj26 = mutablePeriod23.clone();
        mutablePeriod23.setDays(40);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology30 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfHour();
        org.joda.time.Chronology chronology33 = chronology30.withUTC();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(1645513770330L);
        boolean boolean37 = instant35.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime38 = instant35.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        int[] intArray41 = chronology33.get((org.joda.time.ReadablePartial) yearMonthDay39, 1645513919433L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime38", (instant35.compareTo(dateTime38) == 0) == instant35.equals(dateTime38));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField19 = chronology8.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime18", (dateTime10.compareTo(dateTime18) == 0) == dateTime10.equals(dateTime18));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime4.withMinuteOfHour(0);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant39 = instant37.toInstant();
        long long40 = instant39.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant39", (dateTime35.compareTo(instant39) == 0) == dateTime35.equals(instant39));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime7.plusWeeks((int) (byte) 10);
        boolean boolean11 = mutableInterval1.contains((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime10.getMillisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        boolean boolean14 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalTime localTime15 = dateTime13.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime7", (instant0.compareTo(dateTime7) == 0) == instant0.equals(dateTime7));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1645513782103L);
        boolean boolean3 = dateTime1.isEqual(0L);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(59);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds(63146531);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        int int18 = dateTime1.compareTo((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime20 = dateTime1.plusHours(63171279);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant17", (dateTime10.compareTo(instant17) == 0) == dateTime10.equals(instant17));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withYear(1);
        org.joda.time.DateTime dateTime24 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(63113468);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime26.minusMillis(63147663);
        org.joda.time.DateTime dateTime33 = dateTime31.minus(1645513954609L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime29", (dateTime26.compareTo(mutableDateTime29) == 0) == dateTime26.equals(mutableDateTime29));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField29.getAsText(115200000, locale31);
        int int34 = dateTimeField29.getMaximumValue(1645513765710L);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.withZoneRetainFields(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        boolean boolean56 = dateTime53.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime58 = dateTime53.withYear(1);
        org.joda.time.LocalDateTime localDateTime59 = dateTime53.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType74 = periodType73.withYearsRemoved();
        org.joda.time.PeriodType periodType75 = periodType74.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.yearOfEra();
        org.joda.time.Period period84 = new org.joda.time.Period((long) 3, 1645513762121L, periodType74, chronology82);
        org.joda.time.DurationField durationField85 = chronology82.eras();
        org.joda.time.DateTime dateTime86 = dateTime64.toDateTime(chronology82);
        org.joda.time.DateTimeField dateTimeField87 = chronology82.clockhourOfDay();
        org.joda.time.Period period88 = new org.joda.time.Period((long) 115200000, chronology82);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology82);
        int[] intArray90 = mutablePeriod89.getValues();
        int int91 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59, intArray90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField15 and durationField85", Math.signum(durationField15.compareTo(durationField85)) == -Math.signum(durationField85.compareTo(durationField15)));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(4);
        org.joda.time.LocalDate localDate10 = dateTime7.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.years();
        java.lang.String str14 = chronology11.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getShortName(1645513771104L, locale18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        boolean boolean36 = dateTime34.isBefore((-1L));
        int int37 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int39 = dateTime34.get(dateTimeFieldType38);
        java.lang.String str40 = dateTime34.toString();
        org.joda.time.LocalDateTime localDateTime41 = dateTime34.toLocalDateTime();
        boolean boolean42 = dateTimeZone16.isLocalDateTimeGap(localDateTime41);
        int[] intArray44 = chronology11.get((org.joda.time.ReadablePartial) localDateTime41, (long) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime.Property property26 = dateTime24.hourOfDay();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) dateTime24);
        boolean boolean28 = interval10.isBefore((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.Duration duration43 = duration30.withMillis(1645513760253L);
        org.joda.time.Duration duration44 = duration30.toDuration();
        java.lang.String str45 = duration44.toString();
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime47 = instant46.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) instant46);
        boolean boolean49 = instant27.isBefore((org.joda.time.ReadableInstant) instant46);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1645513760253L, chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.year();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((-1L), 1L, periodType70, chronology71);
        java.lang.String str73 = periodType70.toString();
        java.lang.String str74 = periodType70.getName();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1645513760165L, periodType70);
        int int76 = mutablePeriod75.getWeeks();
        org.joda.time.Period period77 = org.joda.time.Period.ZERO;
        org.joda.time.Period period79 = period77.minusSeconds((int) (short) 1);
        org.joda.time.Period period81 = period77.plusWeeks((int) (short) -1);
        org.joda.time.Period period83 = period77.minusMillis(4);
        mutablePeriod75.add((org.joda.time.ReadablePeriod) period83);
        org.joda.time.Period period86 = period83.minusYears(3);
        int[] intArray89 = chronology63.get((org.joda.time.ReadablePeriod) period83, 0L, 1645513765808L);
        org.joda.time.Period period90 = duration53.toPeriod(periodType55, chronology63);
        org.joda.time.Period period91 = duration53.toPeriod();
        org.joda.time.Instant instant92 = instant46.minus((org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant27", (dateTime17.compareTo(instant27) == 0) == dateTime17.equals(instant27));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology8);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 8, periodType25, chronology32);
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration23, chronology32);
        mutablePeriod21.addMonths(2022);
        mutablePeriod21.setPeriod(1645513787728L, 1645513775435L);
        mutablePeriod21.addMinutes(63094);
        org.joda.time.DateTime dateTime44 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, 63148593);
        org.joda.time.DateTime dateTime46 = dateTime44.plusYears(221);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime18", (dateTime10.compareTo(dateTime18) == 0) == dateTime10.equals(dateTime18));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = dateTimeField28.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField29, and durationField23", !(durationField23.compareTo(durationField29) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField29.compareTo(durationField23))));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTime.Property property39 = dateTime11.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int41 = dateTime11.get(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime46.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        boolean boolean58 = dateTime56.isBefore((-1L));
        int int59 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int61 = dateTime56.get(dateTimeFieldType60);
        java.lang.String str62 = dateTime56.toString();
        org.joda.time.DateTime dateTime64 = dateTime56.withYearOfEra(9);
        org.joda.time.DateTime dateTime66 = dateTime56.plusHours(20);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType68 = periodType67.withYearsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withMillisRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime56, periodType69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        int int75 = dateTimeZone73.getStandardOffset((long) (-292275054));
        java.lang.String str77 = dateTimeZone73.getName(1645513773422L);
        org.joda.time.DateTime dateTime78 = dateTime11.withZone(dateTimeZone73);
        org.joda.time.DateTime.Property property79 = dateTime11.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime78", (dateTime11.compareTo(dateTime78) == 0) == dateTime11.equals(dateTime78));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.Instant instant15 = dateTime10.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant16", (dateTime1.compareTo(instant16) == 0) == dateTime1.equals(instant16));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        org.joda.time.Instant instant41 = instant0.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod();
        mutablePeriod43.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        boolean boolean54 = dateTime52.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime(chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        boolean boolean73 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime70);
        boolean boolean76 = mutableInterval74.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        boolean boolean81 = mutableInterval77.overlaps((org.joda.time.ReadableInterval) mutableInterval79);
        java.lang.Object obj82 = mutableInterval77.clone();
        org.joda.time.Chronology chronology83 = mutableInterval77.getChronology();
        mutableInterval74.setChronology(chronology83);
        mutablePeriod43.setPeriod(100000L, 1645513762364L, chronology83);
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType42.getField(chronology83);
        org.joda.time.DateTimeField dateTimeField87 = chronology83.secondOfMinute();
        org.joda.time.Period period88 = duration38.toPeriod(chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMillis(2021);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval0.containsNow();
        mutableInterval0.setEndMillis(1645513776987L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(52);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis(0);
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears(37320000);
        org.joda.time.Instant instant45 = dateTime44.toInstant();
        org.joda.time.DateTime dateTime47 = dateTime44.minusYears(63111089);
        mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean49 = mutableInterval0.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime44 and instant45", (dateTime44.compareTo(instant45) == 0) == dateTime44.equals(instant45));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime56 = instant55.toMutableDateTimeISO();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        org.joda.time.Duration duration71 = duration58.withMillis(1645513760253L);
        org.joda.time.Instant instant72 = instant55.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime77.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str84 = dateTimeZone82.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime85 = dateTime77.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime86 = instant55.toDateTime(dateTimeZone82);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) instant55);
        boolean boolean88 = dateTime36.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant55", (dateTime22.compareTo(instant55) == 0) == dateTime22.equals(instant55));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(63088836);
        org.joda.time.DateTime dateTime17 = dateTime13.withHourOfDay(9);
        int int18 = dateTime13.getMillisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime13.dayOfYear();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = duration25.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime37);
        mutableInterval20.setDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime40 = dateTime13.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        java.util.Locale locale46 = null;
        int int47 = property44.getMaximumTextLength(locale46);
        org.joda.time.DateTime dateTime49 = property44.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime50 = property44.withMaximumValue();
        boolean boolean51 = duration25.equals((java.lang.Object) dateTime50);
        int int52 = dateTime50.getYear();
        boolean boolean53 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime8", (dateTime5.compareTo(dateTime8) == 0) == dateTime5.equals(dateTime8));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        java.lang.String str40 = dateTimeZone36.getName(1645513762160L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant50 = instant48.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant52 = instant48.minus(1645513772143L);
        long long53 = instant52.getMillis();
        org.joda.time.Instant instant55 = instant52.minus(1645513778347L);
        org.joda.time.DateTime dateTime56 = instant55.toDateTimeISO();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfEra();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 3, 1645513762121L, periodType60, chronology68);
        org.joda.time.PeriodType periodType71 = periodType60.withMinutesRemoved();
        org.joda.time.PeriodType periodType72 = periodType71.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant55, periodType71);
        int int74 = mutablePeriod73.getMonths();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and dateTime56", (instant55.compareTo(dateTime56) == 0) == instant55.equals(dateTime56));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime56 = instant55.toMutableDateTimeISO();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        org.joda.time.Duration duration71 = duration58.withMillis(1645513760253L);
        org.joda.time.Instant instant72 = instant55.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime77.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str84 = dateTimeZone82.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime85 = dateTime77.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime86 = instant55.toDateTime(dateTimeZone82);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.Period period88 = duration87.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant55", (dateTime22.compareTo(instant55) == 0) == dateTime22.equals(instant55));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(4);
        org.joda.time.LocalDate localDate10 = dateTime7.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.years();
        java.lang.String str14 = chronology11.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration44 = duration33.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = duration44.toPeriodTo((org.joda.time.ReadableInstant) dateTime51, periodType52);
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime55 = property54.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime56 = property54.withMaximumValue();
        java.util.Locale locale57 = null;
        java.lang.String str58 = property54.getAsText(locale57);
        org.joda.time.DateTime dateTime60 = property54.addToCopy(63116617);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.Chronology chronology69 = chronology67.withUTC();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = dateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime75.toYearMonthDay();
        int[] intArray78 = chronology69.get((org.joda.time.ReadablePartial) yearMonthDay76, 1645513760770L);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.year();
        int int80 = yearMonthDay76.get(dateTimeFieldType79);
        org.joda.time.DateTime.Property property81 = dateTime60.property(dateTimeFieldType79);
        boolean boolean82 = dateTime31.isSupported(dateTimeFieldType79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = duration32.toPeriod();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        boolean boolean41 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone46);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period48.minusSeconds((int) (short) 1);
        org.joda.time.Period period52 = period48.plusWeeks((int) (short) -1);
        org.joda.time.Period period54 = period48.minusMillis(4);
        org.joda.time.Interval interval55 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        java.lang.String str57 = chronology56.toString();
        org.joda.time.Period period58 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType42, chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        long long66 = dateTimeZone64.convertUTCToLocal(1645513763679L);
        java.lang.String str68 = dateTimeZone64.getShortName(1645513769549L);
        long long70 = dateTimeZone64.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology71 = chronology56.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology72 = chronology56.withUTC();
        org.joda.time.DateTime dateTime73 = dateTime1.toDateTime(chronology72);
        org.joda.time.DurationField durationField74 = chronology72.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime73", (dateTime1.compareTo(dateTime73) == 0) == dateTime1.equals(dateTime73));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        long long12 = durationField10.getValueAsLong((-37320000L));
        java.lang.String str13 = durationField10.getName();
        long long14 = durationField10.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType15 = durationField10.getType();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Chronology chronology26 = chronology24.withUTC();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        mutablePeriod27.setMonths((int) ' ');
        java.lang.Object obj30 = mutablePeriod27.clone();
        long long33 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod27, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField34 = chronology24.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology24);
        org.joda.time.DateTimeField dateTimeField36 = chronology24.clockhourOfHalfday();
        org.joda.time.Chronology chronology37 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = durationFieldType15.getField(chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(1645513915846L, chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField39", (durationField10.compareTo(durationField39) == 0) == durationField10.equals(durationField39));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant71 = dateTime40.toInstant();
        org.joda.time.Instant instant72 = instant71.toInstant();
        java.lang.String str73 = instant71.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant71", (dateTime32.compareTo(instant71) == 0) == dateTime32.equals(instant71));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = interval33.withDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval40 = interval33.toInterval();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval54 = interval40.gap((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Chronology chronology55 = mutableInterval41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval66 = interval60.withDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval67 = interval60.toInterval();
        org.joda.time.Interval interval69 = interval67.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime70 = interval67.getStart();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        boolean boolean74 = interval67.isBefore((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = mutableInterval41.equals((java.lang.Object) interval67);
        org.joda.time.MutableInterval mutableInterval76 = interval67.toMutableInterval();
        boolean boolean77 = interval28.isAfter((org.joda.time.ReadableInterval) mutableInterval76);
        long long78 = mutableInterval76.getStartMillis();
        boolean boolean80 = mutableInterval76.isBefore(1645513827493L);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime82 = instant81.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        long long84 = mutableInterval83.toDurationMillis();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval83.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration89 = duration86.plus((long) 8);
        org.joda.time.Instant instant90 = instant81.minus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.MutableDateTime mutableDateTime91 = instant81.toMutableDateTime();
        boolean boolean92 = mutableInterval76.contains((org.joda.time.ReadableInstant) instant81);
        org.joda.time.MutableInterval mutableInterval93 = mutableInterval76.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant81", (dateTime15.compareTo(instant81) == 0) == dateTime15.equals(instant81));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime4.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime6", (instant1.compareTo(mutableDateTime6) == 0) == instant1.equals(mutableDateTime6));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant56.minus(1645513772143L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime79.withZoneRetainFields(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        boolean boolean85 = dateTime82.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime87 = dateTime82.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime89 = instant63.toDateTimeISO();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType91 = periodType90.withYearsRemoved();
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.Period period93 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) instant63, periodType90);
        long long94 = duration48.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant63 and dateTime89", (instant63.compareTo(dateTime89) == 0) == instant63.equals(dateTime89));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.Duration duration26 = interval3.toDuration();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.negated();
        org.joda.time.Period period30 = period27.withDays(1);
        int int32 = period27.getValue((int) (short) 0);
        org.joda.time.Interval interval33 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.Instant instant43 = instant35.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime44 = instant35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = instant35.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        java.lang.String str50 = property49.getName();
        org.joda.time.DateTime dateTime51 = property49.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration58 = duration55.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        boolean boolean71 = dateTime51.isSupported(dateTimeFieldType70);
        boolean boolean72 = dateTime51.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Instant instant76 = instant35.withDurationAdded(1645513943753L, 63148);
        org.joda.time.Interval interval77 = interval33.withEnd((org.joda.time.ReadableInstant) instant76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime44", (instant35.compareTo(dateTime44) == 0) == instant35.equals(dateTime44));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfDay();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        mutableInterval30.setInterval(100000L, 1645513759601L);
        long long38 = mutableInterval30.getStartMillis();
        org.joda.time.Duration duration39 = mutableInterval30.toDuration();
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusMinutes(3);
        org.joda.time.Period period46 = period44.plusWeeks(17);
        org.joda.time.Duration duration47 = period46.toStandardDuration();
        mutableInterval30.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.Chronology chronology57 = chronology55.withUTC();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period61 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime58.withPeriodAdded((org.joda.time.ReadablePeriod) period61, 6);
        org.joda.time.LocalDate localDate64 = dateTime63.toLocalDate();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        java.lang.Object obj70 = mutableInterval65.clone();
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.Chronology chronology73 = chronology71.withUTC();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime dateTime78 = dateTime75.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime78.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay80 = dateTime79.toYearMonthDay();
        int[] intArray82 = chronology73.get((org.joda.time.ReadablePartial) yearMonthDay80, 1645513760770L);
        org.joda.time.Period period83 = org.joda.time.Period.ZERO;
        org.joda.time.Period period85 = period83.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean87 = period85.equals((java.lang.Object) dateTimeFieldType86);
        org.joda.time.Period period89 = period85.plusWeeks(17);
        int[] intArray92 = chronology73.get((org.joda.time.ReadablePeriod) period89, 1645513771022L, 1645513765710L);
        int int93 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDate64, intArray92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime58 and dateTime75", (dateTime58.compareTo(dateTime75) == 0) == dateTime58.equals(dateTime75));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period(0L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property36 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime38 = property36.addToCopy(1645513766979L);
        boolean boolean40 = dateTime38.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime42 = dateTime38.plusHours(63110067);
        org.joda.time.DateTime dateTime44 = dateTime38.plusDays(69);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration55.toPeriod();
        boolean boolean58 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray60 = new org.joda.time.DurationFieldType[] { durationFieldType59 };
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.forFields(durationFieldTypeArray60);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.forFields(durationFieldTypeArray60);
        org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) duration55, periodType62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType68 = periodType67.withYearsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        java.lang.Object obj75 = mutableInterval70.clone();
        org.joda.time.Chronology chronology76 = mutableInterval70.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 3, 1645513762121L, periodType68, chronology76);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.dayOfMonth();
        org.joda.time.DurationField durationField80 = chronology76.months();
        boolean boolean81 = durationFieldType64.isSupported(chronology76);
        int int82 = periodType62.indexOf(durationFieldType64);
        java.lang.String str83 = durationFieldType64.getName();
        int int84 = period26.indexOf(durationFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField80", Math.signum(durationField23.compareTo(durationField80)) == -Math.signum(durationField80.compareTo(durationField23)));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType93.getDurationType();
        java.lang.String str95 = dateTimeFieldType93.getName();
        boolean boolean96 = instant5.isSupported(dateTimeFieldType93);
        org.joda.time.MutableDateTime mutableDateTime97 = instant5.toMutableDateTime();
        org.joda.time.Chronology chronology98 = instant5.getChronology();
        org.joda.time.DurationField durationField99 = chronology98.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Hours hours18 = duration16.toStandardHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime20.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long33 = dateTimeZone30.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime34 = dateTime27.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime37 = dateTime27.withZone(dateTimeZone36);
        int int39 = dateTimeZone36.getOffset(1645513978428L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime37", (dateTime27.compareTo(dateTime37) == 0) == dateTime27.equals(dateTime37));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        java.lang.String str62 = periodType59.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTime dateTime9 = dateTime2.withEarlierOffsetAtOverlap();
        int int10 = dateTime2.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime14 = dateTime2.toDateTime(dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime14", (dateTime2.compareTo(dateTime14) == 0) == dateTime2.equals(dateTime14));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.Duration duration25 = duration12.withMillis(1645513760253L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.Duration duration47 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) '#');
        int int48 = duration12.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant50 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2021);
        org.joda.time.Instant instant51 = instant9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime52 = instant9.toMutableDateTimeISO();
        org.joda.time.Instant instant54 = instant9.minus(1645513803059L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime52", (instant9.compareTo(mutableDateTime52) == 0) == instant9.equals(mutableDateTime52));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), 1L, periodType30, chronology31);
        java.lang.String str33 = periodType30.toString();
        java.lang.String str34 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513760165L, periodType30);
        int int36 = mutablePeriod35.getWeeks();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        mutablePeriod35.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration48.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime60);
        int int62 = mutablePeriod61.getSeconds();
        mutablePeriod61.addSeconds(115200000);
        org.joda.time.Period period65 = period43.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod61.add(readablePeriod66);
        mutablePeriod61.setMonths(63100366);
        mutablePeriod61.add(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.DateTime dateTime76 = dateTime73.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTime(chronology77);
        org.joda.time.DateTime dateTime79 = dateTime76.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod61, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime76);
        int int82 = dateTime76.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(63116635);
        org.joda.time.DateTime dateTime85 = dateTime76.withZone(dateTimeZone84);
        java.util.Locale locale87 = null;
        java.lang.String str88 = dateTimeZone84.getName(1645513860813L, locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime76 and dateTime85", (dateTime76.compareTo(dateTime85) == 0) == dateTime76.equals(dateTime85));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology20.months();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        java.lang.String str31 = dateTimeZone27.getName(1645513762160L);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        int int34 = dateTimeZone27.getStandardOffset(1645513761942L);
        int int36 = dateTimeZone27.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology37 = chronology20.withZone(dateTimeZone27);
        int int39 = dateTimeZone27.getOffset((long) 115200000);
        int int41 = dateTimeZone27.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTime dateTime42 = dateTime4.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime43 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        int int46 = localDateTime43.get(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.toDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes(0);
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears(37320000);
        org.joda.time.Instant instant60 = dateTime59.toInstant();
        org.joda.time.MutableDateTime mutableDateTime61 = instant60.toMutableDateTimeISO();
        org.joda.time.Instant instant62 = instant60.toInstant();
        org.joda.time.DateTime dateTime63 = localDateTime43.toDateTime((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime59 and instant62", (dateTime59.compareTo(instant62) == 0) == dateTime59.equals(instant62));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.Duration duration8 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime24.withField(dateTimeFieldType28, 25774);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(63112091);
        boolean boolean33 = duration8.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant34 = instant5.minus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant36 = instant5.plus(1100000L);
        org.joda.time.Instant instant38 = instant36.minus(1645513866201L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus(1645513764861L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        mutableInterval17.setInterval(100000L, 1645513759601L);
        long long25 = mutableInterval17.getStartMillis();
        org.joda.time.Duration duration26 = mutableInterval17.toDuration();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusMinutes(3);
        org.joda.time.Period period33 = period31.plusWeeks(17);
        org.joda.time.Duration duration34 = period33.toStandardDuration();
        mutableInterval17.setDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant16, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime43.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property54 = dateTime52.property(dateTimeFieldType53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        boolean boolean59 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) mutableInterval57);
        java.lang.Object obj60 = mutableInterval55.clone();
        org.joda.time.Chronology chronology61 = mutableInterval55.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.minuteOfDay();
        int int65 = dateTimeField63.getMinimumValue((long) 9);
        int int67 = dateTimeField63.getLeapAmount(1645513763885L);
        int int68 = dateTime52.get(dateTimeField63);
        org.joda.time.LocalTime localTime69 = dateTime52.toLocalTime();
        org.joda.time.Interval interval70 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateTime52);
        int int71 = instant15.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and instant13", (dateMidnight12.compareTo(instant13) == 0) == dateMidnight12.equals(instant13));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration27 = duration16.minus(0L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Duration duration36 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '#');
        int int37 = duration1.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.withEarlierOffsetAtOverlap();
        int int47 = dateTime39.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime51 = dateTime39.toDateTime(dateTimeZone50);
        org.joda.time.Period period52 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfDay(25842901);
        int int55 = dateTime54.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime51", (dateTime3.compareTo(dateTime51) == 0) == dateTime3.equals(dateTime51));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime46 = dateTime40.withField(dateTimeFieldType44, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime40.toString(dateTimeFormatter47);
        org.joda.time.Interval interval49 = interval3.withEnd((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant55 = dateTime54.toInstant();
        long long56 = instant55.getMillis();
        org.joda.time.Duration duration58 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval59.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = duration62.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.DateTime dateTime74 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = dateTime74.withZoneRetainFields(dateTimeZone76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime80 = dateTime74.withField(dateTimeFieldType78, 25774);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes(63112091);
        boolean boolean83 = duration58.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant84 = instant55.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Instant instant86 = instant55.withMillis((long) (-3600000));
        boolean boolean87 = dateTime40.isEqual((org.joda.time.ReadableInstant) instant86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and instant55", (dateTime54.compareTo(instant55) == 0) == dateTime54.equals(instant55));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1L), 1L, periodType27, chronology28);
        java.lang.String str30 = periodType27.toString();
        java.lang.String str31 = periodType27.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645513760165L, periodType27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant23, periodType27);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration47 = duration11.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration66 = duration51.toDuration();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        boolean boolean73 = mutableInterval67.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType75 = periodType74.withYearsRemoved();
        org.joda.time.Period period76 = mutableInterval67.toPeriod(periodType75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration66, periodType75);
        org.joda.time.Hours hours78 = duration66.toStandardHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        int int28 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone21);
        org.joda.time.DateTime dateTime30 = dateTime4.withZone(dateTimeZone21);
        int int32 = dateTimeZone21.getOffset(1645513959049L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        boolean boolean34 = property25.equals((java.lang.Object) dateTime27);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property36 = dateTime27.era();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        long long41 = dateTimeZone38.convertLocalToUTC(1645513778970L, false);
        long long45 = dateTimeZone38.convertLocalToUTC(1645513816283L, false, 1645513794412L);
        org.joda.time.DateTime dateTime46 = dateTime27.toDateTime(dateTimeZone38);
        java.lang.String str48 = dateTimeZone38.getName(1645513863734L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime46", (dateTime27.compareTo(dateTime46) == 0) == dateTime27.equals(dateTime46));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration11.minus(readableDuration35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, readableDuration35);
        org.joda.time.DateTime dateTime39 = dateTime7.minusHours(63105565);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths(3);
        org.joda.time.DateTime dateTime48 = dateTime44.plusSeconds(9);
        int int49 = dateTime44.getEra();
        int int50 = dateTime44.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Chronology chronology59 = chronology57.withUTC();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime dateTime64 = dateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime64.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay66 = dateTime65.toYearMonthDay();
        int[] intArray68 = chronology59.get((org.joda.time.ReadablePartial) yearMonthDay66, 1645513760770L);
        org.joda.time.Period period69 = org.joda.time.Period.ZERO;
        org.joda.time.Period period71 = period69.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean73 = period71.equals((java.lang.Object) dateTimeFieldType72);
        org.joda.time.Period period75 = period71.plusWeeks(17);
        int[] intArray78 = chronology59.get((org.joda.time.ReadablePeriod) period75, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime79 = dateTime44.toDateTime(chronology59);
        org.joda.time.DateTime dateTime81 = dateTime44.plusWeeks(63139010);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime79", (dateTime30.compareTo(dateTime79) == 0) == dateTime30.equals(dateTime79));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        mutableInterval26.setDurationBeforeEnd(1645513763192L);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval26.copy();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime dateTime38 = dateTime36.withTimeAtStartOfDay();
        boolean boolean39 = mutableInterval31.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant37", (dateTime4.compareTo(instant37) == 0) == dateTime4.equals(instant37));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 3, 1645513762121L, periodType19, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTime dateTime31 = dateTime9.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.clockhourOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 115200000, chronology27);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology27);
        int[] intArray35 = mutablePeriod34.getValues();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(0);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        org.joda.time.DateTime dateTime61 = dateTime44.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (short) 0);
        java.util.Locale locale62 = null;
        java.util.Calendar calendar63 = dateTime44.toCalendar(locale62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) locale62);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod34, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        boolean boolean67 = mutableInterval0.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTime dateTime72 = dateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime73 = dateTime72.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime76 = dateTime73.withZone(dateTimeZone75);
        org.joda.time.DateMidnight dateMidnight77 = dateTime76.toDateMidnight();
        org.joda.time.DateTime dateTime79 = dateTime76.minusHours(63101202);
        boolean boolean80 = mutableInterval0.equals((java.lang.Object) dateTime79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime72 and dateTime76", (dateTime72.compareTo(dateTime76) == 0) == dateTime72.equals(dateTime76));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.Instant instant14 = instant9.withDurationAdded(19044L, 25847168);
        org.joda.time.Instant instant16 = instant9.withMillis(1645513863930L);
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Interval interval29 = interval11.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant27", (dateTime14.compareTo(instant27) == 0) == dateTime14.equals(instant27));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 8, periodType8, chronology15);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration6, chronology15);
        int int19 = mutablePeriod4.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = durationFieldType21.getField(chronology28);
        mutablePeriod4.add(durationFieldType21, 0);
        boolean boolean34 = periodType0.isSupported(durationFieldType21);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay50 = dateTime49.toYearMonthDay();
        int[] intArray52 = chronology43.get((org.joda.time.ReadablePartial) yearMonthDay50, 1645513760770L);
        org.joda.time.DurationField durationField53 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField54 = chronology43.yearOfEra();
        org.joda.time.DurationField durationField55 = durationFieldType21.getField(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField31 and durationField53", Math.signum(durationField31.compareTo(durationField53)) == -Math.signum(durationField53.compareTo(durationField31)));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        java.util.Locale locale18 = null;
        int int19 = property16.getMaximumTextLength(locale18);
        java.lang.String str20 = property16.getName();
        boolean boolean21 = property16.isLeap();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType23 = periodType22.withMinutesRemoved();
        boolean boolean24 = property16.equals((java.lang.Object) periodType22);
        java.lang.String str25 = property16.getName();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        int int34 = dateTime32.getMinuteOfHour();
        org.joda.time.DateTime.Property property35 = dateTime32.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime32.plusWeeks(3);
        org.joda.time.DateTime.Property property38 = dateTime32.yearOfEra();
        int int39 = property16.compareTo((org.joda.time.ReadableInstant) dateTime32);
        int int40 = dateTime32.getDayOfMonth();
        boolean boolean41 = dateTime10.equals((java.lang.Object) int40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant12", (dateTime10.compareTo(instant12) == 0) == dateTime10.equals(instant12));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        org.joda.time.Instant instant41 = instant0.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant43 = instant0.withMillis((long) 63177910);
        long long44 = instant43.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Seconds seconds14 = period13.toStandardSeconds();
        int int15 = period13.getMillis();
        org.joda.time.DurationFieldType durationFieldType17 = period13.getFieldType(0);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType21 = periodType20.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 3, 1645513762121L, periodType21, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfMonth();
        boolean boolean33 = durationFieldType17.isSupported(chronology29);
        org.joda.time.Period period34 = new org.joda.time.Period(43200000L, periodType1, chronology29);
        int int35 = period34.getDays();
        org.joda.time.Seconds seconds36 = period34.toStandardSeconds();
        org.joda.time.PeriodType periodType37 = seconds36.getPeriodType();
        org.joda.time.PeriodType periodType38 = periodType37.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = dateTime47.toDateMidnight();
        org.joda.time.DateTime dateTime50 = dateTime47.minusHours(63101202);
        boolean boolean51 = periodType37.equals((java.lang.Object) 63101202);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime47", (dateTime43.compareTo(dateTime47) == 0) == dateTime43.equals(dateTime47));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant71 = dateTime40.toInstant();
        org.joda.time.Instant instant72 = instant71.toInstant();
        org.joda.time.Instant instant74 = instant71.minus(1645513766506L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant71", (dateTime32.compareTo(instant71) == 0) == dateTime32.equals(instant71));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withZoneRetainFields(dateTimeZone30);
        int int32 = dateTime28.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = dateTime28.withDurationAdded(1645513771467L, 1);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        boolean boolean38 = mutableInterval37.containsNow();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withEra((int) (byte) 1);
        boolean boolean44 = mutableInterval37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        boolean boolean55 = mutableInterval45.contains((org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime54.getMillisOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        mutableInterval37.setEnd((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime57.getMillisOfDay();
        org.joda.time.DateTime.Property property60 = dateTime57.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.DateTime dateTime65 = dateTime62.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime(chronology66);
        org.joda.time.DateTime dateTime68 = dateTime65.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int70 = dateTime68.get(dateTimeFieldType69);
        int int71 = dateTime57.get(dateTimeFieldType69);
        int int72 = dateTime28.get(dateTimeFieldType69);
        int int73 = instant12.compareTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean75 = dateTime28.isBefore(1645513989118L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant12", (dateTime10.compareTo(instant12) == 0) == dateTime10.equals(instant12));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(63116635);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone11);
        int int13 = dateTime4.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone28.getShortName(1645513771104L, locale30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645513759301L);
        java.lang.String str38 = dateTimeZone34.getName(1645513762160L);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        long long42 = dateTimeZone34.adjustOffset(1645513782262L, true);
        long long44 = dateTimeZone28.getMillisKeepLocal(dateTimeZone34, 1645513795950L);
        boolean boolean46 = dateTimeZone28.isStandardOffset(1645513815432L);
        org.joda.time.Chronology chronology47 = chronology20.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField48 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField49 = chronology20.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField49, and durationField23", !(durationField23.compareTo(durationField49) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField49.compareTo(durationField23))));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((java.lang.Object) 1645513795687L);
        org.joda.time.Instant instant64 = instant39.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime65 = instant64.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, readableInstant26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant43 = instant37.withDurationAdded(1645513882617L, 1053);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.Instant instant52 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration50, 63190);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(40, 52, (int) (byte) 100, 63090717, (-1), 63102, 63098347, 63102368);
        mutablePeriod61.setDays(63090717);
        org.joda.time.Period period64 = mutablePeriod61.toPeriod();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant52, (org.joda.time.ReadablePeriod) mutablePeriod61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime39", (instant37.compareTo(dateTime39) == 0) == instant37.equals(dateTime39));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration30 = duration19.minus(0L);
        long long31 = duration19.getStandardHours();
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Instant instant33 = instant1.plus((org.joda.time.ReadableDuration) duration19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant1", (dateTime10.compareTo(instant1) == 0) == dateTime10.equals(instant1));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str1 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Instant instant9 = instant7.toInstant();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) 1645513782103L);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        boolean boolean14 = mutableInterval13.containsNow();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withEra((int) (byte) 1);
        boolean boolean20 = mutableInterval13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        boolean boolean31 = mutableInterval21.contains((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime33.getMillisOfDay();
        org.joda.time.DateTime.Property property36 = dateTime33.secondOfMinute();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfWeek();
        int int38 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property51 = dateTime43.weekyear();
        org.joda.time.DateTime dateTime53 = property51.setCopy((int) (byte) 0);
        int int54 = property51.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property51.getFieldType();
        org.joda.time.DateTime.Property property56 = dateTime39.property(dateTimeFieldType55);
        boolean boolean57 = dateTime11.isSupported(dateTimeFieldType55);
        int int58 = instant7.get(dateTimeFieldType55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.Instant instant14 = instant9.withDurationAdded(19044L, 25847168);
        org.joda.time.Instant instant16 = instant9.withMillis(1645513863930L);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (short) 0);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration58 = duration47.minus(0L);
        boolean boolean59 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration47);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration43);
        mutablePeriod19.addMonths(52);
        mutablePeriod19.addWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime.Property property68 = dateTime66.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Interval interval75 = interval69.withDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Interval interval76 = interval69.toInterval();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval69);
        mutablePeriod19.setHours(27425229);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType80.getRangeDurationType();
        mutablePeriod19.set(durationFieldType81, 0);
        mutablePeriod19.addMillis(63232091);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadablePeriod) mutablePeriod19);
        long long87 = interval86.getEndMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 3, 1645513762121L, periodType15, chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period(0L, chronology23);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 0L, chronology23);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.clockhourOfHalfday();
        org.joda.time.Period period32 = new org.joda.time.Period(1645513785479L, chronology23);
        org.joda.time.DurationField durationField33 = chronology23.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField33, and durationField26", !(durationField26.compareTo(durationField33) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField33.compareTo(durationField26))));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645513760253L);
        org.joda.time.Instant instant56 = instant39.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant39, periodType59);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone64);
        org.joda.time.Period period66 = org.joda.time.Period.ZERO;
        org.joda.time.Period period68 = period66.minusSeconds((int) (short) 1);
        org.joda.time.Period period70 = period66.plusWeeks((int) (short) -1);
        org.joda.time.Period period72 = period66.minusMillis(4);
        org.joda.time.Interval interval73 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Duration duration74 = interval73.toDuration();
        org.joda.time.Duration duration75 = duration9.minus((org.joda.time.ReadableDuration) duration74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant39", (dateTime11.compareTo(instant39) == 0) == dateTime11.equals(instant39));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime13 = dateTime1.toDateTime(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getNameKey(1645513842735L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime13", (dateTime1.compareTo(dateTime13) == 0) == dateTime1.equals(dateTime13));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType93.getDurationType();
        java.lang.String str95 = dateTimeFieldType93.getName();
        boolean boolean96 = instant5.isSupported(dateTimeFieldType93);
        org.joda.time.MutableDateTime mutableDateTime97 = instant5.toMutableDateTime();
        org.joda.time.Chronology chronology98 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField99 = chronology98.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime14.withFieldAdded(durationFieldType21, 221);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withZoneRetainFields(dateTimeZone41);
        int int43 = dateTime39.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime();
        int int45 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime47 = dateTime14.plus(1645513830009L);
        org.joda.time.Instant instant48 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime50 = dateTime14.plusMillis(45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant48", (dateTime4.compareTo(instant48) == 0) == dateTime4.equals(instant48));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime6 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours(63101202);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime19.withMillis((long) (short) 0);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.Chronology chronology35 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.minuteOfDay();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology33);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime19.toMutableDateTime(chronology33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval(1645513783262L, 1645513872180L, chronology33);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime12.toMutableDateTime(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTime.Property property39 = dateTime11.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int41 = dateTime11.get(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime46.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        boolean boolean58 = dateTime56.isBefore((-1L));
        int int59 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int61 = dateTime56.get(dateTimeFieldType60);
        java.lang.String str62 = dateTime56.toString();
        org.joda.time.DateTime dateTime64 = dateTime56.withYearOfEra(9);
        org.joda.time.DateTime dateTime66 = dateTime56.plusHours(20);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType68 = periodType67.withYearsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withMillisRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime56, periodType69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        int int75 = dateTimeZone73.getStandardOffset((long) (-292275054));
        java.lang.String str77 = dateTimeZone73.getName(1645513773422L);
        org.joda.time.DateTime dateTime78 = dateTime11.withZone(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str84 = dateTimeZone82.getNameKey(1645513759301L);
        java.lang.String str86 = dateTimeZone82.getName(1645513762160L);
        java.util.TimeZone timeZone87 = dateTimeZone82.toTimeZone();
        int int89 = dateTimeZone82.getStandardOffset(1645513761942L);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(1645513845763L, dateTimeZone82);
        boolean boolean91 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime78", (dateTime11.compareTo(dateTime78) == 0) == dateTime11.equals(dateTime78));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        org.joda.time.Instant instant15 = instant13.toInstant();
        org.joda.time.Chronology chronology16 = instant13.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.Instant instant14 = instant9.withDurationAdded(19044L, 25847168);
        org.joda.time.Instant instant16 = instant14.withMillis(1645513925010L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        java.lang.String str16 = property15.getName();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21);
        boolean boolean36 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone39);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period41.minusSeconds((int) (short) 1);
        org.joda.time.Period period45 = period41.plusWeeks((int) (short) -1);
        org.joda.time.Period period47 = period41.minusMillis(4);
        org.joda.time.Interval interval48 = interval40.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        boolean boolean50 = interval3.contains((org.joda.time.ReadableInterval) interval48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        long long53 = interval52.toDurationMillis();
        boolean boolean54 = interval3.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.MutableInterval mutableInterval55 = interval52.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval66 = interval60.withDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval67 = interval60.toInterval();
        org.joda.time.Interval interval69 = interval67.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime70 = interval67.getStart();
        org.joda.time.Instant instant71 = dateTime70.toInstant();
        long long72 = dateTime70.getMillis();
        boolean boolean73 = interval52.contains((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant71", (dateTime17.compareTo(instant71) == 0) == dateTime17.equals(instant71));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = mutableInterval0.isBeforeNow();
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.Duration duration39 = duration26.withMillis(1645513760253L);
        org.joda.time.Instant instant40 = instant23.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        boolean boolean47 = dateTime45.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        boolean boolean66 = dateTime52.isEqual((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime68 = mutableInterval67.getEnd();
        java.util.GregorianCalendar gregorianCalendar69 = dateTime68.toGregorianCalendar();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant23, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime24", (instant23.compareTo(mutableDateTime24) == 0) == instant23.equals(mutableDateTime24));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, readableInstant26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant43 = instant37.withDurationAdded(1645513882617L, 1053);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.Instant instant52 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration50, 63190);
        long long53 = duration50.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime39", (instant37.compareTo(dateTime39) == 0) == instant37.equals(dateTime39));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513763016L);
        boolean boolean5 = instant3.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.Interval interval7 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) instant3);
        org.joda.time.Interval interval9 = interval7.withStartMillis(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((java.lang.Object) dateTime7);
        org.joda.time.DateTime dateTime11 = dateTime7.plus(1645513771611L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant9", (dateTime7.compareTo(instant9) == 0) == dateTime7.equals(instant9));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 3, 1645513762121L, periodType15, chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period(0L, chronology23);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 0L, chronology23);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.clockhourOfHalfday();
        org.joda.time.Period period32 = new org.joda.time.Period(1645513785479L, chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.millisOfSecond();
        org.joda.time.DurationField durationField34 = chronology23.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField34, and durationField26", !(durationField26.compareTo(durationField34) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField34.compareTo(durationField26))));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime.Property property26 = dateTime24.yearOfEra();
        java.lang.String str27 = property26.getName();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = duration32.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32);
        boolean boolean47 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period58 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean59 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant61 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.Instant instant63 = instant1.minus(1645514016264L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant1", (dateTime10.compareTo(instant1) == 0) == dateTime10.equals(instant1));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.DateTime dateTime29 = mutableInterval26.getEnd();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 3, 1645513762121L, periodType43, chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        org.joda.time.DateTime dateTime55 = dateTime33.toDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.clockhourOfDay();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 115200000, chronology51);
        org.joda.time.DateTimeField dateTimeField58 = chronology51.hourOfHalfday();
        org.joda.time.Period period59 = new org.joda.time.Period(1645513828888L, chronology51);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period63 = org.joda.time.Period.ZERO;
        org.joda.time.Period period65 = period63.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType66 = period65.getPeriodType();
        org.joda.time.PeriodType periodType67 = periodType66.withWeeksRemoved();
        org.joda.time.PeriodType periodType68 = periodType66.withMillisRemoved();
        org.joda.time.PeriodType periodType69 = periodType66.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.months();
        boolean boolean71 = periodType66.isSupported(durationFieldType70);
        java.lang.Object obj72 = null;
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType75 = periodType74.withYearsRemoved();
        org.joda.time.PeriodType periodType76 = periodType74.withSecondsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(1645513767187L, periodType77);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone81);
        org.joda.time.Period period83 = org.joda.time.Period.ZERO;
        org.joda.time.Period period85 = period83.minusSeconds((int) (short) 1);
        org.joda.time.Period period87 = period83.plusWeeks((int) (short) -1);
        org.joda.time.Period period89 = period83.minusMillis(4);
        org.joda.time.Interval interval90 = interval82.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        org.joda.time.Chronology chronology91 = interval90.getChronology();
        java.lang.String str92 = chronology91.toString();
        org.joda.time.DurationField durationField93 = chronology91.weekyears();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(obj72, periodType77, chronology91);
        boolean boolean95 = durationFieldType70.isSupported(chronology91);
        org.joda.time.Interval interval96 = new org.joda.time.Interval((long) 25838284, (long) 63145797, chronology91);
        boolean boolean97 = interval60.overlaps((org.joda.time.ReadableInterval) interval96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField54 and durationField93", Math.signum(durationField54.compareTo(durationField93)) == -Math.signum(durationField93.compareTo(durationField54)));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        boolean boolean13 = dateTimeField10.isSupported();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        boolean boolean20 = dateTime18.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        boolean boolean39 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getEnd();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfMonth(10);
        org.joda.time.Duration duration46 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod();
        mutablePeriod48.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        boolean boolean61 = mutableInterval51.contains((org.joda.time.ReadableInstant) dateTime60);
        mutablePeriod48.setPeriod((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval69.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period74 = duration72.toPeriod();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval75.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Period period80 = duration78.toPeriod();
        boolean boolean81 = duration72.isLongerThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration72, periodType82);
        long long84 = duration72.getMillis();
        mutablePeriod48.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime dateTime86 = dateTime43.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDateTime localDateTime87 = dateTime86.toLocalDateTime();
        java.util.Locale locale89 = null;
        java.lang.String str90 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime87, 63184900, locale89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTimeISO();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.Duration duration50 = duration37.withMillis(1645513760253L);
        org.joda.time.Instant instant51 = instant34.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        boolean boolean58 = dateTime56.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.toDateTime(chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.DateTime dateTime74 = dateTime67.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes(0);
        boolean boolean77 = dateTime63.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime79 = mutableInterval78.getEnd();
        java.util.GregorianCalendar gregorianCalendar80 = dateTime79.toGregorianCalendar();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) instant34);
        boolean boolean83 = interval82.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and mutableDateTime35", (instant34.compareTo(mutableDateTime35) == 0) == instant34.equals(mutableDateTime35));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period(0L, chronology20);
        org.joda.time.DurationField durationField27 = chronology20.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField27, and durationField23", !(durationField23.compareTo(durationField27) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField27.compareTo(durationField23))));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        org.joda.time.Interval interval44 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.DurationField durationField47 = chronology45.weekyears();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.millisOfDay();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.millis();
        java.lang.String str51 = periodType50.getName();
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period52.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean56 = period54.equals((java.lang.Object) dateTimeFieldType55);
        org.joda.time.Period period58 = period54.plusWeeks(17);
        org.joda.time.Period period59 = period54.toPeriod();
        boolean boolean60 = periodType50.equals((java.lang.Object) period59);
        org.joda.time.Period period62 = period59.plusDays(2);
        org.joda.time.Period period64 = period62.minusYears(63121447);
        int[] intArray66 = chronology45.get((org.joda.time.ReadablePeriod) period64, 1645513807827L);
        org.joda.time.Chronology chronology67 = chronology45.withUTC();
        mutablePeriod30.setPeriod(1645513993034L, 1645513904901L, chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField25 and durationField47", Math.signum(durationField25.compareTo(durationField47)) == -Math.signum(durationField47.compareTo(durationField25)));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime14.withFieldAdded(durationFieldType21, 221);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withZoneRetainFields(dateTimeZone41);
        int int43 = dateTime39.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime();
        int int45 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime47 = dateTime14.plus(1645513830009L);
        org.joda.time.Instant instant48 = dateTime14.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime.Property property52 = dateTime50.yearOfEra();
        org.joda.time.DateTime dateTime53 = property52.roundFloorCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(63088836);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis(63206248);
        int int58 = instant48.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime60 = dateTime55.minusMinutes(63149071);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant48", (dateTime4.compareTo(instant48) == 0) == dateTime4.equals(instant48));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusMinutes(3);
        org.joda.time.Period period16 = period14.plusWeeks(17);
        org.joda.time.Duration duration17 = period16.toStandardDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 6);
        int int34 = dateTime33.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = duration44.toPeriod();
        boolean boolean47 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.withZoneRetainFields(dateTimeZone65);
        int int67 = dateTime63.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime63.toMutableDateTime();
        org.joda.time.Period period69 = duration38.toPeriodTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period72 = period69.withFieldAdded(durationFieldType70, 27425229);
        java.lang.String str73 = period72.toString();
        org.joda.time.DateTime dateTime74 = dateTime33.minus((org.joda.time.ReadablePeriod) period72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime56", (dateTime28.compareTo(dateTime56) == 0) == dateTime28.equals(dateTime56));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        int int9 = dateTime8.getHourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 221);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = duration17.plus((long) 8);
        org.joda.time.Instant instant21 = instant12.minus((org.joda.time.ReadableDuration) duration17);
        boolean boolean22 = dateTime8.isAfter((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant12", (dateTime1.compareTo(instant12) == 0) == dateTime1.equals(instant12));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.DateTime dateTime14 = property3.getDateTime();
        int int15 = dateTime14.getMonthOfYear();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Instant instant25 = instant17.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime26 = instant17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = instant17.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        java.lang.String str32 = property31.getName();
        org.joda.time.DateTime dateTime33 = property31.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        boolean boolean53 = dateTime33.isSupported(dateTimeFieldType52);
        boolean boolean54 = dateTime33.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant58 = instant17.withDurationAdded(1645513943753L, 63148);
        boolean boolean59 = dateTime14.isBefore((org.joda.time.ReadableInstant) instant58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime26", (instant17.compareTo(dateTime26) == 0) == instant17.equals(dateTime26));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        long long51 = duration48.getStandardSeconds();
        org.joda.time.DateTime dateTime52 = dateTime23.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Seconds seconds53 = duration48.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant56.minus(1645513772143L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration67.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime79.withZoneRetainFields(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        boolean boolean85 = dateTime82.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime87 = dateTime82.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime89 = instant63.toDateTimeISO();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType91 = periodType90.withYearsRemoved();
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.Period period93 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) instant63, periodType90);
        int int94 = period93.getYears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant63 and dateTime89", (instant63.compareTo(dateTime89) == 0) == instant63.equals(dateTime89));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTime dateTime41 = dateTime4.plusWeeks(63139010);
        org.joda.time.DateTime dateTime43 = dateTime41.minusYears(63345010);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime.Property property26 = dateTime24.yearOfEra();
        java.lang.String str27 = property26.getName();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = duration32.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32);
        boolean boolean47 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period58 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean59 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant61 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant61 and dateTime10", (instant61.compareTo(dateTime10) == 0) == instant61.equals(dateTime10));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration6.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withZoneRetainFields(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        boolean boolean24 = dateTime21.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime26 = dateTime21.withYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime21.toString(dateTimeFormatter27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = dateTime21.isAfter(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime.Property property34 = dateTime32.yearOfEra();
        java.lang.String str35 = property34.getName();
        org.joda.time.DateTime dateTime36 = property34.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = duration40.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        long long66 = duration56.getMillis();
        long long67 = duration56.getStandardMinutes();
        org.joda.time.Duration duration68 = duration56.toDuration();
        boolean boolean69 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration40.withMillis((long) (byte) 0);
        org.joda.time.DateTime dateTime72 = dateTime21.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant73 = instant0.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period74 = duration71.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime12 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.plus((long) 8);
        org.joda.time.Instant instant23 = instant15.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        java.lang.String str26 = dateTimeZone24.getName(52L);
        int int28 = dateTimeZone24.getOffsetFromLocal(1645513779629L);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(1645513796328L, dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime12.toDateTime(dateTimeZone24);
        long long32 = dateTimeZone24.convertUTCToLocal(1645513845688L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime30", (dateTime12.compareTo(dateTime30) == 0) == dateTime12.equals(dateTime30));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant39 = instant37.toInstant();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusSeconds((int) (byte) 10);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period64 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime65 = dateTime62.toLocalDateTime();
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.MutableDateTime mutableDateTime67 = instant37.toMutableDateTime(chronology66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant37", (dateTime35.compareTo(instant37) == 0) == dateTime35.equals(instant37));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645513759301L);
        int int11 = dateTimeZone7.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours(52L);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(1645513763885L);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        mutableInterval20.setInterval(100000L, 1645513759601L);
        long long28 = mutableInterval20.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = interval33.withDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        mutableInterval20.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration37);
        boolean boolean42 = duration16.isEqual((org.joda.time.ReadableDuration) duration37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone18);
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period20.minusSeconds((int) (short) 1);
        org.joda.time.Period period24 = period20.plusWeeks((int) (short) -1);
        org.joda.time.Period period26 = period20.minusMillis(4);
        org.joda.time.Interval interval27 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513766040L, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645513759301L);
        int int37 = dateTimeZone33.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology38 = chronology28.withZone(dateTimeZone33);
        long long40 = dateTimeZone33.nextTransition(1645513765246L);
        org.joda.time.DateTime dateTime41 = dateTime14.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        long long44 = dateTimeZone33.previousTransition(1645513786292L);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone33);
        java.lang.String str47 = dateTimeZone33.getShortName(1645513769850L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime45", (dateTime1.compareTo(dateTime45) == 0) == dateTime1.equals(dateTime45));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.Instant instant28 = dateTime25.toInstant();
        org.joda.time.Chronology chronology29 = dateTime25.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant28", (dateTime25.compareTo(instant28) == 0) == dateTime25.equals(instant28));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant92 = instant5.withDurationAdded(1645513773042L, 1051);
        org.joda.time.DateTime dateTime93 = instant5.toDateTimeISO();
        boolean boolean95 = dateTime93.isBefore(1645513895250L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513763016L);
        boolean boolean5 = instant3.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.Interval interval7 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) instant3);
        org.joda.time.Interval interval9 = interval7.withEndMillis(1645513786393L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime6", (instant3.compareTo(dateTime6) == 0) == instant3.equals(dateTime6));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        java.lang.String str15 = property14.getName();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration20);
        boolean boolean35 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration20);
        java.lang.String str36 = duration1.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone37.getShortName(1645513771104L, locale39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str45 = dateTimeZone43.getNameKey(1645513759301L);
        java.lang.String str47 = dateTimeZone43.getName(1645513762160L);
        java.util.TimeZone timeZone48 = dateTimeZone43.toTimeZone();
        long long51 = dateTimeZone43.adjustOffset(1645513782262L, true);
        long long53 = dateTimeZone37.getMillisKeepLocal(dateTimeZone43, 1645513795950L);
        int int55 = dateTimeZone37.getOffsetFromLocal(1645513837824L);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone37);
        boolean boolean57 = duration1.equals((java.lang.Object) dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime56", (dateTime3.compareTo(dateTime56) == 0) == dateTime3.equals(dateTime56));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTime dateTime41 = dateTime4.plusWeeks(63139010);
        org.joda.time.DateTime.Property property42 = dateTime41.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minus(1645513775904L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.DateTime.Property property18 = dateTime16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean27 = dateTime23.isSupported(dateTimeFieldType26);
        int int28 = dateTime16.get(dateTimeFieldType26);
        int int29 = dateTime9.get(dateTimeFieldType26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant17", (dateTime16.compareTo(instant17) == 0) == dateTime16.equals(instant17));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.plus((long) 8);
        org.joda.time.Instant instant26 = instant17.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Instant instant27 = instant17.toInstant();
        org.joda.time.Duration duration28 = period16.toDurationTo((org.joda.time.ReadableInstant) instant27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime18", (instant27.compareTo(mutableDateTime18) == 0) == instant27.equals(mutableDateTime18));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getMonthOfYear();
        org.joda.time.Instant instant13 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        org.joda.time.Interval interval28 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645513766040L, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(1645513832302L, chronology29);
        int int33 = instant13.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.plusSeconds((int) (byte) 10);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period58 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration35.minus(readableDuration59);
        org.joda.time.Days days61 = duration35.toStandardDays();
        org.joda.time.Duration duration63 = duration35.plus(1645513839400L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant13", (dateTime10.compareTo(instant13) == 0) == dateTime10.equals(instant13));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withYear(1);
        org.joda.time.LocalDateTime localDateTime24 = dateTime18.toLocalDateTime();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime40.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime40.toMutableDateTime();
        int int47 = mutableDateTime46.getMinuteOfDay();
        org.joda.time.Chronology chronology48 = mutableDateTime46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.centuryOfEra();
        org.joda.time.DurationField durationField51 = chronology48.weekyears();
        org.joda.time.DateTime dateTime52 = dateTime18.withChronology(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField49 and durationField51", (durationField49.compareTo(durationField51) == 0) == durationField49.equals(durationField51));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period30 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration32 = duration21.minus(0L);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = duration36.plus((long) 8);
        org.joda.time.Duration duration41 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime52 = dateTime46.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime52.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime53, periodType54);
        int int56 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime10.withZone(dateTimeZone18);
        java.lang.String str59 = dateTimeZone18.getNameKey(1645513901552L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        boolean boolean29 = dateTime26.isAfterNow();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.millisOfSecond();
        org.joda.time.DateTime dateTime39 = dateTime26.withChronology(chronology36);
        int int40 = instant17.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        boolean boolean13 = dateTimeField10.isSupported();
        java.util.Locale locale14 = null;
        int int15 = dateTimeField10.getMaximumShortTextLength(locale14);
        int int17 = dateTimeField10.get(1645513911446L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        boolean boolean24 = dateTime22.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        boolean boolean43 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = mutableInterval44.getEnd();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth(10);
        org.joda.time.TimeOfDay timeOfDay48 = dateTime47.toTimeOfDay();
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) timeOfDay48, 63336, locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime19", (dateTime9.compareTo(dateTime19) == 0) == dateTime9.equals(dateTime19));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration24 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days25 = duration24.toStandardDays();
        org.joda.time.Days days26 = duration24.toStandardDays();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears(37320000);
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        org.joda.time.DateTime dateTime43 = dateTime40.minusYears(63111089);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period44.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType47 = period46.getPeriodType();
        org.joda.time.PeriodType periodType48 = periodType47.withWeeksRemoved();
        org.joda.time.PeriodType periodType49 = periodType47.withMillisRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.DateTime.Property property51 = dateTime40.millisOfDay();
        java.util.Locale locale52 = null;
        int int53 = property51.getMaximumTextLength(locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and instant41", (dateTime40.compareTo(instant41) == 0) == dateTime40.equals(instant41));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        long long11 = durationField9.getValueAsLong((-37320000L));
        java.lang.String str12 = durationField9.getName();
        long long13 = durationField9.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType14 = durationField9.getType();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        long long32 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology23);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType14.getField(chronology36);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 8, periodType46, chronology53);
        mutablePeriod42.setPeriod((org.joda.time.ReadableDuration) duration44, chronology53);
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyear();
        org.joda.time.Period period58 = new org.joda.time.Period(1645513783635L, chronology53);
        boolean boolean59 = durationFieldType14.isSupported(chronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField38", (durationField9.compareTo(durationField38) == 0) == durationField9.equals(durationField38));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        int int28 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone21);
        org.joda.time.DateTime dateTime30 = dateTime4.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime32 = dateTime4.withMillis(1645513928420L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        mutableInterval5.setInterval(100000L, 1645513759601L);
        long long13 = mutableInterval5.getStartMillis();
        org.joda.time.Duration duration14 = mutableInterval5.toDuration();
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.Period period19 = period15.plusMinutes(3);
        org.joda.time.Period period21 = period19.plusWeeks(17);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        mutableInterval5.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTime dateTime38 = dateTime33.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 6);
        int int39 = period36.getSeconds();
        org.joda.time.DateTime dateTime40 = dateTime1.minus((org.joda.time.ReadablePeriod) period36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime33", (dateTime1.compareTo(dateTime33) == 0) == dateTime1.equals(dateTime33));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMillis(27425229);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 3, 1645513762121L, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str50 = dateTimeZone48.getNameKey(1645513759301L);
        java.lang.String str52 = dateTimeZone48.getName(1645513762160L);
        java.util.TimeZone timeZone53 = dateTimeZone48.toTimeZone();
        int int55 = dateTimeZone48.getStandardOffset(1645513761942L);
        int int57 = dateTimeZone48.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology58 = chronology41.withZone(dateTimeZone48);
        int int60 = dateTimeZone48.getOffset((long) 115200000);
        java.lang.String str62 = dateTimeZone48.getShortName(1645513770717L);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime25.toMutableDateTime(dateTimeZone48);
        boolean boolean64 = dateTimeZone48.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime63", (dateTime17.compareTo(mutableDateTime63) == 0) == dateTime17.equals(mutableDateTime63));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Chronology chronology72 = mutableInterval18.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withEra((int) (byte) 1);
        boolean boolean14 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        boolean boolean25 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getMillisOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime27.secondOfMinute();
        org.joda.time.DateTime.Property property31 = dateTime27.era();
        org.joda.time.DateTime dateTime32 = property31.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime32.toString(dateTimeFormatter33);
        org.joda.time.DateTime dateTime36 = dateTime32.minusMillis(27425229);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType40 = periodType39.withYearsRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 3, 1645513762121L, periodType40, chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfMonth();
        org.joda.time.DurationField durationField52 = chronology48.months();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str57 = dateTimeZone55.getNameKey(1645513759301L);
        java.lang.String str59 = dateTimeZone55.getName(1645513762160L);
        java.util.TimeZone timeZone60 = dateTimeZone55.toTimeZone();
        int int62 = dateTimeZone55.getStandardOffset(1645513761942L);
        int int64 = dateTimeZone55.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology65 = chronology48.withZone(dateTimeZone55);
        int int67 = dateTimeZone55.getOffset((long) 115200000);
        java.lang.String str69 = dateTimeZone55.getShortName(1645513770717L);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime32.toMutableDateTime(dateTimeZone55);
        long long72 = dateTimeZone55.previousTransition(1645513813526L);
        java.lang.String str74 = dateTimeZone55.getShortName(1645513846333L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.DateTime dateTime76 = dateTime4.toDateTime(dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime70", (dateTime24.compareTo(mutableDateTime70) == 0) == dateTime24.equals(mutableDateTime70));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        boolean boolean14 = instant12.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime15 = instant12.toDateTimeISO();
        long long16 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (short) 0);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration58 = duration47.minus(0L);
        boolean boolean59 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration47);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1L), 1L, periodType66, chronology67);
        java.lang.String str69 = periodType66.toString();
        java.lang.String str70 = periodType66.getName();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1645513760165L, periodType66);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType66, chronology78);
        org.joda.time.Period period80 = duration43.toPeriod(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime15.toDateTime(chronology78);
        org.joda.time.DateTime dateTime83 = dateTime15.plusMillis((-8));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime15", (instant12.compareTo(dateTime15) == 0) == instant12.equals(dateTime15));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        int int18 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime14.minusMillis(22);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant12", (dateTime10.compareTo(instant12) == 0) == dateTime10.equals(instant12));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval10.copy();
        mutableInterval11.setEndMillis(1645513775498L);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        int[] intArray31 = chronology22.get((org.joda.time.ReadablePartial) yearMonthDay29, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField33 = chronology22.hours();
        org.joda.time.DateTimeField dateTimeField34 = chronology22.clockhourOfHalfday();
        mutableInterval11.setChronology(chronology22);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime9.toMutableDateTime(chronology22);
        int int37 = dateTime9.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime36", (dateTime9.compareTo(mutableDateTime36) == 0) == dateTime9.equals(mutableDateTime36));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        long long8 = mutableInterval6.getEndMillis();
        boolean boolean9 = mutableInterval6.containsNow();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.DateTime dateTime50 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        boolean boolean64 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTime dateTime70 = dateTime67.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMinutes(0);
        boolean boolean84 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (short) 10);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant89 = instant5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant91 = instant89.minus(1645513902782L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        int[] intArray30 = mutablePeriod29.getValues();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.DateTime dateTime56 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (short) 0);
        java.util.Locale locale57 = null;
        java.util.Calendar calendar58 = dateTime39.toCalendar(locale57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) locale57);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod29, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.DateTime dateTime66 = dateTime63.withMillisOfSecond((int) (short) 10);
        int int67 = dateTime66.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property68 = dateTime66.millisOfDay();
        org.joda.time.DurationField durationField69 = property68.getRangeDurationField();
        org.joda.time.DateTime dateTime70 = property68.roundHalfFloorCopy();
        int int71 = dateTime70.getDayOfYear();
        boolean boolean72 = interval61.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField25 and durationField69", Math.signum(durationField25.compareTo(durationField69)) == -Math.signum(durationField69.compareTo(durationField25)));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.hourOfHalfday();
        boolean boolean25 = dateTimeField24.isLenient();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeField24.getAsText(63105, locale27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(4);
        org.joda.time.LocalDate localDate38 = dateTime35.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.joda.time.DurationField durationField62 = dateTimeField61.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay69 = dateTime68.toYearMonthDay();
        int int70 = yearMonthDay69.size();
        int[] intArray75 = new int[] { 40, 40, '#', 10 };
        int int76 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay69, intArray75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay53, (org.joda.time.ReadablePartial) yearMonthDay69);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay46, (org.joda.time.ReadablePartial) yearMonthDay53, periodType78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) yearMonthDay53);
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDate38, 63131081, locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField62", Math.signum(durationField22.compareTo(durationField62)) == -Math.signum(durationField62.compareTo(durationField22)));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusMinutes(3);
        org.joda.time.Period period16 = period14.plusWeeks(17);
        org.joda.time.Duration duration17 = period16.toStandardDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime28.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime35.withEarlierOffsetAtOverlap();
        int int40 = dateTime39.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.DateTime dateTime43 = dateTime39.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth(6);
        int int48 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime45);
        long long50 = dateTimeZone42.convertUTCToLocal(1645513878440L);
        org.joda.time.DateTime dateTime51 = dateTime28.toDateTime(dateTimeZone42);
        org.joda.time.Period period53 = org.joda.time.Period.years(63129534);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadablePeriod) period53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime32", (dateTime28.compareTo(dateTime32) == 0) == dateTime28.equals(dateTime32));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType3.isSupported(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime1.withFieldAdded(durationFieldType3, 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.toString();
        org.joda.time.DurationField durationField17 = property12.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property12.getFieldType();
        int int19 = dateTime8.get(dateTimeFieldType18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        boolean boolean30 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(366);
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Seconds seconds45 = period44.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod46 = period44.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period49 = period44.withFieldAdded(durationFieldType47, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.minus(1645513768963L);
        org.joda.time.DateTime dateTime58 = dateTime54.minusYears((int) (byte) 0);
        org.joda.time.Duration duration59 = period49.toDurationFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration59, readableInstant60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime33", (dateTime1.compareTo(dateTime33) == 0) == dateTime1.equals(dateTime33));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        int int28 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone21);
        org.joda.time.DateTime dateTime30 = dateTime4.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str40 = dateTimeZone38.getNameKey(1645513759301L);
        int int42 = dateTimeZone38.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime35.toMutableDateTime(dateTimeZone38);
        java.lang.String str44 = dateTimeZone38.getID();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime67 = dateTime65.plusSeconds((int) (byte) 10);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Period period69 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDateTime localDateTime70 = dateTime67.toLocalDateTime();
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        boolean boolean72 = dateTimeZone38.isLocalDateTimeGap(localDateTime70);
        long long74 = dateTimeZone38.convertUTCToLocal(1645513981741L);
        org.joda.time.DateTime dateTime75 = dateTime30.toDateTime(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime75", (instant1.compareTo(dateTime75) == 0) == instant1.equals(dateTime75));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, readableInstant26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant43 = instant37.withDurationAdded(1645513882617L, 1053);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.Instant instant52 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration50, 63190);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval53.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = duration56.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime dateTime68 = dateTime61.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime68.withZoneRetainFields(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        boolean boolean74 = dateTime71.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime76 = dateTime71.withYear(1);
        org.joda.time.DateTime dateTime77 = dateTime71.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(63113468);
        org.joda.time.Interval interval80 = duration50.toIntervalFrom((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime39", (instant37.compareTo(dateTime39) == 0) == instant37.equals(dateTime39));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        long long2 = interval1.toDurationMillis();
        org.joda.time.Interval interval3 = interval1.toInterval();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        long long15 = duration5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(3);
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(9);
        int int25 = dateTime20.getEra();
        int int26 = dateTime20.getSecondOfDay();
        org.joda.time.Interval interval27 = duration5.toIntervalFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(4);
        org.joda.time.LocalDate localDate47 = dateTime44.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType37.getField(chronology48);
        org.joda.time.DurationField durationField50 = chronology48.years();
        java.lang.String str51 = chronology48.toString();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTime();
        org.joda.time.Duration duration54 = mutablePeriod36.toDurationTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Interval interval55 = interval3.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime52", (dateTime7.compareTo(dateTime52) == 0) == dateTime7.equals(dateTime52));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth(6);
        org.joda.time.LocalDate localDate4 = dateTime1.toLocalDate();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        boolean boolean11 = mutableInterval5.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        boolean boolean13 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.plus((long) 8);
        org.joda.time.Instant instant23 = instant15.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration36 = duration25.minus(0L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = duration40.plus((long) 8);
        org.joda.time.Duration duration45 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '#');
        org.joda.time.Instant instant46 = instant23.plus((org.joda.time.ReadableDuration) duration45);
        long long47 = instant46.getMillis();
        boolean boolean48 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) instant46);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType52 = periodType51.withYearsRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 3, 1645513762121L, periodType52, chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfMonth();
        org.joda.time.DurationField durationField64 = chronology60.months();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str69 = dateTimeZone67.getNameKey(1645513759301L);
        java.lang.String str71 = dateTimeZone67.getName(1645513762160L);
        java.util.TimeZone timeZone72 = dateTimeZone67.toTimeZone();
        int int74 = dateTimeZone67.getStandardOffset(1645513761942L);
        int int76 = dateTimeZone67.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology77 = chronology60.withZone(dateTimeZone67);
        int int79 = dateTimeZone67.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        boolean boolean81 = dateTimeZone67.isFixed();
        org.joda.time.MutableDateTime mutableDateTime82 = instant46.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime83 = localDate4.toDateTime((org.joda.time.ReadableInstant) mutableDateTime82);
        int int84 = dateTime83.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and mutableDateTime82", (instant46.compareTo(mutableDateTime82) == 0) == instant46.equals(mutableDateTime82));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1L), 1L, periodType27, chronology28);
        java.lang.String str30 = periodType27.toString();
        java.lang.String str31 = periodType27.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645513760165L, periodType27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant23, periodType27);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration47 = duration11.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration66 = duration51.toDuration();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        boolean boolean73 = mutableInterval67.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType75 = periodType74.withYearsRemoved();
        org.joda.time.Period period76 = mutableInterval67.toPeriod(periodType75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration66, periodType75);
        org.joda.time.ReadableInterval readableInterval78 = null;
        mutablePeriod77.setPeriod(readableInterval78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant0.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime mutableDateTime10 = instant0.toMutableDateTime();
        int int11 = mutableDateTime10.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        boolean boolean3 = instant1.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.plus((long) 8);
        org.joda.time.Instant instant14 = instant6.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        boolean boolean16 = dateTime4.isAfter((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Interval interval13 = interval3.withEndMillis(1645513791936L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        boolean boolean26 = property17.equals((java.lang.Object) dateTime19);
        java.lang.String str27 = property17.getName();
        org.joda.time.DateTime dateTime28 = property17.getDateTime();
        org.joda.time.DateTime dateTime30 = property17.addToCopy((long) '#');
        boolean boolean31 = interval13.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime.Property property38 = dateTime36.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean47 = dateTime43.isSupported(dateTimeFieldType46);
        int int48 = dateTime36.get(dateTimeFieldType46);
        boolean boolean49 = dateTime30.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant37", (dateTime36.compareTo(instant37) == 0) == dateTime36.equals(instant37));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus(1645513764861L);
        org.joda.time.Instant instant17 = instant15.minus(1645513769503L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and instant13", (dateMidnight12.compareTo(instant13) == 0) == dateMidnight12.equals(instant13));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant0.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) 25881497);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) 25881374);
        org.joda.time.Duration duration15 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (-8990));
        org.joda.time.Duration duration17 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Seconds seconds25 = duration21.toStandardSeconds();
        org.joda.time.Duration duration26 = duration21.toDuration();
        org.joda.time.Duration duration28 = duration26.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime30.yearOfCentury();
        org.joda.time.DateTime dateTime39 = property38.getDateTime();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((-1L), 1L, periodType57, chronology58);
        java.lang.String str60 = periodType57.toString();
        java.lang.String str61 = periodType57.getName();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1645513760165L, periodType57);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant53, periodType57);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime75 = dateTime73.plusSeconds((int) (byte) 10);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration77 = duration41.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTime dateTime78 = dateTime39.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration79 = duration26.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration80 = duration17.plus((org.joda.time.ReadableDuration) duration77);
        int int81 = duration11.compareTo((org.joda.time.ReadableDuration) duration77);
        boolean boolean82 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant34 = instant32.minus((long) 63114585);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant38 = instant36.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant40 = instant36.minus(1645513772143L);
        long long41 = instant40.getMillis();
        org.joda.time.Instant instant43 = instant40.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime59.withZoneRetainFields(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        boolean boolean65 = dateTime62.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime67 = dateTime62.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant43, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime69 = instant43.toDateTimeISO();
        boolean boolean70 = instant34.isEqual((org.joda.time.ReadableInstant) instant43);
        org.joda.time.MutableDateTime mutableDateTime71 = instant43.toMutableDateTime();
        int int72 = mutableDateTime71.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime69", (instant43.compareTo(dateTime69) == 0) == instant43.equals(dateTime69));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = interval11.withPeriodBeforeEnd(readablePeriod29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant27", (dateTime14.compareTo(instant27) == 0) == dateTime14.equals(instant27));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime14.withFieldAdded(durationFieldType21, 221);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withZoneRetainFields(dateTimeZone41);
        int int43 = dateTime39.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime();
        int int45 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime47 = dateTime14.plus(1645513830009L);
        org.joda.time.Instant instant48 = dateTime14.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime.Property property52 = dateTime50.yearOfEra();
        org.joda.time.DateTime dateTime53 = property52.roundFloorCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(63088836);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis(63206248);
        int int58 = instant48.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime60 = dateTime55.withMillis(1645513767121L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant48", (dateTime4.compareTo(instant48) == 0) == dateTime4.equals(instant48));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withMillisOfSecond((int) (short) 10);
        boolean boolean49 = dateTime47.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes(0);
        boolean boolean68 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean71 = mutableInterval69.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        mutableInterval69.setChronology(chronology78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1645513782198L, periodType41, chronology78);
        org.joda.time.DateTime dateTime81 = dateTime39.toDateTime(chronology78);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime81.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        long long13 = duration1.getStandardHours();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        long long27 = duration15.getStandardHours();
        org.joda.time.Duration duration29 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime(chronology38);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime37.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withMillisOfSecond((int) (short) 10);
        boolean boolean49 = dateTime47.isBefore((-1L));
        int int50 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int52 = dateTime47.get(dateTimeFieldType51);
        org.joda.time.DateTime dateTime54 = dateTime47.plusMillis(31);
        boolean boolean55 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.millis();
        java.lang.String str57 = periodType56.getName();
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean62 = period60.equals((java.lang.Object) dateTimeFieldType61);
        org.joda.time.Period period64 = period60.plusWeeks(17);
        org.joda.time.Period period65 = period60.toPeriod();
        boolean boolean66 = periodType56.equals((java.lang.Object) period65);
        org.joda.time.PeriodType periodType67 = periodType56.withSecondsRemoved();
        org.joda.time.PeriodType periodType68 = periodType56.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime31, periodType56);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = dateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMonths(3);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        boolean boolean81 = mutableInterval77.overlaps((org.joda.time.ReadableInterval) mutableInterval79);
        java.lang.Object obj82 = mutableInterval77.clone();
        org.joda.time.Chronology chronology83 = mutableInterval77.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.yearOfEra();
        org.joda.time.Chronology chronology85 = chronology83.withUTC();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        long long88 = dateTime87.getMillis();
        org.joda.time.DateTime dateTime90 = dateTime87.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime91 = dateTime90.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay92 = dateTime91.toYearMonthDay();
        int[] intArray94 = chronology85.get((org.joda.time.ReadablePartial) yearMonthDay92, 1645513760770L);
        org.joda.time.DurationField durationField95 = chronology85.eras();
        org.joda.time.DateTime dateTime96 = dateTime76.withChronology(chronology85);
        org.joda.time.Period period97 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Seconds seconds98 = duration15.toStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime76 and dateTime96", (dateTime76.compareTo(dateTime96) == 0) == dateTime76.equals(dateTime96));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        boolean boolean11 = instant1.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.DateTime dateTime12 = instant1.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime12", (instant1.compareTo(dateTime12) == 0) == instant1.equals(dateTime12));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant0.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime mutableDateTime10 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        org.joda.time.DateTime dateTime37 = dateTime34.plusMonths(63116730);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str43 = dateTimeZone41.getNameKey(1645513759301L);
        java.lang.String str45 = dateTimeZone41.getName(1645513762160L);
        java.util.TimeZone timeZone46 = dateTimeZone41.toTimeZone();
        long long48 = dateTimeZone41.convertUTCToLocal(1645513763192L);
        int int50 = dateTimeZone41.getOffsetFromLocal(1645513771467L);
        java.lang.String str52 = dateTimeZone41.getShortName(1645513770909L);
        long long56 = dateTimeZone41.convertLocalToUTC(1645513844293L, false, 1645513762684L);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(1645513818274L, dateTimeZone41);
        org.joda.time.DateTime dateTime58 = dateTime37.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime59 = instant0.toDateTime(dateTimeZone41);
        java.lang.String str61 = dateTimeZone41.getName(1645513877329L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = interval33.withDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval40 = interval33.toInterval();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval54 = interval40.gap((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Chronology chronology55 = mutableInterval41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval66 = interval60.withDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval67 = interval60.toInterval();
        org.joda.time.Interval interval69 = interval67.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime70 = interval67.getStart();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        boolean boolean74 = interval67.isBefore((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = mutableInterval41.equals((java.lang.Object) interval67);
        org.joda.time.MutableInterval mutableInterval76 = interval67.toMutableInterval();
        boolean boolean77 = interval28.isAfter((org.joda.time.ReadableInterval) mutableInterval76);
        long long78 = mutableInterval76.getStartMillis();
        boolean boolean80 = mutableInterval76.isBefore(1645513827493L);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime82 = instant81.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        long long84 = mutableInterval83.toDurationMillis();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval83.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration89 = duration86.plus((long) 8);
        org.joda.time.Instant instant90 = instant81.minus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.MutableDateTime mutableDateTime91 = instant81.toMutableDateTime();
        boolean boolean92 = mutableInterval76.contains((org.joda.time.ReadableInstant) instant81);
        mutableInterval76.setEndMillis(1645513780134L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant81", (dateTime15.compareTo(instant81) == 0) == dateTime15.equals(instant81));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis(1645513761776L);
        long long35 = duration34.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str47 = dateTimeZone45.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime48 = dateTime40.withZone(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType53 = periodType52.withYearsRemoved();
        org.joda.time.PeriodType periodType54 = periodType53.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        boolean boolean59 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) mutableInterval57);
        java.lang.Object obj60 = mutableInterval55.clone();
        org.joda.time.Chronology chronology61 = mutableInterval55.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfEra();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 3, 1645513762121L, periodType53, chronology61);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str65 = durationFieldType64.toString();
        boolean boolean66 = periodType53.isSupported(durationFieldType64);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime48, periodType53);
        org.joda.time.Instant instant68 = instant9.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Instant instant72 = new org.joda.time.Instant(1645513763016L);
        boolean boolean74 = instant72.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime75 = instant72.toDateTimeISO();
        org.joda.time.Interval interval76 = duration70.toIntervalFrom((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Instant instant78 = instant68.withDurationAdded((org.joda.time.ReadableDuration) duration70, 63251629);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime75", (instant1.compareTo(dateTime75) == 0) == instant1.equals(dateTime75));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime8 = dateTime4.minusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.getName();
        java.util.Locale locale17 = null;
        int int18 = property12.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime19 = property12.getDateTime();
        org.joda.time.DateTime dateTime20 = property12.roundCeilingCopy();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime8.withYear(25881374);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.joda.time.Period period29 = new org.joda.time.Period(63112091, (int) ' ', 429, 115200000);
        org.joda.time.Period period31 = period29.withHours(1645513787);
        org.joda.time.DateTime dateTime32 = dateTime23.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant24", (dateTime23.compareTo(instant24) == 0) == dateTime23.equals(instant24));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.minus(1645513773685L);
        int int8 = dateTime7.getSecondOfDay();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.Duration duration11 = org.joda.time.Duration.millis(1645513944578L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(37320000);
        org.joda.time.Instant instant26 = dateTime25.toInstant();
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Interval interval28 = duration11.toIntervalTo((org.joda.time.ReadableInstant) instant26);
        long long29 = duration11.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant26", (dateTime25.compareTo(instant26) == 0) == dateTime25.equals(instant26));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration27 = duration16.minus(0L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Duration duration36 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '#');
        int int37 = duration1.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.withEarlierOffsetAtOverlap();
        int int47 = dateTime39.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 3);
        org.joda.time.DateTime dateTime51 = dateTime39.toDateTime(dateTimeZone50);
        org.joda.time.Period period52 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        boolean boolean63 = mutableInterval53.contains((org.joda.time.ReadableInstant) dateTime62);
        int int64 = dateTime62.getMillisOfDay();
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        org.joda.time.DateMidnight dateMidnight66 = dateTime62.toDateMidnight();
        org.joda.time.DateTime dateTime68 = dateTime62.minusMonths((int) '#');
        org.joda.time.DateTime.Property property69 = dateTime62.minuteOfDay();
        org.joda.time.Interval interval70 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime51", (dateTime3.compareTo(dateTime51) == 0) == dateTime3.equals(dateTime51));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology26 = mutableInterval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval38 = interval31.toInterval();
        org.joda.time.Interval interval40 = interval38.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime41 = interval38.getStart();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = mutableInterval12.equals((java.lang.Object) interval38);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) 8);
        org.joda.time.Instant instant56 = instant48.plus((org.joda.time.ReadableDuration) duration55);
        boolean boolean58 = instant48.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.DateTime dateTime59 = instant48.toDateTimeISO();
        boolean boolean60 = mutableInterval12.isAfter((org.joda.time.ReadableInstant) instant48);
        mutableInterval12.setEndMillis(1645513781803L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and dateTime59", (instant48.compareTo(dateTime59) == 0) == instant48.equals(dateTime59));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        long long11 = durationField9.getValueAsLong((-37320000L));
        java.lang.String str12 = durationField9.getName();
        long long13 = durationField9.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType14 = durationField9.getType();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        long long32 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology23);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType14.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField38", (durationField9.compareTo(durationField38) == 0) == durationField9.equals(durationField38));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes((int) (byte) 0);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTime dateTime18 = dateTime8.toDateTime(chronology15);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime38, periodType39);
        org.joda.time.Duration duration42 = duration31.plus(1645513768963L);
        org.joda.time.Duration duration44 = duration42.withMillis(1645513769945L);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = property49.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        org.joda.time.DateTime dateTime52 = property49.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime dateTime55 = dateTime52.withYear(63102000);
        org.joda.time.DateMidnight dateMidnight56 = dateTime55.toDateMidnight();
        org.joda.time.Period period57 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime.Property property61 = dateTime59.yearOfEra();
        org.joda.time.Interval interval62 = property61.toInterval();
        java.util.Locale locale63 = null;
        int int64 = property61.getMaximumTextLength(locale63);
        org.joda.time.DateTime dateTime66 = property61.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime67 = property61.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        boolean boolean69 = mutableInterval68.containsNow();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withEra((int) (byte) 1);
        boolean boolean75 = mutableInterval68.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        org.joda.time.DateTime dateTime85 = dateTime82.plusWeeks((int) (byte) 10);
        boolean boolean86 = mutableInterval76.contains((org.joda.time.ReadableInstant) dateTime85);
        int int87 = dateTime85.getMillisOfDay();
        org.joda.time.DateTime dateTime88 = dateTime85.toDateTime();
        mutableInterval68.setEnd((org.joda.time.ReadableInstant) dateTime88);
        int int90 = dateTime88.getMillisOfDay();
        org.joda.time.DateTime.Property property91 = dateTime88.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property91.getFieldType();
        org.joda.time.DateTime dateTime93 = property91.withMinimumValue();
        boolean boolean94 = dateTime67.isEqual((org.joda.time.ReadableInstant) dateTime93);
        int int95 = dateTime67.getMillisOfSecond();
        org.joda.time.Instant instant96 = dateTime67.toInstant();
        org.joda.time.Period period97 = duration42.toPeriodTo((org.joda.time.ReadableInstant) instant96);
        org.joda.time.Period period99 = period97.minusDays(63274554);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime67 and instant96", (dateTime67.compareTo(instant96) == 0) == dateTime67.equals(instant96));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((java.lang.Object) dateTime14);
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.Period period23 = period19.plusWeeks((int) (short) -1);
        org.joda.time.Period period25 = period19.minusMillis(4);
        org.joda.time.Period period27 = period19.minusDays((int) (short) 10);
        org.joda.time.Duration duration28 = period19.toStandardDuration();
        org.joda.time.Instant instant29 = instant18.minus((org.joda.time.ReadableDuration) duration28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant29", (dateTime1.compareTo(instant29) == 0) == dateTime1.equals(instant29));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval23.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Interval interval36 = interval22.gap((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean37 = interval4.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutableInterval mutableInterval38 = interval4.toMutableInterval();
        boolean boolean40 = interval4.isAfter(1645513863639L);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Period period43 = org.joda.time.Period.hours(22);
        org.joda.time.Period period45 = period43.plusMillis(221);
        mutableInterval41.setPeriodAfterStart((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513763016L);
        boolean boolean49 = mutableInterval41.isBefore((org.joda.time.ReadableInstant) instant48);
        boolean boolean50 = interval4.abuts((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.DateTime dateTime51 = mutableInterval41.getEnd();
        org.joda.time.Instant instant53 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = duration57.plus((long) 8);
        org.joda.time.Instant instant61 = instant53.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = instant53.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = instant53.getZone();
        org.joda.time.DateTime dateTime64 = dateTime51.withZoneRetainFields(dateTimeZone63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and dateTime62", (instant48.compareTo(dateTime62) == 0) == instant48.equals(dateTime62));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Instant instant20 = instant12.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = instant12.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant24 = instant12.plus(1645513821127L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTime dateTime26 = instant24.toDateTimeISO();
        boolean boolean27 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration40 = duration29.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime47, periodType48);
        org.joda.time.Period period51 = period49.withSeconds((int) (short) -1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) period51, chronology52);
        org.joda.time.Minutes minutes54 = period53.toStandardMinutes();
        org.joda.time.Period period56 = period53.plusWeeks(63253071);
        org.joda.time.Period period58 = period53.plusMonths(37508);
        org.joda.time.Interval interval59 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime26", (instant24.compareTo(dateTime26) == 0) == instant24.equals(dateTime26));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, readableInstant26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.Instant instant37 = instant29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant43 = instant37.withDurationAdded(1645513882617L, 1053);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.Instant instant52 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration50, 63190);
        long long53 = duration50.getStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime39", (instant37.compareTo(dateTime39) == 0) == instant37.equals(dateTime39));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType1 = periodType0.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 3, 1645513762121L, periodType13, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTime dateTime25 = dateTime3.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfDay();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.hourOfHalfday();
        boolean boolean29 = periodType1.equals((java.lang.Object) chronology21);
        org.joda.time.DurationField durationField30 = chronology21.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField30, and durationField24", !(durationField24.compareTo(durationField30) == 0) || (Math.signum(durationField24.compareTo(durationField24)) == Math.signum(durationField30.compareTo(durationField24))));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long14 = dateTimeField10.roundCeiling(1645513765462L);
        long long16 = dateTimeField10.roundCeiling(1645513936546L);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        long long27 = dateTimeField24.addWrapField(1645513760382L, 22);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(4);
        org.joda.time.LocalDate localDate37 = dateTime34.toLocalDate();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.DurationField durationField46 = dateTimeField45.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        int int54 = yearMonthDay53.size();
        int[] intArray59 = new int[] { 40, 40, '#', 10 };
        int int60 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay53, intArray59);
        int int61 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDate37, intArray59);
        int int62 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime29", (dateTime9.compareTo(dateTime29) == 0) == dateTime9.equals(dateTime29));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime8 = property3.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        boolean boolean11 = mutableInterval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra((int) (byte) 1);
        boolean boolean17 = mutableInterval10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTime dateTime35 = property33.withMinimumValue();
        boolean boolean36 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime37.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType54 = periodType53.withYearsRemoved();
        org.joda.time.PeriodType periodType55 = periodType54.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 3, 1645513762121L, periodType54, chronology62);
        org.joda.time.DurationField durationField65 = chronology62.eras();
        org.joda.time.DateTime dateTime66 = dateTime44.toDateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.clockhourOfDay();
        org.joda.time.Period period68 = new org.joda.time.Period(0L, chronology62);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 0L, chronology62);
        org.joda.time.DateTimeField dateTimeField70 = chronology62.weekyear();
        org.joda.time.DateTime dateTime71 = dateTime37.toDateTime(chronology62);
        org.joda.time.Chronology chronology72 = chronology62.withUTC();
        org.joda.time.DurationField durationField73 = chronology62.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField65, durationField73, and durationField65", !(durationField65.compareTo(durationField73) == 0) || (Math.signum(durationField65.compareTo(durationField65)) == Math.signum(durationField73.compareTo(durationField65))));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime();
        java.lang.Object obj11 = null;
        boolean boolean12 = dateTime10.equals(obj11);
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(63422298);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.Instant instant14 = instant9.withDurationAdded(19044L, 25847168);
        org.joda.time.Instant instant16 = instant9.withMillis(1645513863930L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime21.withEarlierOffsetAtOverlap();
        int int26 = dateTime25.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.DateTime dateTime29 = dateTime25.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = instant16.toDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        boolean boolean11 = instant1.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant13 = instant1.plus(1645513821127L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DateTime dateTime15 = instant13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime15.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime15", (instant13.compareTo(dateTime15) == 0) == instant13.equals(dateTime15));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.Duration duration8 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime24.withField(dateTimeFieldType28, 25774);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(63112091);
        boolean boolean33 = duration8.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant34 = instant5.minus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant36 = instant5.withMillis((long) (-3600000));
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration49 = duration38.minus(0L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-1L), 1L, periodType54, chronology55);
        java.lang.String str57 = periodType54.toString();
        java.lang.String str58 = periodType54.getName();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1645513760165L, periodType54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant50, periodType54);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime72 = dateTime70.plusSeconds((int) (byte) 10);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration74 = duration38.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period77 = duration76.toPeriod();
        int int78 = duration38.compareTo((org.joda.time.ReadableDuration) duration76);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant5, (org.joda.time.ReadableDuration) duration76);
        long long80 = duration76.getStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(63110);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        int int8 = property7.getMaximumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(25843148, 19045, 63149103, (int) (byte) 0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration7 = duration6.toDuration();
        java.lang.String str8 = duration7.toString();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean19 = period17.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.Period period21 = period17.plusWeeks(17);
        boolean boolean22 = mutableInterval9.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = duration26.toPeriod();
        org.joda.time.Duration duration29 = duration26.toDuration();
        mutableInterval9.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime31 = mutableInterval9.getStart();
        org.joda.time.DateTime dateTime32 = mutableInterval9.getStart();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 8, periodType34, chronology41);
        mutablePeriod43.clear();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.millisOfSecond();
        mutablePeriod43.setPeriod(1645513832405L, chronology52);
        mutableInterval9.setChronology(chronology52);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration7, chronology52);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.DateTime dateTime62 = dateTime59.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime(chronology63);
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        org.joda.time.DateTime dateTime68 = dateTime62.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime68.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight70 = dateTime68.toDateMidnight();
        org.joda.time.Instant instant71 = dateMidnight70.toInstant();
        org.joda.time.Instant instant72 = instant71.toInstant();
        org.joda.time.Interval interval73 = duration7.toIntervalTo((org.joda.time.ReadableInstant) instant72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight70 and instant72", (dateMidnight70.compareTo(instant72) == 0) == dateMidnight70.equals(instant72));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Instant instant20 = instant12.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = instant12.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant24 = instant12.plus(1645513821127L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTime dateTime26 = instant24.toDateTimeISO();
        boolean boolean27 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        int int39 = dateTime26.get(dateTimeField38);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Seconds seconds52 = period51.toStandardSeconds();
        int int53 = period51.getMillis();
        org.joda.time.DurationFieldType durationFieldType55 = period51.getFieldType(0);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 3, 1645513762121L, periodType59, chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.dayOfMonth();
        boolean boolean71 = durationFieldType55.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField72 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 25833900, chronology67);
        org.joda.time.DateTime dateTime74 = dateTime26.toDateTime(chronology67);
        org.joda.time.DurationField durationField75 = chronology67.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime26", (instant24.compareTo(dateTime26) == 0) == instant24.equals(dateTime26));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant71 = dateTime40.toInstant();
        org.joda.time.DateTime.Property property72 = dateTime40.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and instant71", (dateTime40.compareTo(instant71) == 0) == dateTime40.equals(instant71));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.Instant instant6 = instant1.minus(1645513941431L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        boolean boolean13 = mutableInterval7.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        boolean boolean15 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        mutableInterval7.setEnd(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.Interval interval31 = interval29.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime32 = interval29.getStart();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        boolean boolean36 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime34);
        long long37 = interval29.getEndMillis();
        org.joda.time.Interval interval39 = interval29.withStartMillis(1645513761197L);
        org.joda.time.Interval interval40 = interval29.toInterval();
        boolean boolean41 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval52 = interval46.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval53 = interval40.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration55 = duration50.plus(1645513998825L);
        org.joda.time.Instant instant57 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (short) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        org.joda.time.Instant instant14 = instant9.withDurationAdded(19044L, 25847168);
        org.joda.time.Instant instant16 = instant9.withMillis(1645513863930L);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (short) 0);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration58 = duration47.minus(0L);
        boolean boolean59 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration47);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration43);
        mutablePeriod19.addMonths(52);
        mutablePeriod19.addWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime.Property property68 = dateTime66.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Interval interval75 = interval69.withDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Interval interval76 = interval69.toInterval();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval69);
        mutablePeriod19.setHours(27425229);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType80.getRangeDurationType();
        mutablePeriod19.set(durationFieldType81, 0);
        mutablePeriod19.addMillis(63232091);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.MutableInterval mutableInterval87 = interval86.toMutableInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T17:33:48.884+10:22");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(0);
        boolean boolean5 = dateTimeZone3.isStandardOffset(1645513790067L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone3.getShortName((long) (-30), locale7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone12);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.Period period18 = period14.plusWeeks((int) (short) -1);
        org.joda.time.Period period20 = period14.minusMillis(4);
        org.joda.time.Interval interval21 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Interval interval34 = interval13.gap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTime dateTime35 = interval13.getEnd();
        org.joda.time.Duration duration36 = interval13.toDuration();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.negated();
        org.joda.time.Period period40 = period37.withDays(1);
        int int42 = period37.getValue((int) (short) 0);
        org.joda.time.Interval interval43 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        int[] intArray44 = period37.getValues();
        org.joda.time.Duration duration45 = period37.toStandardDuration();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration45);
        int int47 = period46.getDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 3, 1645513762121L, periodType37, chronology45);
        org.joda.time.DurationField durationField48 = chronology45.eras();
        org.joda.time.DateTime dateTime49 = dateTime27.toDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.clockhourOfHalfday();
        org.joda.time.Interval interval52 = interval3.withChronology(chronology45);
        org.joda.time.DateTime dateTime53 = interval3.getStart();
        org.joda.time.Chronology chronology54 = interval3.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField48, durationField55, and durationField48", !(durationField48.compareTo(durationField55) == 0) || (Math.signum(durationField48.compareTo(durationField48)) == Math.signum(durationField55.compareTo(durationField48))));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        boolean boolean34 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfEra();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Interval interval45 = interval39.withDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Interval interval46 = interval39.toInterval();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        mutableInterval47.setInterval((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.Interval interval60 = interval46.gap((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        boolean boolean62 = mutableInterval61.containsNow();
        boolean boolean63 = interval46.isBefore((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean64 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean66 = mutableInterval61.isBefore(1645513890725L);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.DateTime dateTime73 = dateTime70.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant74 = dateTime73.toInstant();
        int int75 = dateTimeZone67.getOffset((org.joda.time.ReadableInstant) instant74);
        org.joda.time.Instant instant76 = instant74.toInstant();
        mutableInterval61.setEnd((org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime73 and instant74", (dateTime73.compareTo(instant74) == 0) == dateTime73.equals(instant74));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        boolean boolean11 = instant1.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.DateTime dateTime12 = instant1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime12", (instant1.compareTo(dateTime12) == 0) == instant1.equals(dateTime12));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1L), 1L, periodType8, chronology9);
        java.lang.String str11 = periodType8.toString();
        java.lang.String str12 = periodType8.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645513760165L, periodType8);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType8, chronology20);
        boolean boolean22 = dateTimeFieldType2.isSupported(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        org.joda.time.Period period25 = new org.joda.time.Period(1645513775005L, periodType1, chronology20);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfEra();
        org.joda.time.Period period48 = new org.joda.time.Period((long) 3, 1645513762121L, periodType38, chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        org.joda.time.DateTime dateTime50 = dateTime28.toDateTime(chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime54.plusWeeks((int) (byte) 10);
        int int58 = dateTime54.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime60.toDateTimeISO();
        int int68 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDate localDate69 = dateTime67.toLocalDate();
        org.joda.time.DateTimeField dateTimeField71 = localDate69.getField((int) (short) 0);
        int int72 = localDate69.size();
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDate69, 63116617, locale74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.yearOfEra();
        org.joda.time.Chronology chronology84 = chronology82.withUTC();
        java.lang.String str85 = chronology84.toString();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.hourOfHalfday();
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period89 = duration88.toPeriod();
        int int90 = period89.size();
        org.joda.time.Period period92 = period89.withMinutes(63158);
        org.joda.time.Period period94 = period89.minusWeeks(63212);
        org.joda.time.Period period96 = period94.plusDays(25828434);
        int[] intArray98 = chronology84.get((org.joda.time.ReadablePeriod) period94, (long) 63247704);
        int int99 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDate69, intArray98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField49", Math.signum(durationField23.compareTo(durationField49)) == -Math.signum(durationField49.compareTo(durationField23)));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T17:33:48.884+10:22");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(0);
        boolean boolean5 = dateTimeZone3.isStandardOffset(1645513790067L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone3.getShortName((long) (-30), locale7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(63352156);
        int int12 = dateTime11.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(4);
        org.joda.time.LocalDate localDate10 = dateTime7.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.years();
        java.lang.String str14 = chronology11.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        int int17 = dateTime16.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime16", (dateTime2.compareTo(dateTime16) == 0) == dateTime2.equals(dateTime16));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration6.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withZoneRetainFields(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        boolean boolean24 = dateTime21.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime26 = dateTime21.withYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime21.toString(dateTimeFormatter27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = dateTime21.isAfter(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime.Property property34 = dateTime32.yearOfEra();
        java.lang.String str35 = property34.getName();
        org.joda.time.DateTime dateTime36 = property34.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = duration40.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        long long66 = duration56.getMillis();
        long long67 = duration56.getStandardMinutes();
        org.joda.time.Duration duration68 = duration56.toDuration();
        boolean boolean69 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration40.withMillis((long) (byte) 0);
        org.joda.time.DateTime dateTime72 = dateTime21.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant73 = instant0.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutableDateTime mutableDateTime74 = instant0.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant0", (mutableDateTime1.compareTo(instant0) == 0) == mutableDateTime1.equals(instant0));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1645513782103L);
        boolean boolean3 = dateTime1.isEqual(0L);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(59);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds(63146531);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        int int18 = dateTime1.compareTo((org.joda.time.ReadableInstant) instant17);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime1.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant17", (dateTime10.compareTo(instant17) == 0) == dateTime10.equals(instant17));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes(3);
        org.joda.time.Period period6 = period4.plusWeeks(17);
        org.joda.time.Period period8 = period6.withMillis(32);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod();
        mutablePeriod18.setMonths((int) ' ');
        java.lang.Object obj21 = mutablePeriod18.clone();
        long long24 = chronology15.add((org.joda.time.ReadablePeriod) mutablePeriod18, (long) (byte) 0, 22);
        mutablePeriod18.addYears(17);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        boolean boolean40 = dateTime37.isAfterNow();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfSecond();
        org.joda.time.DateTime dateTime50 = dateTime37.withChronology(chronology47);
        mutablePeriod18.setPeriod((long) 63088836, 1645513764834L, chronology47);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 3, 1645513762121L, periodType56, chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField68 = chronology64.months();
        boolean boolean69 = durationFieldType52.isSupported(chronology64);
        boolean boolean70 = mutablePeriod18.isSupported(durationFieldType52);
        int int71 = period8.get(durationFieldType52);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        java.lang.String str76 = dateTime75.toString();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology79);
        org.joda.time.DateTime dateTime81 = dateTime75.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType85 = periodType84.withYearsRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval();
        long long88 = mutableInterval87.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        boolean boolean91 = mutableInterval87.overlaps((org.joda.time.ReadableInterval) mutableInterval89);
        java.lang.Object obj92 = mutableInterval87.clone();
        org.joda.time.Chronology chronology93 = mutableInterval87.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.yearOfEra();
        org.joda.time.Period period95 = new org.joda.time.Period((long) 3, 1645513762121L, periodType85, chronology93);
        org.joda.time.DurationField durationField96 = chronology93.eras();
        org.joda.time.DateTime dateTime97 = dateTime75.toDateTime(chronology93);
        org.joda.time.Interval interval98 = new org.joda.time.Interval((long) 63133, 1645513776987L, chronology93);
        boolean boolean99 = durationFieldType52.isSupported(chronology93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField68 and durationField96", Math.signum(durationField68.compareTo(durationField96)) == -Math.signum(durationField96.compareTo(durationField68)));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        java.lang.Object obj0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(obj0);
        java.lang.Object obj2 = mutablePeriod1.clone();
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        java.lang.String str8 = property7.getName();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        long long39 = duration29.getMillis();
        long long40 = duration29.getStandardMinutes();
        org.joda.time.Duration duration41 = duration29.toDuration();
        boolean boolean42 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration13.withMillis((long) (byte) 0);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration46 = org.joda.time.Duration.ZERO;
        org.joda.time.Hours hours47 = duration46.toStandardHours();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime dateTime53 = dateTime50.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths(3);
        org.joda.time.DateTime.Property property56 = dateTime55.secondOfDay();
        org.joda.time.DateTime dateTime57 = property56.getDateTime();
        int int58 = dateTime57.getHourOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.plus((long) 221);
        org.joda.time.Instant instant61 = dateTime60.toInstant();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str73 = dateTimeZone71.getNameKey(1645513759301L);
        int int75 = dateTimeZone71.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime68.toMutableDateTime(dateTimeZone71);
        java.lang.String str77 = dateTimeZone71.toString();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(1645513796316L, 1645513832423L, dateTimeZone71);
        long long81 = dateTimeZone71.adjustOffset(1645513860315L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        org.joda.time.DateTime dateTime83 = dateTime60.withZone(dateTimeZone71);
        org.joda.time.Period period84 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime83 and instant61", (dateTime83.compareTo(instant61) == 0) == dateTime83.equals(instant61));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str1 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Instant instant9 = instant7.toInstant();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 25881374);
        org.joda.time.Instant instant13 = instant7.withDurationAdded((org.joda.time.ReadableDuration) duration11, 1235);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        int int9 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime14.year();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears(37320000);
        org.joda.time.Instant instant44 = dateTime43.toInstant();
        org.joda.time.MutableDateTime mutableDateTime45 = instant44.toMutableDateTimeISO();
        boolean boolean46 = dateTime8.isBefore((org.joda.time.ReadableInstant) instant44);
        boolean boolean47 = dateTime8.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and instant44", (dateTime43.compareTo(instant44) == 0) == dateTime43.equals(instant44));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime35", (dateTime13.compareTo(dateTime35) == 0) == dateTime13.equals(dateTime35));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.Duration duration8 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime24.withField(dateTimeFieldType28, 25774);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(63112091);
        boolean boolean33 = duration8.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant34 = instant5.minus((org.joda.time.ReadableDuration) duration8);
        long long35 = duration8.getStandardHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant0.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime mutableDateTime10 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        org.joda.time.DateTime dateTime37 = dateTime34.plusMonths(63116730);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str43 = dateTimeZone41.getNameKey(1645513759301L);
        java.lang.String str45 = dateTimeZone41.getName(1645513762160L);
        java.util.TimeZone timeZone46 = dateTimeZone41.toTimeZone();
        long long48 = dateTimeZone41.convertUTCToLocal(1645513763192L);
        int int50 = dateTimeZone41.getOffsetFromLocal(1645513771467L);
        java.lang.String str52 = dateTimeZone41.getShortName(1645513770909L);
        long long56 = dateTimeZone41.convertLocalToUTC(1645513844293L, false, 1645513762684L);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(1645513818274L, dateTimeZone41);
        org.joda.time.DateTime dateTime58 = dateTime37.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime59 = instant0.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime61 = dateTime59.plusHours(63412802);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime35", (dateTime13.compareTo(dateTime35) == 0) == dateTime13.equals(dateTime35));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.Instant instant3 = instant0.toInstant();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant7 = instant5.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.Period period16 = period8.minusDays((int) (short) 10);
        org.joda.time.Duration duration17 = period8.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime19.hourOfDay();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = duration31.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = duration37.toPeriod();
        boolean boolean40 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = new org.joda.time.DurationFieldType[] { durationFieldType41 };
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.forFields(durationFieldTypeArray42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.forFields(durationFieldTypeArray42);
        org.joda.time.Period period45 = new org.joda.time.Period((java.lang.Object) duration37, periodType44);
        org.joda.time.Period period46 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19, periodType44);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadablePeriod) period46);
        int int48 = instant0.compareTo((org.joda.time.ReadableInstant) instant7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant0", (mutableDateTime1.compareTo(instant0) == 0) == mutableDateTime1.equals(instant0));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration36 = duration25.minus(0L);
        org.joda.time.Duration duration38 = duration25.withMillis(1645513760253L);
        long long39 = duration38.getStandardDays();
        org.joda.time.Duration duration40 = duration38.toDuration();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        boolean boolean42 = mutableInterval41.containsNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withEra((int) (byte) 1);
        boolean boolean48 = mutableInterval41.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks((int) (byte) 10);
        boolean boolean59 = mutableInterval49.contains((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime58.getMillisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        mutableInterval41.setEnd((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime61.getMillisOfDay();
        org.joda.time.DateTime.Property property64 = dateTime61.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime.Property property69 = dateTime67.yearOfEra();
        org.joda.time.Interval interval70 = property69.toInterval();
        java.util.Locale locale71 = null;
        int int72 = property69.getMaximumTextLength(locale71);
        java.util.Locale locale73 = null;
        java.lang.String str74 = property69.getAsShortText(locale73);
        org.joda.time.Interval interval75 = property69.toInterval();
        org.joda.time.DateTime dateTime76 = property69.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime77 = dateTime76.toDateTimeISO();
        org.joda.time.Instant instant78 = dateTime76.toInstant();
        int int79 = property64.compareTo((org.joda.time.ReadableInstant) instant78);
        org.joda.time.DateTime dateTime80 = instant78.toDateTimeISO();
        org.joda.time.Period period81 = duration38.toPeriodTo((org.joda.time.ReadableInstant) instant78);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime76 and instant78", (dateTime76.compareTo(instant78) == 0) == dateTime76.equals(instant78));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.util.Locale locale32 = null;
        java.lang.String str33 = property28.getAsShortText(locale32);
        org.joda.time.Interval interval34 = property28.toInterval();
        org.joda.time.DateTime dateTime35 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant39 = instant37.toInstant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant37.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant37", (dateTime35.compareTo(instant37) == 0) == dateTime35.equals(instant37));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) "2022-02-22T17:32:16.801+10:22");
        org.joda.time.Instant instant3 = instant1.plus(1645513876775L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((java.lang.Object) dateTime16);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(33166356552000L, 1645513774191L);
        mutablePeriod22.setPeriod(457087L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str26 = dateTimeFieldType25.toString();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType25.getDurationType();
        int int28 = mutablePeriod22.get(durationFieldType27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant19, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Instant instant31 = instant19.withMillis(1645514125229L);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) instant31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant19", (dateTime9.compareTo(instant19) == 0) == dateTime9.equals(instant19));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime4.withEarlierOffsetAtOverlap();
        int int9 = dateTime8.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime8.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(6);
        int int17 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime14);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone11.getName(1645513810963L, locale19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone11);
        java.lang.String str22 = dateTimeZone11.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime21", (dateTime1.compareTo(dateTime21) == 0) == dateTime1.equals(dateTime21));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        boolean boolean27 = dateTime22.isAfter(1645513770243L);
        int int28 = dateTime22.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime22.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime.Property property35 = dateTime33.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        java.util.Locale locale37 = null;
        int int38 = property35.getMaximumTextLength(locale37);
        java.lang.String str39 = property35.toString();
        org.joda.time.DurationField durationField40 = property35.getDurationField();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = duration44.toPeriod();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Period period52 = duration50.toPeriod();
        boolean boolean53 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = duration57.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.withZoneRetainFields(dateTimeZone71);
        int int73 = dateTime69.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime69.toMutableDateTime();
        org.joda.time.Period period75 = duration44.toPeriodTo((org.joda.time.ReadableInstant) dateTime69);
        int int76 = property35.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime77 = property35.withMaximumValue();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.ReadableInterval readableInterval79 = null;
        boolean boolean80 = interval78.abuts(readableInterval79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime31", (dateTime22.compareTo(dateTime31) == 0) == dateTime22.equals(dateTime31));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        long long15 = duration14.getStandardDays();
        org.joda.time.Duration duration16 = duration14.toDuration();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        boolean boolean18 = mutableInterval17.containsNow();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.withEra((int) (byte) 1);
        boolean boolean24 = mutableInterval17.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        boolean boolean35 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime34.getMillisOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        mutableInterval17.setEnd((org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime37.getMillisOfDay();
        org.joda.time.DateTime.Property property40 = dateTime37.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        java.util.Locale locale47 = null;
        int int48 = property45.getMaximumTextLength(locale47);
        java.util.Locale locale49 = null;
        java.lang.String str50 = property45.getAsShortText(locale49);
        org.joda.time.Interval interval51 = property45.toInterval();
        org.joda.time.DateTime dateTime52 = property45.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTimeISO();
        org.joda.time.Instant instant54 = dateTime52.toInstant();
        int int55 = property40.compareTo((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTime dateTime56 = instant54.toDateTimeISO();
        org.joda.time.Period period57 = duration14.toPeriodTo((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTime dateTime58 = instant54.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime58.plusSeconds(25846025);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and instant54", (dateTime52.compareTo(instant54) == 0) == dateTime52.equals(instant54));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(63116635);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset(1645513856104L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Instant instant20 = instant12.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = instant12.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant24 = instant12.plus(1645513821127L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTime dateTime26 = instant24.toDateTimeISO();
        boolean boolean27 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        int int39 = dateTime26.get(dateTimeField38);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Seconds seconds52 = period51.toStandardSeconds();
        int int53 = period51.getMillis();
        org.joda.time.DurationFieldType durationFieldType55 = period51.getFieldType(0);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 3, 1645513762121L, periodType59, chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.dayOfMonth();
        boolean boolean71 = durationFieldType55.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField72 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 25833900, chronology67);
        org.joda.time.DateTime dateTime74 = dateTime26.toDateTime(chronology67);
        org.joda.time.DateTime.Property property75 = dateTime26.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime26", (instant24.compareTo(dateTime26) == 0) == instant24.equals(dateTime26));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513808821L);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours(63101202);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = dateTime8.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime8", (dateTime4.compareTo(dateTime8) == 0) == dateTime4.equals(dateTime8));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology22.getZone();
        org.joda.time.DateTime dateTime29 = dateTime2.toDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Instant instant20 = instant12.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = instant12.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant24 = instant12.plus(1645513821127L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTime dateTime26 = instant24.toDateTimeISO();
        boolean boolean27 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        int int39 = dateTime26.get(dateTimeField38);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Seconds seconds52 = period51.toStandardSeconds();
        int int53 = period51.getMillis();
        org.joda.time.DurationFieldType durationFieldType55 = period51.getFieldType(0);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 3, 1645513762121L, periodType59, chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.dayOfMonth();
        boolean boolean71 = durationFieldType55.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField72 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 25833900, chronology67);
        org.joda.time.DateTime dateTime74 = dateTime26.toDateTime(chronology67);
        java.util.Date date75 = dateTime26.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime26", (instant24.compareTo(dateTime26) == 0) == instant24.equals(dateTime26));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime20.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long33 = dateTimeZone30.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime34 = dateTime27.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone30);
        long long37 = dateTimeZone30.convertUTCToLocal(1645514127740L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        int int22 = dateTimeZone18.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone18);
        long long29 = chronology23.getDateTimeMillis(1645513788213L, 7, 1, 6, 6);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTimeISO();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType44 = periodType43.withYearsRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 3, 1645513762121L, periodType44, chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        org.joda.time.DateTime dateTime56 = dateTime34.toDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology52.getZone();
        org.joda.time.DateTime dateTime59 = dateTime30.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime31 and dateTime34", (mutableDateTime31.compareTo(dateTime34) == 0) == mutableDateTime31.equals(dateTime34));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant13.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.Instant instant36 = instant0.minus(1645513776688L);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 8, periodType43, chronology50);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration41, chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.millisOfSecond();
        org.joda.time.DateTime dateTime56 = instant0.toDateTime(chronology50);
        org.joda.time.DurationField durationField57 = chronology50.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = dateTime14.plusMillis(31);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getShortName(1645513771104L, locale24);
        java.lang.String str27 = dateTimeZone22.getName(1645513761671L);
        long long30 = dateTimeZone22.convertLocalToUTC(1645513808089L, false);
        org.joda.time.DateTime dateTime31 = dateTime21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime31", (dateTime21.compareTo(dateTime31) == 0) == dateTime21.equals(dateTime31));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours(63101202);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645513787727L, 1672531200000L);
        mutablePeriod15.setWeeks(25813626);
        java.lang.String str18 = mutablePeriod15.toString();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = mutablePeriod26.getSeconds();
        int int28 = mutablePeriod26.getSeconds();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval36.containsNow();
        mutablePeriod26.add((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Duration duration44 = mutableInterval36.toDuration();
        org.joda.time.Duration duration46 = duration44.minus(1645513762241L);
        org.joda.time.Instant instant47 = instant9.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Instant instant49 = instant47.plus(1645513892897L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.minus(readableDuration50);
        org.joda.time.MutableDateTime mutableDateTime52 = instant49.toMutableDateTime();
        org.joda.time.DateTime dateTime53 = instant49.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant49 and mutableDateTime52", (instant49.compareTo(mutableDateTime52) == 0) == instant49.equals(mutableDateTime52));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime49);
        int int51 = mutablePeriod50.getSeconds();
        int int52 = mutablePeriod50.getSeconds();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        mutableInterval53.setInterval((org.joda.time.ReadableInterval) mutableInterval60);
        boolean boolean66 = mutableInterval60.containsNow();
        mutablePeriod50.add((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Duration duration68 = mutableInterval60.toDuration();
        org.joda.time.Duration duration70 = duration68.minus(1645513762241L);
        org.joda.time.Instant instant71 = instant32.plus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime dateTime72 = instant32.toDateTimeISO();
        org.joda.time.DateTime dateTime73 = instant32.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime72", (instant32.compareTo(dateTime72) == 0) == instant32.equals(dateTime72));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes(63094282);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime23.yearOfCentury();
        org.joda.time.DateTime dateTime32 = property31.getDateTime();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration34.minus(0L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1L), 1L, periodType50, chronology51);
        java.lang.String str53 = periodType50.toString();
        java.lang.String str54 = periodType50.getName();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1645513760165L, periodType50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant46, periodType50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = dateTime66.plusSeconds((int) (byte) 10);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration70 = duration34.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime71 = dateTime32.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Instant instant72 = instant20.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime.Property property76 = dateTime74.yearOfEra();
        org.joda.time.Interval interval77 = property76.toInterval();
        java.util.Locale locale78 = null;
        int int79 = property76.getMaximumTextLength(locale78);
        java.lang.String str80 = property76.toString();
        int int81 = property76.get();
        int int82 = property76.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone83);
        long long85 = dateTime84.getMillis();
        org.joda.time.DateTime dateTime87 = dateTime84.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime88 = dateTime84.withEarlierOffsetAtOverlap();
        long long89 = property76.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime90 = dateTime84.toDateTime();
        java.lang.String str91 = dateTime84.toString();
        org.joda.time.DateTime dateTime93 = dateTime84.plusSeconds(999);
        org.joda.time.DateTime dateTime94 = dateTime84.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str96 = dateTimeFieldType95.toString();
        boolean boolean97 = dateTime94.isSupported(dateTimeFieldType95);
        int int98 = instant20.get(dateTimeFieldType95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant20", (dateTime1.compareTo(instant20) == 0) == dateTime1.equals(instant20));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.dayOfWeek();
        org.joda.time.DateTime.Property property35 = dateTime27.year();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = durationFieldType39.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime37.withFieldAdded(durationFieldType39, 10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        java.util.Locale locale50 = null;
        int int51 = property48.getMaximumTextLength(locale50);
        java.lang.String str52 = property48.toString();
        org.joda.time.DurationField durationField53 = property48.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property48.getFieldType();
        int int55 = dateTime44.get(dateTimeFieldType54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.Chronology chronology64 = chronology62.withUTC();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        boolean boolean66 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTime.Property property71 = dateTime69.yearOfEra();
        org.joda.time.DateTime dateTime72 = property71.roundFloorCopy();
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks(63088836);
        org.joda.time.DateTime dateTime76 = dateTime72.withHourOfDay(9);
        int int77 = dateTime72.getMillisOfDay();
        org.joda.time.DateTime.Property property78 = dateTime72.dayOfYear();
        org.joda.time.DateTime dateTime79 = property78.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone80);
        java.lang.String str82 = dateTime81.toString();
        org.joda.time.DateTime dateTime84 = dateTime81.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str89 = dateTimeZone87.getNameKey(1645513759301L);
        int int91 = dateTimeZone87.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime84.toMutableDateTime(dateTimeZone87);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str94 = dateTimeFieldType93.getName();
        boolean boolean95 = mutableDateTime92.isSupported(dateTimeFieldType93);
        int int96 = dateTime79.get(dateTimeFieldType93);
        boolean boolean97 = dateTime65.isSupported(dateTimeFieldType93);
        java.lang.String str98 = dateTimeFieldType93.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime65", (dateTime17.compareTo(dateTime65) == 0) == dateTime17.equals(dateTime65));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        long long7 = dateMidnight6.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        long long11 = durationField9.getValueAsLong((-37320000L));
        java.lang.String str12 = durationField9.getName();
        long long13 = durationField9.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType14 = durationField9.getType();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        long long32 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology23);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType14.getField(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = chronology36.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField38", (durationField9.compareTo(durationField38) == 0) == durationField9.equals(durationField38));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis(1645513768037L);
        org.joda.time.MutableDateTime mutableDateTime20 = instant0.toMutableDateTime();
        int int21 = mutableDateTime20.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property6 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean15 = dateTime11.isSupported(dateTimeFieldType14);
        int int16 = dateTime4.get(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        org.joda.time.Interval interval28 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        java.lang.String str33 = property32.getName();
        org.joda.time.DateTime dateTime34 = property32.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration38);
        boolean boolean53 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone56);
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.minusSeconds((int) (short) 1);
        org.joda.time.Period period62 = period58.plusWeeks((int) (short) -1);
        org.joda.time.Period period64 = period58.minusMillis(4);
        org.joda.time.Interval interval65 = interval57.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        boolean boolean67 = interval20.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        long long70 = interval69.toDurationMillis();
        boolean boolean71 = interval20.overlaps((org.joda.time.ReadableInterval) interval69);
        org.joda.time.MutableInterval mutableInterval72 = interval69.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.clockhourOfDay();
        mutableInterval72.setChronology(chronology79);
        boolean boolean84 = dateTimeFieldType14.isSupported(chronology79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        boolean boolean13 = dateTime11.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean35 = mutableInterval33.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        mutableInterval33.setChronology(chronology42);
        mutablePeriod2.setPeriod(100000L, 1645513762364L, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType1.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.secondOfMinute();
        org.joda.time.DurationField durationField47 = durationFieldType0.getField(chronology42);
        org.joda.time.DurationField durationField48 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField47 and durationField48", Math.signum(durationField47.compareTo(durationField48)) == -Math.signum(durationField48.compareTo(durationField47)));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime20.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long33 = dateTimeZone30.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime34 = dateTime27.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone30);
        long long37 = dateTimeZone30.previousTransition(1645513903885L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime35", (dateTime3.compareTo(dateTime35) == 0) == dateTime3.equals(dateTime35));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime8.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant71 = dateTime40.toInstant();
        org.joda.time.Instant instant72 = instant71.toInstant();
        org.joda.time.DateTime dateTime73 = instant72.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant72", (dateTime32.compareTo(instant72) == 0) == dateTime32.equals(instant72));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period(1645513882449L, (long) 63218033, periodType5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField16 = chronology13.halfdays();
        long long18 = durationField16.getValueAsLong((-37320000L));
        java.lang.String str19 = durationField16.getName();
        long long20 = durationField16.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType21 = durationField16.getType();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod();
        mutablePeriod33.setMonths((int) ' ');
        java.lang.Object obj36 = mutablePeriod33.clone();
        long long39 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField40 = chronology30.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology30);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.clockhourOfHalfday();
        org.joda.time.Chronology chronology43 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfDay();
        org.joda.time.DurationField durationField45 = durationFieldType21.getField(chronology43);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1645513842799L, 1645513906620L, periodType5, chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField45", (durationField16.compareTo(durationField45) == 0) == durationField16.equals(durationField45));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645513759301L);
        java.lang.String str40 = dateTimeZone36.getName(1645513762160L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        mutablePeriod46.add(durationFieldType48, 63099629);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = chronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.era();
        org.joda.time.DurationField durationField62 = chronology57.months();
        boolean boolean63 = durationFieldType48.isSupported(chronology57);
        org.joda.time.DateTimeField dateTimeField64 = chronology57.minuteOfHour();
        org.joda.time.DurationField durationField65 = chronology57.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField65, durationField60, and durationField62", !(durationField65.compareTo(durationField60) == 0) || (Math.signum(durationField65.compareTo(durationField62)) == Math.signum(durationField60.compareTo(durationField62))));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = durationFieldType3.isSupported(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime1.withFieldAdded(durationFieldType3, 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.toString();
        org.joda.time.DurationField durationField17 = property12.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property12.getFieldType();
        int int19 = dateTime8.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.DateTime dateTime22 = dateTime8.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime.Property property24 = dateTime8.minuteOfDay();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime22", (dateTime8.compareTo(dateTime22) == 0) == dateTime8.equals(dateTime22));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property8.setCopy(59);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645513763016L);
        boolean boolean14 = instant12.isEqual(1645513759301L);
        org.joda.time.DateTime dateTime15 = instant12.toDateTimeISO();
        long long16 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (short) 0);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration58 = duration47.minus(0L);
        boolean boolean59 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration47);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1L), 1L, periodType66, chronology67);
        java.lang.String str69 = periodType66.toString();
        java.lang.String str70 = periodType66.getName();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1645513760165L, periodType66);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType66, chronology78);
        org.joda.time.Period period80 = duration43.toPeriod(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime15.toDateTime(chronology78);
        org.joda.time.Period period83 = org.joda.time.Period.days(63112091);
        int[] intArray85 = chronology78.get((org.joda.time.ReadablePeriod) period83, 1645513858958L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime15", (instant12.compareTo(dateTime15) == 0) == instant12.equals(dateTime15));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime18 = dateTime14.minusYears(63210430);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = duration23.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = mutablePeriod36.getSeconds();
        int int38 = mutablePeriod36.getSeconds();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        mutableInterval39.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        boolean boolean52 = mutableInterval46.containsNow();
        mutablePeriod36.add((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Duration duration54 = mutableInterval46.toDuration();
        org.joda.time.Duration duration56 = duration54.minus(1645513762241L);
        org.joda.time.Period period57 = new org.joda.time.Period(readableInstant19, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = duration56.toPeriod();
        org.joda.time.Duration duration59 = duration56.toDuration();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime dateTime68 = dateTime61.toDateTimeISO();
        org.joda.time.DateTime.Property property69 = dateTime61.hourOfDay();
        org.joda.time.DateTime dateTime71 = property69.addToCopy(1645513766979L);
        boolean boolean73 = dateTime71.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime75 = dateTime71.plusHours(63110067);
        org.joda.time.DateTime dateTime77 = dateTime71.withCenturyOfEra(20);
        org.joda.time.Period period78 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean79 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime.Property property80 = dateTime71.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period35, 1645513771022L, 1645513765710L);
        org.joda.time.DateTime dateTime39 = dateTime4.toDateTime(chronology19);
        org.joda.time.DateTime dateTime41 = dateTime4.plusWeeks(63139010);
        java.util.GregorianCalendar gregorianCalendar42 = dateTime41.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime39", (dateTime4.compareTo(dateTime39) == 0) == dateTime4.equals(dateTime39));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.hourOfHalfday();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField27.getAsText((int) (byte) 1, locale29);
        org.joda.time.DurationField durationField31 = dateTimeField27.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField31, and durationField23", !(durationField23.compareTo(durationField31) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField31.compareTo(durationField23))));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        java.lang.String str15 = property14.getName();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration20);
        boolean boolean35 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant36 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime38 = dateTime4.withWeekyear(63123709);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant36", (dateTime4.compareTo(instant36) == 0) == dateTime4.equals(instant36));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = instant8.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds(25884611);
        boolean boolean37 = dateTime36.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime34", (instant8.compareTo(dateTime34) == 0) == instant8.equals(dateTime34));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        mutableInterval0.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        int int31 = dateTime27.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        int int41 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDate localDate42 = dateTime40.toLocalDate();
        org.joda.time.DateTimeField dateTimeField44 = localDate42.getField((int) (short) 0);
        int int45 = localDate42.size();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), 1L, periodType51, chronology52);
        java.lang.String str54 = periodType51.toString();
        java.lang.String str55 = periodType51.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645513760165L, periodType51);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType51, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        int int70 = dateTime66.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.toDateTimeISO();
        int int80 = dateTime66.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.LocalDate localDate81 = dateTime79.toLocalDate();
        int[] intArray83 = chronology63.get((org.joda.time.ReadablePartial) localDate81, 1645513760075L);
        int int84 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDate42, intArray83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime27", (dateTime22.compareTo(dateTime27) == 0) == dateTime22.equals(dateTime27));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        mutableInterval0.setEndMillis(1645513771344L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Interval interval16 = interval10.withDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval27 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval28 = interval21.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Interval interval42 = interval28.gap((org.joda.time.ReadableInterval) mutableInterval29);
        boolean boolean43 = interval10.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutableInterval mutableInterval44 = interval10.toMutableInterval();
        boolean boolean46 = interval10.isAfter(1645513863639L);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Period period49 = org.joda.time.Period.hours(22);
        org.joda.time.Period period51 = period49.plusMillis(221);
        mutableInterval47.setPeriodAfterStart((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Instant instant54 = new org.joda.time.Instant(1645513763016L);
        boolean boolean55 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) instant54);
        boolean boolean56 = interval10.abuts((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTime dateTime58 = mutableInterval0.getStart();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval59.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        mutableInterval59.setInterval(100000L, 1645513759601L);
        long long67 = mutableInterval59.getStartMillis();
        org.joda.time.Duration duration68 = mutableInterval59.toDuration();
        org.joda.time.Period period69 = org.joda.time.Period.ZERO;
        org.joda.time.Period period71 = period69.minusSeconds((int) (short) 1);
        org.joda.time.Period period73 = period69.plusMinutes(3);
        org.joda.time.Period period75 = period73.plusWeeks(17);
        org.joda.time.Duration duration76 = period75.toStandardDuration();
        mutableInterval59.setDurationAfterStart((org.joda.time.ReadableDuration) duration76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        boolean boolean82 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        java.lang.Object obj83 = mutableInterval78.clone();
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfEra();
        org.joda.time.Chronology chronology86 = chronology84.withUTC();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology86);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration76, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Period period90 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTime dateTime92 = dateTime87.withPeriodAdded((org.joda.time.ReadablePeriod) period90, 6);
        boolean boolean93 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime87", (dateTime7.compareTo(dateTime87) == 0) == dateTime7.equals(dateTime87));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime5 = instant3.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime4", (instant3.compareTo(mutableDateTime4) == 0) == instant3.equals(mutableDateTime4));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus(1645513764861L);
        org.joda.time.DateTime dateTime16 = instant13.toDateTime();
        org.joda.time.Instant instant19 = instant13.withDurationAdded(1645513982489L, 3);
        java.util.Date date20 = instant19.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight12 and instant13", (dateMidnight12.compareTo(instant13) == 0) == dateMidnight12.equals(instant13));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration14.plus((long) 8);
        org.joda.time.Instant instant18 = instant10.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.Duration duration40 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '#');
        org.joda.time.Instant instant41 = instant18.plus((org.joda.time.ReadableDuration) duration40);
        long long42 = instant41.getMillis();
        boolean boolean43 = mutableInterval7.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType47 = periodType46.withYearsRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 3, 1645513762121L, periodType47, chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfMonth();
        org.joda.time.DurationField durationField59 = chronology55.months();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str64 = dateTimeZone62.getNameKey(1645513759301L);
        java.lang.String str66 = dateTimeZone62.getName(1645513762160L);
        java.util.TimeZone timeZone67 = dateTimeZone62.toTimeZone();
        int int69 = dateTimeZone62.getStandardOffset(1645513761942L);
        int int71 = dateTimeZone62.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology72 = chronology55.withZone(dateTimeZone62);
        int int74 = dateTimeZone62.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        boolean boolean76 = dateTimeZone62.isFixed();
        org.joda.time.MutableDateTime mutableDateTime77 = instant41.toMutableDateTime(dateTimeZone62);
        long long81 = dateTimeZone62.convertLocalToUTC(1645513931811L, false, 1645513985951L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and mutableDateTime77", (instant41.compareTo(mutableDateTime77) == 0) == instant41.equals(mutableDateTime77));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property9 = dateTime4.year();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        int int11 = dateTime4.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant10", (dateTime4.compareTo(instant10) == 0) == dateTime4.equals(instant10));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        boolean boolean24 = dateTime22.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        boolean boolean43 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = mutableInterval44.getEnd();
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime49 = dateTime45.minusHours(63294);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime8 = dateTime4.minusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.getName();
        java.util.Locale locale17 = null;
        int int18 = property12.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime19 = property12.getDateTime();
        org.joda.time.DateTime dateTime20 = property12.roundCeilingCopy();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime8.withYear(25881374);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        org.joda.time.Instant instant34 = instant26.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.Duration duration56 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) '#');
        org.joda.time.Instant instant57 = instant34.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str63 = dateTimeZone61.getNameKey(1645513759301L);
        java.lang.String str65 = dateTimeZone61.getName(1645513762160L);
        java.util.TimeZone timeZone66 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Instant instant72 = instant24.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.MutableDateTime mutableDateTime73 = instant72.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant24", (dateTime23.compareTo(instant24) == 0) == dateTime23.equals(instant24));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime28.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        boolean boolean40 = dateTime38.isBefore((-1L));
        int int41 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int43 = dateTime38.get(dateTimeFieldType42);
        java.lang.String str44 = dateTime38.toString();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime47 = dateTime38.withFieldAdded(durationFieldType45, 221);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.withZoneRetainFields(dateTimeZone65);
        int int67 = dateTime63.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime63.toMutableDateTime();
        int int69 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime71 = dateTime38.plus(1645513830009L);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.Chronology chronology81 = chronology79.withUTC();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(chronology81);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime38.toMutableDateTime(chronology81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime82", (dateTime3.compareTo(dateTime82) == 0) == dateTime3.equals(dateTime82));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.setMonths((int) ' ');
        java.lang.Object obj14 = mutablePeriod11.clone();
        long long17 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod11, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths(3);
        org.joda.time.DateTime dateTime28 = dateTime24.plusSeconds(9);
        java.util.Locale locale29 = null;
        java.util.Calendar calendar30 = dateTime24.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime24.plusWeeks(69);
        int int33 = dateTime24.getMillisOfDay();
        int int34 = dateTime24.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.DateTime dateTime39 = dateTime36.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime(chronology40);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime39.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str51 = dateTimeZone49.getNameKey(1645513759301L);
        java.lang.String str53 = dateTimeZone49.getName(1645513762160L);
        java.util.TimeZone timeZone54 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime59.minus(1645513768963L);
        org.joda.time.DateTime dateTime62 = dateTime59.withTimeAtStartOfDay();
        int int63 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime59);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone49.getShortName(1645513812242L, locale65);
        org.joda.time.DateTime dateTime67 = dateTime45.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(258);
        java.lang.String str71 = dateTimeZone69.getShortName(1645513890151L);
        long long74 = dateTimeZone69.convertLocalToUTC(1645513967516L, true);
        org.joda.time.DateTime dateTime75 = dateTime67.withZone(dateTimeZone69);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime67 and dateTime75", (dateTime67.compareTo(dateTime75) == 0) == dateTime67.equals(dateTime75));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        long long11 = property9.remainder();
        org.joda.time.DateTime dateTime12 = property9.withMaximumValue();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant14 = instant13.toInstant();
        long long15 = instant13.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(4);
        org.joda.time.LocalDate localDate60 = dateTime57.toLocalDate();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        boolean boolean71 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime70);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str78 = dateTimeZone76.getNameKey(1645513759301L);
        int int80 = dateTimeZone76.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        int int83 = dateTimeZone76.getOffset((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long90 = dateTimeZone87.convertLocalToUTC(1645513775652L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone87);
        org.joda.time.DateTime dateTime92 = dateTime84.toDateTime(dateTimeZone87);
        org.joda.time.DateTime dateTime94 = dateTime84.plusYears(63461236);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime92", (dateTime1.compareTo(dateTime92) == 0) == dateTime1.equals(dateTime92));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645513759301L);
        int int11 = dateTimeZone7.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.getID();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone7.getShortName(1645513759601L, locale15);
        long long18 = dateTimeZone7.convertUTCToLocal(1645513768203L);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone7.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        boolean boolean17 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DurationField durationField28 = dateTimeField27.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        int int36 = yearMonthDay35.size();
        int[] intArray41 = new int[] { 40, 40, '#', 10 };
        int int42 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay35, intArray41);
        long long44 = dateTimeField27.roundHalfFloor((long) (byte) 1);
        int int45 = dateTime16.get(dateTimeField27);
        long long46 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property47 = dateTime16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime.Property property57 = dateTime49.yearOfCentury();
        org.joda.time.DateTime dateTime58 = property57.getDateTime();
        boolean boolean59 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.months();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType63);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        java.lang.Object obj70 = mutableInterval65.clone();
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.Chronology chronology73 = chronology71.withUTC();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime dateTime78 = dateTime75.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime78.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay80 = dateTime79.toYearMonthDay();
        int[] intArray82 = chronology73.get((org.joda.time.ReadablePartial) yearMonthDay80, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField83 = chronology73.monthOfYear();
        org.joda.time.DurationField durationField84 = chronology73.hours();
        long long88 = chronology73.add((long) (byte) -1, 1645513779827L, 2);
        org.joda.time.DurationField durationField89 = chronology73.hours();
        org.joda.time.DateTimeField dateTimeField90 = chronology73.weekyearOfCentury();
        org.joda.time.Period period91 = new org.joda.time.Period((long) 258, periodType63, chronology73);
        org.joda.time.DateTime dateTime92 = dateTime58.toDateTime(chronology73);
        org.joda.time.DateTime dateTime93 = dateTime58.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime92", (dateTime1.compareTo(dateTime92) == 0) == dateTime1.equals(dateTime92));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.Duration duration8 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime24.withField(dateTimeFieldType28, 25774);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(63112091);
        boolean boolean33 = duration8.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant34 = instant5.minus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Instant instant36 = instant5.withMillis((long) (-3600000));
        long long37 = instant36.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant0.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant34 = instant0.withDurationAdded(1645513765246L, (int) '4');
        org.joda.time.Instant instant36 = instant0.minus(1645513776688L);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 8, periodType43, chronology50);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration41, chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.millisOfSecond();
        org.joda.time.DateTime dateTime56 = instant0.toDateTime(chronology50);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds(63105178);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 8, periodType7, chronology14);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration5, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.millisOfSecond();
        org.joda.time.Period period20 = new org.joda.time.Period(1645513783355L, chronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval31 = interval25.withDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval32 = interval25.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        mutableInterval33.setInterval((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Interval interval46 = interval32.gap((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) 8);
        org.joda.time.Instant instant56 = instant48.plus((org.joda.time.ReadableDuration) duration55);
        boolean boolean58 = instant48.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        boolean boolean59 = interval32.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Instant instant61 = instant48.minus(1645513849883L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.Instant instant64 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.Instant instant72 = instant64.plus((org.joda.time.ReadableDuration) duration71);
        boolean boolean74 = instant64.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.DateTime dateTime75 = instant64.toDateTimeISO();
        org.joda.time.DateTime.Property property76 = dateTime75.weekyear();
        org.joda.time.DateTime dateTime77 = property76.withMinimumValue();
        boolean boolean78 = instant48.isAfter((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant64 and dateTime75", (instant64.compareTo(dateTime75) == 0) == instant64.equals(dateTime75));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) dateTime11);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(33166356552000L, 1645513774191L);
        mutablePeriod17.setPeriod(457087L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str21 = dateTimeFieldType20.toString();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getDurationType();
        int int23 = mutablePeriod17.get(durationFieldType22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant14, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        long long34 = duration33.getStandardDays();
        org.joda.time.Period period35 = duration33.toPeriod();
        org.joda.time.Interval interval36 = interval26.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        mutableInterval37.setInterval(100000L, 1645513759601L);
        long long45 = mutableInterval37.getStartMillis();
        org.joda.time.Duration duration46 = mutableInterval37.toDuration();
        boolean boolean48 = mutableInterval37.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean59 = period57.equals((java.lang.Object) dateTimeFieldType58);
        org.joda.time.Period period61 = period57.plusWeeks(17);
        boolean boolean62 = mutableInterval49.equals((java.lang.Object) 17);
        boolean boolean63 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTime();
        org.joda.time.DateTime dateTime72 = dateTime68.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(25760283);
        int int75 = dateTime74.getYearOfCentury();
        mutableInterval49.setStart((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean77 = interval36.contains((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        long long80 = dateTime79.getMillis();
        org.joda.time.DateTime.Property property81 = dateTime79.yearOfEra();
        org.joda.time.Interval interval82 = property81.toInterval();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        long long84 = mutableInterval83.toDurationMillis();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval83.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval88 = interval82.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval89 = interval82.toInterval();
        org.joda.time.Interval interval91 = interval89.withEndMillis(1645513760382L);
        org.joda.time.ReadableInterval readableInterval92 = null;
        org.joda.time.Interval interval93 = interval91.gap(readableInterval92);
        org.joda.time.Interval interval95 = interval91.withEndMillis(1645513760253L);
        boolean boolean96 = mutableInterval49.isAfter((org.joda.time.ReadableInterval) interval95);
        org.joda.time.Interval interval97 = interval24.overlap((org.joda.time.ReadableInterval) mutableInterval49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant14", (dateTime4.compareTo(instant14) == 0) == dateTime4.equals(instant14));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(63098347);
        int int25 = property22.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval36 = interval30.withDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval37 = interval30.toInterval();
        org.joda.time.Interval interval39 = interval37.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime40 = interval37.getStart();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        java.util.Locale locale46 = null;
        int int47 = property44.getMaximumTextLength(locale46);
        java.util.Locale locale48 = null;
        java.lang.String str49 = property44.getAsShortText(locale48);
        org.joda.time.Interval interval50 = property44.toInterval();
        org.joda.time.DateTime dateTime51 = property44.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant53 = dateTime51.toInstant();
        org.joda.time.Interval interval54 = interval37.withStart((org.joda.time.ReadableInstant) instant53);
        boolean boolean55 = instant53.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime56 = instant53.toMutableDateTime();
        long long57 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTime dateTime58 = property22.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and instant53", (dateTime40.compareTo(instant53) == 0) == dateTime40.equals(instant53));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        int int18 = mutablePeriod16.getSeconds();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean32 = mutableInterval26.containsNow();
        mutablePeriod16.add((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        java.lang.String str38 = property37.getName();
        org.joda.time.DateTime dateTime39 = property37.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone60);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.minusSeconds((int) (short) 1);
        org.joda.time.Period period66 = period62.plusWeeks((int) (short) -1);
        org.joda.time.Period period68 = period62.minusMillis(4);
        org.joda.time.Interval interval69 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        java.lang.String str71 = chronology70.toString();
        org.joda.time.DurationField durationField72 = chronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration43, chronology70);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.weekyearOfCentury();
        org.joda.time.DurationField durationField76 = chronology70.minutes();
        org.joda.time.DurationField durationField77 = chronology70.weekyears();
        org.joda.time.DurationField durationField78 = chronology70.years();
        org.joda.time.DurationField durationField79 = chronology70.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField72 and durationField78", (durationField72.compareTo(durationField78) == 0) == durationField72.equals(durationField78));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        int int9 = dateTime8.getHourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 221);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645513759301L);
        int int26 = dateTimeZone22.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime19.toMutableDateTime(dateTimeZone22);
        java.lang.String str28 = dateTimeZone22.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(1645513796316L, 1645513832423L, dateTimeZone22);
        long long32 = dateTimeZone22.adjustOffset(1645513860315L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = dateTime11.withZone(dateTimeZone22);
        org.joda.time.Period period36 = org.joda.time.Period.days((int) '4');
        org.joda.time.Period period38 = period36.plusMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) period38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and instant12", (dateTime34.compareTo(instant12) == 0) == dateTime34.equals(instant12));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1645513848842L, dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.getShortName((-19045L));
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime5.toMutableDateTime(dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime(chronology6);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        boolean boolean17 = dateTime15.isBefore((-1L));
        int int18 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int20 = dateTime15.get(dateTimeFieldType19);
        java.lang.String str21 = dateTime15.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        org.joda.time.DateTime dateTime28 = property25.roundHalfEvenCopy();
        boolean boolean29 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime0.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = dateTime15.toDateTime(dateTimeZone31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod();
        mutablePeriod42.setMonths((int) ' ');
        java.lang.Object obj45 = mutablePeriod42.clone();
        long long48 = chronology39.add((org.joda.time.ReadablePeriod) mutablePeriod42, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField49 = chronology39.weekyear();
        org.joda.time.DurationField durationField50 = chronology39.months();
        org.joda.time.DurationField durationField51 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology39.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime32.toMutableDateTime(chronology39);
        org.joda.time.DurationField durationField54 = chronology39.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime32", (dateTime5.compareTo(dateTime32) == 0) == dateTime5.equals(dateTime32));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(478L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime8.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        java.lang.String str24 = dateTimeZone20.getName(1645513762160L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime26 = dateTime8.withZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime8.toMutableDateTime();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime8, periodType28);
        org.joda.time.Hours hours30 = duration1.toStandardHours();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant36 = dateTime35.toInstant();
        long long37 = instant36.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration(1645513771829L);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.withZoneRetainFields(dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime55.withField(dateTimeFieldType59, 25774);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(63112091);
        boolean boolean64 = duration39.equals((java.lang.Object) 63112091);
        org.joda.time.Instant instant65 = instant36.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant67 = instant36.plus(1100000L);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) instant36);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime dateTime78 = dateTime75.plusWeeks((int) (byte) 10);
        boolean boolean79 = mutableInterval69.contains((org.joda.time.ReadableInstant) dateTime78);
        mutableInterval69.setDurationBeforeEnd(1645513764242L);
        boolean boolean82 = interval68.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant36", (dateTime35.compareTo(instant36) == 0) == dateTime35.equals(instant36));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = duration25.plus((long) 8);
        org.joda.time.Instant instant29 = instant21.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime45);
        int int47 = mutablePeriod46.getSeconds();
        int int48 = mutablePeriod46.getSeconds();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        mutableInterval49.setInterval((org.joda.time.ReadableInterval) mutableInterval56);
        boolean boolean62 = mutableInterval56.containsNow();
        mutablePeriod46.add((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.Duration duration64 = mutableInterval56.toDuration();
        org.joda.time.Duration duration66 = duration64.minus(1645513762241L);
        org.joda.time.Instant instant67 = instant29.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Instant instant69 = instant67.plus(1645513892897L);
        org.joda.time.DateTime dateTime70 = instant67.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime71 = instant67.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) mutableDateTime71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant67 and dateTime70", (instant67.compareTo(dateTime70) == 0) == instant67.equals(dateTime70));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant34 = instant32.minus((long) 63114585);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant38 = instant36.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant40 = instant36.minus(1645513772143L);
        long long41 = instant40.getMillis();
        org.joda.time.Instant instant43 = instant40.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = duration47.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime59.withZoneRetainFields(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        boolean boolean65 = dateTime62.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime67 = dateTime62.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant43, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime69 = instant43.toDateTimeISO();
        boolean boolean70 = instant34.isEqual((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant71 = instant34.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime69", (instant43.compareTo(dateTime69) == 0) == instant43.equals(dateTime69));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime8 = property3.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        boolean boolean11 = mutableInterval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra((int) (byte) 1);
        boolean boolean17 = mutableInterval10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTime dateTime35 = property33.withMinimumValue();
        boolean boolean36 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime9.getMillisOfSecond();
        org.joda.time.Instant instant38 = dateTime9.toInstant();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration41 = duration40.toDuration();
        boolean boolean43 = duration41.equals((java.lang.Object) 1645513867823L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant38", (dateTime9.compareTo(instant38) == 0) == dateTime9.equals(instant38));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        int int5 = dateTime4.getMinuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths(1057);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime6", (instant1.compareTo(dateTime6) == 0) == instant1.equals(dateTime6));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        boolean boolean3 = instant1.isAfter(1645513769808L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        boolean boolean7 = mutableDateTime6.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.Interval interval10 = property3.toInterval();
        org.joda.time.DateTime dateTime11 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property3.withMinimumValue();
        java.lang.String str14 = property3.getAsString();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType26 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 3, 1645513762121L, periodType26, chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTime dateTime38 = dateTime16.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        long long41 = dateTimeField39.roundHalfEven(1645513778989L);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.yearOfCentury();
        java.util.Locale locale53 = null;
        int int54 = dateTimeField52.getMaximumShortTextLength(locale53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime59.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(4);
        org.joda.time.LocalDate localDate64 = dateTime61.toLocalDate();
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDate64, locale66);
        int[] intArray68 = null;
        int int69 = dateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) localDate64, intArray68);
        int int70 = property3.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField37", Math.signum(durationField8.compareTo(durationField37)) == -Math.signum(durationField37.compareTo(durationField8)));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str75 = dateTimeZone73.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime76 = dateTime68.withZone(dateTimeZone73);
        org.joda.time.YearMonthDay yearMonthDay77 = dateTime76.toYearMonthDay();
        boolean boolean78 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        java.lang.String str81 = dateTime80.toString();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology84);
        org.joda.time.DateTime dateTime86 = dateTime80.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTime dateTime87 = dateTime80.toDateTimeISO();
        org.joda.time.DateTime dateTime89 = dateTime87.minusMinutes(0);
        org.joda.time.DateTime dateTime91 = dateTime89.minusMinutes(52);
        org.joda.time.DateTime dateTime93 = dateTime89.minusMillis(0);
        org.joda.time.Period period94 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int96 = dateTime48.get(dateTimeFieldType95);
        org.joda.time.DateTime dateTime98 = dateTime48.withYear(63431830);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and dateTime76", (dateTime68.compareTo(dateTime76) == 0) == dateTime68.equals(dateTime76));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        int[] intArray27 = chronology8.get((org.joda.time.ReadablePeriod) period24, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone30);
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period32.minusSeconds((int) (short) 1);
        org.joda.time.Period period36 = period32.plusWeeks((int) (short) -1);
        org.joda.time.Period period38 = period32.minusMillis(4);
        org.joda.time.Interval interval39 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        int[] intArray41 = chronology8.get((org.joda.time.ReadablePeriod) period32, (long) 63099629);
        org.joda.time.DurationField durationField42 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = chronology8.year();
        org.joda.time.DurationField durationField44 = dateTimeField43.getDurationField();
        java.lang.String str45 = dateTimeField43.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField42 and durationField44", (durationField42.compareTo(durationField44) == 0) == durationField42.equals(durationField44));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        boolean boolean29 = instant27.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        long long49 = duration37.getStandardHours();
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        long long70 = duration58.getStandardHours();
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        boolean boolean72 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Instant instant73 = instant27.plus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Instant instant74 = instant73.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant27", (dateTime14.compareTo(instant27) == 0) == dateTime14.equals(instant27));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        long long27 = mutableInterval18.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (short) 0);
        long long68 = duration65.getStandardSeconds();
        org.joda.time.DateTime dateTime69 = dateTime40.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Seconds seconds70 = duration65.toStandardSeconds();
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        java.lang.Object obj72 = mutableInterval18.clone();
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval18.toMutableInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645513759301L);
        int int18 = dateTimeZone14.getOffset(1645513759301L);
        java.lang.String str20 = dateTimeZone14.getShortName((long) 9);
        org.joda.time.DateTime dateTime21 = dateTime3.withZone(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime21, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis(63407980);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType26 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 3, 1645513762121L, periodType26, chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField38 = chronology34.months();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str43 = dateTimeZone41.getNameKey(1645513759301L);
        java.lang.String str45 = dateTimeZone41.getName(1645513762160L);
        java.util.TimeZone timeZone46 = dateTimeZone41.toTimeZone();
        int int48 = dateTimeZone41.getStandardOffset(1645513761942L);
        int int50 = dateTimeZone41.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology51 = chronology34.withZone(dateTimeZone41);
        int int53 = dateTimeZone41.getOffset((long) 115200000);
        int int55 = dateTimeZone41.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone56.toString();
        long long59 = dateTimeZone41.getMillisKeepLocal(dateTimeZone56, 1645513792520L);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = dateTime20.toDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes(52);
        org.joda.time.DateTime dateTime76 = dateTime72.minusMillis(0);
        boolean boolean77 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Instant instant79 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        long long81 = mutableInterval80.toDurationMillis();
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval80.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = duration83.plus((long) 8);
        org.joda.time.Instant instant87 = instant79.plus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateTimeZone dateTimeZone88 = instant87.getZone();
        org.joda.time.DateTime dateTime89 = instant87.toDateTimeISO();
        org.joda.time.DateTime dateTime91 = dateTime89.plusYears(40);
        int int92 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime94 = dateTime20.plusMonths(63399810);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant87 and dateTime89", (instant87.compareTo(dateTime89) == 0) == instant87.equals(dateTime89));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        boolean boolean34 = property25.equals((java.lang.Object) dateTime27);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property36 = dateTime27.era();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        long long41 = dateTimeZone38.convertLocalToUTC(1645513778970L, false);
        long long45 = dateTimeZone38.convertLocalToUTC(1645513816283L, false, 1645513794412L);
        org.joda.time.DateTime dateTime46 = dateTime27.toDateTime(dateTimeZone38);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime(chronology65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = duration59.toPeriodTo((org.joda.time.ReadableInstant) dateTime66, periodType67);
        org.joda.time.Duration duration70 = duration59.plus(1645513768963L);
        org.joda.time.Duration duration72 = duration70.withMillis(1645513769945L);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval73.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration76);
        boolean boolean79 = mutableInterval73.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType81 = periodType80.withYearsRemoved();
        org.joda.time.Period period82 = mutableInterval73.toPeriod(periodType81);
        mutableInterval73.setEndMillis(1645513766329L);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period86 = mutableInterval73.toPeriod(periodType85);
        mutableInterval73.setEndMillis(1645513891494L);
        mutableInterval73.setStartMillis(1645513822010L);
        org.joda.time.Duration duration92 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration93 = duration92.toDuration();
        mutableInterval73.setDurationAfterStart((org.joda.time.ReadableDuration) duration92);
        boolean boolean95 = duration72.isEqual((org.joda.time.ReadableDuration) duration92);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime46", (dateTime3.compareTo(dateTime46) == 0) == dateTime3.equals(dateTime46));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant22 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 100);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis(1645513761776L);
        long long25 = duration24.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str37 = dateTimeZone35.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime38 = dateTime30.withZone(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 3, 1645513762121L, periodType43, chronology51);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str55 = durationFieldType54.toString();
        boolean boolean56 = periodType43.isSupported(durationFieldType54);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime38, periodType43);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Days days59 = duration11.toStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime38", (dateTime30.compareTo(dateTime38) == 0) == dateTime30.equals(dateTime38));
    }
}

